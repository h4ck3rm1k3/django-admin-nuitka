// Generated code for Python source for module 'django.template.base'
// created by Nuitka version 0.4.4pre3

// This code is in part copyright 2013 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__modules.hpp"
#include "__constants.hpp"
#include "__helpers.hpp"

// The _module_django__template__base is a Python object pointer of module type.

// Note: For full compatability with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *_module_django__template__base;
PyDictObject *_moduledict_django__template__base;

// The module level variables.
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_BLOCK_TAG_END( &_module_django__template__base, &_python_str_plain_BLOCK_TAG_END );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_BLOCK_TAG_START( &_module_django__template__base, &_python_str_plain_BLOCK_TAG_START );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_COMMENT_TAG_END( &_module_django__template__base, &_python_str_plain_COMMENT_TAG_END );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_COMMENT_TAG_START( &_module_django__template__base, &_python_str_plain_COMMENT_TAG_START );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_Context( &_module_django__template__base, &_python_str_plain_Context );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_EscapeData( &_module_django__template__base, &_python_str_plain_EscapeData );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_FILTER_ARGUMENT_SEPARATOR( &_module_django__template__base, &_python_str_plain_FILTER_ARGUMENT_SEPARATOR );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_FILTER_SEPARATOR( &_module_django__template__base, &_python_str_plain_FILTER_SEPARATOR );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_FilterExpression( &_module_django__template__base, &_python_str_plain_FilterExpression );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_InvalidTemplateLibrary( &_module_django__template__base, &_python_str_plain_InvalidTemplateLibrary );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_Lexer( &_module_django__template__base, &_python_str_plain_Lexer );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_Node( &_module_django__template__base, &_python_str_plain_Node );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_NodeList( &_module_django__template__base, &_python_str_plain_NodeList );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_Origin( &_module_django__template__base, &_python_str_plain_Origin );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_Parser( &_module_django__template__base, &_python_str_plain_Parser );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_SafeData( &_module_django__template__base, &_python_str_plain_SafeData );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_StringOrigin( &_module_django__template__base, &_python_str_plain_StringOrigin );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_TOKEN_BLOCK( &_module_django__template__base, &_python_str_plain_TOKEN_BLOCK );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_TOKEN_COMMENT( &_module_django__template__base, &_python_str_plain_TOKEN_COMMENT );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_TOKEN_MAPPING( &_module_django__template__base, &_python_str_plain_TOKEN_MAPPING );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_TOKEN_TEXT( &_module_django__template__base, &_python_str_plain_TOKEN_TEXT );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_TOKEN_VAR( &_module_django__template__base, &_python_str_plain_TOKEN_VAR );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_TRANSLATOR_COMMENT_MARK( &_module_django__template__base, &_python_str_plain_TRANSLATOR_COMMENT_MARK );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_TagHelperNode( &_module_django__template__base, &_python_str_plain_TagHelperNode );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_Template( &_module_django__template__base, &_python_str_plain_Template );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_TemplateEncodingError( &_module_django__template__base, &_python_str_plain_TemplateEncodingError );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_TemplateSyntaxError( &_module_django__template__base, &_python_str_plain_TemplateSyntaxError );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_TextNode( &_module_django__template__base, &_python_str_plain_TextNode );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_Token( &_module_django__template__base, &_python_str_plain_Token );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_UNKNOWN_SOURCE( &_module_django__template__base, &_python_str_plain_UNKNOWN_SOURCE );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_VARIABLE_ATTRIBUTE_SEPARATOR( &_module_django__template__base, &_python_str_plain_VARIABLE_ATTRIBUTE_SEPARATOR );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_VARIABLE_TAG_END( &_module_django__template__base, &_python_str_plain_VARIABLE_TAG_END );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_VARIABLE_TAG_START( &_module_django__template__base, &_python_str_plain_VARIABLE_TAG_START );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_Variable( &_module_django__template__base, &_python_str_plain_Variable );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_VariableDoesNotExist( &_module_django__template__base, &_python_str_plain_VariableDoesNotExist );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_VariableNode( &_module_django__template__base, &_python_str_plain_VariableNode );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base___metaclass__( &_module_django__template__base, &_python_str_plain___metaclass__ );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_add_to_builtins( &_module_django__template__base, &_python_str_plain_add_to_builtins );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_builtins( &_module_django__template__base, &_python_str_plain_builtins );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_compile_string( &_module_django__template__base, &_python_str_plain_compile_string );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_constant_string( &_module_django__template__base, &_python_str_plain_constant_string );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_escape( &_module_django__template__base, &_python_str_plain_escape );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_filter_raw_string( &_module_django__template__base, &_python_str_plain_filter_raw_string );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_filter_re( &_module_django__template__base, &_python_str_plain_filter_re );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_force_str( &_module_django__template__base, &_python_str_plain_force_str );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_force_text( &_module_django__template__base, &_python_str_plain_force_text );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_generic_tag_compiler( &_module_django__template__base, &_python_str_plain_generic_tag_compiler );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_get_templatetags_modules( &_module_django__template__base, &_python_str_plain_get_templatetags_modules );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_get_text_list( &_module_django__template__base, &_python_str_plain_get_text_list );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_getargspec( &_module_django__template__base, &_python_str_plain_getargspec );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_import_library( &_module_django__template__base, &_python_str_plain_import_library );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_import_module( &_module_django__template__base, &_python_str_plain_import_module );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_invalid_var_format_string( &_module_django__template__base, &_python_str_plain_invalid_var_format_string );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_is_iterable( &_module_django__template__base, &_python_str_plain_is_iterable );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_is_library_missing( &_module_django__template__base, &_python_str_plain_is_library_missing );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_kwarg_re( &_module_django__template__base, &_python_str_plain_kwarg_re );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_libraries( &_module_django__template__base, &_python_str_plain_libraries );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_localize( &_module_django__template__base, &_python_str_plain_localize );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_mark_for_escaping( &_module_django__template__base, &_python_str_plain_mark_for_escaping );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_mark_safe( &_module_django__template__base, &_python_str_plain_mark_safe );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_module_has_submodule( &_module_django__template__base, &_python_str_plain_module_has_submodule );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_parse_bits( &_module_django__template__base, &_python_str_plain_parse_bits );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_partial( &_module_django__template__base, &_python_str_plain_partial );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_pgettext_lazy( &_module_django__template__base, &_python_str_plain_pgettext_lazy );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_python_2_unicode_compatible( &_module_django__template__base, &_python_str_plain_python_2_unicode_compatible );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_re( &_module_django__template__base, &_python_str_plain_re );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_render_value_in_context( &_module_django__template__base, &_python_str_plain_render_value_in_context );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_settings( &_module_django__template__base, &_python_str_plain_settings );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_six( &_module_django__template__base, &_python_str_plain_six );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_smart_split( &_module_django__template__base, &_python_str_plain_smart_split );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_tag_re( &_module_django__template__base, &_python_str_plain_tag_re );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_template_localtime( &_module_django__template__base, &_python_str_plain_template_localtime );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_templatetags_modules( &_module_django__template__base, &_python_str_plain_templatetags_modules );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_token_kwargs( &_module_django__template__base, &_python_str_plain_token_kwargs );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_ugettext_lazy( &_module_django__template__base, &_python_str_plain_ugettext_lazy );
static PyObjectGlobalVariable_django__template__base _mvar_django__template__base_unescape_string_literal( &_module_django__template__base, &_python_str_plain_unescape_string_literal );

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_TemplateSyntaxError_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_2_TemplateDoesNotExist_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_3_TemplateEncodingError_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_4_VariableDoesNotExist_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_p );


NUITKA_LOCAL_MODULE PyObject *impl_class_5_InvalidTemplateLibrary_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_6_Origin_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_7_StringOrigin_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_8_Template_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_10_Token_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_11_Lexer_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_12_Parser_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_p );


NUITKA_LOCAL_MODULE PyObject *impl_class_13_TokenParser_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_14_FilterExpression_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_16_Variable_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_17_Node_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_18_NodeList_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_19_TextNode_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_21_VariableNode_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_23_parse_bits_of_module_django__template__base( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_p );


NUITKA_LOCAL_MODULE PyObject *impl_class_25_TagHelperNode_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_context, PyObjectLocalVariable &python_closure_var );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_context );


NUITKA_LOCAL_MODULE PyObject *impl_class_26_Library_of_module_django__template__base(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_func );


NUITKA_LOCAL_MODULE PyObject *impl_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_AssignmentNode, PyObjectSharedLocalVariable &python_closure_func );


NUITKA_LOCAL_MODULE PyObject *impl_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_context_class, PyObjectSharedLocalVariable &python_closure_file_name, PyObjectSharedLocalVariable &python_closure_func );


static PyObject *MAKE_FUNCTION_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_14_compile_filter_error_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_15_compile_function_error_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_15_resolve_variable_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_16_next_token_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_19_add_library_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_10_Token_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_11_Lexer_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_13_TokenParser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_14_FilterExpression_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_16_Variable_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_19_TextNode_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_AssignmentNode );


// This structure is for attachment as self of function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base.
// It is allocated at the time the function object is created.
struct _context_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_AssignmentNode;
};

static void _context_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_destructor( void *context_voidptr )
{
    _context_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (_context_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1___init___of_class_21_VariableNode_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_26_Library_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_6_Origin_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_7_StringOrigin_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_8_Template_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_name, PyObjectSharedLocalVariable &python_closure_self );


// This structure is for attachment as self of function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base.
// It is allocated at the time the function object is created.
struct _context_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_name;
    PyObjectClosureVariable python_closure_self;
};

static void _context_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base_destructor( void *context_voidptr )
{
    _context_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (_context_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_flags, PyObjectSharedLocalVariable &python_closure_self );


// This structure is for attachment as self of function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base.
// It is allocated at the time the function object is created.
struct _context_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_flags;
    PyObjectClosureVariable python_closure_self;
};

static void _context_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_destructor( void *context_voidptr )
{
    _context_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_t *_python_context = (_context_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_name, PyObjectSharedLocalVariable &python_closure_self, PyObjectSharedLocalVariable &python_closure_takes_context );


// This structure is for attachment as self of function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base.
// It is allocated at the time the function object is created.
struct _context_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_name;
    PyObjectClosureVariable python_closure_self;
    PyObjectClosureVariable python_closure_takes_context;
};

static void _context_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_destructor( void *context_voidptr )
{
    _context_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (_context_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_name, PyObjectSharedLocalVariable &python_closure_self, PyObjectSharedLocalVariable &python_closure_takes_context );


// This structure is for attachment as self of function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base.
// It is allocated at the time the function object is created.
struct _context_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_name;
    PyObjectClosureVariable python_closure_self;
    PyObjectClosureVariable python_closure_takes_context;
};

static void _context_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_destructor( void *context_voidptr )
{
    _context_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (_context_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_context_class, PyObjectSharedLocalVariable &python_closure_file_name, PyObjectSharedLocalVariable &python_closure_name, PyObjectSharedLocalVariable &python_closure_self, PyObjectSharedLocalVariable &python_closure_takes_context );


// This structure is for attachment as self of function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base.
// It is allocated at the time the function object is created.
struct _context_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_context_class;
    PyObjectClosureVariable python_closure_file_name;
    PyObjectClosureVariable python_closure_name;
    PyObjectClosureVariable python_closure_self;
    PyObjectClosureVariable python_closure_takes_context;
};

static void _context_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_destructor( void *context_voidptr )
{
    _context_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (_context_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1_render_of_class_17_Node_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1_render_of_class_18_NodeList_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_context_class, PyObjectSharedLocalVariable &python_closure_file_name, PyObjectSharedLocalVariable &python_closure_func );


// This structure is for attachment as self of function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base.
// It is allocated at the time the function object is created.
struct _context_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_context_class;
    PyObjectClosureVariable python_closure_file_name;
    PyObjectClosureVariable python_closure_func;
};

static void _context_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_destructor( void *context_voidptr )
{
    _context_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (_context_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_func );


// This structure is for attachment as self of function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base.
// It is allocated at the time the function object is created.
struct _context_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_func;
};

static void _context_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_destructor( void *context_voidptr )
{
    _context_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (_context_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_20_render_value_in_context_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_21_find_filter_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_22_token_kwargs_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_23_parse_bits_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_24_generic_tag_compiler_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_27_is_library_missing_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_28_import_library_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_29_get_templatetags_modules_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_2___iter___of_class_17_Node_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_2___iter___of_class_8_Template_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_2___repr___of_class_19_TextNode_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_2___repr___of_class_21_VariableNode_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_2___str___of_class_10_Token_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_AssignmentNode, PyObjectSharedLocalVariable &python_closure_defaults, PyObjectSharedLocalVariable &python_closure_function_name, PyObjectSharedLocalVariable &python_closure_params, PyObjectSharedLocalVariable &python_closure_takes_context, PyObjectSharedLocalVariable &python_closure_varargs, PyObjectSharedLocalVariable &python_closure_varkw );


// This structure is for attachment as self of function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base.
// It is allocated at the time the function object is created.
struct _context_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_AssignmentNode;
    PyObjectClosureVariable python_closure_defaults;
    PyObjectClosureVariable python_closure_function_name;
    PyObjectClosureVariable python_closure_params;
    PyObjectClosureVariable python_closure_takes_context;
    PyObjectClosureVariable python_closure_varargs;
    PyObjectClosureVariable python_closure_varkw;
};

static void _context_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_destructor( void *context_voidptr )
{
    _context_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (_context_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_flags, PyObjectSharedLocalVariable &python_closure_name, PyObjectSharedLocalVariable &python_closure_self );


// This structure is for attachment as self of function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base.
// It is allocated at the time the function object is created.
struct _context_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_flags;
    PyObjectClosureVariable python_closure_name;
    PyObjectClosureVariable python_closure_self;
};

static void _context_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_destructor( void *context_voidptr )
{
    _context_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_t *_python_context = (_context_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_2_parse_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_2_reload_of_class_6_Origin_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_func );


// This structure is for attachment as self of function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base.
// It is allocated at the time the function object is created.
struct _context_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_func;
};

static void _context_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_destructor( void *context_voidptr )
{
    _context_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (_context_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_2_resolve_of_class_16_Variable_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_2_tag_of_class_26_Library_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_2_top_of_class_13_TokenParser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_30_get_library_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_31_add_to_builtins_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_3___repr___of_class_16_Variable_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_3___str___of_class_6_Origin_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_3__render_of_class_8_Template_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_3_create_token_of_class_11_Lexer_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_3_more_of_class_13_TokenParser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_3_render_node_of_class_18_NodeList_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_3_render_of_class_19_TextNode_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_3_render_of_class_21_VariableNode_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_3_skip_past_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_3_split_contents_of_class_10_Token_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_3_tag_function_of_class_26_Library_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_4___str___of_class_14_FilterExpression_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_4___str___of_class_16_Variable_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_4_back_of_class_13_TokenParser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_4_filter_of_class_26_Library_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_4_render_of_class_8_Template_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_5_filter_function_of_class_26_Library_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_5_tag_of_class_13_TokenParser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_6_simple_tag_of_class_26_Library_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_6_value_of_class_13_TokenParser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_7_enter_command_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_8_exit_command_of_class_12_Parser_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_9_compile_string_of_module_django__template__base(  );


static PyObject *MAKE_FUNCTION_function_9_error_of_class_12_Parser_of_module_django__template__base(  );


// The module function definitions.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_TemplateSyntaxError_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    return _python_var___module__.updateLocalsDict( PyDict_New() );
}


NUITKA_LOCAL_MODULE PyObject *impl_class_2_TemplateDoesNotExist_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    return _python_var___module__.updateLocalsDict( PyDict_New() );
}


NUITKA_LOCAL_MODULE PyObject *impl_class_3_TemplateEncodingError_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    return _python_var___module__.updateLocalsDict( PyDict_New() );
}


NUITKA_LOCAL_MODULE PyObject *impl_class_4_VariableDoesNotExist_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___str__( _python_str_plain___str__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base(  ) );
    _python_var___str__.assign1( MAKE_FUNCTION_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base(  ) );
    return _python_var___str__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_msg, PyObject *_python_par_params )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_msg( _python_str_plain_msg, _python_par_msg );
    PyObjectLocalParameterVariableNoDel _python_var_params( _python_str_plain_params, _python_par_params );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base ) )
    {
        if ( frame_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base );
        }

        frame_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base = MAKE_FRAME( _codeobj_22cfe1cb3493021a710cb378af743f4d, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 87 );
        {
                PyObject *tmp_identifier = _python_var_msg.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_msg );
        }
        frame_guard.setLineNumber( 88 );
        {
                PyObject *tmp_identifier = _python_var_params.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_params );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_params.updateLocalsDict( _python_var_msg.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base );
           frame_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_msg = NULL;
    PyObject *_python_par_params = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_msg == key )
            {
                if (unlikely( _python_par_msg ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'msg'" );
                    goto error_exit;
                }

                _python_par_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_params == key )
            {
                if (unlikely( _python_par_params ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'params'" );
                    goto error_exit;
                }

                _python_par_params = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_msg, key ) )
            {
                if (unlikely( _python_par_msg ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'msg'" );
                    goto error_exit;
                }

                _python_par_msg = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_params, key ) )
            {
                if (unlikely( _python_par_params ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'params'" );
                    goto error_exit;
                }

                _python_par_params = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_msg != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'msg'" );
             goto error_exit;
         }

        _python_par_msg = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_params != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'params'" );
             goto error_exit;
         }

        _python_par_params = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_params == NULL )
    {
        _python_par_params = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_params );
    }


    return impl_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base( self, _python_par_self, _python_par_msg, _python_par_params );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_msg );
    Py_XDECREF( _python_par_params );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_p( _python_str_plain_p );

    // Actual function code.
    static PyFrameObject *frame_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base ) )
    {
        if ( frame_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base );
        }

        frame_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base = MAKE_FRAME( _codeobj_b5b38291124f4d57eda94da6d2b6f8d4, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 91 );
        {
            PyObjectTempKeeper1 op1;
            return ( op1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_msg ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), PyObjectTemporary( TO_TUPLE( PyObjectTemporary( impl_listcontr_1_of_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_params ) ).asObject() ), _python_var_p ) ).asObject() ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_p.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base );
           frame_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__str__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__str__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__str__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_p )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 91 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 91 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_p.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call1.assign( _mvar_django__template__base_force_text.asObject0() ), CALL_FUNCTION( call1.asObject0(), PyObjectTemporary( MAKE_TUPLE1( python_closure_p.asObject() ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_4593080baa302c9b17627b104a2461c2 ) ).asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_class_5_InvalidTemplateLibrary_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    return _python_var___module__.updateLocalsDict( PyDict_New() );
}


NUITKA_LOCAL_MODULE PyObject *impl_class_6_Origin_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_reload( _python_str_plain_reload );
    PyObjectLocalVariable _python_var___str__( _python_str_plain___str__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_6_Origin_of_module_django__template__base(  ) );
    _python_var_reload.assign1( MAKE_FUNCTION_function_2_reload_of_class_6_Origin_of_module_django__template__base(  ) );
    _python_var___str__.assign1( MAKE_FUNCTION_function_3___str___of_class_6_Origin_of_module_django__template__base(  ) );
    return _python_var___str__.updateLocalsDict( _python_var_reload.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_6_Origin_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_6_Origin_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_6_Origin_of_module_django__template__base ) )
    {
        if ( frame_function_1___init___of_class_6_Origin_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_6_Origin_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1___init___of_class_6_Origin_of_module_django__template__base );
        }

        frame_function_1___init___of_class_6_Origin_of_module_django__template__base = MAKE_FRAME( _codeobj_7e90105d95bac1875a3719bef88ca8f7, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_6_Origin_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_6_Origin_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 99 );
        {
                PyObject *tmp_identifier = _python_var_name.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_name );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_6_Origin_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1___init___of_class_6_Origin_of_module_django__template__base );
           frame_function_1___init___of_class_6_Origin_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_6_Origin_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1___init___of_class_6_Origin_of_module_django__template__base( self, _python_par_self, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_6_Origin_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_6_Origin_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_6_Origin_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_reload_of_class_6_Origin_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2_reload_of_class_6_Origin_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2_reload_of_class_6_Origin_of_module_django__template__base ) )
    {
        if ( frame_function_2_reload_of_class_6_Origin_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_reload_of_class_6_Origin_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2_reload_of_class_6_Origin_of_module_django__template__base );
        }

        frame_function_2_reload_of_class_6_Origin_of_module_django__template__base = MAKE_FRAME( _codeobj_5beb0d6e6435348976493a7645024b1e, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2_reload_of_class_6_Origin_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2_reload_of_class_6_Origin_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 102 );
        RAISE_EXCEPTION_WITH_TYPE( PyExc_NotImplementedError, PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2_reload_of_class_6_Origin_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2_reload_of_class_6_Origin_of_module_django__template__base );
           frame_function_2_reload_of_class_6_Origin_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_reload_of_class_6_Origin_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "reload() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "reload() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "reload() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "reload() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "reload() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "reload() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "reload() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "reload() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "reload() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "reload() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "reload() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "reload() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "reload() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "reload() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "reload() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "reload() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "reload() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_reload_of_class_6_Origin_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_reload_of_class_6_Origin_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_reload_of_class_6_Origin_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_reload_of_class_6_Origin_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3___str___of_class_6_Origin_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3___str___of_class_6_Origin_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_3___str___of_class_6_Origin_of_module_django__template__base ) )
    {
        if ( frame_function_3___str___of_class_6_Origin_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3___str___of_class_6_Origin_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_3___str___of_class_6_Origin_of_module_django__template__base );
        }

        frame_function_3___str___of_class_6_Origin_of_module_django__template__base = MAKE_FRAME( _codeobj_cd52daa255e9f96c7e062d9ed9fbd281, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_3___str___of_class_6_Origin_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_3___str___of_class_6_Origin_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 105 );
        return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3___str___of_class_6_Origin_of_module_django__template__base )
        {
           Py_DECREF( frame_function_3___str___of_class_6_Origin_of_module_django__template__base );
           frame_function_3___str___of_class_6_Origin_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3___str___of_class_6_Origin_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__str__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__str__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__str__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3___str___of_class_6_Origin_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3___str___of_class_6_Origin_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3___str___of_class_6_Origin_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3___str___of_class_6_Origin_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_7_StringOrigin_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_reload( _python_str_plain_reload );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_7_StringOrigin_of_module_django__template__base(  ) );
    _python_var_reload.assign1( MAKE_FUNCTION_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base(  ) );
    return _python_var_reload.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1___init___of_class_7_StringOrigin_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_source )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_source( _python_str_plain_source, _python_par_source );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_7_StringOrigin_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_7_StringOrigin_of_module_django__template__base ) )
    {
        if ( frame_function_1___init___of_class_7_StringOrigin_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_7_StringOrigin_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1___init___of_class_7_StringOrigin_of_module_django__template__base );
        }

        frame_function_1___init___of_class_7_StringOrigin_of_module_django__template__base = MAKE_FRAME( _codeobj_fa5fe21b6ab73dd86012fdc5865649b6, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_7_StringOrigin_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_7_StringOrigin_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 109 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__template__base_StringOrigin.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _mvar_django__template__base_UNKNOWN_SOURCE.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 110 );
        {
                PyObject *tmp_identifier = _python_var_source.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_source );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_source.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_7_StringOrigin_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1___init___of_class_7_StringOrigin_of_module_django__template__base );
           frame_function_1___init___of_class_7_StringOrigin_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_7_StringOrigin_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_source = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_source == key )
            {
                if (unlikely( _python_par_source ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'source'" );
                    goto error_exit;
                }

                _python_par_source = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_source, key ) )
            {
                if (unlikely( _python_par_source ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'source'" );
                    goto error_exit;
                }

                _python_par_source = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_source != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'source'" );
             goto error_exit;
         }

        _python_par_source = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1___init___of_class_7_StringOrigin_of_module_django__template__base( self, _python_par_self, _python_par_source );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_source );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_7_StringOrigin_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_7_StringOrigin_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_7_StringOrigin_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base ) )
    {
        if ( frame_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_reload_of_class_7_StringOrigin_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base );
        }

        frame_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base = MAKE_FRAME( _codeobj_deda9f00beceac842fc6969e0dee63b7, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 113 );
        return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_source );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base );
           frame_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "reload() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "reload() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "reload() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "reload() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "reload() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "reload() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "reload() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "reload() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "reload() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "reload() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "reload() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "reload() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "reload() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "reload() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "reload() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "reload() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "reload() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_8_Template_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___iter__( _python_str_plain___iter__ );
    PyObjectLocalVariable _python_var__render( _python_str_plain__render );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_8_Template_of_module_django__template__base(  ) );
    _python_var___iter__.assign1( MAKE_FUNCTION_function_2___iter___of_class_8_Template_of_module_django__template__base(  ) );
    _python_var__render.assign1( MAKE_FUNCTION_function_3__render_of_class_8_Template_of_module_django__template__base(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_4_render_of_class_8_Template_of_module_django__template__base(  ) );
    return _python_var_render.updateLocalsDict( _python_var__render.updateLocalsDict( _python_var___iter__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_8_Template_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_template_string, PyObject *_python_par_origin, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_template_string( _python_str_plain_template_string, _python_par_template_string );
    PyObjectLocalParameterVariableNoDel _python_var_origin( _python_str_plain_origin, _python_par_origin );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_8_Template_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_8_Template_of_module_django__template__base ) )
    {
        if ( frame_function_1___init___of_class_8_Template_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_8_Template_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1___init___of_class_8_Template_of_module_django__template__base );
        }

        frame_function_1___init___of_class_8_Template_of_module_django__template__base = MAKE_FRAME( _codeobj_2dc8de4e75ee7fd58b89393a73dbb4fa, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_8_Template_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_8_Template_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 118 );
        try
        {
            frame_guard.setLineNumber( 119 );
            {
                PyObjectTempKeeper0 call1;
                _python_var_template_string.assign1( ( call1.assign( _mvar_django__template__base_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_template_string.asObject() ) ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_UnicodeDecodeError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 121 );
                {
                        PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_ARGS( _mvar_django__template__base_TemplateEncodingError.asObject0(), _python_unicode_digest_f5f2314037f162e321556f2e04b10d6d ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 123 );
        if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__template__base_settings.asObject0(), _python_str_plain_TEMPLATE_DEBUG ) ).asObject() ) && ( _python_var_origin.asObject() == Py_None ) ) )
        {
            frame_guard.setLineNumber( 124 );
            {
                PyObjectTempKeeper0 call3;
                _python_var_origin.assign1( ( call3.assign( _mvar_django__template__base_StringOrigin.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_template_string.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 125 );
        {
            PyObjectTempKeeper0 call5;
            PyObjectTempKeeper0 call6;
            {
                PyObjectTemporary tmp_identifier( ( call5.assign( _mvar_django__template__base_compile_string.asObject0() ), call6.assign( _python_var_template_string.asObject() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), call6.asObject0(), _python_var_origin.asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_nodelist );
        }
        }
        frame_guard.setLineNumber( 126 );
        {
                PyObject *tmp_identifier = _python_var_name.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_name );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_origin.updateLocalsDict( _python_var_template_string.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_8_Template_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1___init___of_class_8_Template_of_module_django__template__base );
           frame_function_1___init___of_class_8_Template_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_8_Template_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_template_string = NULL;
    PyObject *_python_par_origin = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_template_string == key )
            {
                if (unlikely( _python_par_template_string ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'template_string'" );
                    goto error_exit;
                }

                _python_par_template_string = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_origin == key )
            {
                if (unlikely( _python_par_origin ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'origin'" );
                    goto error_exit;
                }

                _python_par_origin = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_template_string, key ) )
            {
                if (unlikely( _python_par_template_string ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'template_string'" );
                    goto error_exit;
                }

                _python_par_template_string = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_origin, key ) )
            {
                if (unlikely( _python_par_origin ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'origin'" );
                    goto error_exit;
                }

                _python_par_origin = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_template_string != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'template_string'" );
             goto error_exit;
         }

        _python_par_template_string = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_origin != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'origin'" );
             goto error_exit;
         }

        _python_par_origin = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_origin == NULL )
    {
        _python_par_origin = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_origin );
    }
    if ( _python_par_name == NULL )
    {
        _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_name );
    }


    return impl_function_1___init___of_class_8_Template_of_module_django__template__base( self, _python_par_self, _python_par_template_string, _python_par_origin, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_template_string );
    Py_XDECREF( _python_par_origin );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_8_Template_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1___init___of_class_8_Template_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_8_Template_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_function_2___iter___of_class_8_Template_of_module_django__template__base_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel python_var_self;
    PyObjectLocalVariable python_var_node;
    PyObjectLocalVariable python_var_subnode;
};

static void _context_generator_function_2___iter___of_class_8_Template_of_module_django__template__base_destructor( void *context_voidptr )
{
    _context_generator_function_2___iter___of_class_8_Template_of_module_django__template__base_t *_python_context = (struct _context_generator_function_2___iter___of_class_8_Template_of_module_django__template__base_t *)context_voidptr;

    delete _python_context;
}

static void function_2___iter___of_class_8_Template_of_module_django__template__base_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_function_2___iter___of_class_8_Template_of_module_django__template__base_t *_python_context = (_context_generator_function_2___iter___of_class_8_Template_of_module_django__template__base_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_node.setVariableName( _python_str_plain_node );
        _python_context->python_var_subnode.setVariableName( _python_str_plain_subnode );

        // Actual function code.
        static PyFrameObject *frame_function_2___iter___of_class_8_Template_of_module_django__template__base = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_function_2___iter___of_class_8_Template_of_module_django__template__base ) )
        {
            if ( frame_function_2___iter___of_class_8_Template_of_module_django__template__base )
            {
#if _DEBUG_REFRAME
                puts( "reframe for function_2___iter___of_class_8_Template_of_module_django__template__base" );
#endif
                Py_DECREF( frame_function_2___iter___of_class_8_Template_of_module_django__template__base );
            }

            frame_function_2___iter___of_class_8_Template_of_module_django__template__base = MAKE_FRAME( _codeobj_140a98c2c3239c38bd6e814b35f78745, _module_django__template__base );
        }

        Py_INCREF( frame_function_2___iter___of_class_8_Template_of_module_django__template__base );
        generator->m_frame = frame_function_2___iter___of_class_8_Template_of_module_django__template__base;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                frame_guard.setLineNumber( 129 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_nodelist ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 129 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_context->python_var_node.assign0( _python_tmp_iter_value.asObject() );
                    }
                    {
                        frame_guard.setLineNumber( 130 );
                        PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_context->python_var_node.asObject() ) );
                        while( true )
                        {
                            {
                                frame_guard.setLineNumber( 130 );
                                PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                if ( _tmp_unpack_2 == NULL )
                                {
                                    break;
                                }
                                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                                _python_context->python_var_subnode.assign0( _python_tmp_iter_value.asObject() );
                            }
                            frame_guard.setLineNumber( 131 );
                            YIELD_VALUE( generator, _python_context->python_var_subnode.asObject1() );

                           CONSIDER_THREADING();
                        }
                    }

                   CONSIDER_THREADING();
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_function_2___iter___of_class_8_Template_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // Create context if any
    struct _context_generator_function_2___iter___of_class_8_Template_of_module_django__template__base_t *_python_context = new _context_generator_function_2___iter___of_class_8_Template_of_module_django__template__base_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            function_2___iter___of_class_8_Template_of_module_django__template__base_context,
            _python_str_plain___iter__,
            _codeobj_140a98c2c3239c38bd6e814b35f78745,
            _python_context,
            _context_generator_function_2___iter___of_class_8_Template_of_module_django__template__base_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function __iter__" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var_self.setVariableNameAndValue( _python_str_plain_self, _python_par_self );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}
static PyObject *fparse_function_2___iter___of_class_8_Template_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__iter__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__iter__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__iter__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2___iter___of_class_8_Template_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___iter___of_class_8_Template_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2___iter___of_class_8_Template_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___iter___of_class_8_Template_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3__render_of_class_8_Template_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_context )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_context( _python_str_plain_context, _python_par_context );

    // Actual function code.
    static PyFrameObject *frame_function_3__render_of_class_8_Template_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_3__render_of_class_8_Template_of_module_django__template__base ) )
    {
        if ( frame_function_3__render_of_class_8_Template_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3__render_of_class_8_Template_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_3__render_of_class_8_Template_of_module_django__template__base );
        }

        frame_function_3__render_of_class_8_Template_of_module_django__template__base = MAKE_FRAME( _codeobj_bca2adce3b44eeb4e48cb075c97dff39, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_3__render_of_class_8_Template_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_3__render_of_class_8_Template_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 134 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_nodelist ) ).asObject(), _python_str_plain_render ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_context.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_context.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_3__render_of_class_8_Template_of_module_django__template__base )
        {
           Py_DECREF( frame_function_3__render_of_class_8_Template_of_module_django__template__base );
           frame_function_3__render_of_class_8_Template_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3__render_of_class_8_Template_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_context = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context == key )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "_render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context, key ) )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "_render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_render() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_render() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_render() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_render() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_render() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_render() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_render() got multiple values for keyword argument 'context'" );
             goto error_exit;
         }

        _python_par_context = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3__render_of_class_8_Template_of_module_django__template__base( self, _python_par_self, _python_par_context );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_context );

    return NULL;
}

static PyObject *dparse_function_3__render_of_class_8_Template_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3__render_of_class_8_Template_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3__render_of_class_8_Template_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_render_of_class_8_Template_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_context )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_context( _python_str_plain_context, _python_par_context );

    // Actual function code.
    static PyFrameObject *frame_function_4_render_of_class_8_Template_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_4_render_of_class_8_Template_of_module_django__template__base ) )
    {
        if ( frame_function_4_render_of_class_8_Template_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_render_of_class_8_Template_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_4_render_of_class_8_Template_of_module_django__template__base );
        }

        frame_function_4_render_of_class_8_Template_of_module_django__template__base = MAKE_FRAME( _codeobj_7a0e8034b281902f5783f82769eafa83, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_4_render_of_class_8_Template_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_4_render_of_class_8_Template_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 138 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_context.asObject(), _python_str_plain_render_context ) ).asObject(), _python_str_plain_push ) ).asObject() ) );
        frame_guard.setLineNumber( 139 );
        PythonExceptionKeeper _caught_1;

        PyObjectTempKeeper1 _return_value_1;

        try
        {
            frame_guard.setLineNumber( 140 );
            {
                PyObjectTempKeeper1 call1;
                throw ReturnValueException( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__render ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_context.asObject() ) ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
            frame_guard.preserveExistingException();

            _exception.toExceptionHandler();
#endif
        }
        catch ( ReturnValueException &e )
        {
            _return_value_1.assign( e.getValue() );
        }

        // Final code:
        frame_guard.setLineNumber( 142 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_context.asObject(), _python_str_plain_render_context ) ).asObject(), _python_str_plain_pop ) ).asObject() ) );
        _caught_1.rethrow();
        assert( _return_value_1.isKeeping() ); // Must be true as this is last.
        return _return_value_1.asObject();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_context.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_4_render_of_class_8_Template_of_module_django__template__base )
        {
           Py_DECREF( frame_function_4_render_of_class_8_Template_of_module_django__template__base );
           frame_function_4_render_of_class_8_Template_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_render_of_class_8_Template_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_context = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context == key )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context, key ) )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
             goto error_exit;
         }

        _python_par_context = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4_render_of_class_8_Template_of_module_django__template__base( self, _python_par_self, _python_par_context );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_context );

    return NULL;
}

static PyObject *dparse_function_4_render_of_class_8_Template_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4_render_of_class_8_Template_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_render_of_class_8_Template_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9_compile_string_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_template_string, PyObject *_python_par_origin )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_template_string( _python_str_plain_template_string, _python_par_template_string );
    PyObjectLocalParameterVariableNoDel _python_var_origin( _python_str_plain_origin, _python_par_origin );
    PyObjectLocalVariable _python_var_DebugLexer( _python_str_plain_DebugLexer );
    PyObjectLocalVariable _python_var_DebugParser( _python_str_plain_DebugParser );
    PyObjectLocalVariable _python_var_lexer_class( _python_str_plain_lexer_class );
    PyObjectLocalVariable _python_var_parser_class( _python_str_plain_parser_class );
    PyObjectLocalVariable _python_var_lexer( _python_str_plain_lexer );
    PyObjectLocalVariable _python_var_parser( _python_str_plain_parser );

    // Actual function code.
    static PyFrameObject *frame_function_9_compile_string_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_9_compile_string_of_module_django__template__base ) )
    {
        if ( frame_function_9_compile_string_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9_compile_string_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_9_compile_string_of_module_django__template__base );
        }

        frame_function_9_compile_string_of_module_django__template__base = MAKE_FRAME( _codeobj_286438b5a91d5a9c55f981d146e85f87, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_9_compile_string_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_9_compile_string_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 146 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__template__base_settings.asObject0(), _python_str_plain_TEMPLATE_DEBUG ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 147 );
            _python_var_DebugLexer.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_a30cc0e85b6d6d043f0f2c660dc67f97, ((PyModuleObject *)_module_django__template__base)->md_dict, PyObjectTemporary( _python_var_origin.updateLocalsDict( _python_var_template_string.updateLocalsDict( _python_var_parser.updateLocalsDict( _python_var_lexer.updateLocalsDict( _python_var_parser_class.updateLocalsDict( _python_var_lexer_class.updateLocalsDict( _python_var_DebugParser.updateLocalsDict( _python_var_DebugLexer.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ).asObject(), _python_list_str_plain_DebugLexer_str_plain_DebugParser_list, _python_int_0 ) ).asObject(), _python_str_plain_DebugLexer ) );
            _python_var_DebugParser.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_a30cc0e85b6d6d043f0f2c660dc67f97, ((PyModuleObject *)_module_django__template__base)->md_dict, PyObjectTemporary( _python_var_origin.updateLocalsDict( _python_var_template_string.updateLocalsDict( _python_var_parser.updateLocalsDict( _python_var_lexer.updateLocalsDict( _python_var_parser_class.updateLocalsDict( _python_var_lexer_class.updateLocalsDict( _python_var_DebugParser.updateLocalsDict( _python_var_DebugLexer.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ).asObject(), _python_list_str_plain_DebugLexer_str_plain_DebugParser_list, _python_int_0 ) ).asObject(), _python_str_plain_DebugParser ) );
            {
                frame_guard.setLineNumber( 148 );
                PyObject *_tmp_python_tmp_source_iter;
                {
                    PyObjectTempKeeper0 make_tuple1;
                    _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( _python_var_DebugLexer.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_DebugParser.asObject() ) ) ).asObject() );
                }
                PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                _python_var_lexer_class.assign0( _python_tmp_element_1.asObject() );
                _python_var_parser_class.assign0( _python_tmp_element_2.asObject() );
            }
        }
        else
        {
            {
                frame_guard.setLineNumber( 150 );
                PyObject *_tmp_python_tmp_source_iter;
                {
                    PyObjectTempKeeper0 make_tuple3;
                    _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple3.assign( _mvar_django__template__base_Lexer.asObject0() ), MAKE_TUPLE2( make_tuple3.asObject0(), _mvar_django__template__base_Parser.asObject0() ) ) ).asObject() );
                }
                PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                _python_var_lexer_class.assign0( _python_tmp_element_1.asObject() );
                _python_var_parser_class.assign0( _python_tmp_element_2.asObject() );
            }
        }
        frame_guard.setLineNumber( 151 );
        {
            PyObjectTempKeeper0 call5;
            PyObjectTempKeeper0 call6;
            _python_var_lexer.assign1( ( call5.assign( _python_var_lexer_class.asObject() ), call6.assign( _python_var_template_string.asObject() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), call6.asObject0(), _python_var_origin.asObject() ) ) );
        }
        frame_guard.setLineNumber( 152 );
        {
            PyObjectTempKeeper0 call8;
            _python_var_parser.assign1( ( call8.assign( _python_var_parser_class.asObject() ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_lexer.asObject(), _python_str_plain_tokenize ) ).asObject() ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 153 );
        return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_parser.asObject(), _python_str_plain_parse ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_origin.updateLocalsDict( _python_var_template_string.updateLocalsDict( _python_var_parser.updateLocalsDict( _python_var_lexer.updateLocalsDict( _python_var_parser_class.updateLocalsDict( _python_var_lexer_class.updateLocalsDict( _python_var_DebugParser.updateLocalsDict( _python_var_DebugLexer.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_9_compile_string_of_module_django__template__base )
        {
           Py_DECREF( frame_function_9_compile_string_of_module_django__template__base );
           frame_function_9_compile_string_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_9_compile_string_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_template_string = NULL;
    PyObject *_python_par_origin = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "compile_string() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_template_string == key )
            {
                if (unlikely( _python_par_template_string ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_string() got multiple values for keyword argument 'template_string'" );
                    goto error_exit;
                }

                _python_par_template_string = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_origin == key )
            {
                if (unlikely( _python_par_origin ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_string() got multiple values for keyword argument 'origin'" );
                    goto error_exit;
                }

                _python_par_origin = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_template_string, key ) )
            {
                if (unlikely( _python_par_template_string ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_string() got multiple values for keyword argument 'template_string'" );
                    goto error_exit;
                }

                _python_par_template_string = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_origin, key ) )
            {
                if (unlikely( _python_par_origin ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_string() got multiple values for keyword argument 'origin'" );
                    goto error_exit;
                }

                _python_par_origin = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "compile_string() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "compile_string() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "compile_string() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "compile_string() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "compile_string() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "compile_string() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "compile_string() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "compile_string() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "compile_string() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "compile_string() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "compile_string() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "compile_string() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "compile_string() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_template_string != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "compile_string() got multiple values for keyword argument 'template_string'" );
             goto error_exit;
         }

        _python_par_template_string = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_origin != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "compile_string() got multiple values for keyword argument 'origin'" );
             goto error_exit;
         }

        _python_par_origin = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_9_compile_string_of_module_django__template__base( self, _python_par_template_string, _python_par_origin );

error_exit:;

    Py_XDECREF( _python_par_template_string );
    Py_XDECREF( _python_par_origin );

    return NULL;
}

static PyObject *dparse_function_9_compile_string_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_9_compile_string_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9_compile_string_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_10_Token_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___str__( _python_str_plain___str__ );
    PyObjectLocalVariable _python_var_split_contents( _python_str_plain_split_contents );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_10_Token_of_module_django__template__base(  ) );
    _python_var___str__.assign1( MAKE_FUNCTION_function_2___str___of_class_10_Token_of_module_django__template__base(  ) );
    _python_var_split_contents.assign1( MAKE_FUNCTION_function_3_split_contents_of_class_10_Token_of_module_django__template__base(  ) );
    return _python_var_split_contents.updateLocalsDict( _python_var___str__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_10_Token_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_token_type, PyObject *_python_par_contents )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_token_type( _python_str_plain_token_type, _python_par_token_type );
    PyObjectLocalParameterVariableNoDel _python_var_contents( _python_str_plain_contents, _python_par_contents );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_10_Token_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_10_Token_of_module_django__template__base ) )
    {
        if ( frame_function_1___init___of_class_10_Token_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_10_Token_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1___init___of_class_10_Token_of_module_django__template__base );
        }

        frame_function_1___init___of_class_10_Token_of_module_django__template__base = MAKE_FRAME( _codeobj_c5c4b2ba6cf5bdb4b2bd554280bf4cc4, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_10_Token_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_10_Token_of_module_django__template__base ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 159 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( _python_var_token_type.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_contents.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_token_type );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_contents );
            }
        }
        frame_guard.setLineNumber( 160 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain_lineno );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_contents.updateLocalsDict( _python_var_token_type.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_10_Token_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1___init___of_class_10_Token_of_module_django__template__base );
           frame_function_1___init___of_class_10_Token_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_10_Token_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_token_type = NULL;
    PyObject *_python_par_contents = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_token_type == key )
            {
                if (unlikely( _python_par_token_type ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'token_type'" );
                    goto error_exit;
                }

                _python_par_token_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_contents == key )
            {
                if (unlikely( _python_par_contents ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'contents'" );
                    goto error_exit;
                }

                _python_par_contents = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_token_type, key ) )
            {
                if (unlikely( _python_par_token_type ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'token_type'" );
                    goto error_exit;
                }

                _python_par_token_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_contents, key ) )
            {
                if (unlikely( _python_par_contents ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'contents'" );
                    goto error_exit;
                }

                _python_par_contents = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_token_type != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'token_type'" );
             goto error_exit;
         }

        _python_par_token_type = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_contents != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'contents'" );
             goto error_exit;
         }

        _python_par_contents = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_1___init___of_class_10_Token_of_module_django__template__base( self, _python_par_self, _python_par_token_type, _python_par_contents );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_token_type );
    Py_XDECREF( _python_par_contents );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_10_Token_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_10_Token_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_10_Token_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___str___of_class_10_Token_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_token_name( _python_str_plain_token_name );

    // Actual function code.
    static PyFrameObject *frame_function_2___str___of_class_10_Token_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2___str___of_class_10_Token_of_module_django__template__base ) )
    {
        if ( frame_function_2___str___of_class_10_Token_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2___str___of_class_10_Token_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2___str___of_class_10_Token_of_module_django__template__base );
        }

        frame_function_2___str___of_class_10_Token_of_module_django__template__base = MAKE_FRAME( _codeobj_06176c9f372f52e6fd8bb00fa443c200, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2___str___of_class_10_Token_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2___str___of_class_10_Token_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 163 );
        {
            PyObjectTempKeeper0 subscr1;
            _python_var_token_name.assign1( ( subscr1.assign( _mvar_django__template__base_TOKEN_MAPPING.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_token_type ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 164 );
        {
            PyObjectTempKeeper0 make_tuple3;
            return BINARY_OPERATION_REMAINDER( _python_unicode_digest_240c71d90c43194358e24408c27d1896, PyObjectTemporary( ( make_tuple3.assign( _python_var_token_name.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_INDEX_SLICE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_contents ) ).asObject(), 0, 20 ) ).asObject(), _python_str_plain_replace ) ).asObject(), _python_unicode_chr_10, _python_unicode_empty ) ).asObject() ) ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_token_name.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2___str___of_class_10_Token_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2___str___of_class_10_Token_of_module_django__template__base );
           frame_function_2___str___of_class_10_Token_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2___str___of_class_10_Token_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__str__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__str__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__str__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2___str___of_class_10_Token_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___str___of_class_10_Token_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2___str___of_class_10_Token_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___str___of_class_10_Token_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_split_contents_of_class_10_Token_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_split( _python_str_plain_split );
    PyObjectLocalVariable _python_var_bits( _python_str_plain_bits );
    PyObjectLocalVariable _python_var_bit( _python_str_plain_bit );
    PyObjectLocalVariable _python_var_sentinal( _python_str_plain_sentinal );
    PyObjectLocalVariable _python_var_trans_bit( _python_str_plain_trans_bit );

    // Actual function code.
    _python_var_split.assign1( PyList_New( 0 ) );
    static PyFrameObject *frame_function_3_split_contents_of_class_10_Token_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_3_split_contents_of_class_10_Token_of_module_django__template__base ) )
    {
        if ( frame_function_3_split_contents_of_class_10_Token_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_split_contents_of_class_10_Token_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_3_split_contents_of_class_10_Token_of_module_django__template__base );
        }

        frame_function_3_split_contents_of_class_10_Token_of_module_django__template__base = MAKE_FRAME( _codeobj_c45350170d9daf1640b364852c313669, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_3_split_contents_of_class_10_Token_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_3_split_contents_of_class_10_Token_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 169 );
        {
            PyObjectTempKeeper0 call1;
            _python_var_bits.assign1( MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( _mvar_django__template__base_smart_split.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_contents ) ).asObject() ) ) ).asObject() ) );
        }
        {
            frame_guard.setLineNumber( 170 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_bits.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 170 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_bit.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 172 );
                if ( ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_bit.asObject(), _python_str_plain_startswith ) ).asObject(), _python_unicode_digest_152fca8d11d70d3a96a4f0ec11abade3 ) ).asObject() ) || CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_bit.asObject(), _python_str_plain_startswith ) ).asObject(), _python_unicode_digest_dac95c11e0f0e304f25b2d65033d927b ) ).asObject() ) ) )
                {
                    frame_guard.setLineNumber( 173 );
                    _python_var_sentinal.assign1( BINARY_OPERATION_ADD( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_bit.asObject(), _python_int_pos_2, 2 ) ).asObject(), _python_unicode_chr_41 ) );
                    frame_guard.setLineNumber( 174 );
                    _python_var_trans_bit.assign1( MAKE_LIST1( _python_var_bit.asObject1() ) );
                    frame_guard.setLineNumber( 175 );
                    while( true )
                    {
                        frame_guard.setLineNumber( 175 );
                        {
                            PyObjectTempKeeper1 call3;
                            if ( (!( (!( CHECK_IF_TRUE( PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_bit.asObject(), _python_str_plain_endswith ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_sentinal.asObject() ) ) ).asObject() ) )) )) )
                        {
                            frame_guard.setLineNumber( 175 );
                            break;
                        }
                        }
                        frame_guard.setLineNumber( 176 );
                        _python_var_bit.assign1( BUILTIN_NEXT1( _python_var_bits.asObject() ) );
                        frame_guard.setLineNumber( 177 );
                        {
                            PyObjectTempKeeper1 call5;
                            DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_trans_bit.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_bit.asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                    frame_guard.setLineNumber( 178 );
                    {
                        PyObjectTempKeeper1 call7;
                        _python_var_bit.assign1( ( call7.assign( LOOKUP_ATTRIBUTE( _python_unicode_space, _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_trans_bit.asObject() ) ) );
                    }
                }
                frame_guard.setLineNumber( 179 );
                {
                    PyObjectTempKeeper1 call9;
                    DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_split.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_var_bit.asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 180 );
        return _python_var_split.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_trans_bit.updateLocalsDict( _python_var_sentinal.updateLocalsDict( _python_var_bit.updateLocalsDict( _python_var_bits.updateLocalsDict( _python_var_split.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_split_contents_of_class_10_Token_of_module_django__template__base )
        {
           Py_DECREF( frame_function_3_split_contents_of_class_10_Token_of_module_django__template__base );
           frame_function_3_split_contents_of_class_10_Token_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_3_split_contents_of_class_10_Token_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "split_contents() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "split_contents() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "split_contents() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "split_contents() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "split_contents() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "split_contents() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "split_contents() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "split_contents() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "split_contents() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "split_contents() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "split_contents() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "split_contents() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "split_contents() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "split_contents() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "split_contents() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "split_contents() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "split_contents() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_split_contents_of_class_10_Token_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_split_contents_of_class_10_Token_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_split_contents_of_class_10_Token_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_split_contents_of_class_10_Token_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_11_Lexer_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_tokenize( _python_str_plain_tokenize );
    PyObjectLocalVariable _python_var_create_token( _python_str_plain_create_token );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_11_Lexer_of_module_django__template__base(  ) );
    _python_var_tokenize.assign1( MAKE_FUNCTION_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base(  ) );
    _python_var_create_token.assign1( MAKE_FUNCTION_function_3_create_token_of_class_11_Lexer_of_module_django__template__base(  ) );
    return _python_var_create_token.updateLocalsDict( _python_var_tokenize.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_11_Lexer_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_template_string, PyObject *_python_par_origin )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_template_string( _python_str_plain_template_string, _python_par_template_string );
    PyObjectLocalParameterVariableNoDel _python_var_origin( _python_str_plain_origin, _python_par_origin );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_11_Lexer_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_11_Lexer_of_module_django__template__base ) )
    {
        if ( frame_function_1___init___of_class_11_Lexer_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_11_Lexer_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1___init___of_class_11_Lexer_of_module_django__template__base );
        }

        frame_function_1___init___of_class_11_Lexer_of_module_django__template__base = MAKE_FRAME( _codeobj_9a60265b2b3e422ed2096b4186ffb3b4, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_11_Lexer_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_11_Lexer_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 184 );
        {
                PyObject *tmp_identifier = _python_var_template_string.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_template_string );
        }
        frame_guard.setLineNumber( 185 );
        {
                PyObject *tmp_identifier = _python_var_origin.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_origin );
        }
        frame_guard.setLineNumber( 186 );
        SET_ATTRIBUTE( _python_int_pos_1, _python_var_self.asObject(), _python_str_plain_lineno );
        frame_guard.setLineNumber( 187 );
        SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_verbatim );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_origin.updateLocalsDict( _python_var_template_string.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_11_Lexer_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1___init___of_class_11_Lexer_of_module_django__template__base );
           frame_function_1___init___of_class_11_Lexer_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_11_Lexer_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_template_string = NULL;
    PyObject *_python_par_origin = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_template_string == key )
            {
                if (unlikely( _python_par_template_string ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'template_string'" );
                    goto error_exit;
                }

                _python_par_template_string = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_origin == key )
            {
                if (unlikely( _python_par_origin ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'origin'" );
                    goto error_exit;
                }

                _python_par_origin = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_template_string, key ) )
            {
                if (unlikely( _python_par_template_string ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'template_string'" );
                    goto error_exit;
                }

                _python_par_template_string = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_origin, key ) )
            {
                if (unlikely( _python_par_origin ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'origin'" );
                    goto error_exit;
                }

                _python_par_origin = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_template_string != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'template_string'" );
             goto error_exit;
         }

        _python_par_template_string = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_origin != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'origin'" );
             goto error_exit;
         }

        _python_par_origin = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_1___init___of_class_11_Lexer_of_module_django__template__base( self, _python_par_self, _python_par_template_string, _python_par_origin );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_template_string );
    Py_XDECREF( _python_par_origin );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_11_Lexer_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_11_Lexer_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_11_Lexer_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_in_tag( _python_str_plain_in_tag );
    PyObjectLocalVariable _python_var_result( _python_str_plain_result );
    PyObjectLocalVariable _python_var_bit( _python_str_plain_bit );

    // Actual function code.
    _python_var_in_tag.assign0( Py_False );
    _python_var_result.assign1( PyList_New( 0 ) );
    static PyFrameObject *frame_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base ) )
    {
        if ( frame_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_tokenize_of_class_11_Lexer_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base );
        }

        frame_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base = MAKE_FRAME( _codeobj_0c045038deb3fc0794aba80e06c412fb, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 195 );
            PyObject *_tmp_python_tmp_for_iterator;
            {
                PyObjectTempKeeper1 call1;
                _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_tag_re.asObject0(), _python_str_plain_split ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_template_string ) ).asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 195 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_bit.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 196 );
                if ( CHECK_IF_TRUE( _python_var_bit.asObject() ) )
                {
                    frame_guard.setLineNumber( 197 );
                    {
                        PyObjectTempKeeper1 call3;
                        PyObjectTempKeeper0 call4;
                        PyObjectTempKeeper1 call6;
                        DECREASE_REFCOUNT( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_result.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_create_token ) ), call4.assign( _python_var_bit.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_in_tag.asObject() ) ) ).asObject() ) ) );
                    }
                }
                frame_guard.setLineNumber( 198 );
                _python_var_in_tag.assign0( UNARY_OPERATION( UNARY_NOT, _python_var_in_tag.asObject() ) );

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 199 );
        return _python_var_result.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_bit.updateLocalsDict( _python_var_result.updateLocalsDict( _python_var_in_tag.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base );
           frame_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "tokenize() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "tokenize() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "tokenize() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "tokenize() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "tokenize() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "tokenize() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "tokenize() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "tokenize() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "tokenize() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "tokenize() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "tokenize() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "tokenize() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "tokenize() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "tokenize() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "tokenize() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "tokenize() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "tokenize() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_create_token_of_class_11_Lexer_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_token_string, PyObject *_python_par_in_tag )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_token_string( _python_str_plain_token_string, _python_par_token_string );
    PyObjectLocalParameterVariableNoDel _python_var_in_tag( _python_str_plain_in_tag, _python_par_in_tag );
    PyObjectLocalVariable _python_var_block_content( _python_str_plain_block_content );
    PyObjectLocalVariable _python_var_token( _python_str_plain_token );
    PyObjectLocalVariable _python_var_content( _python_str_plain_content );

    // Actual function code.
    static PyFrameObject *frame_function_3_create_token_of_class_11_Lexer_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_3_create_token_of_class_11_Lexer_of_module_django__template__base ) )
    {
        if ( frame_function_3_create_token_of_class_11_Lexer_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_create_token_of_class_11_Lexer_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_3_create_token_of_class_11_Lexer_of_module_django__template__base );
        }

        frame_function_3_create_token_of_class_11_Lexer_of_module_django__template__base = MAKE_FRAME( _codeobj_8961497ed5ccce2e20909175ba39949e, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_3_create_token_of_class_11_Lexer_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_3_create_token_of_class_11_Lexer_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 207 );
        {
            PyObjectTempKeeper1 call3;
            if ( ( CHECK_IF_TRUE( _python_var_in_tag.asObject() ) && CHECK_IF_TRUE( PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_token_string.asObject(), _python_str_plain_startswith ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _mvar_django__template__base_BLOCK_TAG_START.asObject0() ) ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 212 );
            _python_var_block_content.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_INDEX_SLICE( _python_var_token_string.asObject(), 2, -2 ) ).asObject(), _python_str_plain_strip ) ).asObject() ) );
            frame_guard.setLineNumber( 213 );
            {
                PyObjectTempKeeper0 cmp1;
                if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_verbatim ) ).asObject() ) && ( cmp1.assign( _python_var_block_content.asObject() ), RICH_COMPARE_BOOL_EQ( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_verbatim ) ).asObject() ) ) ) )
            {
                frame_guard.setLineNumber( 214 );
                SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_verbatim );
            }
            }
        }
        }
        frame_guard.setLineNumber( 215 );
        if ( ( CHECK_IF_TRUE( _python_var_in_tag.asObject() ) && (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_verbatim ) ).asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 216 );
            {
                PyObjectTempKeeper1 call20;
                if ( CHECK_IF_TRUE( PyObjectTemporary( ( call20.assign( LOOKUP_ATTRIBUTE( _python_var_token_string.asObject(), _python_str_plain_startswith ) ), CALL_FUNCTION_WITH_ARGS( call20.asObject0(), _mvar_django__template__base_VARIABLE_TAG_START.asObject0() ) ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 217 );
                {
                    PyObjectTempKeeper0 call5;
                    PyObjectTempKeeper0 call6;
                    _python_var_token.assign1( ( call5.assign( _mvar_django__template__base_Token.asObject0() ), call6.assign( _mvar_django__template__base_TOKEN_VAR.asObject0() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), call6.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_INDEX_SLICE( _python_var_token_string.asObject(), 2, -2 ) ).asObject(), _python_str_plain_strip ) ).asObject() ) ).asObject() ) ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 218 );
                {
                    PyObjectTempKeeper1 call18;
                    if ( CHECK_IF_TRUE( PyObjectTemporary( ( call18.assign( LOOKUP_ATTRIBUTE( _python_var_token_string.asObject(), _python_str_plain_startswith ) ), CALL_FUNCTION_WITH_ARGS( call18.asObject0(), _mvar_django__template__base_BLOCK_TAG_START.asObject0() ) ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 219 );
                    if ( SEQUENCE_CONTAINS_BOOL( PyObjectTemporary( LOOKUP_INDEX_SLICE( _python_var_block_content.asObject(), 0, 9 ) ).asObject(), _python_tuple_5105d53fdfa1854321a0b771b94e87c5_tuple ) )
                    {
                        frame_guard.setLineNumber( 220 );
                        {
                                PyObjectTemporary tmp_identifier( BINARY_OPERATION_REMAINDER( _python_unicode_digest_7881bd0eb42c1fd9302aa0130b25ee92, _python_var_block_content.asObject() ) );
                                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_verbatim );
                        }
                    }
                    frame_guard.setLineNumber( 221 );
                    {
                        PyObjectTempKeeper0 call8;
                        PyObjectTempKeeper0 call9;
                        _python_var_token.assign1( ( call8.assign( _mvar_django__template__base_Token.asObject0() ), call9.assign( _mvar_django__template__base_TOKEN_BLOCK.asObject0() ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), call9.asObject0(), _python_var_block_content.asObject() ) ) );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 222 );
                    {
                        PyObjectTempKeeper1 call16;
                        if ( CHECK_IF_TRUE( PyObjectTemporary( ( call16.assign( LOOKUP_ATTRIBUTE( _python_var_token_string.asObject(), _python_str_plain_startswith ) ), CALL_FUNCTION_WITH_ARGS( call16.asObject0(), _mvar_django__template__base_COMMENT_TAG_START.asObject0() ) ) ).asObject() ) )
                    {
                        _python_var_content.assign0( _python_unicode_empty );
                        frame_guard.setLineNumber( 224 );
                        {
                            PyObjectTempKeeper1 call11;
                            if ( CHECK_IF_TRUE( PyObjectTemporary( ( call11.assign( LOOKUP_ATTRIBUTE( _python_var_token_string.asObject(), _python_str_plain_find ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _mvar_django__template__base_TRANSLATOR_COMMENT_MARK.asObject0() ) ) ).asObject() ) )
                        {
                            frame_guard.setLineNumber( 225 );
                            _python_var_content.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_INDEX_SLICE( _python_var_token_string.asObject(), 2, -2 ) ).asObject(), _python_str_plain_strip ) ).asObject() ) );
                        }
                        }
                        frame_guard.setLineNumber( 226 );
                        {
                            PyObjectTempKeeper0 call13;
                            PyObjectTempKeeper0 call14;
                            _python_var_token.assign1( ( call13.assign( _mvar_django__template__base_Token.asObject0() ), call14.assign( _mvar_django__template__base_TOKEN_COMMENT.asObject0() ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), call14.asObject0(), _python_var_content.asObject() ) ) );
                        }
                    }
                    }
                }
                }
            }
            }
        }
        else
        {
            frame_guard.setLineNumber( 228 );
            {
                PyObjectTempKeeper0 call22;
                PyObjectTempKeeper0 call23;
                _python_var_token.assign1( ( call22.assign( _mvar_django__template__base_Token.asObject0() ), call23.assign( _mvar_django__template__base_TOKEN_TEXT.asObject0() ), CALL_FUNCTION_WITH_ARGS( call22.asObject0(), call23.asObject0(), _python_var_token_string.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 229 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_lineno ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_token.asObject(), _python_str_plain_lineno );
        }
        {
            frame_guard.setLineNumber( 230 );
            PyObjectTemporary _python_tmp_inplace_start( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_lineno ) );
            PyObject *_tmp_python_tmp_inplace_end;
            {
                PyObjectTempKeeper0 op25;
                _tmp_python_tmp_inplace_end = ( op25.assign( _python_tmp_inplace_start.asObject() ), BINARY_OPERATION( PyNumber_InPlaceAdd, op25.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_token_string.asObject(), _python_str_plain_count ) ).asObject(), _python_unicode_chr_10 ) ).asObject() ) );
            }
            PyObjectTemporary _python_tmp_inplace_end( _tmp_python_tmp_inplace_end );
            if ( ( _python_tmp_inplace_start.asObject() != _python_tmp_inplace_end.asObject() ) )
            {
                frame_guard.setLineNumber( 230 );
                {
                        PyObject *tmp_identifier = _python_tmp_inplace_end.asObject();
                        SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_lineno );
                }
            }
        }
        frame_guard.setLineNumber( 231 );
        return _python_var_token.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_in_tag.updateLocalsDict( _python_var_token_string.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_content.updateLocalsDict( _python_var_token.updateLocalsDict( _python_var_block_content.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_create_token_of_class_11_Lexer_of_module_django__template__base )
        {
           Py_DECREF( frame_function_3_create_token_of_class_11_Lexer_of_module_django__template__base );
           frame_function_3_create_token_of_class_11_Lexer_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_create_token_of_class_11_Lexer_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_token_string = NULL;
    PyObject *_python_par_in_tag = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "create_token() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "create_token() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_token_string == key )
            {
                if (unlikely( _python_par_token_string ))
                {
                    PyErr_Format( PyExc_TypeError, "create_token() got multiple values for keyword argument 'token_string'" );
                    goto error_exit;
                }

                _python_par_token_string = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_in_tag == key )
            {
                if (unlikely( _python_par_in_tag ))
                {
                    PyErr_Format( PyExc_TypeError, "create_token() got multiple values for keyword argument 'in_tag'" );
                    goto error_exit;
                }

                _python_par_in_tag = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "create_token() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_token_string, key ) )
            {
                if (unlikely( _python_par_token_string ))
                {
                    PyErr_Format( PyExc_TypeError, "create_token() got multiple values for keyword argument 'token_string'" );
                    goto error_exit;
                }

                _python_par_token_string = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_in_tag, key ) )
            {
                if (unlikely( _python_par_in_tag ))
                {
                    PyErr_Format( PyExc_TypeError, "create_token() got multiple values for keyword argument 'in_tag'" );
                    goto error_exit;
                }

                _python_par_in_tag = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "create_token() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "create_token() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "create_token() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "create_token() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "create_token() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "create_token() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "create_token() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "create_token() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "create_token() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "create_token() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "create_token() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "create_token() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "create_token() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "create_token() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_token_string != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "create_token() got multiple values for keyword argument 'token_string'" );
             goto error_exit;
         }

        _python_par_token_string = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_in_tag != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "create_token() got multiple values for keyword argument 'in_tag'" );
             goto error_exit;
         }

        _python_par_in_tag = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_3_create_token_of_class_11_Lexer_of_module_django__template__base( self, _python_par_self, _python_par_token_string, _python_par_in_tag );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_token_string );
    Py_XDECREF( _python_par_in_tag );

    return NULL;
}

static PyObject *dparse_function_3_create_token_of_class_11_Lexer_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_3_create_token_of_class_11_Lexer_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_create_token_of_class_11_Lexer_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_12_Parser_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_parse( _python_str_plain_parse );
    PyObjectLocalVariable _python_var_skip_past( _python_str_plain_skip_past );
    PyObjectLocalVariable _python_var_create_variable_node( _python_str_plain_create_variable_node );
    PyObjectLocalVariable _python_var_create_nodelist( _python_str_plain_create_nodelist );
    PyObjectLocalVariable _python_var_extend_nodelist( _python_str_plain_extend_nodelist );
    PyObjectLocalVariable _python_var_enter_command( _python_str_plain_enter_command );
    PyObjectLocalVariable _python_var_exit_command( _python_str_plain_exit_command );
    PyObjectLocalVariable _python_var_error( _python_str_plain_error );
    PyObjectLocalVariable _python_var_empty_variable( _python_str_plain_empty_variable );
    PyObjectLocalVariable _python_var_empty_block_tag( _python_str_plain_empty_block_tag );
    PyObjectLocalVariable _python_var_invalid_block_tag( _python_str_plain_invalid_block_tag );
    PyObjectLocalVariable _python_var_unclosed_block_tag( _python_str_plain_unclosed_block_tag );
    PyObjectLocalVariable _python_var_compile_filter_error( _python_str_plain_compile_filter_error );
    PyObjectLocalVariable _python_var_compile_function_error( _python_str_plain_compile_function_error );
    PyObjectLocalVariable _python_var_next_token( _python_str_plain_next_token );
    PyObjectLocalVariable _python_var_prepend_token( _python_str_plain_prepend_token );
    PyObjectLocalVariable _python_var_delete_first_token( _python_str_plain_delete_first_token );
    PyObjectLocalVariable _python_var_add_library( _python_str_plain_add_library );
    PyObjectLocalVariable _python_var_compile_filter( _python_str_plain_compile_filter );
    PyObjectLocalVariable _python_var_find_filter( _python_str_plain_find_filter );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_parse.assign1( MAKE_FUNCTION_function_2_parse_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_skip_past.assign1( MAKE_FUNCTION_function_3_skip_past_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_create_variable_node.assign1( MAKE_FUNCTION_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_create_nodelist.assign1( MAKE_FUNCTION_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_extend_nodelist.assign1( MAKE_FUNCTION_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_enter_command.assign1( MAKE_FUNCTION_function_7_enter_command_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_exit_command.assign1( MAKE_FUNCTION_function_8_exit_command_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_error.assign1( MAKE_FUNCTION_function_9_error_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_empty_variable.assign1( MAKE_FUNCTION_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_empty_block_tag.assign1( MAKE_FUNCTION_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_invalid_block_tag.assign1( MAKE_FUNCTION_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_unclosed_block_tag.assign1( MAKE_FUNCTION_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_compile_filter_error.assign1( MAKE_FUNCTION_function_14_compile_filter_error_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_compile_function_error.assign1( MAKE_FUNCTION_function_15_compile_function_error_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_next_token.assign1( MAKE_FUNCTION_function_16_next_token_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_prepend_token.assign1( MAKE_FUNCTION_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_delete_first_token.assign1( MAKE_FUNCTION_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_add_library.assign1( MAKE_FUNCTION_function_19_add_library_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_compile_filter.assign1( MAKE_FUNCTION_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base(  ) );
    _python_var_find_filter.assign1( MAKE_FUNCTION_function_21_find_filter_of_class_12_Parser_of_module_django__template__base(  ) );
    return _python_var_find_filter.updateLocalsDict( _python_var_compile_filter.updateLocalsDict( _python_var_add_library.updateLocalsDict( _python_var_delete_first_token.updateLocalsDict( _python_var_prepend_token.updateLocalsDict( _python_var_next_token.updateLocalsDict( _python_var_compile_function_error.updateLocalsDict( _python_var_compile_filter_error.updateLocalsDict( _python_var_unclosed_block_tag.updateLocalsDict( _python_var_invalid_block_tag.updateLocalsDict( _python_var_empty_block_tag.updateLocalsDict( _python_var_empty_variable.updateLocalsDict( _python_var_error.updateLocalsDict( _python_var_exit_command.updateLocalsDict( _python_var_enter_command.updateLocalsDict( _python_var_extend_nodelist.updateLocalsDict( _python_var_create_nodelist.updateLocalsDict( _python_var_create_variable_node.updateLocalsDict( _python_var_skip_past.updateLocalsDict( _python_var_parse.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_tokens )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_tokens( _python_str_plain_tokens, _python_par_tokens );
    PyObjectLocalVariable _python_var_lib( _python_str_plain_lib );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_1___init___of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1___init___of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_1___init___of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_ee96c037d227c4f1aa7949e9dfc1b12f, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 235 );
        {
                PyObject *tmp_identifier = _python_var_tokens.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_tokens );
        }
        frame_guard.setLineNumber( 236 );
        SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain_tags );
        frame_guard.setLineNumber( 237 );
        SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain_filters );
        {
            frame_guard.setLineNumber( 238 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _mvar_django__template__base_builtins.asObject0() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 238 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_lib.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 239 );
                {
                    PyObjectTempKeeper1 call1;
                    DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_add_library ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_lib.asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_tokens.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_lib.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1___init___of_class_12_Parser_of_module_django__template__base );
           frame_function_1___init___of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_tokens = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_tokens == key )
            {
                if (unlikely( _python_par_tokens ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'tokens'" );
                    goto error_exit;
                }

                _python_par_tokens = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_tokens, key ) )
            {
                if (unlikely( _python_par_tokens ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'tokens'" );
                    goto error_exit;
                }

                _python_par_tokens = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_tokens != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'tokens'" );
             goto error_exit;
         }

        _python_par_tokens = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1___init___of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_tokens );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_tokens );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_parse_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_parse_until )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_parse_until( _python_str_plain_parse_until, _python_par_parse_until );
    PyObjectLocalVariable _python_var_nodelist( _python_str_plain_nodelist );
    PyObjectLocalVariable _python_var_token( _python_str_plain_token );
    PyObjectLocalVariable _python_var_filter_expression( _python_str_plain_filter_expression );
    PyObjectLocalVariable _python_var_e( _python_str_plain_e );
    PyObjectLocalVariable _python_var_var_node( _python_str_plain_var_node );
    PyObjectLocalVariable _python_var_command( _python_str_plain_command );
    PyObjectLocalVariable _python_var_compile_func( _python_str_plain_compile_func );
    PyObjectLocalVariable _python_var_compiled_result( _python_str_plain_compiled_result );

    // Actual function code.
    static PyFrameObject *frame_function_2_parse_of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2_parse_of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_2_parse_of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_parse_of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2_parse_of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_2_parse_of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_f6f267967c7e41c55fb71dd9892ac8f7, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2_parse_of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2_parse_of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 242 );
        if ( ( _python_var_parse_until.asObject() == Py_None ) )
        {
            _python_var_parse_until.assign1( PyList_New( 0 ) );
        }
        frame_guard.setLineNumber( 244 );
        _python_var_nodelist.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_create_nodelist ) ).asObject() ) );
        frame_guard.setLineNumber( 245 );
        while( true )
        {
            frame_guard.setLineNumber( 245 );
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tokens ) ).asObject() ) )) )
            {
                frame_guard.setLineNumber( 245 );
                break;
            }
            frame_guard.setLineNumber( 246 );
            _python_var_token.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_next_token ) ).asObject() ) );
            frame_guard.setLineNumber( 248 );
            if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_token.asObject(), _python_str_plain_token_type ) ).asObject(), _python_int_0 ) )
            {
                frame_guard.setLineNumber( 249 );
                {
                    PyObjectTempKeeper0 call1;
                    PyObjectTempKeeper1 call3;
                    PyObjectTempKeeper0 call4;
                    PyObjectTempKeeper1 call5;
                    DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extend_nodelist ) ), call4.assign( _python_var_nodelist.asObject() ), call5.assign( ( call1.assign( _mvar_django__template__base_TextNode.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_token.asObject(), _python_str_plain_contents ) ).asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), call5.asObject0(), _python_var_token.asObject() ) ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 250 );
                if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_token.asObject(), _python_str_plain_token_type ) ).asObject(), _python_int_pos_1 ) )
                {
                    frame_guard.setLineNumber( 251 );
                    if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_token.asObject(), _python_str_plain_contents ) ).asObject() ) )) )
                    {
                        frame_guard.setLineNumber( 252 );
                        {
                            PyObjectTempKeeper1 call7;
                            DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_variable ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_token.asObject() ) ) );
                        }
                    }
                    frame_guard.setLineNumber( 253 );
                    try
                    {
                        frame_guard.setLineNumber( 254 );
                        {
                            PyObjectTempKeeper1 call12;
                            _python_var_filter_expression.assign1( ( call12.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_compile_filter ) ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_token.asObject(), _python_str_plain_contents ) ).asObject() ) ) );
                        }
                    }
                    catch ( PythonException &_exception )
                    {
                        if ( !_exception.hasTraceback() )
                        {
                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                        }
                        else
                        {
                            _exception.addTraceback( frame_guard.getFrame0() );
                        }

                        frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                        ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                        _exception.toExceptionHandler();

                        if ( _exception.matches( _mvar_django__template__base_TemplateSyntaxError.asObject0() ) )
                        {
                            frame_guard.detachFrame();
                            _python_var_e.assign0( _exception.getValue() );
                            frame_guard.setLineNumber( 256 );
                            {
                                PyObjectTempKeeper0 call10;
                                PyObjectTempKeeper1 call9;
                                if ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_compile_filter_error ) ), call10.assign( _python_var_token.asObject() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), call10.asObject0(), _python_var_e.asObject() ) ) ).asObject() ) )) )
                            {
                                {
                                    PyTracebackObject *tb = _exception.getTraceback();
                                    frame_guard.setLineNumber( tb->tb_lineno );
                                    _exception.setTraceback( tb->tb_next );
                                    tb->tb_next = NULL;

                                    throw;
                                }
                            }
                            }
                        }
                        else
                        {
                            PyTracebackObject *tb = _exception.getTraceback();
                            frame_guard.setLineNumber( tb->tb_lineno );
                            _exception.setTraceback( tb->tb_next );
                            tb->tb_next = NULL;

                            throw;
                        }
                    }
                    frame_guard.setLineNumber( 258 );
                    {
                        PyObjectTempKeeper1 call14;
                        _python_var_var_node.assign1( ( call14.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_create_variable_node ) ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), _python_var_filter_expression.asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 259 );
                    {
                        PyObjectTempKeeper1 call16;
                        PyObjectTempKeeper0 call17;
                        PyObjectTempKeeper0 call18;
                        DECREASE_REFCOUNT( ( call16.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extend_nodelist ) ), call17.assign( _python_var_nodelist.asObject() ), call18.assign( _python_var_var_node.asObject() ), CALL_FUNCTION_WITH_ARGS( call16.asObject0(), call17.asObject0(), call18.asObject0(), _python_var_token.asObject() ) ) );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 260 );
                    if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_token.asObject(), _python_str_plain_token_type ) ).asObject(), _python_int_pos_2 ) )
                    {
                        frame_guard.setLineNumber( 261 );
                        try
                        {
                            frame_guard.setLineNumber( 262 );
                            _python_var_command.assign1( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_token.asObject(), _python_str_plain_contents ) ).asObject(), _python_str_plain_split ) ).asObject() ) ).asObject(), _python_int_0, 0 ) );
                        }
                        catch ( PythonException &_exception )
                        {
                            if ( !_exception.hasTraceback() )
                            {
                                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                            }
                            else
                            {
                                _exception.addTraceback( frame_guard.getFrame0() );
                            }

                            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                            _exception.toExceptionHandler();

                            if ( _exception.matches( PyExc_IndexError ) )
                            {
                                frame_guard.detachFrame();
                                frame_guard.setLineNumber( 264 );
                                {
                                    PyObjectTempKeeper1 call20;
                                    DECREASE_REFCOUNT( ( call20.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_block_tag ) ), CALL_FUNCTION_WITH_ARGS( call20.asObject0(), _python_var_token.asObject() ) ) );
                                }
                            }
                            else
                            {
                                PyTracebackObject *tb = _exception.getTraceback();
                                frame_guard.setLineNumber( tb->tb_lineno );
                                _exception.setTraceback( tb->tb_next );
                                tb->tb_next = NULL;

                                throw;
                            }
                        }
                        frame_guard.setLineNumber( 265 );
                        {
                            PyObjectTempKeeper0 cmp24;
                            if ( ( cmp24.assign( _python_var_command.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp24.asObject0(), _python_var_parse_until.asObject() ) ) )
                        {
                            frame_guard.setLineNumber( 268 );
                            {
                                PyObjectTempKeeper1 call22;
                                DECREASE_REFCOUNT( ( call22.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_prepend_token ) ), CALL_FUNCTION_WITH_ARGS( call22.asObject0(), _python_var_token.asObject() ) ) );
                            }
                            frame_guard.setLineNumber( 269 );
                            return _python_var_nodelist.asObject1();
                        }
                        }
                        frame_guard.setLineNumber( 272 );
                        {
                            PyObjectTempKeeper1 call26;
                            PyObjectTempKeeper0 call27;
                            DECREASE_REFCOUNT( ( call26.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_enter_command ) ), call27.assign( _python_var_command.asObject() ), CALL_FUNCTION_WITH_ARGS( call26.asObject0(), call27.asObject0(), _python_var_token.asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 273 );
                        try
                        {
                            frame_guard.setLineNumber( 274 );
                            {
                                PyObjectTempKeeper1 subscr33;
                                _python_var_compile_func.assign1( ( subscr33.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tags ) ), LOOKUP_SUBSCRIPT( subscr33.asObject0(), _python_var_command.asObject() ) ) );
                            }
                        }
                        catch ( PythonException &_exception )
                        {
                            if ( !_exception.hasTraceback() )
                            {
                                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                            }
                            else
                            {
                                _exception.addTraceback( frame_guard.getFrame0() );
                            }

                            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                            _exception.toExceptionHandler();

                            if ( _exception.matches( PyExc_KeyError ) )
                            {
                                frame_guard.detachFrame();
                                frame_guard.setLineNumber( 276 );
                                {
                                    PyObjectTempKeeper1 call29;
                                    PyObjectTempKeeper0 call30;
                                    PyObjectTempKeeper0 call31;
                                    DECREASE_REFCOUNT( ( call29.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_invalid_block_tag ) ), call30.assign( _python_var_token.asObject() ), call31.assign( _python_var_command.asObject() ), CALL_FUNCTION_WITH_ARGS( call29.asObject0(), call30.asObject0(), call31.asObject0(), _python_var_parse_until.asObject() ) ) );
                                }
                            }
                            else
                            {
                                PyTracebackObject *tb = _exception.getTraceback();
                                frame_guard.setLineNumber( tb->tb_lineno );
                                _exception.setTraceback( tb->tb_next );
                                tb->tb_next = NULL;

                                throw;
                            }
                        }
                        frame_guard.setLineNumber( 277 );
                        try
                        {
                            frame_guard.setLineNumber( 278 );
                            {
                                PyObjectTempKeeper0 call38;
                                PyObjectTempKeeper0 call39;
                                _python_var_compiled_result.assign1( ( call38.assign( _python_var_compile_func.asObject() ), call39.assign( _python_var_self.asObject() ), CALL_FUNCTION_WITH_ARGS( call38.asObject0(), call39.asObject0(), _python_var_token.asObject() ) ) );
                            }
                        }
                        catch ( PythonException &_exception )
                        {
                            if ( !_exception.hasTraceback() )
                            {
                                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                            }
                            else
                            {
                                _exception.addTraceback( frame_guard.getFrame0() );
                            }

                            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                            _exception.toExceptionHandler();

                            if ( _exception.matches( _mvar_django__template__base_TemplateSyntaxError.asObject0() ) )
                            {
                                frame_guard.detachFrame();
                                _python_var_e.assign0( _exception.getValue() );
                                frame_guard.setLineNumber( 280 );
                                {
                                    PyObjectTempKeeper1 call35;
                                    PyObjectTempKeeper0 call36;
                                    if ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( call35.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_compile_function_error ) ), call36.assign( _python_var_token.asObject() ), CALL_FUNCTION_WITH_ARGS( call35.asObject0(), call36.asObject0(), _python_var_e.asObject() ) ) ).asObject() ) )) )
                                {
                                    {
                                        PyTracebackObject *tb = _exception.getTraceback();
                                        frame_guard.setLineNumber( tb->tb_lineno );
                                        _exception.setTraceback( tb->tb_next );
                                        tb->tb_next = NULL;

                                        throw;
                                    }
                                }
                                }
                            }
                            else
                            {
                                PyTracebackObject *tb = _exception.getTraceback();
                                frame_guard.setLineNumber( tb->tb_lineno );
                                _exception.setTraceback( tb->tb_next );
                                tb->tb_next = NULL;

                                throw;
                            }
                        }
                        frame_guard.setLineNumber( 282 );
                        {
                            PyObjectTempKeeper1 call41;
                            PyObjectTempKeeper0 call42;
                            PyObjectTempKeeper0 call43;
                            DECREASE_REFCOUNT( ( call41.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_extend_nodelist ) ), call42.assign( _python_var_nodelist.asObject() ), call43.assign( _python_var_compiled_result.asObject() ), CALL_FUNCTION_WITH_ARGS( call41.asObject0(), call42.asObject0(), call43.asObject0(), _python_var_token.asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 283 );
                        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_exit_command ) ).asObject() ) );
                    }
                }
            }

           CONSIDER_THREADING();
        }
        frame_guard.setLineNumber( 284 );
        if ( CHECK_IF_TRUE( _python_var_parse_until.asObject() ) )
        {
            frame_guard.setLineNumber( 285 );
            {
                PyObjectTempKeeper1 call45;
                DECREASE_REFCOUNT( ( call45.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_unclosed_block_tag ) ), CALL_FUNCTION_WITH_ARGS( call45.asObject0(), _python_var_parse_until.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 286 );
        return _python_var_nodelist.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_parse_until.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_compiled_result.updateLocalsDict( _python_var_compile_func.updateLocalsDict( _python_var_command.updateLocalsDict( _python_var_var_node.updateLocalsDict( _python_var_e.updateLocalsDict( _python_var_filter_expression.updateLocalsDict( _python_var_token.updateLocalsDict( _python_var_nodelist.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_parse_of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2_parse_of_class_12_Parser_of_module_django__template__base );
           frame_function_2_parse_of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_parse_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_parse_until = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "parse() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "parse() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_parse_until == key )
            {
                if (unlikely( _python_par_parse_until ))
                {
                    PyErr_Format( PyExc_TypeError, "parse() got multiple values for keyword argument 'parse_until'" );
                    goto error_exit;
                }

                _python_par_parse_until = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "parse() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_parse_until, key ) )
            {
                if (unlikely( _python_par_parse_until ))
                {
                    PyErr_Format( PyExc_TypeError, "parse() got multiple values for keyword argument 'parse_until'" );
                    goto error_exit;
                }

                _python_par_parse_until = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "parse() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "parse() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "parse() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "parse() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "parse() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "parse() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "parse() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "parse() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "parse() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "parse() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "parse() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "parse() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "parse() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "parse() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_parse_until != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "parse() got multiple values for keyword argument 'parse_until'" );
             goto error_exit;
         }

        _python_par_parse_until = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_parse_until == NULL )
    {
        _python_par_parse_until = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_parse_until );
    }


    return impl_function_2_parse_of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_parse_until );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_parse_until );

    return NULL;
}

static PyObject *dparse_function_2_parse_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_parse_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_parse_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_skip_past_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_endtag )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_endtag( _python_str_plain_endtag, _python_par_endtag );
    PyObjectLocalVariable _python_var_token( _python_str_plain_token );

    // Actual function code.
    static PyFrameObject *frame_function_3_skip_past_of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_3_skip_past_of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_3_skip_past_of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_skip_past_of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_3_skip_past_of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_3_skip_past_of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_18cdaec9fcfb5b14e80902ad43bfe9c3, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_3_skip_past_of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_3_skip_past_of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 289 );
        while( true )
        {
            frame_guard.setLineNumber( 289 );
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tokens ) ).asObject() ) )) )
            {
                frame_guard.setLineNumber( 289 );
                break;
            }
            frame_guard.setLineNumber( 290 );
            _python_var_token.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_next_token ) ).asObject() ) );
            frame_guard.setLineNumber( 291 );
            {
                PyObjectTempKeeper1 cmp1;
                PyObjectTempKeeper1 cmp3;
                if ( ( ( cmp1.assign( LOOKUP_ATTRIBUTE( _python_var_token.asObject(), _python_str_plain_token_type ) ), RICH_COMPARE_BOOL_EQ( cmp1.asObject0(), _mvar_django__template__base_TOKEN_BLOCK.asObject0() ) ) && ( cmp3.assign( LOOKUP_ATTRIBUTE( _python_var_token.asObject(), _python_str_plain_contents ) ), RICH_COMPARE_BOOL_EQ( cmp3.asObject0(), _python_var_endtag.asObject() ) ) ) )
            {
                return INCREASE_REFCOUNT( Py_None );
            }
            }

           CONSIDER_THREADING();
        }
        frame_guard.setLineNumber( 293 );
        {
            PyObjectTempKeeper1 call5;
            DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_unclosed_block_tag ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( MAKE_LIST1( _python_var_endtag.asObject1() ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_endtag.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_token.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_skip_past_of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_3_skip_past_of_class_12_Parser_of_module_django__template__base );
           frame_function_3_skip_past_of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_3_skip_past_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_endtag = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "skip_past() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "skip_past() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_endtag == key )
            {
                if (unlikely( _python_par_endtag ))
                {
                    PyErr_Format( PyExc_TypeError, "skip_past() got multiple values for keyword argument 'endtag'" );
                    goto error_exit;
                }

                _python_par_endtag = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "skip_past() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_endtag, key ) )
            {
                if (unlikely( _python_par_endtag ))
                {
                    PyErr_Format( PyExc_TypeError, "skip_past() got multiple values for keyword argument 'endtag'" );
                    goto error_exit;
                }

                _python_par_endtag = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "skip_past() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "skip_past() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "skip_past() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "skip_past() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "skip_past() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "skip_past() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "skip_past() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "skip_past() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "skip_past() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "skip_past() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "skip_past() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "skip_past() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "skip_past() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "skip_past() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_endtag != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "skip_past() got multiple values for keyword argument 'endtag'" );
             goto error_exit;
         }

        _python_par_endtag = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_skip_past_of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_endtag );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_endtag );

    return NULL;
}

static PyObject *dparse_function_3_skip_past_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_skip_past_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_skip_past_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_filter_expression )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_filter_expression( _python_str_plain_filter_expression, _python_par_filter_expression );

    // Actual function code.
    static PyFrameObject *frame_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_d4f5eec881a6e23e4d7f3fd776472d08, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 296 );
        {
            PyObjectTempKeeper0 call1;
            return ( call1.assign( _mvar_django__template__base_VariableNode.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_filter_expression.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_filter_expression.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base );
           frame_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_filter_expression = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "create_variable_node() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "create_variable_node() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_filter_expression == key )
            {
                if (unlikely( _python_par_filter_expression ))
                {
                    PyErr_Format( PyExc_TypeError, "create_variable_node() got multiple values for keyword argument 'filter_expression'" );
                    goto error_exit;
                }

                _python_par_filter_expression = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "create_variable_node() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_filter_expression, key ) )
            {
                if (unlikely( _python_par_filter_expression ))
                {
                    PyErr_Format( PyExc_TypeError, "create_variable_node() got multiple values for keyword argument 'filter_expression'" );
                    goto error_exit;
                }

                _python_par_filter_expression = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "create_variable_node() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "create_variable_node() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "create_variable_node() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "create_variable_node() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "create_variable_node() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "create_variable_node() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "create_variable_node() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "create_variable_node() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "create_variable_node() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "create_variable_node() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "create_variable_node() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "create_variable_node() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "create_variable_node() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "create_variable_node() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_filter_expression != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "create_variable_node() got multiple values for keyword argument 'filter_expression'" );
             goto error_exit;
         }

        _python_par_filter_expression = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_filter_expression );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_filter_expression );

    return NULL;
}

static PyObject *dparse_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_6504f2eac249bf1c944b231523f94de9, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 299 );
        return CALL_FUNCTION_NO_ARGS( _mvar_django__template__base_NodeList.asObject0() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base );
           frame_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "create_nodelist() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "create_nodelist() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "create_nodelist() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "create_nodelist() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "create_nodelist() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "create_nodelist() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "create_nodelist() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "create_nodelist() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "create_nodelist() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "create_nodelist() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "create_nodelist() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "create_nodelist() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "create_nodelist() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "create_nodelist() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "create_nodelist() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "create_nodelist() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "create_nodelist() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_nodelist, PyObject *_python_par_node, PyObject *_python_par_token )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_nodelist( _python_str_plain_nodelist, _python_par_nodelist );
    PyObjectLocalParameterVariableNoDel _python_var_node( _python_str_plain_node, _python_par_node );
    PyObjectLocalParameterVariableNoDel _python_var_token( _python_str_plain_token, _python_par_token );

    // Actual function code.
    static PyFrameObject *frame_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_782478ca969a2660121bb11155e7deb9, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 302 );
        if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_node.asObject(), _python_str_plain_must_be_first ) ).asObject() ) && CHECK_IF_TRUE( _python_var_nodelist.asObject() ) ) )
        {
            frame_guard.setLineNumber( 303 );
            try
            {
                frame_guard.setLineNumber( 304 );
                if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_nodelist.asObject(), _python_str_plain_contains_nontext ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 305 );
                    RAISE_EXCEPTION_WITH_TYPE( PyExc_AttributeError, PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
            }
            catch ( PythonException &_exception )
            {
                if ( !_exception.hasTraceback() )
                {
                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                }
                else
                {
                    _exception.addTraceback( frame_guard.getFrame0() );
                }

                frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                _exception.toExceptionHandler();

                if ( _exception.matches( PyExc_AttributeError ) )
                {
                    frame_guard.detachFrame();
                    frame_guard.setLineNumber( 307 );
                    {
                        PyObjectTempKeeper0 call1;
                        {
                            PyObjectTemporary tmp_exception_type( ( call1.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_3c9528571de4ac63b9346a47479caa3a, _python_var_node.asObject() ) ).asObject() ) ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
                else
                {
                    PyTracebackObject *tb = _exception.getTraceback();
                    frame_guard.setLineNumber( tb->tb_lineno );
                    _exception.setTraceback( tb->tb_next );
                    tb->tb_next = NULL;

                    throw;
                }
            }
        }
        frame_guard.setLineNumber( 309 );
        {
            PyObjectTempKeeper0 isinstance3;
            PyObjectTempKeeper0 isinstance5;
            if ( ( ( isinstance3.assign( _python_var_nodelist.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance3.asObject0(), _mvar_django__template__base_NodeList.asObject0() ) ) && (!( ( isinstance5.assign( _python_var_node.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance5.asObject0(), _mvar_django__template__base_TextNode.asObject0() ) ) )) ) )
        {
            frame_guard.setLineNumber( 310 );
            SET_ATTRIBUTE( Py_True, _python_var_nodelist.asObject(), _python_str_plain_contains_nontext );
        }
        }
        frame_guard.setLineNumber( 311 );
        {
            PyObjectTempKeeper1 call7;
            DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_nodelist.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_node.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_token.updateLocalsDict( _python_var_node.updateLocalsDict( _python_var_nodelist.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base );
           frame_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_nodelist = NULL;
    PyObject *_python_par_node = NULL;
    PyObject *_python_par_token = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "extend_nodelist() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "extend_nodelist() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_nodelist == key )
            {
                if (unlikely( _python_par_nodelist ))
                {
                    PyErr_Format( PyExc_TypeError, "extend_nodelist() got multiple values for keyword argument 'nodelist'" );
                    goto error_exit;
                }

                _python_par_nodelist = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_node == key )
            {
                if (unlikely( _python_par_node ))
                {
                    PyErr_Format( PyExc_TypeError, "extend_nodelist() got multiple values for keyword argument 'node'" );
                    goto error_exit;
                }

                _python_par_node = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_token == key )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "extend_nodelist() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "extend_nodelist() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_nodelist, key ) )
            {
                if (unlikely( _python_par_nodelist ))
                {
                    PyErr_Format( PyExc_TypeError, "extend_nodelist() got multiple values for keyword argument 'nodelist'" );
                    goto error_exit;
                }

                _python_par_nodelist = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_node, key ) )
            {
                if (unlikely( _python_par_node ))
                {
                    PyErr_Format( PyExc_TypeError, "extend_nodelist() got multiple values for keyword argument 'node'" );
                    goto error_exit;
                }

                _python_par_node = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_token, key ) )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "extend_nodelist() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "extend_nodelist() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "extend_nodelist() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "extend_nodelist() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "extend_nodelist() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "extend_nodelist() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "extend_nodelist() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "extend_nodelist() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "extend_nodelist() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "extend_nodelist() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "extend_nodelist() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "extend_nodelist() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "extend_nodelist() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "extend_nodelist() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "extend_nodelist() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_nodelist != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "extend_nodelist() got multiple values for keyword argument 'nodelist'" );
             goto error_exit;
         }

        _python_par_nodelist = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_node != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "extend_nodelist() got multiple values for keyword argument 'node'" );
             goto error_exit;
         }

        _python_par_node = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_token != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "extend_nodelist() got multiple values for keyword argument 'token'" );
             goto error_exit;
         }

        _python_par_token = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_nodelist, _python_par_node, _python_par_token );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_nodelist );
    Py_XDECREF( _python_par_node );
    Py_XDECREF( _python_par_token );

    return NULL;
}

static PyObject *dparse_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_enter_command_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_command, PyObject *_python_par_token )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_command( _python_str_plain_command, _python_par_command );
    PyObjectLocalParameterVariableNoDel _python_var_token( _python_str_plain_token, _python_par_token );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_7_enter_command_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_command = NULL;
    PyObject *_python_par_token = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "enter_command() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "enter_command() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_command == key )
            {
                if (unlikely( _python_par_command ))
                {
                    PyErr_Format( PyExc_TypeError, "enter_command() got multiple values for keyword argument 'command'" );
                    goto error_exit;
                }

                _python_par_command = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_token == key )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "enter_command() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "enter_command() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_command, key ) )
            {
                if (unlikely( _python_par_command ))
                {
                    PyErr_Format( PyExc_TypeError, "enter_command() got multiple values for keyword argument 'command'" );
                    goto error_exit;
                }

                _python_par_command = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_token, key ) )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "enter_command() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "enter_command() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "enter_command() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "enter_command() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "enter_command() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "enter_command() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "enter_command() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "enter_command() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "enter_command() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "enter_command() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "enter_command() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "enter_command() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "enter_command() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "enter_command() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "enter_command() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_command != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "enter_command() got multiple values for keyword argument 'command'" );
             goto error_exit;
         }

        _python_par_command = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_token != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "enter_command() got multiple values for keyword argument 'token'" );
             goto error_exit;
         }

        _python_par_token = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_7_enter_command_of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_command, _python_par_token );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_command );
    Py_XDECREF( _python_par_token );

    return NULL;
}

static PyObject *dparse_function_7_enter_command_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_7_enter_command_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_enter_command_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_exit_command_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_8_exit_command_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "exit_command() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "exit_command() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "exit_command() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "exit_command() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "exit_command() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "exit_command() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "exit_command() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "exit_command() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "exit_command() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "exit_command() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "exit_command() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "exit_command() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "exit_command() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "exit_command() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "exit_command() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "exit_command() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "exit_command() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_8_exit_command_of_class_12_Parser_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_8_exit_command_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_8_exit_command_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_exit_command_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9_error_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_token, PyObject *_python_par_msg )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_token( _python_str_plain_token, _python_par_token );
    PyObjectLocalParameterVariableNoDel _python_var_msg( _python_str_plain_msg, _python_par_msg );

    // Actual function code.
    static PyFrameObject *frame_function_9_error_of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_9_error_of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_9_error_of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9_error_of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_9_error_of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_9_error_of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_660b24ced8130d2abcd217aa896cfab3, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_9_error_of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_9_error_of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 320 );
        {
            PyObjectTempKeeper0 call1;
            return ( call1.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_msg.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_msg.updateLocalsDict( _python_var_token.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_9_error_of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_9_error_of_class_12_Parser_of_module_django__template__base );
           frame_function_9_error_of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_9_error_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_token = NULL;
    PyObject *_python_par_msg = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "error() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "error() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_token == key )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "error() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_msg == key )
            {
                if (unlikely( _python_par_msg ))
                {
                    PyErr_Format( PyExc_TypeError, "error() got multiple values for keyword argument 'msg'" );
                    goto error_exit;
                }

                _python_par_msg = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "error() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_token, key ) )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "error() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_msg, key ) )
            {
                if (unlikely( _python_par_msg ))
                {
                    PyErr_Format( PyExc_TypeError, "error() got multiple values for keyword argument 'msg'" );
                    goto error_exit;
                }

                _python_par_msg = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "error() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "error() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "error() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "error() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "error() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "error() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "error() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "error() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "error() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "error() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "error() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "error() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "error() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "error() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_token != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "error() got multiple values for keyword argument 'token'" );
             goto error_exit;
         }

        _python_par_token = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_msg != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "error() got multiple values for keyword argument 'msg'" );
             goto error_exit;
         }

        _python_par_msg = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_9_error_of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_token, _python_par_msg );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_token );
    Py_XDECREF( _python_par_msg );

    return NULL;
}

static PyObject *dparse_function_9_error_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_9_error_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9_error_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_token )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_token( _python_str_plain_token, _python_par_token );

    // Actual function code.
    static PyFrameObject *frame_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_10_empty_variable_of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_6361a73bd188e0370494dfad4ec55a07, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 323 );
        {
            PyObjectTempKeeper1 call1;
            {
                PyObjectTemporary tmp_exception_type( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_token.asObject(), _python_unicode_digest_94957bd37909715914cd37b83f106ea6 ) ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_token.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base );
           frame_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_token = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "empty_variable() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "empty_variable() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_token == key )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "empty_variable() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "empty_variable() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_token, key ) )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "empty_variable() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "empty_variable() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "empty_variable() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "empty_variable() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "empty_variable() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "empty_variable() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "empty_variable() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "empty_variable() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "empty_variable() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "empty_variable() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "empty_variable() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "empty_variable() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "empty_variable() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "empty_variable() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "empty_variable() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_token != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "empty_variable() got multiple values for keyword argument 'token'" );
             goto error_exit;
         }

        _python_par_token = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_token );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_token );

    return NULL;
}

static PyObject *dparse_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_token )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_token( _python_str_plain_token, _python_par_token );

    // Actual function code.
    static PyFrameObject *frame_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_5c772f0b98badb924a7dec5a346ee584, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 326 );
        {
            PyObjectTempKeeper1 call1;
            {
                PyObjectTemporary tmp_exception_type( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_token.asObject(), _python_unicode_digest_a6e5cbfe2b7a1b31b4cab78092171316 ) ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_token.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base );
           frame_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_token = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "empty_block_tag() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "empty_block_tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_token == key )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "empty_block_tag() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "empty_block_tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_token, key ) )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "empty_block_tag() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "empty_block_tag() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "empty_block_tag() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "empty_block_tag() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "empty_block_tag() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "empty_block_tag() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "empty_block_tag() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "empty_block_tag() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "empty_block_tag() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "empty_block_tag() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "empty_block_tag() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "empty_block_tag() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "empty_block_tag() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "empty_block_tag() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "empty_block_tag() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_token != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "empty_block_tag() got multiple values for keyword argument 'token'" );
             goto error_exit;
         }

        _python_par_token = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_token );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_token );

    return NULL;
}

static PyObject *dparse_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_token, PyObject *_python_par_command, PyObject *_python_par_parse_until )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_token( _python_str_plain_token, _python_par_token );
    PyObjectLocalParameterVariableNoDel _python_var_command( _python_str_plain_command, _python_par_command );
    PyObjectLocalParameterVariableNoDel _python_var_parse_until( _python_str_plain_parse_until, _python_par_parse_until );
    PyObjectLocalVariable _python_var_p( _python_str_plain_p );

    // Actual function code.
    static PyFrameObject *frame_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_489d4f9a731868c41781971cd3833bea, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 329 );
        if ( CHECK_IF_TRUE( _python_var_parse_until.asObject() ) )
        {
            frame_guard.setLineNumber( 330 );
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper1 call5;
                PyObjectTempKeeper0 call6;
                PyObjectTempKeeper0 make_tuple3;
                {
                    PyObjectTemporary tmp_exception_type( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error ) ), call6.assign( _python_var_token.asObject() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), call6.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_6d30fe26f9f246925bd3ed413931e3fc, PyObjectTemporary( ( make_tuple3.assign( _python_var_command.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), PyObjectTemporary( ( call1.assign( _mvar_django__template__base_get_text_list.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( impl_listcontr_1_of_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base( MAKE_ITERATOR( _python_var_parse_until.asObject() ), _python_var_p ) ).asObject() ) ) ).asObject() ) ) ).asObject() ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 332 );
        {
            PyObjectTempKeeper1 call8;
            PyObjectTempKeeper0 call9;
            {
                PyObjectTemporary tmp_exception_type( ( call8.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error ) ), call9.assign( _python_var_token.asObject() ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), call9.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_96ed173f574f811e0d92e4690e3272ae, _python_var_command.asObject() ) ).asObject() ) ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_parse_until.updateLocalsDict( _python_var_command.updateLocalsDict( _python_var_token.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_p.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base );
           frame_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_token = NULL;
    PyObject *_python_par_command = NULL;
    PyObject *_python_par_parse_until = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "invalid_block_tag() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "invalid_block_tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_token == key )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "invalid_block_tag() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_command == key )
            {
                if (unlikely( _python_par_command ))
                {
                    PyErr_Format( PyExc_TypeError, "invalid_block_tag() got multiple values for keyword argument 'command'" );
                    goto error_exit;
                }

                _python_par_command = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_parse_until == key )
            {
                if (unlikely( _python_par_parse_until ))
                {
                    PyErr_Format( PyExc_TypeError, "invalid_block_tag() got multiple values for keyword argument 'parse_until'" );
                    goto error_exit;
                }

                _python_par_parse_until = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "invalid_block_tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_token, key ) )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "invalid_block_tag() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_command, key ) )
            {
                if (unlikely( _python_par_command ))
                {
                    PyErr_Format( PyExc_TypeError, "invalid_block_tag() got multiple values for keyword argument 'command'" );
                    goto error_exit;
                }

                _python_par_command = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_parse_until, key ) )
            {
                if (unlikely( _python_par_parse_until ))
                {
                    PyErr_Format( PyExc_TypeError, "invalid_block_tag() got multiple values for keyword argument 'parse_until'" );
                    goto error_exit;
                }

                _python_par_parse_until = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "invalid_block_tag() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "invalid_block_tag() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "invalid_block_tag() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "invalid_block_tag() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "invalid_block_tag() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "invalid_block_tag() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "invalid_block_tag() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "invalid_block_tag() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "invalid_block_tag() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "invalid_block_tag() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "invalid_block_tag() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "invalid_block_tag() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "invalid_block_tag() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "invalid_block_tag() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_token != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "invalid_block_tag() got multiple values for keyword argument 'token'" );
             goto error_exit;
         }

        _python_par_token = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_command != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "invalid_block_tag() got multiple values for keyword argument 'command'" );
             goto error_exit;
         }

        _python_par_command = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_parse_until != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "invalid_block_tag() got multiple values for keyword argument 'parse_until'" );
             goto error_exit;
         }

        _python_par_parse_until = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_parse_until == NULL )
    {
        _python_par_parse_until = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_parse_until );
    }


    return impl_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_token, _python_par_command, _python_par_parse_until );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_token );
    Py_XDECREF( _python_par_command );
    Py_XDECREF( _python_par_parse_until );

    return NULL;
}

static PyObject *dparse_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_p )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 331 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 331 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_p.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_eee7b0934fe224b34ba6722d84ccd2bf, python_closure_p.asObject() ) ).asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_parse_until )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_parse_until( _python_str_plain_parse_until, _python_par_parse_until );

    // Actual function code.
    static PyFrameObject *frame_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_951a3960eb8a72e588642f603273bbd3, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 335 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call3;
            {
                PyObjectTemporary tmp_exception_type( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), Py_None, PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_8187f4c87d92eb8a2353bb73395fdf5a, PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_unicode_digest_fc763cb31e9938f37737394681228f83, _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_parse_until.asObject() ) ) ).asObject() ) ).asObject() ) ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_parse_until.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base );
           frame_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_parse_until = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "unclosed_block_tag() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "unclosed_block_tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_parse_until == key )
            {
                if (unlikely( _python_par_parse_until ))
                {
                    PyErr_Format( PyExc_TypeError, "unclosed_block_tag() got multiple values for keyword argument 'parse_until'" );
                    goto error_exit;
                }

                _python_par_parse_until = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "unclosed_block_tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_parse_until, key ) )
            {
                if (unlikely( _python_par_parse_until ))
                {
                    PyErr_Format( PyExc_TypeError, "unclosed_block_tag() got multiple values for keyword argument 'parse_until'" );
                    goto error_exit;
                }

                _python_par_parse_until = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "unclosed_block_tag() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "unclosed_block_tag() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "unclosed_block_tag() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "unclosed_block_tag() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "unclosed_block_tag() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "unclosed_block_tag() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "unclosed_block_tag() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "unclosed_block_tag() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "unclosed_block_tag() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "unclosed_block_tag() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "unclosed_block_tag() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "unclosed_block_tag() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "unclosed_block_tag() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "unclosed_block_tag() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_parse_until != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "unclosed_block_tag() got multiple values for keyword argument 'parse_until'" );
             goto error_exit;
         }

        _python_par_parse_until = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_parse_until );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_parse_until );

    return NULL;
}

static PyObject *dparse_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_14_compile_filter_error_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_token, PyObject *_python_par_e )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_token( _python_str_plain_token, _python_par_token );
    PyObjectLocalParameterVariableNoDel _python_var_e( _python_str_plain_e, _python_par_e );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_14_compile_filter_error_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_token = NULL;
    PyObject *_python_par_e = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "compile_filter_error() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_filter_error() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_token == key )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_filter_error() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_e == key )
            {
                if (unlikely( _python_par_e ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_filter_error() got multiple values for keyword argument 'e'" );
                    goto error_exit;
                }

                _python_par_e = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_filter_error() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_token, key ) )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_filter_error() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_e, key ) )
            {
                if (unlikely( _python_par_e ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_filter_error() got multiple values for keyword argument 'e'" );
                    goto error_exit;
                }

                _python_par_e = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "compile_filter_error() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "compile_filter_error() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "compile_filter_error() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "compile_filter_error() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "compile_filter_error() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "compile_filter_error() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "compile_filter_error() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "compile_filter_error() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "compile_filter_error() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "compile_filter_error() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "compile_filter_error() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "compile_filter_error() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "compile_filter_error() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "compile_filter_error() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_token != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "compile_filter_error() got multiple values for keyword argument 'token'" );
             goto error_exit;
         }

        _python_par_token = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_e != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "compile_filter_error() got multiple values for keyword argument 'e'" );
             goto error_exit;
         }

        _python_par_e = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_14_compile_filter_error_of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_token, _python_par_e );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_token );
    Py_XDECREF( _python_par_e );

    return NULL;
}

static PyObject *dparse_function_14_compile_filter_error_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_14_compile_filter_error_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_14_compile_filter_error_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_15_compile_function_error_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_token, PyObject *_python_par_e )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_token( _python_str_plain_token, _python_par_token );
    PyObjectLocalParameterVariableNoDel _python_var_e( _python_str_plain_e, _python_par_e );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_15_compile_function_error_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_token = NULL;
    PyObject *_python_par_e = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "compile_function_error() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_function_error() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_token == key )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_function_error() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_e == key )
            {
                if (unlikely( _python_par_e ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_function_error() got multiple values for keyword argument 'e'" );
                    goto error_exit;
                }

                _python_par_e = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_function_error() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_token, key ) )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_function_error() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_e, key ) )
            {
                if (unlikely( _python_par_e ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_function_error() got multiple values for keyword argument 'e'" );
                    goto error_exit;
                }

                _python_par_e = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "compile_function_error() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "compile_function_error() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "compile_function_error() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "compile_function_error() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "compile_function_error() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "compile_function_error() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "compile_function_error() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "compile_function_error() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "compile_function_error() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "compile_function_error() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "compile_function_error() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "compile_function_error() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "compile_function_error() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "compile_function_error() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_token != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "compile_function_error() got multiple values for keyword argument 'token'" );
             goto error_exit;
         }

        _python_par_token = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_e != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "compile_function_error() got multiple values for keyword argument 'e'" );
             goto error_exit;
         }

        _python_par_e = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_15_compile_function_error_of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_token, _python_par_e );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_token );
    Py_XDECREF( _python_par_e );

    return NULL;
}

static PyObject *dparse_function_15_compile_function_error_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_15_compile_function_error_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_15_compile_function_error_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_16_next_token_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_16_next_token_of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_16_next_token_of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_16_next_token_of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_16_next_token_of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_16_next_token_of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_16_next_token_of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_844d8dfba2430a0c852f1651deddc3ca, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_16_next_token_of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_16_next_token_of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 344 );
        return CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tokens ) ).asObject(), _python_str_plain_pop ) ).asObject(), _python_int_0 );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_16_next_token_of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_16_next_token_of_class_12_Parser_of_module_django__template__base );
           frame_function_16_next_token_of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_16_next_token_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "next_token() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "next_token() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "next_token() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "next_token() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "next_token() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "next_token() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "next_token() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "next_token() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "next_token() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "next_token() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "next_token() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "next_token() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "next_token() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "next_token() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "next_token() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "next_token() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "next_token() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_16_next_token_of_class_12_Parser_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_16_next_token_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_16_next_token_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_16_next_token_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_token )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_token( _python_str_plain_token, _python_par_token );

    // Actual function code.
    static PyFrameObject *frame_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_17_prepend_token_of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_a08e2fa3e26011c0b762ff2033b88a45, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 347 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tokens ) ).asObject(), _python_str_plain_insert ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_int_0, _python_var_token.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_token.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base );
           frame_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_token = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "prepend_token() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "prepend_token() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_token == key )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "prepend_token() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "prepend_token() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_token, key ) )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "prepend_token() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "prepend_token() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "prepend_token() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "prepend_token() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "prepend_token() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "prepend_token() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "prepend_token() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "prepend_token() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "prepend_token() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "prepend_token() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "prepend_token() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "prepend_token() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "prepend_token() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "prepend_token() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prepend_token() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_token != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prepend_token() got multiple values for keyword argument 'token'" );
             goto error_exit;
         }

        _python_par_token = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_token );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_token );

    return NULL;
}

static PyObject *dparse_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_814f13f0a83edc683213a3888049cdcc, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 350 );
        DEL_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tokens ) ).asObject(), _python_int_0 );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base );
           frame_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "delete_first_token() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "delete_first_token() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "delete_first_token() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "delete_first_token() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "delete_first_token() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "delete_first_token() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "delete_first_token() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "delete_first_token() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "delete_first_token() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "delete_first_token() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "delete_first_token() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "delete_first_token() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "delete_first_token() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "delete_first_token() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "delete_first_token() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "delete_first_token() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "delete_first_token() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_19_add_library_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_lib )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_lib( _python_str_plain_lib, _python_par_lib );

    // Actual function code.
    static PyFrameObject *frame_function_19_add_library_of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_19_add_library_of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_19_add_library_of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_19_add_library_of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_19_add_library_of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_19_add_library_of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_db7b66dda1668d84716ff6366bb0d766, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_19_add_library_of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_19_add_library_of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 353 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tags ) ).asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_lib.asObject(), _python_str_plain_tags ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 354 );
        {
            PyObjectTempKeeper1 call3;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_filters ) ).asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_lib.asObject(), _python_str_plain_filters ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_lib.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_19_add_library_of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_19_add_library_of_class_12_Parser_of_module_django__template__base );
           frame_function_19_add_library_of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_19_add_library_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_lib = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_library() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_library() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_lib == key )
            {
                if (unlikely( _python_par_lib ))
                {
                    PyErr_Format( PyExc_TypeError, "add_library() got multiple values for keyword argument 'lib'" );
                    goto error_exit;
                }

                _python_par_lib = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_library() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_lib, key ) )
            {
                if (unlikely( _python_par_lib ))
                {
                    PyErr_Format( PyExc_TypeError, "add_library() got multiple values for keyword argument 'lib'" );
                    goto error_exit;
                }

                _python_par_lib = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_library() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_library() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_library() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_library() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_library() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_library() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_library() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_library() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_library() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_library() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_library() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "add_library() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_library() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_library() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_lib != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_library() got multiple values for keyword argument 'lib'" );
             goto error_exit;
         }

        _python_par_lib = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_19_add_library_of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_lib );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_lib );

    return NULL;
}

static PyObject *dparse_function_19_add_library_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_19_add_library_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_19_add_library_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_token )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_token( _python_str_plain_token, _python_par_token );

    // Actual function code.
    static PyFrameObject *frame_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_20_compile_filter_of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_f266bc7f070561b0975dc51d16a5fca5, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 360 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            return ( call1.assign( _mvar_django__template__base_FilterExpression.asObject0() ), call2.assign( _python_var_token.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_self.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_token.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base );
           frame_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_token = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "compile_filter() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_filter() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_token == key )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_filter() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_filter() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_token, key ) )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_filter() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "compile_filter() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "compile_filter() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "compile_filter() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "compile_filter() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "compile_filter() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "compile_filter() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "compile_filter() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "compile_filter() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "compile_filter() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "compile_filter() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "compile_filter() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "compile_filter() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "compile_filter() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "compile_filter() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_token != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "compile_filter() got multiple values for keyword argument 'token'" );
             goto error_exit;
         }

        _python_par_token = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_token );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_token );

    return NULL;
}

static PyObject *dparse_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_21_find_filter_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_filter_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_filter_name( _python_str_plain_filter_name, _python_par_filter_name );

    // Actual function code.
    static PyFrameObject *frame_function_21_find_filter_of_class_12_Parser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_21_find_filter_of_class_12_Parser_of_module_django__template__base ) )
    {
        if ( frame_function_21_find_filter_of_class_12_Parser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_21_find_filter_of_class_12_Parser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_21_find_filter_of_class_12_Parser_of_module_django__template__base );
        }

        frame_function_21_find_filter_of_class_12_Parser_of_module_django__template__base = MAKE_FRAME( _codeobj_404dd39c4b292013f16a3d0b51fb70e5, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_21_find_filter_of_class_12_Parser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_21_find_filter_of_class_12_Parser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 363 );
        {
            PyObjectTempKeeper0 cmp5;
            if ( ( cmp5.assign( _python_var_filter_name.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_filters ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 364 );
            {
                PyObjectTempKeeper1 subscr1;
                return ( subscr1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_filters ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), _python_var_filter_name.asObject() ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 366 );
            {
                PyObjectTempKeeper0 call3;
                {
                    PyObjectTemporary tmp_exception_type( ( call3.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_13d0076a4a9e232ed07e4b91bf6a0f34, _python_var_filter_name.asObject() ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_filter_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_21_find_filter_of_class_12_Parser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_21_find_filter_of_class_12_Parser_of_module_django__template__base );
           frame_function_21_find_filter_of_class_12_Parser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_21_find_filter_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_filter_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "find_filter() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "find_filter() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_filter_name == key )
            {
                if (unlikely( _python_par_filter_name ))
                {
                    PyErr_Format( PyExc_TypeError, "find_filter() got multiple values for keyword argument 'filter_name'" );
                    goto error_exit;
                }

                _python_par_filter_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "find_filter() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_filter_name, key ) )
            {
                if (unlikely( _python_par_filter_name ))
                {
                    PyErr_Format( PyExc_TypeError, "find_filter() got multiple values for keyword argument 'filter_name'" );
                    goto error_exit;
                }

                _python_par_filter_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "find_filter() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "find_filter() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "find_filter() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "find_filter() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "find_filter() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "find_filter() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "find_filter() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "find_filter() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "find_filter() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "find_filter() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "find_filter() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "find_filter() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "find_filter() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "find_filter() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_filter_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "find_filter() got multiple values for keyword argument 'filter_name'" );
             goto error_exit;
         }

        _python_par_filter_name = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_21_find_filter_of_class_12_Parser_of_module_django__template__base( self, _python_par_self, _python_par_filter_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_filter_name );

    return NULL;
}

static PyObject *dparse_function_21_find_filter_of_class_12_Parser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_21_find_filter_of_class_12_Parser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_21_find_filter_of_class_12_Parser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_13_TokenParser_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_top( _python_str_plain_top );
    PyObjectLocalVariable _python_var_more( _python_str_plain_more );
    PyObjectLocalVariable _python_var_back( _python_str_plain_back );
    PyObjectLocalVariable _python_var_tag( _python_str_plain_tag );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var___doc__.assign0( _python_unicode_digest_00366cecfefe7c5a76dfea12f5742ccb );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_13_TokenParser_of_module_django__template__base(  ) );
    _python_var_top.assign1( MAKE_FUNCTION_function_2_top_of_class_13_TokenParser_of_module_django__template__base(  ) );
    _python_var_more.assign1( MAKE_FUNCTION_function_3_more_of_class_13_TokenParser_of_module_django__template__base(  ) );
    _python_var_back.assign1( MAKE_FUNCTION_function_4_back_of_class_13_TokenParser_of_module_django__template__base(  ) );
    _python_var_tag.assign1( MAKE_FUNCTION_function_5_tag_of_class_13_TokenParser_of_module_django__template__base(  ) );
    _python_var_value.assign1( MAKE_FUNCTION_function_6_value_of_class_13_TokenParser_of_module_django__template__base(  ) );
    return _python_var_value.updateLocalsDict( _python_var_tag.updateLocalsDict( _python_var_back.updateLocalsDict( _python_var_more.updateLocalsDict( _python_var_top.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_subject )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_subject( _python_str_plain_subject, _python_par_subject );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_13_TokenParser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_13_TokenParser_of_module_django__template__base ) )
    {
        if ( frame_function_1___init___of_class_13_TokenParser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_13_TokenParser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1___init___of_class_13_TokenParser_of_module_django__template__base );
        }

        frame_function_1___init___of_class_13_TokenParser_of_module_django__template__base = MAKE_FRAME( _codeobj_7fc5a166b6676149b0a74e3033bbab3d, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_13_TokenParser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_13_TokenParser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 378 );
        {
                PyObject *tmp_identifier = _python_var_subject.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_subject );
        }
        frame_guard.setLineNumber( 379 );
        SET_ATTRIBUTE( _python_int_0, _python_var_self.asObject(), _python_str_plain_pointer );
        frame_guard.setLineNumber( 380 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_backout );
        frame_guard.setLineNumber( 381 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tag ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_tagname );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_subject.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_13_TokenParser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1___init___of_class_13_TokenParser_of_module_django__template__base );
           frame_function_1___init___of_class_13_TokenParser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_subject = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_subject == key )
            {
                if (unlikely( _python_par_subject ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'subject'" );
                    goto error_exit;
                }

                _python_par_subject = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_subject, key ) )
            {
                if (unlikely( _python_par_subject ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'subject'" );
                    goto error_exit;
                }

                _python_par_subject = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_subject != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'subject'" );
             goto error_exit;
         }

        _python_par_subject = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1___init___of_class_13_TokenParser_of_module_django__template__base( self, _python_par_self, _python_par_subject );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_subject );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_13_TokenParser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_13_TokenParser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_top_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2_top_of_class_13_TokenParser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2_top_of_class_13_TokenParser_of_module_django__template__base ) )
    {
        if ( frame_function_2_top_of_class_13_TokenParser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_top_of_class_13_TokenParser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2_top_of_class_13_TokenParser_of_module_django__template__base );
        }

        frame_function_2_top_of_class_13_TokenParser_of_module_django__template__base = MAKE_FRAME( _codeobj_35bd5679e556b72e556adfbec9f644ab, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2_top_of_class_13_TokenParser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2_top_of_class_13_TokenParser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 387 );
        {
                PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_NotImplementedError, _python_tuple_empty ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2_top_of_class_13_TokenParser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2_top_of_class_13_TokenParser_of_module_django__template__base );
           frame_function_2_top_of_class_13_TokenParser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_top_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "top() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "top() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "top() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "top() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "top() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "top() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "top() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "top() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "top() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "top() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "top() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "top() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "top() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "top() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "top() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "top() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "top() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_top_of_class_13_TokenParser_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_top_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_top_of_class_13_TokenParser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_top_of_class_13_TokenParser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_more_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3_more_of_class_13_TokenParser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_3_more_of_class_13_TokenParser_of_module_django__template__base ) )
    {
        if ( frame_function_3_more_of_class_13_TokenParser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_more_of_class_13_TokenParser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_3_more_of_class_13_TokenParser_of_module_django__template__base );
        }

        frame_function_3_more_of_class_13_TokenParser_of_module_django__template__base = MAKE_FRAME( _codeobj_68a6b6238ab643c337b4b79cb73f665c, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_3_more_of_class_13_TokenParser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_3_more_of_class_13_TokenParser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 393 );
        {
            PyObjectTempKeeper1 cmp1;
            return ( cmp1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_pointer ) ), RICH_COMPARE_LT( cmp1.asObject0(), PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_subject ) ).asObject() ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3_more_of_class_13_TokenParser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_3_more_of_class_13_TokenParser_of_module_django__template__base );
           frame_function_3_more_of_class_13_TokenParser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_more_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "more() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "more() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "more() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "more() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "more() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "more() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "more() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "more() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "more() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "more() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "more() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "more() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "more() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "more() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "more() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "more() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "more() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_more_of_class_13_TokenParser_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_more_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_more_of_class_13_TokenParser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_more_of_class_13_TokenParser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_back_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_4_back_of_class_13_TokenParser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_4_back_of_class_13_TokenParser_of_module_django__template__base ) )
    {
        if ( frame_function_4_back_of_class_13_TokenParser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_back_of_class_13_TokenParser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_4_back_of_class_13_TokenParser_of_module_django__template__base );
        }

        frame_function_4_back_of_class_13_TokenParser_of_module_django__template__base = MAKE_FRAME( _codeobj_4b7d3040d907cb5b6a9c1d32b69441c9, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_4_back_of_class_13_TokenParser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_4_back_of_class_13_TokenParser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 399 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_backout ) ).asObject() ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 400 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_ARGS( _mvar_django__template__base_TemplateSyntaxError.asObject0(), _python_unicode_digest_7079ec3032b213fbc8e1f27c4fa2bf5a ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 402 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_backout ) ).asObject(), _python_str_plain_pop ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_pointer );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_4_back_of_class_13_TokenParser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_4_back_of_class_13_TokenParser_of_module_django__template__base );
           frame_function_4_back_of_class_13_TokenParser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_4_back_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "back() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "back() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "back() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "back() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "back() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "back() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "back() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "back() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "back() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "back() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "back() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "back() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "back() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "back() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "back() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "back() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "back() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_4_back_of_class_13_TokenParser_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_4_back_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_4_back_of_class_13_TokenParser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_back_of_class_13_TokenParser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_tag_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_subject( _python_str_plain_subject );
    PyObjectLocalVariable _python_var_i( _python_str_plain_i );
    PyObjectLocalVariable _python_var_p( _python_str_plain_p );
    PyObjectLocalVariable _python_var_s( _python_str_plain_s );

    // Actual function code.
    static PyFrameObject *frame_function_5_tag_of_class_13_TokenParser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_5_tag_of_class_13_TokenParser_of_module_django__template__base ) )
    {
        if ( frame_function_5_tag_of_class_13_TokenParser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_tag_of_class_13_TokenParser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_5_tag_of_class_13_TokenParser_of_module_django__template__base );
        }

        frame_function_5_tag_of_class_13_TokenParser_of_module_django__template__base = MAKE_FRAME( _codeobj_2d68a0b08e8df5924eae6c3850e04e0d, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_5_tag_of_class_13_TokenParser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_5_tag_of_class_13_TokenParser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 408 );
        _python_var_subject.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_subject ) );
        frame_guard.setLineNumber( 409 );
        _python_var_i.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_pointer ) );
        frame_guard.setLineNumber( 410 );
        {
            PyObjectTempKeeper0 cmp3;
            if ( ( cmp3.assign( _python_var_i.asObject() ), RICH_COMPARE_BOOL_GE( cmp3.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_subject.asObject() ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 411 );
            {
                PyObjectTempKeeper0 call1;
                {
                    PyObjectTemporary tmp_exception_type( ( call1.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_34ce2bacce4910949811665ec17174e0, _python_var_subject.asObject() ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        }
        frame_guard.setLineNumber( 413 );
        _python_var_p.assign0( _python_var_i.asObject() );
        frame_guard.setLineNumber( 414 );
        while( true )
        {
            frame_guard.setLineNumber( 414 );
            {
                PyObjectTempKeeper0 cmp5;
                PyObjectTempKeeper0 subscr7;
                if ( (!( ( ( cmp5.assign( _python_var_i.asObject() ), RICH_COMPARE_BOOL_LT( cmp5.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_subject.asObject() ) ).asObject() ) ) && SEQUENCE_CONTAINS_NOT_BOOL( PyObjectTemporary( ( subscr7.assign( _python_var_subject.asObject() ), LOOKUP_SUBSCRIPT( subscr7.asObject0(), _python_var_i.asObject() ) ) ).asObject(), _python_tuple_unicode_space_unicode_chr_9_tuple ) ) )) )
            {
                frame_guard.setLineNumber( 414 );
                break;
            }
            }
            {
                frame_guard.setLineNumber( 415 );
                PyObject *_python_tmp_inplace_start = _python_var_i.asObject();
                PyObjectTemporary _python_tmp_inplace_end( BINARY_OPERATION( PyNumber_InPlaceAdd, _python_tmp_inplace_start, _python_int_pos_1 ) );
                if ( ( _python_tmp_inplace_start != _python_tmp_inplace_end.asObject() ) )
                {
                    _python_var_i.assign0( _python_tmp_inplace_end.asObject() );
                }
            }

           CONSIDER_THREADING();
        }
        frame_guard.setLineNumber( 416 );
        {
            PyObjectTempKeeper0 slice10;
            PyObjectTempKeeper0 slice9;
            _python_var_s.assign1( ( slice9.assign( _python_var_subject.asObject() ), slice10.assign( _python_var_p.asObject() ), LOOKUP_SLICE( slice9.asObject0(), slice10.asObject0(), _python_var_i.asObject() ) ) );
        }
        frame_guard.setLineNumber( 417 );
        while( true )
        {
            frame_guard.setLineNumber( 417 );
            {
                PyObjectTempKeeper0 cmp12;
                PyObjectTempKeeper0 subscr14;
                if ( (!( ( ( cmp12.assign( _python_var_i.asObject() ), RICH_COMPARE_BOOL_LT( cmp12.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_subject.asObject() ) ).asObject() ) ) && SEQUENCE_CONTAINS_BOOL( PyObjectTemporary( ( subscr14.assign( _python_var_subject.asObject() ), LOOKUP_SUBSCRIPT( subscr14.asObject0(), _python_var_i.asObject() ) ) ).asObject(), _python_tuple_unicode_space_unicode_chr_9_tuple ) ) )) )
            {
                frame_guard.setLineNumber( 417 );
                break;
            }
            }
            {
                frame_guard.setLineNumber( 418 );
                PyObject *_python_tmp_inplace_start = _python_var_i.asObject();
                PyObjectTemporary _python_tmp_inplace_end( BINARY_OPERATION( PyNumber_InPlaceAdd, _python_tmp_inplace_start, _python_int_pos_1 ) );
                if ( ( _python_tmp_inplace_start != _python_tmp_inplace_end.asObject() ) )
                {
                    _python_var_i.assign0( _python_tmp_inplace_end.asObject() );
                }
            }

           CONSIDER_THREADING();
        }
        frame_guard.setLineNumber( 419 );
        {
            PyObjectTempKeeper1 call16;
            DECREASE_REFCOUNT( ( call16.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_backout ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call16.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_pointer ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 420 );
        {
                PyObject *tmp_identifier = _python_var_i.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_pointer );
        }
        frame_guard.setLineNumber( 421 );
        return _python_var_s.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_s.updateLocalsDict( _python_var_p.updateLocalsDict( _python_var_i.updateLocalsDict( _python_var_subject.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5_tag_of_class_13_TokenParser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_5_tag_of_class_13_TokenParser_of_module_django__template__base );
           frame_function_5_tag_of_class_13_TokenParser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_tag_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "tag() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "tag() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "tag() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "tag() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "tag() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "tag() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "tag() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "tag() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "tag() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "tag() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "tag() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "tag() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "tag() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "tag() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "tag() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_tag_of_class_13_TokenParser_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5_tag_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5_tag_of_class_13_TokenParser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_tag_of_class_13_TokenParser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_value_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_subject( _python_str_plain_subject );
    PyObjectLocalVariable _python_var_i( _python_str_plain_i );
    PyObjectLocalVariable _python_var_next_space_index( _python_str_plain_next_space_index );
    PyObjectLocalVariable _python_var_p( _python_str_plain_p );
    PyObjectLocalVariable _python_var_res( _python_str_plain_res );
    PyObjectLocalVariable _python_var_s( _python_str_plain_s );

    // Actual function code.
    static PyFrameObject *frame_function_6_value_of_class_13_TokenParser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_6_value_of_class_13_TokenParser_of_module_django__template__base ) )
    {
        if ( frame_function_6_value_of_class_13_TokenParser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_value_of_class_13_TokenParser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_6_value_of_class_13_TokenParser_of_module_django__template__base );
        }

        frame_function_6_value_of_class_13_TokenParser_of_module_django__template__base = MAKE_FRAME( _codeobj_2dc0317183cfedcb9d130bac1245f92d, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_6_value_of_class_13_TokenParser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_6_value_of_class_13_TokenParser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 428 );
        _python_var_subject.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_subject ) );
        frame_guard.setLineNumber( 429 );
        _python_var_i.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_pointer ) );
        _python_var_next_space_index.assign1( MAKE_FUNCTION_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base(  ) );
        frame_guard.setLineNumber( 449 );
        {
            PyObjectTempKeeper0 cmp3;
            if ( ( cmp3.assign( _python_var_i.asObject() ), RICH_COMPARE_BOOL_GE( cmp3.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_subject.asObject() ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 450 );
            {
                PyObjectTempKeeper0 call1;
                {
                    PyObjectTemporary tmp_exception_type( ( call1.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_77fea88193de4fbfb909232e7281a436, _python_var_subject.asObject() ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        }
        frame_guard.setLineNumber( 453 );
        {
            PyObjectTempKeeper0 subscr43;
            if ( SEQUENCE_CONTAINS_BOOL( PyObjectTemporary( ( subscr43.assign( _python_var_subject.asObject() ), LOOKUP_SUBSCRIPT( subscr43.asObject0(), _python_var_i.asObject() ) ) ).asObject(), _python_tuple_unicode_chr_34_unicode_chr_39_tuple ) )
        {
            frame_guard.setLineNumber( 454 );
            _python_var_p.assign0( _python_var_i.asObject() );
            {
                frame_guard.setLineNumber( 455 );
                PyObject *_python_tmp_inplace_start = _python_var_i.asObject();
                PyObjectTemporary _python_tmp_inplace_end( BINARY_OPERATION( PyNumber_InPlaceAdd, _python_tmp_inplace_start, _python_int_pos_1 ) );
                if ( ( _python_tmp_inplace_start != _python_tmp_inplace_end.asObject() ) )
                {
                    _python_var_i.assign0( _python_tmp_inplace_end.asObject() );
                }
            }
            frame_guard.setLineNumber( 456 );
            while( true )
            {
                frame_guard.setLineNumber( 456 );
                {
                    PyObjectTempKeeper1 cmp11;
                    PyObjectTempKeeper0 cmp5;
                    PyObjectTempKeeper0 subscr7;
                    PyObjectTempKeeper0 subscr9;
                    if ( (!( ( ( cmp5.assign( _python_var_i.asObject() ), RICH_COMPARE_BOOL_LT( cmp5.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_subject.asObject() ) ).asObject() ) ) && ( cmp11.assign( ( subscr7.assign( _python_var_subject.asObject() ), LOOKUP_SUBSCRIPT( subscr7.asObject0(), _python_var_i.asObject() ) ) ), RICH_COMPARE_BOOL_NE( cmp11.asObject0(), PyObjectTemporary( ( subscr9.assign( _python_var_subject.asObject() ), LOOKUP_SUBSCRIPT( subscr9.asObject0(), _python_var_p.asObject() ) ) ).asObject() ) ) ) )) )
                {
                    frame_guard.setLineNumber( 456 );
                    break;
                }
                }
                {
                    frame_guard.setLineNumber( 457 );
                    PyObject *_python_tmp_inplace_start = _python_var_i.asObject();
                    PyObjectTemporary _python_tmp_inplace_end( BINARY_OPERATION( PyNumber_InPlaceAdd, _python_tmp_inplace_start, _python_int_pos_1 ) );
                    if ( ( _python_tmp_inplace_start != _python_tmp_inplace_end.asObject() ) )
                    {
                        _python_var_i.assign0( _python_tmp_inplace_end.asObject() );
                    }
                }

               CONSIDER_THREADING();
            }
            frame_guard.setLineNumber( 458 );
            {
                PyObjectTempKeeper0 cmp17;
                if ( ( cmp17.assign( _python_var_i.asObject() ), RICH_COMPARE_BOOL_GE( cmp17.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_subject.asObject() ) ).asObject() ) ) )
            {
                frame_guard.setLineNumber( 459 );
                {
                    PyObjectTempKeeper0 call15;
                    PyObjectTempKeeper0 make_tuple13;
                    {
                        PyObjectTemporary tmp_exception_type( ( call15.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_9d82193e465a37d44a301db9cf982c05, PyObjectTemporary( ( make_tuple13.assign( _python_var_i.asObject() ), MAKE_TUPLE2( make_tuple13.asObject0(), _python_var_subject.asObject() ) ) ).asObject() ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            }
            {
                frame_guard.setLineNumber( 462 );
                PyObject *_python_tmp_inplace_start = _python_var_i.asObject();
                PyObjectTemporary _python_tmp_inplace_end( BINARY_OPERATION( PyNumber_InPlaceAdd, _python_tmp_inplace_start, _python_int_pos_1 ) );
                if ( ( _python_tmp_inplace_start != _python_tmp_inplace_end.asObject() ) )
                {
                    _python_var_i.assign0( _python_tmp_inplace_end.asObject() );
                }
            }
            frame_guard.setLineNumber( 466 );
            {
                PyObjectTempKeeper0 call19;
                PyObjectTempKeeper0 call20;
                _python_var_i.assign1( ( call19.assign( _python_var_next_space_index.asObject() ), call20.assign( _python_var_subject.asObject() ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), call20.asObject0(), _python_var_i.asObject() ) ) );
            }
            frame_guard.setLineNumber( 468 );
            {
                PyObjectTempKeeper0 slice22;
                PyObjectTempKeeper0 slice23;
                _python_var_res.assign1( ( slice22.assign( _python_var_subject.asObject() ), slice23.assign( _python_var_p.asObject() ), LOOKUP_SLICE( slice22.asObject0(), slice23.asObject0(), _python_var_i.asObject() ) ) );
            }
            frame_guard.setLineNumber( 469 );
            while( true )
            {
                frame_guard.setLineNumber( 469 );
                {
                    PyObjectTempKeeper0 cmp25;
                    PyObjectTempKeeper0 subscr27;
                    if ( (!( ( ( cmp25.assign( _python_var_i.asObject() ), RICH_COMPARE_BOOL_LT( cmp25.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_subject.asObject() ) ).asObject() ) ) && SEQUENCE_CONTAINS_BOOL( PyObjectTemporary( ( subscr27.assign( _python_var_subject.asObject() ), LOOKUP_SUBSCRIPT( subscr27.asObject0(), _python_var_i.asObject() ) ) ).asObject(), _python_tuple_unicode_space_unicode_chr_9_tuple ) ) )) )
                {
                    frame_guard.setLineNumber( 469 );
                    break;
                }
                }
                {
                    frame_guard.setLineNumber( 470 );
                    PyObject *_python_tmp_inplace_start = _python_var_i.asObject();
                    PyObjectTemporary _python_tmp_inplace_end( BINARY_OPERATION( PyNumber_InPlaceAdd, _python_tmp_inplace_start, _python_int_pos_1 ) );
                    if ( ( _python_tmp_inplace_start != _python_tmp_inplace_end.asObject() ) )
                    {
                        _python_var_i.assign0( _python_tmp_inplace_end.asObject() );
                    }
                }

               CONSIDER_THREADING();
            }
            frame_guard.setLineNumber( 471 );
            {
                PyObjectTempKeeper1 call29;
                DECREASE_REFCOUNT( ( call29.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_backout ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call29.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_pointer ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 472 );
            {
                    PyObject *tmp_identifier = _python_var_i.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_pointer );
            }
            frame_guard.setLineNumber( 473 );
            return _python_var_res.asObject1();
        }
        else
        {
            frame_guard.setLineNumber( 475 );
            _python_var_p.assign0( _python_var_i.asObject() );
            frame_guard.setLineNumber( 476 );
            {
                PyObjectTempKeeper0 call31;
                PyObjectTempKeeper0 call32;
                _python_var_i.assign1( ( call31.assign( _python_var_next_space_index.asObject() ), call32.assign( _python_var_subject.asObject() ), CALL_FUNCTION_WITH_ARGS( call31.asObject0(), call32.asObject0(), _python_var_i.asObject() ) ) );
            }
            frame_guard.setLineNumber( 477 );
            {
                PyObjectTempKeeper0 slice34;
                PyObjectTempKeeper0 slice35;
                _python_var_s.assign1( ( slice34.assign( _python_var_subject.asObject() ), slice35.assign( _python_var_p.asObject() ), LOOKUP_SLICE( slice34.asObject0(), slice35.asObject0(), _python_var_i.asObject() ) ) );
            }
            frame_guard.setLineNumber( 478 );
            while( true )
            {
                frame_guard.setLineNumber( 478 );
                {
                    PyObjectTempKeeper0 cmp37;
                    PyObjectTempKeeper0 subscr39;
                    if ( (!( ( ( cmp37.assign( _python_var_i.asObject() ), RICH_COMPARE_BOOL_LT( cmp37.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_subject.asObject() ) ).asObject() ) ) && SEQUENCE_CONTAINS_BOOL( PyObjectTemporary( ( subscr39.assign( _python_var_subject.asObject() ), LOOKUP_SUBSCRIPT( subscr39.asObject0(), _python_var_i.asObject() ) ) ).asObject(), _python_tuple_unicode_space_unicode_chr_9_tuple ) ) )) )
                {
                    frame_guard.setLineNumber( 478 );
                    break;
                }
                }
                {
                    frame_guard.setLineNumber( 479 );
                    PyObject *_python_tmp_inplace_start = _python_var_i.asObject();
                    PyObjectTemporary _python_tmp_inplace_end( BINARY_OPERATION( PyNumber_InPlaceAdd, _python_tmp_inplace_start, _python_int_pos_1 ) );
                    if ( ( _python_tmp_inplace_start != _python_tmp_inplace_end.asObject() ) )
                    {
                        _python_var_i.assign0( _python_tmp_inplace_end.asObject() );
                    }
                }

               CONSIDER_THREADING();
            }
            frame_guard.setLineNumber( 480 );
            {
                PyObjectTempKeeper1 call41;
                DECREASE_REFCOUNT( ( call41.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_backout ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call41.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_pointer ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 481 );
            {
                    PyObject *tmp_identifier = _python_var_i.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_pointer );
            }
            frame_guard.setLineNumber( 482 );
            return _python_var_s.asObject1();
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_s.updateLocalsDict( _python_var_res.updateLocalsDict( _python_var_p.updateLocalsDict( _python_var_next_space_index.updateLocalsDict( _python_var_i.updateLocalsDict( _python_var_subject.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_value_of_class_13_TokenParser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_6_value_of_class_13_TokenParser_of_module_django__template__base );
           frame_function_6_value_of_class_13_TokenParser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_value_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "value() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "value() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "value() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_6_value_of_class_13_TokenParser_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_6_value_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_6_value_of_class_13_TokenParser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_value_of_class_13_TokenParser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_subject, PyObject *_python_par_i )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_subject( _python_str_plain_subject, _python_par_subject );
    PyObjectLocalParameterVariableNoDel _python_var_i( _python_str_plain_i, _python_par_i );
    PyObjectLocalVariable _python_var_c( _python_str_plain_c );

    // Actual function code.
    static PyFrameObject *frame_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base ) )
    {
        if ( frame_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base );
        }

        frame_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base = MAKE_FRAME( _codeobj_0bb1d57e79288c1410eff5cfb72792b7, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 436 );
        while( true )
        {
            frame_guard.setLineNumber( 436 );
            {
                PyObjectTempKeeper0 cmp1;
                PyObjectTempKeeper0 subscr3;
                if ( (!( ( ( cmp1.assign( _python_var_i.asObject() ), RICH_COMPARE_BOOL_LT( cmp1.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_subject.asObject() ) ).asObject() ) ) && SEQUENCE_CONTAINS_NOT_BOOL( PyObjectTemporary( ( subscr3.assign( _python_var_subject.asObject() ), LOOKUP_SUBSCRIPT( subscr3.asObject0(), _python_var_i.asObject() ) ) ).asObject(), _python_tuple_unicode_space_unicode_chr_9_tuple ) ) )) )
            {
                frame_guard.setLineNumber( 436 );
                break;
            }
            }
            frame_guard.setLineNumber( 437 );
            {
                PyObjectTempKeeper0 subscr19;
                if ( SEQUENCE_CONTAINS_BOOL( PyObjectTemporary( ( subscr19.assign( _python_var_subject.asObject() ), LOOKUP_SUBSCRIPT( subscr19.asObject0(), _python_var_i.asObject() ) ) ).asObject(), _python_tuple_unicode_chr_34_unicode_chr_39_tuple ) )
            {
                frame_guard.setLineNumber( 438 );
                {
                    PyObjectTempKeeper0 subscr5;
                    _python_var_c.assign1( ( subscr5.assign( _python_var_subject.asObject() ), LOOKUP_SUBSCRIPT( subscr5.asObject0(), _python_var_i.asObject() ) ) );
                }
                {
                    frame_guard.setLineNumber( 439 );
                    PyObject *_python_tmp_inplace_start = _python_var_i.asObject();
                    PyObjectTemporary _python_tmp_inplace_end( BINARY_OPERATION( PyNumber_InPlaceAdd, _python_tmp_inplace_start, _python_int_pos_1 ) );
                    if ( ( _python_tmp_inplace_start != _python_tmp_inplace_end.asObject() ) )
                    {
                        _python_var_i.assign0( _python_tmp_inplace_end.asObject() );
                    }
                }
                frame_guard.setLineNumber( 440 );
                while( true )
                {
                    frame_guard.setLineNumber( 440 );
                    {
                        PyObjectTempKeeper1 cmp11;
                        PyObjectTempKeeper0 cmp7;
                        PyObjectTempKeeper0 subscr9;
                        if ( (!( ( ( cmp7.assign( _python_var_i.asObject() ), RICH_COMPARE_BOOL_LT( cmp7.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_subject.asObject() ) ).asObject() ) ) && ( cmp11.assign( ( subscr9.assign( _python_var_subject.asObject() ), LOOKUP_SUBSCRIPT( subscr9.asObject0(), _python_var_i.asObject() ) ) ), RICH_COMPARE_BOOL_NE( cmp11.asObject0(), _python_var_c.asObject() ) ) ) )) )
                    {
                        frame_guard.setLineNumber( 440 );
                        break;
                    }
                    }
                    {
                        frame_guard.setLineNumber( 441 );
                        PyObject *_python_tmp_inplace_start = _python_var_i.asObject();
                        PyObjectTemporary _python_tmp_inplace_end( BINARY_OPERATION( PyNumber_InPlaceAdd, _python_tmp_inplace_start, _python_int_pos_1 ) );
                        if ( ( _python_tmp_inplace_start != _python_tmp_inplace_end.asObject() ) )
                        {
                            _python_var_i.assign0( _python_tmp_inplace_end.asObject() );
                        }
                    }

                   CONSIDER_THREADING();
                }
                frame_guard.setLineNumber( 442 );
                {
                    PyObjectTempKeeper0 cmp17;
                    if ( ( cmp17.assign( _python_var_i.asObject() ), RICH_COMPARE_BOOL_GE( cmp17.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_subject.asObject() ) ).asObject() ) ) )
                {
                    frame_guard.setLineNumber( 443 );
                    {
                        PyObjectTempKeeper0 call15;
                        PyObjectTempKeeper0 make_tuple13;
                        {
                            PyObjectTemporary tmp_exception_type( ( call15.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_9d82193e465a37d44a301db9cf982c05, PyObjectTemporary( ( make_tuple13.assign( _python_var_i.asObject() ), MAKE_TUPLE2( make_tuple13.asObject0(), _python_var_subject.asObject() ) ) ).asObject() ) ).asObject() ) ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
                }
            }
            }
            {
                frame_guard.setLineNumber( 446 );
                PyObject *_python_tmp_inplace_start = _python_var_i.asObject();
                PyObjectTemporary _python_tmp_inplace_end( BINARY_OPERATION( PyNumber_InPlaceAdd, _python_tmp_inplace_start, _python_int_pos_1 ) );
                if ( ( _python_tmp_inplace_start != _python_tmp_inplace_end.asObject() ) )
                {
                    _python_var_i.assign0( _python_tmp_inplace_end.asObject() );
                }
            }

           CONSIDER_THREADING();
        }
        frame_guard.setLineNumber( 447 );
        return _python_var_i.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_i.updateLocalsDict( _python_var_subject.updateLocalsDict( _python_var_c.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base );
           frame_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_subject = NULL;
    PyObject *_python_par_i = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "next_space_index() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_subject == key )
            {
                if (unlikely( _python_par_subject ))
                {
                    PyErr_Format( PyExc_TypeError, "next_space_index() got multiple values for keyword argument 'subject'" );
                    goto error_exit;
                }

                _python_par_subject = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_i == key )
            {
                if (unlikely( _python_par_i ))
                {
                    PyErr_Format( PyExc_TypeError, "next_space_index() got multiple values for keyword argument 'i'" );
                    goto error_exit;
                }

                _python_par_i = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_subject, key ) )
            {
                if (unlikely( _python_par_subject ))
                {
                    PyErr_Format( PyExc_TypeError, "next_space_index() got multiple values for keyword argument 'subject'" );
                    goto error_exit;
                }

                _python_par_subject = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_i, key ) )
            {
                if (unlikely( _python_par_i ))
                {
                    PyErr_Format( PyExc_TypeError, "next_space_index() got multiple values for keyword argument 'i'" );
                    goto error_exit;
                }

                _python_par_i = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "next_space_index() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "next_space_index() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "next_space_index() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "next_space_index() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "next_space_index() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "next_space_index() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "next_space_index() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "next_space_index() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "next_space_index() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "next_space_index() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "next_space_index() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "next_space_index() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "next_space_index() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_subject != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "next_space_index() got multiple values for keyword argument 'subject'" );
             goto error_exit;
         }

        _python_par_subject = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_i != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "next_space_index() got multiple values for keyword argument 'i'" );
             goto error_exit;
         }

        _python_par_i = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base( self, _python_par_subject, _python_par_i );

error_exit:;

    Py_XDECREF( _python_par_subject );
    Py_XDECREF( _python_par_i );

    return NULL;
}

static PyObject *dparse_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_14_FilterExpression_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_resolve( _python_str_plain_resolve );
    PyObjectLocalVariable _python_var_args_check( _python_str_plain_args_check );
    PyObjectLocalVariable _python_var___str__( _python_str_plain___str__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var___doc__.assign0( _python_unicode_digest_d6efc7aea146bfd9aedb71f5eda2a076 );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_14_FilterExpression_of_module_django__template__base(  ) );
    _python_var_resolve.assign1( MAKE_FUNCTION_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base(  ) );
    _python_var_args_check.assign1( MAKE_FUNCTION_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base(  ) );
    static PyFrameObject *frame_class_14_FilterExpression_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_class_14_FilterExpression_of_module_django__template__base ) )
    {
        if ( frame_class_14_FilterExpression_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_14_FilterExpression_of_module_django__template__base" );
#endif
            Py_DECREF( frame_class_14_FilterExpression_of_module_django__template__base );
        }

        frame_class_14_FilterExpression_of_module_django__template__base = MAKE_FRAME( _codeobj_ae2c65ecba23264f933107014d74009f, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_class_14_FilterExpression_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_class_14_FilterExpression_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 654 );
        _python_var_args_check.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_staticmethod ), _python_var_args_check.asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var___str__.updateLocalsDict( _python_var_args_check.updateLocalsDict( _python_var_resolve.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_14_FilterExpression_of_module_django__template__base )
        {
           Py_DECREF( frame_class_14_FilterExpression_of_module_django__template__base );
           frame_class_14_FilterExpression_of_module_django__template__base = NULL;
        }

        throw;
    }
    _python_var___str__.assign1( MAKE_FUNCTION_function_4___str___of_class_14_FilterExpression_of_module_django__template__base(  ) );
    return _python_var___str__.updateLocalsDict( _python_var_args_check.updateLocalsDict( _python_var_resolve.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_14_FilterExpression_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_token, PyObject *_python_par_parser )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_token( _python_str_plain_token, _python_par_token );
    PyObjectLocalParameterVariableNoDel _python_var_parser( _python_str_plain_parser, _python_par_parser );
    PyObjectLocalVariable _python_var_matches( _python_str_plain_matches );
    PyObjectLocalVariable _python_var_var_obj( _python_str_plain_var_obj );
    PyObjectLocalVariable _python_var_filters( _python_str_plain_filters );
    PyObjectLocalVariable _python_var_upto( _python_str_plain_upto );
    PyObjectLocalVariable _python_var_match( _python_str_plain_match );
    PyObjectLocalVariable _python_var_start( _python_str_plain_start );
    PyObjectLocalVariable _python_var_var( _python_str_plain_var );
    PyObjectLocalVariable _python_var_constant( _python_str_plain_constant );
    PyObjectLocalVariable _python_var_filter_name( _python_str_plain_filter_name );
    PyObjectLocalVariable _python_var_args( _python_str_plain_args );
    PyObjectLocalVariable _python_var_constant_arg( _python_str_plain_constant_arg );
    PyObjectLocalVariable _python_var_var_arg( _python_str_plain_var_arg );
    PyObjectLocalVariable _python_var_filter_func( _python_str_plain_filter_func );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_14_FilterExpression_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_14_FilterExpression_of_module_django__template__base ) )
    {
        if ( frame_function_1___init___of_class_14_FilterExpression_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_14_FilterExpression_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1___init___of_class_14_FilterExpression_of_module_django__template__base );
        }

        frame_function_1___init___of_class_14_FilterExpression_of_module_django__template__base = MAKE_FRAME( _codeobj_44ebb4bc234cba73196722e16571f813, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_14_FilterExpression_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_14_FilterExpression_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 539 );
        {
                PyObject *tmp_identifier = _python_var_token.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_token );
        }
        frame_guard.setLineNumber( 540 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_matches.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_filter_re.asObject0(), _python_str_plain_finditer ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_token.asObject() ) ) );
        }
        _python_var_var_obj.assign0( Py_None );
        _python_var_filters.assign1( PyList_New( 0 ) );
        _python_var_upto.assign0( _python_int_0 );
        {
            frame_guard.setLineNumber( 544 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_matches.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 544 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_match.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 545 );
                _python_var_start.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_match.asObject(), _python_str_plain_start ) ).asObject() ) );
                frame_guard.setLineNumber( 546 );
                {
                    PyObjectTempKeeper0 cmp17;
                    if ( ( cmp17.assign( _python_var_upto.asObject() ), RICH_COMPARE_BOOL_NE( cmp17.asObject0(), _python_var_start.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 547 );
                    {
                        PyObjectTempKeeper0 call15;
                        PyObjectTempKeeper1 make_tuple12;
                        PyObjectTempKeeper1 make_tuple13;
                        PyObjectTempKeeper0 slice3;
                        PyObjectTempKeeper0 slice6;
                        PyObjectTempKeeper0 slice7;
                        PyObjectTempKeeper0 slice9;
                        {
                            PyObjectTemporary tmp_exception_type( ( call15.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_dc8eae8f6cf9bccefb3ae931a4ce6826, PyObjectTemporary( ( make_tuple12.assign( ( slice3.assign( _python_var_token.asObject() ), LOOKUP_SLICE( slice3.asObject0(), Py_None, _python_var_upto.asObject() ) ) ), make_tuple13.assign( ( slice6.assign( _python_var_token.asObject() ), slice7.assign( _python_var_upto.asObject() ), LOOKUP_SLICE( slice6.asObject0(), slice7.asObject0(), _python_var_start.asObject() ) ) ), MAKE_TUPLE3( make_tuple12.asObject0(), make_tuple13.asObject0(), PyObjectTemporary( ( slice9.assign( _python_var_token.asObject() ), LOOKUP_SLICE( slice9.asObject0(), _python_var_start.asObject(), Py_None ) ) ).asObject() ) ) ).asObject() ) ).asObject() ) ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
                }
                frame_guard.setLineNumber( 551 );
                if ( ( _python_var_var_obj.asObject() == Py_None ) )
                {
                    {
                        frame_guard.setLineNumber( 552 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_match.asObject(), _python_str_plain_group ) ).asObject(), _python_unicode_plain_var, _python_unicode_plain_constant ) ).asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_var.assign0( _python_tmp_element_1.asObject() );
                        _python_var_constant.assign0( _python_tmp_element_2.asObject() );
                    }
                    frame_guard.setLineNumber( 553 );
                    if ( CHECK_IF_TRUE( _python_var_constant.asObject() ) )
                    {
                        frame_guard.setLineNumber( 554 );
                        try
                        {
                            frame_guard.setLineNumber( 555 );
                            {
                                PyObjectTempKeeper0 call19;
                                _python_var_var_obj.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call19.assign( _mvar_django__template__base_Variable.asObject0() ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), _python_var_constant.asObject() ) ) ).asObject(), _python_str_plain_resolve ) ).asObject(), PyObjectTemporary( PyDict_New() ).asObject() ) );
                            }
                        }
                        catch ( PythonException &_exception )
                        {
                            if ( !_exception.hasTraceback() )
                            {
                                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                            }
                            else
                            {
                                _exception.addTraceback( frame_guard.getFrame0() );
                            }

                            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                            _exception.toExceptionHandler();

                            if ( _exception.matches( _mvar_django__template__base_VariableDoesNotExist.asObject0() ) )
                            {
                                frame_guard.detachFrame();
                                _python_var_var_obj.assign0( Py_None );
                            }
                            else
                            {
                                PyTracebackObject *tb = _exception.getTraceback();
                                frame_guard.setLineNumber( tb->tb_lineno );
                                _exception.setTraceback( tb->tb_next );
                                tb->tb_next = NULL;

                                throw;
                            }
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 558 );
                        if ( ( _python_var_var.asObject() == Py_None ) )
                        {
                            frame_guard.setLineNumber( 559 );
                            {
                                PyObjectTempKeeper0 call21;
                                {
                                    PyObjectTemporary tmp_exception_type( ( call21.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call21.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_9050d76d7def2e3e06a49d90d64f15d7, _python_var_token.asObject() ) ).asObject() ) ) );
                                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                            }
                            }
                        }
                        else
                        {
                            frame_guard.setLineNumber( 562 );
                            {
                                PyObjectTempKeeper0 call23;
                                _python_var_var_obj.assign1( ( call23.assign( _mvar_django__template__base_Variable.asObject0() ), CALL_FUNCTION_WITH_ARGS( call23.asObject0(), _python_var_var.asObject() ) ) );
                            }
                        }
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 564 );
                    _python_var_filter_name.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_match.asObject(), _python_str_plain_group ) ).asObject(), _python_unicode_plain_filter_name ) );
                    _python_var_args.assign1( PyList_New( 0 ) );
                    {
                        frame_guard.setLineNumber( 566 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_match.asObject(), _python_str_plain_group ) ).asObject(), _python_unicode_plain_constant_arg, _python_unicode_plain_var_arg ) ).asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_constant_arg.assign0( _python_tmp_element_1.asObject() );
                        _python_var_var_arg.assign0( _python_tmp_element_2.asObject() );
                    }
                    frame_guard.setLineNumber( 567 );
                    if ( CHECK_IF_TRUE( _python_var_constant_arg.asObject() ) )
                    {
                        frame_guard.setLineNumber( 568 );
                        {
                            PyObjectTempKeeper0 call25;
                            PyObjectTempKeeper1 call27;
                            DECREASE_REFCOUNT( ( call27.assign( LOOKUP_ATTRIBUTE( _python_var_args.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), PyObjectTemporary( MAKE_TUPLE2( Py_False, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call25.assign( _mvar_django__template__base_Variable.asObject0() ), CALL_FUNCTION_WITH_ARGS( call25.asObject0(), _python_var_constant_arg.asObject() ) ) ).asObject(), _python_str_plain_resolve ) ).asObject(), PyObjectTemporary( PyDict_New() ).asObject() ) ).asObject() ) ).asObject() ) ) );
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 569 );
                        if ( CHECK_IF_TRUE( _python_var_var_arg.asObject() ) )
                        {
                            frame_guard.setLineNumber( 570 );
                            {
                                PyObjectTempKeeper0 call29;
                                PyObjectTempKeeper1 call31;
                                DECREASE_REFCOUNT( ( call31.assign( LOOKUP_ATTRIBUTE( _python_var_args.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call31.asObject0(), PyObjectTemporary( MAKE_TUPLE2( Py_True, PyObjectTemporary( ( call29.assign( _mvar_django__template__base_Variable.asObject0() ), CALL_FUNCTION_WITH_ARGS( call29.asObject0(), _python_var_var_arg.asObject() ) ) ).asObject() ) ).asObject() ) ) );
                            }
                        }
                    }
                    frame_guard.setLineNumber( 571 );
                    {
                        PyObjectTempKeeper1 call33;
                        _python_var_filter_func.assign1( ( call33.assign( LOOKUP_ATTRIBUTE( _python_var_parser.asObject(), _python_str_plain_find_filter ) ), CALL_FUNCTION_WITH_ARGS( call33.asObject0(), _python_var_filter_name.asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 572 );
                    {
                        PyObjectTempKeeper1 call35;
                        PyObjectTempKeeper0 call36;
                        PyObjectTempKeeper0 call37;
                        DECREASE_REFCOUNT( ( call35.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_args_check ) ), call36.assign( _python_var_filter_name.asObject() ), call37.assign( _python_var_filter_func.asObject() ), CALL_FUNCTION_WITH_ARGS( call35.asObject0(), call36.asObject0(), call37.asObject0(), _python_var_args.asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 573 );
                    {
                        PyObjectTempKeeper1 call41;
                        PyObjectTempKeeper0 make_tuple39;
                        DECREASE_REFCOUNT( ( call41.assign( LOOKUP_ATTRIBUTE( _python_var_filters.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call41.asObject0(), PyObjectTemporary( ( make_tuple39.assign( _python_var_filter_func.asObject() ), MAKE_TUPLE2( make_tuple39.asObject0(), _python_var_args.asObject() ) ) ).asObject() ) ) );
                    }
                }
                frame_guard.setLineNumber( 574 );
                _python_var_upto.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_match.asObject(), _python_str_plain_end ) ).asObject() ) );

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 575 );
        {
            PyObjectTempKeeper0 cmp50;
            if ( ( cmp50.assign( _python_var_upto.asObject() ), RICH_COMPARE_BOOL_NE( cmp50.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_token.asObject() ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 576 );
            {
                PyObjectTempKeeper0 call48;
                PyObjectTempKeeper1 make_tuple46;
                PyObjectTempKeeper0 slice43;
                {
                    PyObjectTemporary tmp_exception_type( ( call48.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call48.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_83bb706f6ffd4c7eda0551caa78ba7ef, PyObjectTemporary( ( make_tuple46.assign( ( slice43.assign( _python_var_token.asObject() ), LOOKUP_SLICE( slice43.asObject0(), _python_var_upto.asObject(), Py_None ) ) ), MAKE_TUPLE2( make_tuple46.asObject0(), _python_var_token.asObject() ) ) ).asObject() ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        }
        frame_guard.setLineNumber( 579 );
        {
                PyObject *tmp_identifier = _python_var_filters.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_filters );
        }
        frame_guard.setLineNumber( 580 );
        {
                PyObject *tmp_identifier = _python_var_var_obj.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_var );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_parser.updateLocalsDict( _python_var_token.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_filter_func.updateLocalsDict( _python_var_var_arg.updateLocalsDict( _python_var_constant_arg.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_filter_name.updateLocalsDict( _python_var_constant.updateLocalsDict( _python_var_var.updateLocalsDict( _python_var_start.updateLocalsDict( _python_var_match.updateLocalsDict( _python_var_upto.updateLocalsDict( _python_var_filters.updateLocalsDict( _python_var_var_obj.updateLocalsDict( _python_var_matches.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_14_FilterExpression_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1___init___of_class_14_FilterExpression_of_module_django__template__base );
           frame_function_1___init___of_class_14_FilterExpression_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_14_FilterExpression_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_token = NULL;
    PyObject *_python_par_parser = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_token == key )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_parser == key )
            {
                if (unlikely( _python_par_parser ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'parser'" );
                    goto error_exit;
                }

                _python_par_parser = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_token, key ) )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_parser, key ) )
            {
                if (unlikely( _python_par_parser ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'parser'" );
                    goto error_exit;
                }

                _python_par_parser = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_token != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'token'" );
             goto error_exit;
         }

        _python_par_token = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_parser != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'parser'" );
             goto error_exit;
         }

        _python_par_parser = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_1___init___of_class_14_FilterExpression_of_module_django__template__base( self, _python_par_self, _python_par_token, _python_par_parser );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_token );
    Py_XDECREF( _python_par_parser );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_14_FilterExpression_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_14_FilterExpression_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_14_FilterExpression_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_context, PyObject *_python_par_ignore_failures )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_context( _python_str_plain_context, _python_par_context );
    PyObjectLocalParameterVariableNoDel _python_var_ignore_failures( _python_str_plain_ignore_failures, _python_par_ignore_failures );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );
    PyObjectLocalVariable _python_var_func( _python_str_plain_func );
    PyObjectLocalVariable _python_var_args( _python_str_plain_args );
    PyObjectLocalVariable _python_var_arg_vals( _python_str_plain_arg_vals );
    PyObjectLocalVariable _python_var_lookup( _python_str_plain_lookup );
    PyObjectLocalVariable _python_var_arg( _python_str_plain_arg );
    PyObjectLocalVariable _python_var_new_obj( _python_str_plain_new_obj );

    // Actual function code.
    static PyFrameObject *frame_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base ) )
    {
        if ( frame_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base );
        }

        frame_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base = MAKE_FRAME( _codeobj_7166d0ff51f0804a03851c04f65e5ef3, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 583 );
        {
            PyObjectTempKeeper1 isinstance5;
            if ( ( isinstance5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_var ) ), BUILTIN_ISINSTANCE_BOOL( isinstance5.asObject0(), _mvar_django__template__base_Variable.asObject0() ) ) )
        {
            frame_guard.setLineNumber( 584 );
            try
            {
                frame_guard.setLineNumber( 585 );
                {
                    PyObjectTempKeeper1 call3;
                    _python_var_obj.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_var ) ).asObject(), _python_str_plain_resolve ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_context.asObject() ) ) );
                }
            }
            catch ( PythonException &_exception )
            {
                if ( !_exception.hasTraceback() )
                {
                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                }
                else
                {
                    _exception.addTraceback( frame_guard.getFrame0() );
                }

                frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                _exception.toExceptionHandler();

                if ( _exception.matches( _mvar_django__template__base_VariableDoesNotExist.asObject0() ) )
                {
                    frame_guard.detachFrame();
                    frame_guard.setLineNumber( 587 );
                    if ( CHECK_IF_TRUE( _python_var_ignore_failures.asObject() ) )
                    {
                        _python_var_obj.assign0( Py_None );
                    }
                    else
                    {
                        frame_guard.setLineNumber( 590 );
                        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__template__base_settings.asObject0(), _python_str_plain_TEMPLATE_STRING_IF_INVALID ) ).asObject() ) )
                        {
                            frame_guard.setLineNumber( 592 );
                            if ( ( _mvar_django__template__base_invalid_var_format_string.asObject0() == Py_None ) )
                            {
                                frame_guard.setLineNumber( 593 );
                                UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_invalid_var_format_string, SEQUENCE_CONTAINS( _python_unicode_digest_1c481aa99d081c32182011a758f73d33, PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__template__base_settings.asObject0(), _python_str_plain_TEMPLATE_STRING_IF_INVALID ) ).asObject() ) );
                            }
                            frame_guard.setLineNumber( 594 );
                            if ( CHECK_IF_TRUE( _mvar_django__template__base_invalid_var_format_string.asObject0() ) )
                            {
                                frame_guard.setLineNumber( 595 );
                                {
                                    PyObjectTempKeeper1 op1;
                                    return ( op1.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_settings.asObject0(), _python_str_plain_TEMPLATE_STRING_IF_INVALID ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_var ) ).asObject() ) );
                                }
                            }
                            frame_guard.setLineNumber( 596 );
                            return LOOKUP_ATTRIBUTE( _mvar_django__template__base_settings.asObject0(), _python_str_plain_TEMPLATE_STRING_IF_INVALID );
                        }
                        else
                        {
                            frame_guard.setLineNumber( 598 );
                            _python_var_obj.assign1( LOOKUP_ATTRIBUTE( _mvar_django__template__base_settings.asObject0(), _python_str_plain_TEMPLATE_STRING_IF_INVALID ) );
                        }
                    }
                }
                else
                {
                    PyTracebackObject *tb = _exception.getTraceback();
                    frame_guard.setLineNumber( tb->tb_lineno );
                    _exception.setTraceback( tb->tb_next );
                    tb->tb_next = NULL;

                    throw;
                }
            }
        }
        else
        {
            frame_guard.setLineNumber( 600 );
            _python_var_obj.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_var ) );
        }
        }
        {
            frame_guard.setLineNumber( 601 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_filters ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 601 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 601 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_func.assign0( _python_tmp_element_1.asObject() );
                        _python_var_args.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                _python_var_arg_vals.assign1( PyList_New( 0 ) );
                {
                    frame_guard.setLineNumber( 603 );
                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_args.asObject() ) );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 603 );
                            PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_2 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                            {
                                frame_guard.setLineNumber( 603 );
                                PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                _python_var_lookup.assign0( _python_tmp_element_1.asObject() );
                                _python_var_arg.assign0( _python_tmp_element_2.asObject() );
                            }
                        }
                        frame_guard.setLineNumber( 604 );
                        if ( (!( CHECK_IF_TRUE( _python_var_lookup.asObject() ) )) )
                        {
                            frame_guard.setLineNumber( 605 );
                            {
                                PyObjectTempKeeper0 call7;
                                PyObjectTempKeeper1 call9;
                                DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_arg_vals.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), PyObjectTemporary( ( call7.assign( _mvar_django__template__base_mark_safe.asObject0() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_arg.asObject() ) ) ).asObject() ) ) );
                            }
                        }
                        else
                        {
                            frame_guard.setLineNumber( 607 );
                            {
                                PyObjectTempKeeper1 call11;
                                PyObjectTempKeeper1 call13;
                                DECREASE_REFCOUNT( ( call13.assign( LOOKUP_ATTRIBUTE( _python_var_arg_vals.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), PyObjectTemporary( ( call11.assign( LOOKUP_ATTRIBUTE( _python_var_arg.asObject(), _python_str_plain_resolve ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _python_var_context.asObject() ) ) ).asObject() ) ) );
                            }
                        }

                       CONSIDER_THREADING();
                    }
                }
                frame_guard.setLineNumber( 608 );
                if ( CHECK_IF_TRUE( PyObjectTemporary( BUILTIN_GETATTR( _python_var_func.asObject(), _python_unicode_plain_expects_localtime, Py_False ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 609 );
                    {
                        PyObjectTempKeeper0 call15;
                        PyObjectTempKeeper0 call16;
                        _python_var_obj.assign1( ( call15.assign( _mvar_django__template__base_template_localtime.asObject0() ), call16.assign( _python_var_obj.asObject() ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), call16.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_context.asObject(), _python_str_plain_use_tz ) ).asObject() ) ) );
                    }
                }
                frame_guard.setLineNumber( 610 );
                if ( CHECK_IF_TRUE( PyObjectTemporary( BUILTIN_GETATTR( _python_var_func.asObject(), _python_unicode_plain_needs_autoescape, Py_False ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 611 );
                    {
                        PyObjectTempKeeper0 call_tmp18;
                        PyObjectTempKeeper1 call_tmp19;
                        PyObjectTempKeeper1 call_tmp20;
                        _python_var_new_obj.assign1( ( call_tmp18.assign( _python_var_func.asObject() ), call_tmp19.assign( MAKE_TUPLE1( _python_var_obj.asObject() ) ), call_tmp20.assign( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_context.asObject(), _python_str_plain_autoescape ) ).asObject(), _python_str_plain_autoescape ) ), impl_function_9_complex_call_helper_pos_keywords_star_list_of_module___internal__( call_tmp18.asObject(), call_tmp19.asObject(), call_tmp20.asObject(), _python_var_arg_vals.asObject1() ) ) );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 613 );
                    {
                        PyObjectTempKeeper0 call_tmp22;
                        PyObjectTempKeeper1 call_tmp23;
                        _python_var_new_obj.assign1( ( call_tmp22.assign( _python_var_func.asObject() ), call_tmp23.assign( MAKE_TUPLE1( _python_var_obj.asObject() ) ), impl_function_5_complex_call_helper_pos_star_list_of_module___internal__( call_tmp22.asObject(), call_tmp23.asObject(), _python_var_arg_vals.asObject1() ) ) );
                    }
                }
                frame_guard.setLineNumber( 614 );
                {
                    PyObjectTempKeeper0 isinstance31;
                    if ( ( CHECK_IF_TRUE( PyObjectTemporary( BUILTIN_GETATTR( _python_var_func.asObject(), _python_unicode_plain_is_safe, Py_False ) ).asObject() ) && ( isinstance31.assign( _python_var_obj.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance31.asObject0(), _mvar_django__template__base_SafeData.asObject0() ) ) ) )
                {
                    frame_guard.setLineNumber( 615 );
                    {
                        PyObjectTempKeeper0 call25;
                        _python_var_obj.assign1( ( call25.assign( _mvar_django__template__base_mark_safe.asObject0() ), CALL_FUNCTION_WITH_ARGS( call25.asObject0(), _python_var_new_obj.asObject() ) ) );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 616 );
                    {
                        PyObjectTempKeeper0 isinstance29;
                        if ( ( isinstance29.assign( _python_var_obj.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance29.asObject0(), _mvar_django__template__base_EscapeData.asObject0() ) ) )
                    {
                        frame_guard.setLineNumber( 617 );
                        {
                            PyObjectTempKeeper0 call27;
                            _python_var_obj.assign1( ( call27.assign( _mvar_django__template__base_mark_for_escaping.asObject0() ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), _python_var_new_obj.asObject() ) ) );
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 619 );
                        _python_var_obj.assign0( _python_var_new_obj.asObject() );
                    }
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 620 );
        return _python_var_obj.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_ignore_failures.updateLocalsDict( _python_var_context.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_new_obj.updateLocalsDict( _python_var_arg.updateLocalsDict( _python_var_lookup.updateLocalsDict( _python_var_arg_vals.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_func.updateLocalsDict( _python_var_obj.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base );
           frame_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_context = NULL;
    PyObject *_python_par_ignore_failures = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "resolve() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context == key )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_ignore_failures == key )
            {
                if (unlikely( _python_par_ignore_failures ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve() got multiple values for keyword argument 'ignore_failures'" );
                    goto error_exit;
                }

                _python_par_ignore_failures = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context, key ) )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_ignore_failures, key ) )
            {
                if (unlikely( _python_par_ignore_failures ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve() got multiple values for keyword argument 'ignore_failures'" );
                    goto error_exit;
                }

                _python_par_ignore_failures = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "resolve() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "resolve() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "resolve() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "resolve() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "resolve() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "resolve() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "resolve() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "resolve() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "resolve() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "resolve() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "resolve() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "resolve() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "resolve() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve() got multiple values for keyword argument 'context'" );
             goto error_exit;
         }

        _python_par_context = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_ignore_failures != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve() got multiple values for keyword argument 'ignore_failures'" );
             goto error_exit;
         }

        _python_par_ignore_failures = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_ignore_failures == NULL )
    {
        _python_par_ignore_failures = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_ignore_failures );
    }


    return impl_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base( self, _python_par_self, _python_par_context, _python_par_ignore_failures );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_context );
    Py_XDECREF( _python_par_ignore_failures );

    return NULL;
}

static PyObject *dparse_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_name, PyObject *_python_par_func, PyObject *_python_par_provided )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_func( _python_str_plain_func, _python_par_func );
    PyObjectLocalParameterVariableNoDel _python_var_provided( _python_str_plain_provided, _python_par_provided );
    PyObjectLocalVariable _python_var_plen( _python_str_plain_plen );
    PyObjectLocalVariable _python_var_args( _python_str_plain_args );
    PyObjectLocalVariable _python_var_varargs( _python_str_plain_varargs );
    PyObjectLocalVariable _python_var_varkw( _python_str_plain_varkw );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );
    PyObjectLocalVariable _python_var_nondefs( _python_str_plain_nondefs );
    PyObjectLocalVariable _python_var_arg( _python_str_plain_arg );
    PyObjectLocalVariable _python_var_parg( _python_str_plain_parg );

    // Actual function code.
    static PyFrameObject *frame_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base ) )
    {
        if ( frame_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base );
        }

        frame_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base = MAKE_FRAME( _codeobj_fd7636e1fa563e5b8d2db35e34c3f46c, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 623 );
        _python_var_provided.assign1( TO_LIST( _python_var_provided.asObject() ) );
        frame_guard.setLineNumber( 624 );
        _python_var_plen.assign1( BUILTIN_LEN( _python_var_provided.asObject() ) );
        frame_guard.setLineNumber( 626 );
        {
            PyObjectTempKeeper0 getattr1;
            _python_var_func.assign1( ( getattr1.assign( _python_var_func.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), _python_unicode_plain__decorated_function, _python_var_func.asObject() ) ) );
        }
        {
            frame_guard.setLineNumber( 627 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 call4;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call4.assign( _mvar_django__template__base_getargspec.asObject0() ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_func.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
            PyObjectTemporary _python_tmp_element_4( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 3 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 4 );
            _python_var_args.assign0( _python_tmp_element_1.asObject() );
            _python_var_varargs.assign0( _python_tmp_element_2.asObject() );
            _python_var_varkw.assign0( _python_tmp_element_3.asObject() );
            _python_var_defaults.assign0( _python_tmp_element_4.asObject() );
        }
        frame_guard.setLineNumber( 629 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_args.asObject(), _python_str_plain_pop ) ).asObject(), _python_int_0 ) );
        frame_guard.setLineNumber( 630 );
        if ( CHECK_IF_TRUE( _python_var_defaults.asObject() ) )
        {
            frame_guard.setLineNumber( 631 );
            {
                PyObjectTempKeeper0 slice6;
                _python_var_nondefs.assign1( ( slice6.assign( _python_var_args.asObject() ), LOOKUP_SLICE( slice6.asObject0(), Py_None, PyObjectTemporary( UNARY_OPERATION( PyNumber_Negative, PyObjectTemporary( BUILTIN_LEN( _python_var_defaults.asObject() ) ).asObject() ) ).asObject() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 633 );
            _python_var_nondefs.assign0( _python_var_args.asObject() );
        }
        frame_guard.setLineNumber( 635 );
        try
        {
            {
                frame_guard.setLineNumber( 636 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_nondefs.asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 636 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_var_arg.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 637 );
                    DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_provided.asObject(), _python_str_plain_pop ) ).asObject(), _python_int_0 ) );

                   CONSIDER_THREADING();
                }
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_IndexError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 640 );
                {
                    PyObjectTempKeeper0 call12;
                    PyObjectTempKeeper1 make_tuple10;
                    PyObjectTempKeeper0 make_tuple9;
                    {
                        PyObjectTemporary tmp_exception_type( ( call12.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_b12697494df2ab20a8df87d635ea08e2, PyObjectTemporary( ( make_tuple9.assign( _python_var_name.asObject() ), make_tuple10.assign( BUILTIN_LEN( _python_var_nondefs.asObject() ) ), MAKE_TUPLE3( make_tuple9.asObject0(), make_tuple10.asObject0(), _python_var_plen.asObject() ) ) ).asObject() ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 644 );
        _python_var_defaults.assign1( ( CHECK_IF_TRUE( _python_var_defaults.asObject() ) ? TO_LIST( _python_var_defaults.asObject() ) : PyList_New( 0 ) ) );
        frame_guard.setLineNumber( 645 );
        try
        {
            {
                frame_guard.setLineNumber( 646 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_provided.asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 646 );
                        PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_2 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                        _python_var_parg.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 647 );
                    DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_pop ) ).asObject(), _python_int_0 ) );

                   CONSIDER_THREADING();
                }
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_IndexError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 650 );
                {
                    PyObjectTempKeeper0 call17;
                    PyObjectTempKeeper0 make_tuple14;
                    PyObjectTempKeeper1 make_tuple15;
                    {
                        PyObjectTemporary tmp_exception_type( ( call17.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_b12697494df2ab20a8df87d635ea08e2, PyObjectTemporary( ( make_tuple14.assign( _python_var_name.asObject() ), make_tuple15.assign( BUILTIN_LEN( _python_var_nondefs.asObject() ) ), MAKE_TUPLE3( make_tuple14.asObject0(), make_tuple15.asObject0(), _python_var_plen.asObject() ) ) ).asObject() ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_provided.updateLocalsDict( _python_var_func.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_parg.updateLocalsDict( _python_var_arg.updateLocalsDict( _python_var_nondefs.updateLocalsDict( _python_var_defaults.updateLocalsDict( _python_var_varkw.updateLocalsDict( _python_var_varargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_plen.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base )
        {
           Py_DECREF( frame_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base );
           frame_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_True );
}
static PyObject *fparse_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_func = NULL;
    PyObject *_python_par_provided = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "args_check() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "args_check() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_func == key )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "args_check() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_provided == key )
            {
                if (unlikely( _python_par_provided ))
                {
                    PyErr_Format( PyExc_TypeError, "args_check() got multiple values for keyword argument 'provided'" );
                    goto error_exit;
                }

                _python_par_provided = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "args_check() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_func, key ) )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "args_check() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_provided, key ) )
            {
                if (unlikely( _python_par_provided ))
                {
                    PyErr_Format( PyExc_TypeError, "args_check() got multiple values for keyword argument 'provided'" );
                    goto error_exit;
                }

                _python_par_provided = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "args_check() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "args_check() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "args_check() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "args_check() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "args_check() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "args_check() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "args_check() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "args_check() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "args_check() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "args_check() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "args_check() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "args_check() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "args_check() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "args_check() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_func != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "args_check() got multiple values for keyword argument 'func'" );
             goto error_exit;
         }

        _python_par_func = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_provided != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "args_check() got multiple values for keyword argument 'provided'" );
             goto error_exit;
         }

        _python_par_provided = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base( self, _python_par_name, _python_par_func, _python_par_provided );

error_exit:;

    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_func );
    Py_XDECREF( _python_par_provided );

    return NULL;
}

static PyObject *dparse_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4___str___of_class_14_FilterExpression_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_4___str___of_class_14_FilterExpression_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_4___str___of_class_14_FilterExpression_of_module_django__template__base ) )
    {
        if ( frame_function_4___str___of_class_14_FilterExpression_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4___str___of_class_14_FilterExpression_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_4___str___of_class_14_FilterExpression_of_module_django__template__base );
        }

        frame_function_4___str___of_class_14_FilterExpression_of_module_django__template__base = MAKE_FRAME( _codeobj_4e15beb0677d88cb09d46c2f9e9fe145, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_4___str___of_class_14_FilterExpression_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_4___str___of_class_14_FilterExpression_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 657 );
        return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_token );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_4___str___of_class_14_FilterExpression_of_module_django__template__base )
        {
           Py_DECREF( frame_function_4___str___of_class_14_FilterExpression_of_module_django__template__base );
           frame_function_4___str___of_class_14_FilterExpression_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4___str___of_class_14_FilterExpression_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__str__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__str__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__str__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_4___str___of_class_14_FilterExpression_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_4___str___of_class_14_FilterExpression_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_4___str___of_class_14_FilterExpression_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4___str___of_class_14_FilterExpression_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_15_resolve_variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_path, PyObject *_python_par_context )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_path( _python_str_plain_path, _python_par_path );
    PyObjectLocalParameterVariableNoDel _python_var_context( _python_str_plain_context, _python_par_context );

    // Actual function code.
    static PyFrameObject *frame_function_15_resolve_variable_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_15_resolve_variable_of_module_django__template__base ) )
    {
        if ( frame_function_15_resolve_variable_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_15_resolve_variable_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_15_resolve_variable_of_module_django__template__base );
        }

        frame_function_15_resolve_variable_of_module_django__template__base = MAKE_FRAME( _codeobj_1cfb6d8f892adf945b93df50a3d7dd44, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_15_resolve_variable_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_15_resolve_variable_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 666 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 call3;
            return ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( _mvar_django__template__base_Variable.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_path.asObject() ) ) ).asObject(), _python_str_plain_resolve ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_context.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_context.updateLocalsDict( _python_var_path.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_15_resolve_variable_of_module_django__template__base )
        {
           Py_DECREF( frame_function_15_resolve_variable_of_module_django__template__base );
           frame_function_15_resolve_variable_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_15_resolve_variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_path = NULL;
    PyObject *_python_par_context = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "resolve_variable() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_path == key )
            {
                if (unlikely( _python_par_path ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_variable() got multiple values for keyword argument 'path'" );
                    goto error_exit;
                }

                _python_par_path = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context == key )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_variable() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_path, key ) )
            {
                if (unlikely( _python_par_path ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_variable() got multiple values for keyword argument 'path'" );
                    goto error_exit;
                }

                _python_par_path = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context, key ) )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_variable() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "resolve_variable() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "resolve_variable() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "resolve_variable() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "resolve_variable() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "resolve_variable() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "resolve_variable() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "resolve_variable() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "resolve_variable() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "resolve_variable() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "resolve_variable() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "resolve_variable() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "resolve_variable() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "resolve_variable() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_path != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve_variable() got multiple values for keyword argument 'path'" );
             goto error_exit;
         }

        _python_par_path = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve_variable() got multiple values for keyword argument 'context'" );
             goto error_exit;
         }

        _python_par_context = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_15_resolve_variable_of_module_django__template__base( self, _python_par_path, _python_par_context );

error_exit:;

    Py_XDECREF( _python_par_path );
    Py_XDECREF( _python_par_context );

    return NULL;
}

static PyObject *dparse_function_15_resolve_variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_15_resolve_variable_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_15_resolve_variable_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_16_Variable_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_resolve( _python_str_plain_resolve );
    PyObjectLocalVariable _python_var___repr__( _python_str_plain___repr__ );
    PyObjectLocalVariable _python_var___str__( _python_str_plain___str__ );
    PyObjectLocalVariable _python_var__resolve_lookup( _python_str_plain__resolve_lookup );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var___doc__.assign0( _python_unicode_digest_10e7037dc49730d3aa5c172463672a9a );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_16_Variable_of_module_django__template__base(  ) );
    _python_var_resolve.assign1( MAKE_FUNCTION_function_2_resolve_of_class_16_Variable_of_module_django__template__base(  ) );
    _python_var___repr__.assign1( MAKE_FUNCTION_function_3___repr___of_class_16_Variable_of_module_django__template__base(  ) );
    _python_var___str__.assign1( MAKE_FUNCTION_function_4___str___of_class_16_Variable_of_module_django__template__base(  ) );
    _python_var__resolve_lookup.assign1( MAKE_FUNCTION_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base(  ) );
    return _python_var__resolve_lookup.updateLocalsDict( _python_var___str__.updateLocalsDict( _python_var___repr__.updateLocalsDict( _python_var_resolve.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_16_Variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_var )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_var( _python_str_plain_var, _python_par_var );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_16_Variable_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_16_Variable_of_module_django__template__base ) )
    {
        if ( frame_function_1___init___of_class_16_Variable_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_16_Variable_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1___init___of_class_16_Variable_of_module_django__template__base );
        }

        frame_function_1___init___of_class_16_Variable_of_module_django__template__base = MAKE_FRAME( _codeobj_bc3cae8168b756ca0fec1fa3d3ddcc70, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_16_Variable_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_16_Variable_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 688 );
        {
                PyObject *tmp_identifier = _python_var_var.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_var );
        }
        frame_guard.setLineNumber( 689 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain_literal );
        frame_guard.setLineNumber( 690 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain_lookups );
        frame_guard.setLineNumber( 691 );
        SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_translate );
        frame_guard.setLineNumber( 692 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain_message_context );
        frame_guard.setLineNumber( 694 );
        try
        {
            frame_guard.setLineNumber( 700 );
            {
                    PyObjectTemporary tmp_identifier( TO_FLOAT( _python_var_var.asObject() ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_literal );
            }
            frame_guard.setLineNumber( 704 );
            if ( ( SEQUENCE_CONTAINS_NOT_BOOL( _python_unicode_dot, _python_var_var.asObject() ) && SEQUENCE_CONTAINS_NOT_BOOL( _python_unicode_plain_e, PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_var.asObject(), _python_str_plain_lower ) ).asObject() ) ).asObject() ) ) )
            {
                frame_guard.setLineNumber( 705 );
                {
                        PyObjectTemporary tmp_identifier( TO_INT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_literal ) ).asObject() ) );
                        SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_literal );
                }
            }
            frame_guard.setLineNumber( 708 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_var.asObject(), _python_str_plain_endswith ) ).asObject(), _python_unicode_dot ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 709 );
                RAISE_EXCEPTION_WITH_TYPE( PyExc_ValueError, PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_ValueError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 713 );
                if ( ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_var.asObject(), _python_str_plain_startswith ) ).asObject(), _python_unicode_digest_06f7f064590d235cfa9a87dc4c446296 ) ).asObject() ) && CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_var.asObject(), _python_str_plain_endswith ) ).asObject(), _python_unicode_chr_41 ) ).asObject() ) ) )
                {
                    frame_guard.setLineNumber( 716 );
                    SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain_translate );
                    frame_guard.setLineNumber( 717 );
                    _python_var_var.assign1( LOOKUP_INDEX_SLICE( _python_var_var.asObject(), 2, -1 ) );
                }
                frame_guard.setLineNumber( 720 );
                try
                {
                    frame_guard.setLineNumber( 721 );
                    {
                        PyObjectTempKeeper0 call7;
                        PyObjectTempKeeper0 call9;
                        {
                            PyObjectTemporary tmp_identifier( ( call9.assign( _mvar_django__template__base_mark_safe.asObject0() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), PyObjectTemporary( ( call7.assign( _mvar_django__template__base_unescape_string_literal.asObject0() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_var.asObject() ) ) ).asObject() ) ) );
                            SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_literal );
                    }
                    }
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( PyExc_ValueError ) )
                    {
                        frame_guard.detachFrame();
                        frame_guard.setLineNumber( 725 );
                        {
                            PyObjectTempKeeper1 call3;
                            if ( ( RICH_COMPARE_BOOL_GT( PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_var.asObject(), _python_str_plain_find ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( _mvar_django__template__base_VARIABLE_ATTRIBUTE_SEPARATOR.asObject0(), _python_unicode_plain__ ) ).asObject() ) ) ).asObject(), _python_int_neg_1 ) || RICH_COMPARE_BOOL_EQ( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_var.asObject(), _python_int_0, 0 ) ).asObject(), _python_unicode_plain__ ) ) )
                        {
                            frame_guard.setLineNumber( 726 );
                            {
                                PyObjectTempKeeper0 call1;
                                {
                                    PyObjectTemporary tmp_exception_type( ( call1.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_f0d6ab84678ab33039fa84d153e310c3, _python_var_var.asObject() ) ).asObject() ) ) );
                                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                            }
                            }
                        }
                        }
                        frame_guard.setLineNumber( 729 );
                        {
                            PyObjectTempKeeper1 call5;
                            {
                                PyObjectTemporary tmp_identifier( TO_TUPLE( PyObjectTemporary( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_var.asObject(), _python_str_plain_split ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _mvar_django__template__base_VARIABLE_ATTRIBUTE_SEPARATOR.asObject0() ) ) ).asObject() ) );
                                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_lookups );
                        }
                        }
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_var.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_16_Variable_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1___init___of_class_16_Variable_of_module_django__template__base );
           frame_function_1___init___of_class_16_Variable_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_16_Variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_var = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_var == key )
            {
                if (unlikely( _python_par_var ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'var'" );
                    goto error_exit;
                }

                _python_par_var = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_var, key ) )
            {
                if (unlikely( _python_par_var ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'var'" );
                    goto error_exit;
                }

                _python_par_var = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_var != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'var'" );
             goto error_exit;
         }

        _python_par_var = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1___init___of_class_16_Variable_of_module_django__template__base( self, _python_par_self, _python_par_var );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_var );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_16_Variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_16_Variable_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_16_Variable_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_resolve_of_class_16_Variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_context )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_context( _python_str_plain_context, _python_par_context );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );

    // Actual function code.
    static PyFrameObject *frame_function_2_resolve_of_class_16_Variable_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2_resolve_of_class_16_Variable_of_module_django__template__base ) )
    {
        if ( frame_function_2_resolve_of_class_16_Variable_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_resolve_of_class_16_Variable_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2_resolve_of_class_16_Variable_of_module_django__template__base );
        }

        frame_function_2_resolve_of_class_16_Variable_of_module_django__template__base = MAKE_FRAME( _codeobj_803a74f9572e124d14aa5ccecfd567b7, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2_resolve_of_class_16_Variable_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2_resolve_of_class_16_Variable_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 733 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_lookups ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 735 );
            {
                PyObjectTempKeeper1 call1;
                _python_var_value.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__resolve_lookup ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_context.asObject() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 738 );
            _python_var_value.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_literal ) );
        }
        frame_guard.setLineNumber( 739 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_translate ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 740 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_message_context ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 741 );
                {
                    PyObjectTempKeeper0 call3;
                    PyObjectTempKeeper1 call4;
                    return ( call3.assign( _mvar_django__template__base_pgettext_lazy.asObject0() ), call4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_message_context ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_value.asObject() ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 743 );
                {
                    PyObjectTempKeeper0 call6;
                    return ( call6.assign( _mvar_django__template__base_ugettext_lazy.asObject0() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_value.asObject() ) );
                }
            }
        }
        frame_guard.setLineNumber( 744 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_context.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_value.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_resolve_of_class_16_Variable_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2_resolve_of_class_16_Variable_of_module_django__template__base );
           frame_function_2_resolve_of_class_16_Variable_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_resolve_of_class_16_Variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_context = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "resolve() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context == key )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context, key ) )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "resolve() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "resolve() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "resolve() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "resolve() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "resolve() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "resolve() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "resolve() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "resolve() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "resolve() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "resolve() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "resolve() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "resolve() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "resolve() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve() got multiple values for keyword argument 'context'" );
             goto error_exit;
         }

        _python_par_context = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_resolve_of_class_16_Variable_of_module_django__template__base( self, _python_par_self, _python_par_context );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_context );

    return NULL;
}

static PyObject *dparse_function_2_resolve_of_class_16_Variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_resolve_of_class_16_Variable_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_resolve_of_class_16_Variable_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3___repr___of_class_16_Variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3___repr___of_class_16_Variable_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_3___repr___of_class_16_Variable_of_module_django__template__base ) )
    {
        if ( frame_function_3___repr___of_class_16_Variable_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3___repr___of_class_16_Variable_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_3___repr___of_class_16_Variable_of_module_django__template__base );
        }

        frame_function_3___repr___of_class_16_Variable_of_module_django__template__base = MAKE_FRAME( _codeobj_f0f2224805fcca779f94a1557511ca40, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_3___repr___of_class_16_Variable_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_3___repr___of_class_16_Variable_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 747 );
        {
            PyObjectTempKeeper1 make_tuple1;
            return BINARY_OPERATION_REMAINDER( _python_unicode_digest_e80623dfae94766af02bddfb173f52ac, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___name__ ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_var ) ).asObject() ) ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3___repr___of_class_16_Variable_of_module_django__template__base )
        {
           Py_DECREF( frame_function_3___repr___of_class_16_Variable_of_module_django__template__base );
           frame_function_3___repr___of_class_16_Variable_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3___repr___of_class_16_Variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__repr__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__repr__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__repr__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3___repr___of_class_16_Variable_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3___repr___of_class_16_Variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3___repr___of_class_16_Variable_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3___repr___of_class_16_Variable_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4___str___of_class_16_Variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_4___str___of_class_16_Variable_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_4___str___of_class_16_Variable_of_module_django__template__base ) )
    {
        if ( frame_function_4___str___of_class_16_Variable_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4___str___of_class_16_Variable_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_4___str___of_class_16_Variable_of_module_django__template__base );
        }

        frame_function_4___str___of_class_16_Variable_of_module_django__template__base = MAKE_FRAME( _codeobj_a519677d311f0f5f83cfb95069ac9360, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_4___str___of_class_16_Variable_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_4___str___of_class_16_Variable_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 750 );
        return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_var );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_4___str___of_class_16_Variable_of_module_django__template__base )
        {
           Py_DECREF( frame_function_4___str___of_class_16_Variable_of_module_django__template__base );
           frame_function_4___str___of_class_16_Variable_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4___str___of_class_16_Variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__str__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__str__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__str__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_4___str___of_class_16_Variable_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_4___str___of_class_16_Variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_4___str___of_class_16_Variable_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4___str___of_class_16_Variable_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_context )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_context( _python_str_plain_context, _python_par_context );
    PyObjectLocalVariable _python_var_current( _python_str_plain_current );
    PyObjectLocalVariable _python_var_bit( _python_str_plain_bit );
    PyObjectLocalVariable _python_var_e( _python_str_plain_e );

    // Actual function code.
    static PyFrameObject *frame_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base ) )
    {
        if ( frame_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base );
        }

        frame_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base = MAKE_FRAME( _codeobj_c49bc14b674da4414882e64ed1c4ab81, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 761 );
        _python_var_current.assign0( _python_var_context.asObject() );
        frame_guard.setLineNumber( 762 );
        try
        {
            {
                frame_guard.setLineNumber( 763 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_lookups ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 763 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_var_bit.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 764 );
                    try
                    {
                        frame_guard.setLineNumber( 765 );
                        {
                            PyObjectTempKeeper0 subscr11;
                            _python_var_current.assign1( ( subscr11.assign( _python_var_current.asObject() ), LOOKUP_SUBSCRIPT( subscr11.asObject0(), _python_var_bit.asObject() ) ) );
                        }
                    }
                    catch ( PythonException &_exception )
                    {
                        if ( !_exception.hasTraceback() )
                        {
                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                        }
                        else
                        {
                            _exception.addTraceback( frame_guard.getFrame0() );
                        }

                        frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                        ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                        _exception.toExceptionHandler();

                        if ( _exception.matches( PyExc_TypeError ) || _exception.matches( PyExc_AttributeError ) || _exception.matches( PyExc_KeyError ) || _exception.matches( PyExc_ValueError ) )
                        {
                            frame_guard.detachFrame();
                            frame_guard.setLineNumber( 767 );
                            try
                            {
                                frame_guard.setLineNumber( 768 );
                                {
                                    PyObjectTempKeeper0 getattr8;
                                    _python_var_current.assign1( ( getattr8.assign( _python_var_current.asObject() ), BUILTIN_GETATTR( getattr8.asObject0(), _python_var_bit.asObject(), NULL ) ) );
                                }
                            }
                            catch ( PythonException &_exception )
                            {
                                if ( !_exception.hasTraceback() )
                                {
                                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                                }
                                else
                                {
                                    _exception.addTraceback( frame_guard.getFrame0() );
                                }

                                frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                                ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                                _exception.toExceptionHandler();

                                if ( _exception.matches( PyExc_TypeError ) || _exception.matches( PyExc_AttributeError ) )
                                {
                                    frame_guard.detachFrame();
                                    frame_guard.setLineNumber( 770 );
                                    try
                                    {
                                        frame_guard.setLineNumber( 771 );
                                        {
                                            PyObjectTempKeeper0 subscr6;
                                            _python_var_current.assign1( ( subscr6.assign( _python_var_current.asObject() ), LOOKUP_SUBSCRIPT( subscr6.asObject0(), PyObjectTemporary( TO_INT( _python_var_bit.asObject() ) ).asObject() ) ) );
                                        }
                                    }
                                    catch ( PythonException &_exception )
                                    {
                                        if ( !_exception.hasTraceback() )
                                        {
                                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                                        }
                                        else
                                        {
                                            _exception.addTraceback( frame_guard.getFrame0() );
                                        }

                                        frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                                        ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                                        _exception.toExceptionHandler();

                                        if ( _exception.matches( PyExc_IndexError ) || _exception.matches( PyExc_ValueError ) || _exception.matches( PyExc_KeyError ) || _exception.matches( PyExc_TypeError ) )
                                        {
                                            frame_guard.detachFrame();
                                            frame_guard.setLineNumber( 776 );
                                            {
                                                PyObjectTempKeeper0 call3;
                                                PyObjectTempKeeper0 make_tuple1;
                                                {
                                                    PyObjectTemporary tmp_exception_type( ( call3.assign( _mvar_django__template__base_VariableDoesNotExist.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_unicode_digest_1b282df2e0ea0758ba77d051179febeb, PyObjectTemporary( ( make_tuple1.assign( _python_var_bit.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_current.asObject() ) ) ).asObject() ) ) );
                                                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                                            }
                                            }
                                        }
                                        else
                                        {
                                            PyTracebackObject *tb = _exception.getTraceback();
                                            frame_guard.setLineNumber( tb->tb_lineno );
                                            _exception.setTraceback( tb->tb_next );
                                            tb->tb_next = NULL;

                                            throw;
                                        }
                                    }
                                }
                                else
                                {
                                    PyTracebackObject *tb = _exception.getTraceback();
                                    frame_guard.setLineNumber( tb->tb_lineno );
                                    _exception.setTraceback( tb->tb_next );
                                    tb->tb_next = NULL;

                                    throw;
                                }
                            }
                        }
                        else
                        {
                            PyTracebackObject *tb = _exception.getTraceback();
                            frame_guard.setLineNumber( tb->tb_lineno );
                            _exception.setTraceback( tb->tb_next );
                            tb->tb_next = NULL;

                            throw;
                        }
                    }
                    frame_guard.setLineNumber( 779 );
                    if ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_callable ), _python_var_current.asObject() ) ).asObject() ) )
                    {
                        frame_guard.setLineNumber( 780 );
                        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( BUILTIN_GETATTR( _python_var_current.asObject(), _python_unicode_plain_do_not_call_in_templates, Py_False ) ).asObject() ) )) )
                        {
                            frame_guard.setLineNumber( 782 );
                            if ( CHECK_IF_TRUE( PyObjectTemporary( BUILTIN_GETATTR( _python_var_current.asObject(), _python_unicode_plain_alters_data, Py_False ) ).asObject() ) )
                            {
                                frame_guard.setLineNumber( 783 );
                                _python_var_current.assign1( LOOKUP_ATTRIBUTE( _mvar_django__template__base_settings.asObject0(), _python_str_plain_TEMPLATE_STRING_IF_INVALID ) );
                            }
                            else
                            {
                                frame_guard.setLineNumber( 785 );
                                try
                                {
                                    frame_guard.setLineNumber( 786 );
                                    _python_var_current.assign1( CALL_FUNCTION_NO_ARGS( _python_var_current.asObject() ) );
                                }
                                catch ( PythonException &_exception )
                                {
                                    if ( !_exception.hasTraceback() )
                                    {
                                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                                    }
                                    else
                                    {
                                        _exception.addTraceback( frame_guard.getFrame0() );
                                    }

                                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                                    _exception.toExceptionHandler();

                                    if ( _exception.matches( PyExc_TypeError ) )
                                    {
                                        frame_guard.detachFrame();
                                        frame_guard.setLineNumber( 790 );
                                        _python_var_current.assign1( LOOKUP_ATTRIBUTE( _mvar_django__template__base_settings.asObject0(), _python_str_plain_TEMPLATE_STRING_IF_INVALID ) );
                                    }
                                    else
                                    {
                                        PyTracebackObject *tb = _exception.getTraceback();
                                        frame_guard.setLineNumber( tb->tb_lineno );
                                        _exception.setTraceback( tb->tb_next );
                                        tb->tb_next = NULL;

                                        throw;
                                    }
                                }
                            }
                        }
                    }

                   CONSIDER_THREADING();
                }
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_Exception ) )
            {
                frame_guard.detachFrame();
                _python_var_e.assign0( _exception.getValue() );
                frame_guard.setLineNumber( 792 );
                if ( CHECK_IF_TRUE( PyObjectTemporary( BUILTIN_GETATTR( _python_var_e.asObject(), _python_unicode_plain_silent_variable_failure, Py_False ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 793 );
                    _python_var_current.assign1( LOOKUP_ATTRIBUTE( _mvar_django__template__base_settings.asObject0(), _python_str_plain_TEMPLATE_STRING_IF_INVALID ) );
                }
                else
                {
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 797 );
        return _python_var_current.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_context.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_e.updateLocalsDict( _python_var_bit.updateLocalsDict( _python_var_current.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base )
        {
           Py_DECREF( frame_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base );
           frame_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_context = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_resolve_lookup() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_resolve_lookup() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context == key )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "_resolve_lookup() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_resolve_lookup() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context, key ) )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "_resolve_lookup() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_resolve_lookup() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_resolve_lookup() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_resolve_lookup() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_resolve_lookup() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_resolve_lookup() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_resolve_lookup() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_resolve_lookup() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_resolve_lookup() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_resolve_lookup() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_resolve_lookup() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_resolve_lookup() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_resolve_lookup() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_resolve_lookup() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_resolve_lookup() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_resolve_lookup() got multiple values for keyword argument 'context'" );
             goto error_exit;
         }

        _python_par_context = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base( self, _python_par_self, _python_par_context );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_context );

    return NULL;
}

static PyObject *dparse_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_17_Node_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_must_be_first( _python_str_plain_must_be_first );
    PyObjectLocalVariable _python_var_child_nodelists( _python_str_plain_child_nodelists );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );
    PyObjectLocalVariable _python_var___iter__( _python_str_plain___iter__ );
    PyObjectLocalVariable _python_var_get_nodes_by_type( _python_str_plain_get_nodes_by_type );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var_must_be_first.assign0( Py_False );
    _python_var_child_nodelists.assign0( _python_tuple_unicode_plain_nodelist_tuple );
    _python_var_render.assign1( MAKE_FUNCTION_function_1_render_of_class_17_Node_of_module_django__template__base(  ) );
    _python_var___iter__.assign1( MAKE_FUNCTION_function_2___iter___of_class_17_Node_of_module_django__template__base(  ) );
    _python_var_get_nodes_by_type.assign1( MAKE_FUNCTION_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base(  ) );
    return _python_var_get_nodes_by_type.updateLocalsDict( _python_var___iter__.updateLocalsDict( _python_var_render.updateLocalsDict( _python_var_child_nodelists.updateLocalsDict( _python_var_must_be_first.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );
}


static PyObject *impl_function_1_render_of_class_17_Node_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_context )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_context( _python_str_plain_context, _python_par_context );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1_render_of_class_17_Node_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_context = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context == key )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context, key ) )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
             goto error_exit;
         }

        _python_par_context = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_render_of_class_17_Node_of_module_django__template__base( self, _python_par_self, _python_par_context );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_context );

    return NULL;
}

static PyObject *dparse_function_1_render_of_class_17_Node_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_render_of_class_17_Node_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_render_of_class_17_Node_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_function_2___iter___of_class_17_Node_of_module_django__template__base_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel python_var_self;
};

static void _context_generator_function_2___iter___of_class_17_Node_of_module_django__template__base_destructor( void *context_voidptr )
{
    _context_generator_function_2___iter___of_class_17_Node_of_module_django__template__base_t *_python_context = (struct _context_generator_function_2___iter___of_class_17_Node_of_module_django__template__base_t *)context_voidptr;

    delete _python_context;
}

static void function_2___iter___of_class_17_Node_of_module_django__template__base_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_function_2___iter___of_class_17_Node_of_module_django__template__base_t *_python_context = (_context_generator_function_2___iter___of_class_17_Node_of_module_django__template__base_t *)generator->m_context;


        // Local variable inits


        // Actual function code.
        static PyFrameObject *frame_function_2___iter___of_class_17_Node_of_module_django__template__base = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_function_2___iter___of_class_17_Node_of_module_django__template__base ) )
        {
            if ( frame_function_2___iter___of_class_17_Node_of_module_django__template__base )
            {
#if _DEBUG_REFRAME
                puts( "reframe for function_2___iter___of_class_17_Node_of_module_django__template__base" );
#endif
                Py_DECREF( frame_function_2___iter___of_class_17_Node_of_module_django__template__base );
            }

            frame_function_2___iter___of_class_17_Node_of_module_django__template__base = MAKE_FRAME( _codeobj_4ad778066d6cfe39b956fb03515a0388, _module_django__template__base );
        }

        Py_INCREF( frame_function_2___iter___of_class_17_Node_of_module_django__template__base );
        generator->m_frame = frame_function_2___iter___of_class_17_Node_of_module_django__template__base;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            frame_guard.setLineNumber( 812 );
            YIELD_VALUE( generator, _python_context->python_var_self.asObject1() );

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_function_2___iter___of_class_17_Node_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // Create context if any
    struct _context_generator_function_2___iter___of_class_17_Node_of_module_django__template__base_t *_python_context = new _context_generator_function_2___iter___of_class_17_Node_of_module_django__template__base_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            function_2___iter___of_class_17_Node_of_module_django__template__base_context,
            _python_str_plain___iter__,
            _codeobj_4ad778066d6cfe39b956fb03515a0388,
            _python_context,
            _context_generator_function_2___iter___of_class_17_Node_of_module_django__template__base_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function __iter__" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var_self.setVariableNameAndValue( _python_str_plain_self, _python_par_self );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}
static PyObject *fparse_function_2___iter___of_class_17_Node_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__iter__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__iter__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__iter__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2___iter___of_class_17_Node_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___iter___of_class_17_Node_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2___iter___of_class_17_Node_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___iter___of_class_17_Node_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_nodetype )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_nodetype( _python_str_plain_nodetype, _python_par_nodetype );
    PyObjectLocalVariable _python_var_nodes( _python_str_plain_nodes );
    PyObjectLocalVariable _python_var_attr( _python_str_plain_attr );
    PyObjectLocalVariable _python_var_nodelist( _python_str_plain_nodelist );

    // Actual function code.
    _python_var_nodes.assign1( PyList_New( 0 ) );
    static PyFrameObject *frame_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base ) )
    {
        if ( frame_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base );
        }

        frame_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base = MAKE_FRAME( _codeobj_4185ca5aa617955b87b31076e6fd4bfa, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 820 );
        {
            PyObjectTempKeeper0 isinstance3;
            if ( ( isinstance3.assign( _python_var_self.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance3.asObject0(), _python_var_nodetype.asObject() ) ) )
        {
            frame_guard.setLineNumber( 821 );
            {
                PyObjectTempKeeper1 call1;
                DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_nodes.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_self.asObject() ) ) );
            }
        }
        }
        {
            frame_guard.setLineNumber( 822 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_child_nodelists ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 822 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_attr.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 823 );
                {
                    PyObjectTempKeeper0 getattr5;
                    _python_var_nodelist.assign1( ( getattr5.assign( _python_var_self.asObject() ), BUILTIN_GETATTR( getattr5.asObject0(), _python_var_attr.asObject(), Py_None ) ) );
                }
                frame_guard.setLineNumber( 824 );
                if ( CHECK_IF_TRUE( _python_var_nodelist.asObject() ) )
                {
                    frame_guard.setLineNumber( 825 );
                    {
                        PyObjectTempKeeper1 call10;
                        PyObjectTempKeeper1 call8;
                        DECREASE_REFCOUNT( ( call10.assign( LOOKUP_ATTRIBUTE( _python_var_nodes.asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), PyObjectTemporary( ( call8.assign( LOOKUP_ATTRIBUTE( _python_var_nodelist.asObject(), _python_str_plain_get_nodes_by_type ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_nodetype.asObject() ) ) ).asObject() ) ) );
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 826 );
        return _python_var_nodes.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_nodetype.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_nodelist.updateLocalsDict( _python_var_attr.updateLocalsDict( _python_var_nodes.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base )
        {
           Py_DECREF( frame_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base );
           frame_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_nodetype = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_nodes_by_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_nodes_by_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_nodetype == key )
            {
                if (unlikely( _python_par_nodetype ))
                {
                    PyErr_Format( PyExc_TypeError, "get_nodes_by_type() got multiple values for keyword argument 'nodetype'" );
                    goto error_exit;
                }

                _python_par_nodetype = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_nodes_by_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_nodetype, key ) )
            {
                if (unlikely( _python_par_nodetype ))
                {
                    PyErr_Format( PyExc_TypeError, "get_nodes_by_type() got multiple values for keyword argument 'nodetype'" );
                    goto error_exit;
                }

                _python_par_nodetype = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_nodes_by_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_nodes_by_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_nodetype != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_nodes_by_type() got multiple values for keyword argument 'nodetype'" );
             goto error_exit;
         }

        _python_par_nodetype = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base( self, _python_par_self, _python_par_nodetype );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_nodetype );

    return NULL;
}

static PyObject *dparse_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_18_NodeList_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_contains_nontext( _python_str_plain_contains_nontext );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );
    PyObjectLocalVariable _python_var_get_nodes_by_type( _python_str_plain_get_nodes_by_type );
    PyObjectLocalVariable _python_var_render_node( _python_str_plain_render_node );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var_contains_nontext.assign0( Py_False );
    _python_var_render.assign1( MAKE_FUNCTION_function_1_render_of_class_18_NodeList_of_module_django__template__base(  ) );
    _python_var_get_nodes_by_type.assign1( MAKE_FUNCTION_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base(  ) );
    _python_var_render_node.assign1( MAKE_FUNCTION_function_3_render_node_of_class_18_NodeList_of_module_django__template__base(  ) );
    return _python_var_render_node.updateLocalsDict( _python_var_get_nodes_by_type.updateLocalsDict( _python_var_render.updateLocalsDict( _python_var_contains_nontext.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );
}


static PyObject *impl_function_1_render_of_class_18_NodeList_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_context )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_context( _python_str_plain_context, _python_par_context );
    PyObjectLocalVariable _python_var_bits( _python_str_plain_bits );
    PyObjectLocalVariable _python_var_node( _python_str_plain_node );
    PyObjectLocalVariable _python_var_bit( _python_str_plain_bit );

    // Actual function code.
    _python_var_bits.assign1( PyList_New( 0 ) );
    static PyFrameObject *frame_function_1_render_of_class_18_NodeList_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1_render_of_class_18_NodeList_of_module_django__template__base ) )
    {
        if ( frame_function_1_render_of_class_18_NodeList_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_render_of_class_18_NodeList_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1_render_of_class_18_NodeList_of_module_django__template__base );
        }

        frame_function_1_render_of_class_18_NodeList_of_module_django__template__base = MAKE_FRAME( _codeobj_d77400344a8f39fe6e34905a5a12161d, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1_render_of_class_18_NodeList_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1_render_of_class_18_NodeList_of_module_django__template__base ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 835 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_self.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 835 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_node.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 836 );
                {
                    PyObjectTempKeeper0 isinstance4;
                    if ( ( isinstance4.assign( _python_var_node.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance4.asObject0(), _mvar_django__template__base_Node.asObject0() ) ) )
                {
                    frame_guard.setLineNumber( 837 );
                    {
                        PyObjectTempKeeper1 call1;
                        PyObjectTempKeeper0 call2;
                        _python_var_bit.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_render_node ) ), call2.assign( _python_var_node.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_context.asObject() ) ) );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 839 );
                    _python_var_bit.assign0( _python_var_node.asObject() );
                }
                }
                frame_guard.setLineNumber( 840 );
                {
                    PyObjectTempKeeper0 call6;
                    PyObjectTempKeeper1 call8;
                    DECREASE_REFCOUNT( ( call8.assign( LOOKUP_ATTRIBUTE( _python_var_bits.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), PyObjectTemporary( ( call6.assign( _mvar_django__template__base_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_bit.asObject() ) ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 841 );
        {
            PyObjectTempKeeper1 call10;
            PyObjectTempKeeper0 call12;
            return ( call12.assign( _mvar_django__template__base_mark_safe.asObject0() ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), PyObjectTemporary( ( call10.assign( LOOKUP_ATTRIBUTE( _python_unicode_empty, _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), _python_var_bits.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_context.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_bit.updateLocalsDict( _python_var_node.updateLocalsDict( _python_var_bits.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_render_of_class_18_NodeList_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1_render_of_class_18_NodeList_of_module_django__template__base );
           frame_function_1_render_of_class_18_NodeList_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_1_render_of_class_18_NodeList_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_context = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context == key )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context, key ) )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
             goto error_exit;
         }

        _python_par_context = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_render_of_class_18_NodeList_of_module_django__template__base( self, _python_par_self, _python_par_context );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_context );

    return NULL;
}

static PyObject *dparse_function_1_render_of_class_18_NodeList_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_render_of_class_18_NodeList_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_render_of_class_18_NodeList_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_nodetype )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_nodetype( _python_str_plain_nodetype, _python_par_nodetype );
    PyObjectLocalVariable _python_var_nodes( _python_str_plain_nodes );
    PyObjectLocalVariable _python_var_node( _python_str_plain_node );

    // Actual function code.
    _python_var_nodes.assign1( PyList_New( 0 ) );
    static PyFrameObject *frame_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base ) )
    {
        if ( frame_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base );
        }

        frame_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base = MAKE_FRAME( _codeobj_c783d13252bb06fb58b0cf31b583660a, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 846 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_self.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 846 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_node.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 847 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper1 call3;
                    DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_nodes.asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_node.asObject(), _python_str_plain_get_nodes_by_type ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_nodetype.asObject() ) ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 848 );
        return _python_var_nodes.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_nodetype.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_node.updateLocalsDict( _python_var_nodes.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base );
           frame_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_nodetype = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_nodes_by_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_nodes_by_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_nodetype == key )
            {
                if (unlikely( _python_par_nodetype ))
                {
                    PyErr_Format( PyExc_TypeError, "get_nodes_by_type() got multiple values for keyword argument 'nodetype'" );
                    goto error_exit;
                }

                _python_par_nodetype = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_nodes_by_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_nodetype, key ) )
            {
                if (unlikely( _python_par_nodetype ))
                {
                    PyErr_Format( PyExc_TypeError, "get_nodes_by_type() got multiple values for keyword argument 'nodetype'" );
                    goto error_exit;
                }

                _python_par_nodetype = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_nodes_by_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_nodes_by_type() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_nodes_by_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_nodetype != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_nodes_by_type() got multiple values for keyword argument 'nodetype'" );
             goto error_exit;
         }

        _python_par_nodetype = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base( self, _python_par_self, _python_par_nodetype );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_nodetype );

    return NULL;
}

static PyObject *dparse_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_render_node_of_class_18_NodeList_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_node, PyObject *_python_par_context )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_node( _python_str_plain_node, _python_par_node );
    PyObjectLocalParameterVariableNoDel _python_var_context( _python_str_plain_context, _python_par_context );

    // Actual function code.
    static PyFrameObject *frame_function_3_render_node_of_class_18_NodeList_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_3_render_node_of_class_18_NodeList_of_module_django__template__base ) )
    {
        if ( frame_function_3_render_node_of_class_18_NodeList_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_render_node_of_class_18_NodeList_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_3_render_node_of_class_18_NodeList_of_module_django__template__base );
        }

        frame_function_3_render_node_of_class_18_NodeList_of_module_django__template__base = MAKE_FRAME( _codeobj_99253c801efdab5abd16374925974661, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_3_render_node_of_class_18_NodeList_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_3_render_node_of_class_18_NodeList_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 851 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_node.asObject(), _python_str_plain_render ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_context.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_context.updateLocalsDict( _python_var_node.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_render_node_of_class_18_NodeList_of_module_django__template__base )
        {
           Py_DECREF( frame_function_3_render_node_of_class_18_NodeList_of_module_django__template__base );
           frame_function_3_render_node_of_class_18_NodeList_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_render_node_of_class_18_NodeList_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_node = NULL;
    PyObject *_python_par_context = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render_node() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render_node() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_node == key )
            {
                if (unlikely( _python_par_node ))
                {
                    PyErr_Format( PyExc_TypeError, "render_node() got multiple values for keyword argument 'node'" );
                    goto error_exit;
                }

                _python_par_node = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context == key )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render_node() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render_node() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_node, key ) )
            {
                if (unlikely( _python_par_node ))
                {
                    PyErr_Format( PyExc_TypeError, "render_node() got multiple values for keyword argument 'node'" );
                    goto error_exit;
                }

                _python_par_node = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context, key ) )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render_node() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render_node() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render_node() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render_node() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render_node() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render_node() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render_node() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render_node() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render_node() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render_node() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render_node() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render_node() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "render_node() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render_node() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render_node() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_node != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render_node() got multiple values for keyword argument 'node'" );
             goto error_exit;
         }

        _python_par_node = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render_node() got multiple values for keyword argument 'context'" );
             goto error_exit;
         }

        _python_par_context = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_3_render_node_of_class_18_NodeList_of_module_django__template__base( self, _python_par_self, _python_par_node, _python_par_context );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_node );
    Py_XDECREF( _python_par_context );

    return NULL;
}

static PyObject *dparse_function_3_render_node_of_class_18_NodeList_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_3_render_node_of_class_18_NodeList_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_render_node_of_class_18_NodeList_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_19_TextNode_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___repr__( _python_str_plain___repr__ );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_19_TextNode_of_module_django__template__base(  ) );
    _python_var___repr__.assign1( MAKE_FUNCTION_function_2___repr___of_class_19_TextNode_of_module_django__template__base(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_3_render_of_class_19_TextNode_of_module_django__template__base(  ) );
    return _python_var_render.updateLocalsDict( _python_var___repr__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_19_TextNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_s )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_s( _python_str_plain_s, _python_par_s );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_19_TextNode_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_19_TextNode_of_module_django__template__base ) )
    {
        if ( frame_function_1___init___of_class_19_TextNode_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_19_TextNode_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1___init___of_class_19_TextNode_of_module_django__template__base );
        }

        frame_function_1___init___of_class_19_TextNode_of_module_django__template__base = MAKE_FRAME( _codeobj_7809f0085e87093417adc45340e92415, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_19_TextNode_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_19_TextNode_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 855 );
        {
                PyObject *tmp_identifier = _python_var_s.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_s );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_s.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_19_TextNode_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1___init___of_class_19_TextNode_of_module_django__template__base );
           frame_function_1___init___of_class_19_TextNode_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_19_TextNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_s = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_s == key )
            {
                if (unlikely( _python_par_s ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 's'" );
                    goto error_exit;
                }

                _python_par_s = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_s, key ) )
            {
                if (unlikely( _python_par_s ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 's'" );
                    goto error_exit;
                }

                _python_par_s = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_s != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 's'" );
             goto error_exit;
         }

        _python_par_s = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1___init___of_class_19_TextNode_of_module_django__template__base( self, _python_par_self, _python_par_s );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_s );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_19_TextNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_19_TextNode_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_19_TextNode_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___repr___of_class_19_TextNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2___repr___of_class_19_TextNode_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2___repr___of_class_19_TextNode_of_module_django__template__base ) )
    {
        if ( frame_function_2___repr___of_class_19_TextNode_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2___repr___of_class_19_TextNode_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2___repr___of_class_19_TextNode_of_module_django__template__base );
        }

        frame_function_2___repr___of_class_19_TextNode_of_module_django__template__base = MAKE_FRAME( _codeobj_4141099bc05a5a0cb0b3c4a6873338b7, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2___repr___of_class_19_TextNode_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2___repr___of_class_19_TextNode_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 858 );
        {
            PyObjectTempKeeper0 call1;
            return ( call1.assign( _mvar_django__template__base_force_str.asObject0() ), CALL_FUNCTION( call1.asObject0(), PyObjectTemporary( MAKE_TUPLE2( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_a887fcdde96454a34e18368215a6801e, PyObjectTemporary( LOOKUP_INDEX_SLICE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_s ) ).asObject(), 0, 25 ) ).asObject() ) ).asObject(), _python_unicode_plain_ascii ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_4593080baa302c9b17627b104a2461c2 ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2___repr___of_class_19_TextNode_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2___repr___of_class_19_TextNode_of_module_django__template__base );
           frame_function_2___repr___of_class_19_TextNode_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2___repr___of_class_19_TextNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__repr__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__repr__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__repr__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2___repr___of_class_19_TextNode_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___repr___of_class_19_TextNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2___repr___of_class_19_TextNode_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___repr___of_class_19_TextNode_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_render_of_class_19_TextNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_context )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_context( _python_str_plain_context, _python_par_context );

    // Actual function code.
    static PyFrameObject *frame_function_3_render_of_class_19_TextNode_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_3_render_of_class_19_TextNode_of_module_django__template__base ) )
    {
        if ( frame_function_3_render_of_class_19_TextNode_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_render_of_class_19_TextNode_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_3_render_of_class_19_TextNode_of_module_django__template__base );
        }

        frame_function_3_render_of_class_19_TextNode_of_module_django__template__base = MAKE_FRAME( _codeobj_3cc0641f463eed15648640156360ca96, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_3_render_of_class_19_TextNode_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_3_render_of_class_19_TextNode_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 862 );
        return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_s );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_context.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_3_render_of_class_19_TextNode_of_module_django__template__base )
        {
           Py_DECREF( frame_function_3_render_of_class_19_TextNode_of_module_django__template__base );
           frame_function_3_render_of_class_19_TextNode_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_render_of_class_19_TextNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_context = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context == key )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context, key ) )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
             goto error_exit;
         }

        _python_par_context = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_render_of_class_19_TextNode_of_module_django__template__base( self, _python_par_self, _python_par_context );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_context );

    return NULL;
}

static PyObject *dparse_function_3_render_of_class_19_TextNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_render_of_class_19_TextNode_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_render_of_class_19_TextNode_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_20_render_value_in_context_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_value, PyObject *_python_par_context )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_context( _python_str_plain_context, _python_par_context );

    // Actual function code.
    static PyFrameObject *frame_function_20_render_value_in_context_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_20_render_value_in_context_of_module_django__template__base ) )
    {
        if ( frame_function_20_render_value_in_context_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_20_render_value_in_context_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_20_render_value_in_context_of_module_django__template__base );
        }

        frame_function_20_render_value_in_context_of_module_django__template__base = MAKE_FRAME( _codeobj_af9385ca6377146ebd3b01a1179ca9a2, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_20_render_value_in_context_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_20_render_value_in_context_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 870 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 call2;
            _python_var_value.assign1( ( call1.assign( _mvar_django__template__base_template_localtime.asObject0() ), call2.assign( MAKE_TUPLE1( _python_var_value.asObject() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_context.asObject(), _python_str_plain_use_tz ) ).asObject(), _python_str_plain_use_tz ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 871 );
        {
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper1 call5;
            _python_var_value.assign1( ( call4.assign( _mvar_django__template__base_localize.asObject0() ), call5.assign( MAKE_TUPLE1( _python_var_value.asObject() ) ), CALL_FUNCTION( call4.asObject0(), call5.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_context.asObject(), _python_str_plain_use_l10n ) ).asObject(), _python_str_plain_use_l10n ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 872 );
        {
            PyObjectTempKeeper0 call7;
            _python_var_value.assign1( ( call7.assign( _mvar_django__template__base_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 873 );
        {
            PyObjectTempKeeper0 isinstance11;
            PyObjectTempKeeper0 isinstance13;
            if ( ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_context.asObject(), _python_str_plain_autoescape ) ).asObject() ) && (!( ( isinstance11.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance11.asObject0(), _mvar_django__template__base_SafeData.asObject0() ) ) )) ) || ( isinstance13.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance13.asObject0(), _mvar_django__template__base_EscapeData.asObject0() ) ) ) )
        {
            frame_guard.setLineNumber( 875 );
            {
                PyObjectTempKeeper0 call9;
                return ( call9.assign( _mvar_django__template__base_escape.asObject0() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_var_value.asObject() ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 877 );
            return _python_var_value.asObject1();
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_context.updateLocalsDict( _python_var_value.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_20_render_value_in_context_of_module_django__template__base )
        {
           Py_DECREF( frame_function_20_render_value_in_context_of_module_django__template__base );
           frame_function_20_render_value_in_context_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_20_render_value_in_context_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_context = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render_value_in_context() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render_value_in_context() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context == key )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render_value_in_context() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render_value_in_context() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context, key ) )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render_value_in_context() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render_value_in_context() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render_value_in_context() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render_value_in_context() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render_value_in_context() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render_value_in_context() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render_value_in_context() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render_value_in_context() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render_value_in_context() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render_value_in_context() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render_value_in_context() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render_value_in_context() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "render_value_in_context() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render_value_in_context() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render_value_in_context() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render_value_in_context() got multiple values for keyword argument 'context'" );
             goto error_exit;
         }

        _python_par_context = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_20_render_value_in_context_of_module_django__template__base( self, _python_par_value, _python_par_context );

error_exit:;

    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_context );

    return NULL;
}

static PyObject *dparse_function_20_render_value_in_context_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_20_render_value_in_context_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_20_render_value_in_context_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_21_VariableNode_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___repr__( _python_str_plain___repr__ );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_21_VariableNode_of_module_django__template__base(  ) );
    _python_var___repr__.assign1( MAKE_FUNCTION_function_2___repr___of_class_21_VariableNode_of_module_django__template__base(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_3_render_of_class_21_VariableNode_of_module_django__template__base(  ) );
    return _python_var_render.updateLocalsDict( _python_var___repr__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_21_VariableNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_filter_expression )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_filter_expression( _python_str_plain_filter_expression, _python_par_filter_expression );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_21_VariableNode_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_21_VariableNode_of_module_django__template__base ) )
    {
        if ( frame_function_1___init___of_class_21_VariableNode_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_21_VariableNode_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1___init___of_class_21_VariableNode_of_module_django__template__base );
        }

        frame_function_1___init___of_class_21_VariableNode_of_module_django__template__base = MAKE_FRAME( _codeobj_d98ec92942a6aca1400abcfabbe23669, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_21_VariableNode_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_21_VariableNode_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 881 );
        {
                PyObject *tmp_identifier = _python_var_filter_expression.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_filter_expression );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_filter_expression.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_21_VariableNode_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1___init___of_class_21_VariableNode_of_module_django__template__base );
           frame_function_1___init___of_class_21_VariableNode_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_21_VariableNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_filter_expression = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_filter_expression == key )
            {
                if (unlikely( _python_par_filter_expression ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'filter_expression'" );
                    goto error_exit;
                }

                _python_par_filter_expression = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_filter_expression, key ) )
            {
                if (unlikely( _python_par_filter_expression ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'filter_expression'" );
                    goto error_exit;
                }

                _python_par_filter_expression = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_filter_expression != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'filter_expression'" );
             goto error_exit;
         }

        _python_par_filter_expression = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1___init___of_class_21_VariableNode_of_module_django__template__base( self, _python_par_self, _python_par_filter_expression );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_filter_expression );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_21_VariableNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_21_VariableNode_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_21_VariableNode_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___repr___of_class_21_VariableNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2___repr___of_class_21_VariableNode_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2___repr___of_class_21_VariableNode_of_module_django__template__base ) )
    {
        if ( frame_function_2___repr___of_class_21_VariableNode_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2___repr___of_class_21_VariableNode_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2___repr___of_class_21_VariableNode_of_module_django__template__base );
        }

        frame_function_2___repr___of_class_21_VariableNode_of_module_django__template__base = MAKE_FRAME( _codeobj_62dabee2d4b579e48833225e2b48b329, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2___repr___of_class_21_VariableNode_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2___repr___of_class_21_VariableNode_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 884 );
        return BINARY_OPERATION_REMAINDER( _python_unicode_digest_01d5b49d0bc874893fa1b332fb6fc740, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_filter_expression ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2___repr___of_class_21_VariableNode_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2___repr___of_class_21_VariableNode_of_module_django__template__base );
           frame_function_2___repr___of_class_21_VariableNode_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2___repr___of_class_21_VariableNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__repr__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__repr__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__repr__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2___repr___of_class_21_VariableNode_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___repr___of_class_21_VariableNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2___repr___of_class_21_VariableNode_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___repr___of_class_21_VariableNode_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_render_of_class_21_VariableNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_context )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_context( _python_str_plain_context, _python_par_context );
    PyObjectLocalVariable _python_var_output( _python_str_plain_output );

    // Actual function code.
    static PyFrameObject *frame_function_3_render_of_class_21_VariableNode_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_3_render_of_class_21_VariableNode_of_module_django__template__base ) )
    {
        if ( frame_function_3_render_of_class_21_VariableNode_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_render_of_class_21_VariableNode_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_3_render_of_class_21_VariableNode_of_module_django__template__base );
        }

        frame_function_3_render_of_class_21_VariableNode_of_module_django__template__base = MAKE_FRAME( _codeobj_b22cc496c47ea236e9c8f7fe54e83399, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_3_render_of_class_21_VariableNode_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_3_render_of_class_21_VariableNode_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 887 );
        try
        {
            frame_guard.setLineNumber( 888 );
            {
                PyObjectTempKeeper1 call1;
                _python_var_output.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_filter_expression ) ).asObject(), _python_str_plain_resolve ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_context.asObject() ) ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_UnicodeDecodeError ) )
            {
                frame_guard.detachFrame();
                return INCREASE_REFCOUNT( _python_unicode_empty );
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 894 );
        {
            PyObjectTempKeeper0 call3;
            PyObjectTempKeeper0 call4;
            return ( call3.assign( _mvar_django__template__base_render_value_in_context.asObject0() ), call4.assign( _python_var_output.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_context.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_context.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_output.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_render_of_class_21_VariableNode_of_module_django__template__base )
        {
           Py_DECREF( frame_function_3_render_of_class_21_VariableNode_of_module_django__template__base );
           frame_function_3_render_of_class_21_VariableNode_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_render_of_class_21_VariableNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_context = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context == key )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context, key ) )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
             goto error_exit;
         }

        _python_par_context = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_render_of_class_21_VariableNode_of_module_django__template__base( self, _python_par_self, _python_par_context );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_context );

    return NULL;
}

static PyObject *dparse_function_3_render_of_class_21_VariableNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_render_of_class_21_VariableNode_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_render_of_class_21_VariableNode_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_22_token_kwargs_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_bits, PyObject *_python_par_parser, PyObject *_python_par_support_legacy )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_bits( _python_str_plain_bits, _python_par_bits );
    PyObjectLocalParameterVariableNoDel _python_var_parser( _python_str_plain_parser, _python_par_parser );
    PyObjectLocalParameterVariableNoDel _python_var_support_legacy( _python_str_plain_support_legacy, _python_par_support_legacy );
    PyObjectLocalVariable _python_var_match( _python_str_plain_match );
    PyObjectLocalVariable _python_var_kwarg_format( _python_str_plain_kwarg_format );
    PyObjectLocalVariable _python_var_kwargs( _python_str_plain_kwargs );
    PyObjectLocalVariable _python_var_key( _python_str_plain_key );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );

    // Actual function code.
    static PyFrameObject *frame_function_22_token_kwargs_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_22_token_kwargs_of_module_django__template__base ) )
    {
        if ( frame_function_22_token_kwargs_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_22_token_kwargs_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_22_token_kwargs_of_module_django__template__base );
        }

        frame_function_22_token_kwargs_of_module_django__template__base = MAKE_FRAME( _codeobj_61ffa2348ca71d7fbb9efbb4b45aa4f0, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_22_token_kwargs_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_22_token_kwargs_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 918 );
        if ( (!( CHECK_IF_TRUE( _python_var_bits.asObject() ) )) )
        {
            return PyDict_New();
        }
        frame_guard.setLineNumber( 920 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_match.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_kwarg_re.asObject0(), _python_str_plain_match ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_bits.asObject(), _python_int_0, 0 ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 921 );
        {
            PyObjectTempKeeper0 keeper_0;
            _python_var_kwarg_format.assign1( ( CHECK_IF_TRUE( keeper_0.assign( _python_var_match.asObject() ) ) ? CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_match.asObject(), _python_str_plain_group ) ).asObject(), _python_int_pos_1 ) : INCREASE_REFCOUNT( keeper_0.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 922 );
        if ( (!( CHECK_IF_TRUE( _python_var_kwarg_format.asObject() ) )) )
        {
            frame_guard.setLineNumber( 923 );
            if ( (!( CHECK_IF_TRUE( _python_var_support_legacy.asObject() ) )) )
            {
                return PyDict_New();
            }
            frame_guard.setLineNumber( 925 );
            if ( ( RICH_COMPARE_BOOL_LT( PyObjectTemporary( BUILTIN_LEN( _python_var_bits.asObject() ) ).asObject(), _python_int_pos_3 ) || RICH_COMPARE_BOOL_NE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_bits.asObject(), _python_int_pos_1, 1 ) ).asObject(), _python_unicode_plain_as ) ) )
            {
                return PyDict_New();
            }
        }
        _python_var_kwargs.assign1( PyDict_New() );
        frame_guard.setLineNumber( 929 );
        while( true )
        {
            frame_guard.setLineNumber( 929 );
            if ( (!( CHECK_IF_TRUE( _python_var_bits.asObject() ) )) )
            {
                frame_guard.setLineNumber( 929 );
                break;
            }
            frame_guard.setLineNumber( 930 );
            if ( CHECK_IF_TRUE( _python_var_kwarg_format.asObject() ) )
            {
                frame_guard.setLineNumber( 931 );
                {
                    PyObjectTempKeeper1 call3;
                    _python_var_match.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_kwarg_re.asObject0(), _python_str_plain_match ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_bits.asObject(), _python_int_0, 0 ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 932 );
                if ( ( (!( CHECK_IF_TRUE( _python_var_match.asObject() ) )) || (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_match.asObject(), _python_str_plain_group ) ).asObject(), _python_int_pos_1 ) ).asObject() ) )) ) )
                {
                    frame_guard.setLineNumber( 933 );
                    return _python_var_kwargs.asObject1();
                }
                {
                    frame_guard.setLineNumber( 934 );
                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_match.asObject(), _python_str_plain_groups ) ).asObject() ) ).asObject() ) );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                    _python_var_key.assign0( _python_tmp_element_1.asObject() );
                    _python_var_value.assign0( _python_tmp_element_2.asObject() );
                }
                frame_guard.setLineNumber( 935 );
                DEL_SLICE( _python_var_bits.asObject(), 0, 1 );
            }
            else
            {
                frame_guard.setLineNumber( 937 );
                if ( ( RICH_COMPARE_BOOL_LT( PyObjectTemporary( BUILTIN_LEN( _python_var_bits.asObject() ) ).asObject(), _python_int_pos_3 ) || RICH_COMPARE_BOOL_NE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_bits.asObject(), _python_int_pos_1, 1 ) ).asObject(), _python_unicode_plain_as ) ) )
                {
                    frame_guard.setLineNumber( 938 );
                    return _python_var_kwargs.asObject1();
                }
                {
                    frame_guard.setLineNumber( 939 );
                    PyObject *_tmp_python_tmp_source_iter;
                    {
                        PyObjectTempKeeper1 make_tuple5;
                        _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple5.assign( LOOKUP_SUBSCRIPT_CONST( _python_var_bits.asObject(), _python_int_pos_2, 2 ) ), MAKE_TUPLE2( make_tuple5.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_bits.asObject(), _python_int_0, 0 ) ).asObject() ) ) ).asObject() );
                    }
                    PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                    _python_var_key.assign0( _python_tmp_element_1.asObject() );
                    _python_var_value.assign0( _python_tmp_element_2.asObject() );
                }
                frame_guard.setLineNumber( 940 );
                DEL_SLICE( _python_var_bits.asObject(), 0, 3 );
            }
            frame_guard.setLineNumber( 941 );
            {
                PyObjectTempKeeper1 call7;
                {
                    PyObjectTemporary tmp_identifier( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_parser.asObject(), _python_str_plain_compile_filter ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_value.asObject() ) ) );
                    PyObject *tmp_subscribed = _python_var_kwargs.asObject();
                    SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, _python_var_key.asObject() );
            }
            }
            frame_guard.setLineNumber( 942 );
            if ( ( CHECK_IF_TRUE( _python_var_bits.asObject() ) && (!( CHECK_IF_TRUE( _python_var_kwarg_format.asObject() ) )) ) )
            {
                frame_guard.setLineNumber( 943 );
                if ( RICH_COMPARE_BOOL_NE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_bits.asObject(), _python_int_0, 0 ) ).asObject(), _python_unicode_plain_and ) )
                {
                    frame_guard.setLineNumber( 944 );
                    return _python_var_kwargs.asObject1();
                }
                frame_guard.setLineNumber( 945 );
                DEL_SLICE( _python_var_bits.asObject(), 0, 1 );
            }

           CONSIDER_THREADING();
        }
        frame_guard.setLineNumber( 946 );
        return _python_var_kwargs.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_support_legacy.updateLocalsDict( _python_var_parser.updateLocalsDict( _python_var_bits.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_key.updateLocalsDict( _python_var_kwargs.updateLocalsDict( _python_var_kwarg_format.updateLocalsDict( _python_var_match.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_22_token_kwargs_of_module_django__template__base )
        {
           Py_DECREF( frame_function_22_token_kwargs_of_module_django__template__base );
           frame_function_22_token_kwargs_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_22_token_kwargs_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_bits = NULL;
    PyObject *_python_par_parser = NULL;
    PyObject *_python_par_support_legacy = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "token_kwargs() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_bits == key )
            {
                if (unlikely( _python_par_bits ))
                {
                    PyErr_Format( PyExc_TypeError, "token_kwargs() got multiple values for keyword argument 'bits'" );
                    goto error_exit;
                }

                _python_par_bits = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_parser == key )
            {
                if (unlikely( _python_par_parser ))
                {
                    PyErr_Format( PyExc_TypeError, "token_kwargs() got multiple values for keyword argument 'parser'" );
                    goto error_exit;
                }

                _python_par_parser = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_support_legacy == key )
            {
                if (unlikely( _python_par_support_legacy ))
                {
                    PyErr_Format( PyExc_TypeError, "token_kwargs() got multiple values for keyword argument 'support_legacy'" );
                    goto error_exit;
                }

                _python_par_support_legacy = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_bits, key ) )
            {
                if (unlikely( _python_par_bits ))
                {
                    PyErr_Format( PyExc_TypeError, "token_kwargs() got multiple values for keyword argument 'bits'" );
                    goto error_exit;
                }

                _python_par_bits = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_parser, key ) )
            {
                if (unlikely( _python_par_parser ))
                {
                    PyErr_Format( PyExc_TypeError, "token_kwargs() got multiple values for keyword argument 'parser'" );
                    goto error_exit;
                }

                _python_par_parser = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_support_legacy, key ) )
            {
                if (unlikely( _python_par_support_legacy ))
                {
                    PyErr_Format( PyExc_TypeError, "token_kwargs() got multiple values for keyword argument 'support_legacy'" );
                    goto error_exit;
                }

                _python_par_support_legacy = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "token_kwargs() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "token_kwargs() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "token_kwargs() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "token_kwargs() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "token_kwargs() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "token_kwargs() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "token_kwargs() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "token_kwargs() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "token_kwargs() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "token_kwargs() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "token_kwargs() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "token_kwargs() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "token_kwargs() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_bits != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "token_kwargs() got multiple values for keyword argument 'bits'" );
             goto error_exit;
         }

        _python_par_bits = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_parser != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "token_kwargs() got multiple values for keyword argument 'parser'" );
             goto error_exit;
         }

        _python_par_parser = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_support_legacy != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "token_kwargs() got multiple values for keyword argument 'support_legacy'" );
             goto error_exit;
         }

        _python_par_support_legacy = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_support_legacy == NULL )
    {
        _python_par_support_legacy = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_support_legacy );
    }


    return impl_function_22_token_kwargs_of_module_django__template__base( self, _python_par_bits, _python_par_parser, _python_par_support_legacy );

error_exit:;

    Py_XDECREF( _python_par_bits );
    Py_XDECREF( _python_par_parser );
    Py_XDECREF( _python_par_support_legacy );

    return NULL;
}

static PyObject *dparse_function_22_token_kwargs_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_22_token_kwargs_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_22_token_kwargs_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_23_parse_bits_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_parser, PyObject *_python_par_bits, PyObject *_python_par_params, PyObject *_python_par_varargs, PyObject *_python_par_varkw, PyObject *_python_par_defaults, PyObject *_python_par_takes_context, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_parser( _python_str_plain_parser, _python_par_parser );
    PyObjectLocalParameterVariableNoDel _python_var_bits( _python_str_plain_bits, _python_par_bits );
    PyObjectLocalParameterVariableNoDel _python_var_params( _python_str_plain_params, _python_par_params );
    PyObjectLocalParameterVariableNoDel _python_var_varargs( _python_str_plain_varargs, _python_par_varargs );
    PyObjectLocalParameterVariableNoDel _python_var_varkw( _python_str_plain_varkw, _python_par_varkw );
    PyObjectLocalParameterVariableNoDel _python_var_defaults( _python_str_plain_defaults, _python_par_defaults );
    PyObjectLocalParameterVariableNoDel _python_var_takes_context( _python_str_plain_takes_context, _python_par_takes_context );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalVariable _python_var_args( _python_str_plain_args );
    PyObjectLocalVariable _python_var_kwargs( _python_str_plain_kwargs );
    PyObjectLocalVariable _python_var_unhandled_params( _python_str_plain_unhandled_params );
    PyObjectLocalVariable _python_var_bit( _python_str_plain_bit );
    PyObjectLocalVariable _python_var_kwarg( _python_str_plain_kwarg );
    PyObjectLocalVariable _python_var_param( _python_str_plain_param );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );
    PyObjectLocalVariable _python_var_p( _python_str_plain_p );

    // Actual function code.
    static PyFrameObject *frame_function_23_parse_bits_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_23_parse_bits_of_module_django__template__base ) )
    {
        if ( frame_function_23_parse_bits_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_23_parse_bits_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_23_parse_bits_of_module_django__template__base );
        }

        frame_function_23_parse_bits_of_module_django__template__base = MAKE_FRAME( _codeobj_4af450357dae37dd83205a7b0d16afda, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_23_parse_bits_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_23_parse_bits_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 955 );
        if ( CHECK_IF_TRUE( _python_var_takes_context.asObject() ) )
        {
            frame_guard.setLineNumber( 956 );
            if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_params.asObject(), _python_int_0, 0 ) ).asObject(), _python_unicode_plain_context ) )
            {
                frame_guard.setLineNumber( 957 );
                _python_var_params.assign1( LOOKUP_INDEX_SLICE( _python_var_params.asObject(), 1, PY_SSIZE_T_MAX ) );
            }
            else
            {
                frame_guard.setLineNumber( 959 );
                {
                    PyObjectTempKeeper0 call1;
                    {
                        PyObjectTemporary tmp_exception_type( ( call1.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_063f3b52f460e69159cffcd2854656b7, _python_var_name.asObject() ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
        }
        _python_var_args.assign1( PyList_New( 0 ) );
        _python_var_kwargs.assign1( PyDict_New() );
        frame_guard.setLineNumber( 964 );
        _python_var_unhandled_params.assign1( TO_LIST( _python_var_params.asObject() ) );
        {
            frame_guard.setLineNumber( 965 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_bits.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 965 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_bit.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 967 );
                {
                    PyObjectTempKeeper0 call3;
                    PyObjectTempKeeper1 call4;
                    _python_var_kwarg.assign1( ( call3.assign( _mvar_django__template__base_token_kwargs.asObject0() ), call4.assign( MAKE_LIST1( _python_var_bit.asObject1() ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_parser.asObject() ) ) );
                }
                frame_guard.setLineNumber( 968 );
                if ( CHECK_IF_TRUE( _python_var_kwarg.asObject() ) )
                {
                    {
                        frame_guard.setLineNumber( 970 );
                        PyObject *_tmp_python_tmp_source_iter;
                        {
                            PyObjectTempKeeper1 call6;
                            _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( TO_LIST( PyObjectTemporary( ( call6.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_six.asObject0(), _python_str_plain_iteritems ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_kwarg.asObject() ) ) ).asObject() ) ).asObject(), _python_int_0, 0 ) ).asObject() );
                        }
                        PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_param.assign0( _python_tmp_element_1.asObject() );
                        _python_var_value.assign0( _python_tmp_element_2.asObject() );
                    }
                    frame_guard.setLineNumber( 971 );
                    {
                        PyObjectTempKeeper0 cmp22;
                        if ( ( ( cmp22.assign( _python_var_param.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp22.asObject0(), _python_var_params.asObject() ) ) && ( _python_var_varkw.asObject() == Py_None ) ) )
                    {
                        frame_guard.setLineNumber( 973 );
                        {
                            PyObjectTempKeeper0 call10;
                            PyObjectTempKeeper0 make_tuple8;
                            {
                                PyObjectTemporary tmp_exception_type( ( call10.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_2b407e4f6db59c49cc48e63dc5cdc812, PyObjectTemporary( ( make_tuple8.assign( _python_var_name.asObject() ), MAKE_TUPLE2( make_tuple8.asObject0(), _python_var_param.asObject() ) ) ).asObject() ) ).asObject() ) ) );
                                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                        }
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 976 );
                        {
                            PyObjectTempKeeper0 cmp20;
                            if ( ( cmp20.assign( _python_var_param.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp20.asObject0(), _python_var_kwargs.asObject() ) ) )
                        {
                            frame_guard.setLineNumber( 978 );
                            {
                                PyObjectTempKeeper0 call14;
                                PyObjectTempKeeper0 make_tuple12;
                                {
                                    PyObjectTemporary tmp_exception_type( ( call14.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_cdcc2f39452a7affb6b4df70899ba976, PyObjectTemporary( ( make_tuple12.assign( _python_var_name.asObject() ), MAKE_TUPLE2( make_tuple12.asObject0(), _python_var_param.asObject() ) ) ).asObject() ) ).asObject() ) ) );
                                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                            }
                            }
                        }
                        else
                        {
                            frame_guard.setLineNumber( 983 );
                            {
                                    PyObject *tmp_identifier = _python_var_value.asObject();
                                    PyObject *tmp_subscribed = _python_var_kwargs.asObject();
                                    SET_SUBSCRIPT( tmp_identifier, tmp_subscribed, PyObjectTemporary( TO_STR( _python_var_param.asObject() ) ).asObject() );
                            }
                            frame_guard.setLineNumber( 984 );
                            {
                                PyObjectTempKeeper0 cmp18;
                                if ( ( cmp18.assign( _python_var_param.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp18.asObject0(), _python_var_unhandled_params.asObject() ) ) )
                            {
                                frame_guard.setLineNumber( 987 );
                                {
                                    PyObjectTempKeeper1 call16;
                                    DECREASE_REFCOUNT( ( call16.assign( LOOKUP_ATTRIBUTE( _python_var_unhandled_params.asObject(), _python_str_plain_remove ) ), CALL_FUNCTION_WITH_ARGS( call16.asObject0(), _python_var_param.asObject() ) ) );
                                }
                            }
                            }
                        }
                        }
                    }
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 989 );
                    if ( CHECK_IF_TRUE( _python_var_kwargs.asObject() ) )
                    {
                        frame_guard.setLineNumber( 990 );
                        {
                            PyObjectTempKeeper0 call24;
                            {
                                PyObjectTemporary tmp_exception_type( ( call24.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call24.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_49746e1ce312fd15eba8d94b145b901a, _python_var_name.asObject() ) ).asObject() ) ) );
                                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                        }
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 995 );
                        {
                            PyObjectTempKeeper1 call26;
                            PyObjectTempKeeper1 call28;
                            DECREASE_REFCOUNT( ( call28.assign( LOOKUP_ATTRIBUTE( _python_var_args.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call28.asObject0(), PyObjectTemporary( ( call26.assign( LOOKUP_ATTRIBUTE( _python_var_parser.asObject(), _python_str_plain_compile_filter ) ), CALL_FUNCTION_WITH_ARGS( call26.asObject0(), _python_var_bit.asObject() ) ) ).asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 996 );
                        try
                        {
                            frame_guard.setLineNumber( 998 );
                            DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_unhandled_params.asObject(), _python_str_plain_pop ) ).asObject(), _python_int_0 ) );
                        }
                        catch ( PythonException &_exception )
                        {
                            if ( !_exception.hasTraceback() )
                            {
                                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                            }
                            else
                            {
                                _exception.addTraceback( frame_guard.getFrame0() );
                            }

                            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                            _exception.toExceptionHandler();

                            if ( _exception.matches( PyExc_IndexError ) )
                            {
                                frame_guard.detachFrame();
                                frame_guard.setLineNumber( 1000 );
                                if ( ( _python_var_varargs.asObject() == Py_None ) )
                                {
                                    frame_guard.setLineNumber( 1001 );
                                    {
                                        PyObjectTempKeeper0 call30;
                                        {
                                            PyObjectTemporary tmp_exception_type( ( call30.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call30.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_89179ebb4cd0250239f901dea630474b, _python_var_name.asObject() ) ).asObject() ) ) );
                                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                                    }
                                    }
                                }
                            }
                            else
                            {
                                PyTracebackObject *tb = _exception.getTraceback();
                                frame_guard.setLineNumber( tb->tb_lineno );
                                _exception.setTraceback( tb->tb_next );
                                tb->tb_next = NULL;

                                throw;
                            }
                        }
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1004 );
        if ( ( _python_var_defaults.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 1007 );
            {
                PyObjectTempKeeper0 slice32;
                _python_var_unhandled_params.assign1( ( slice32.assign( _python_var_unhandled_params.asObject() ), LOOKUP_SLICE( slice32.asObject0(), Py_None, PyObjectTemporary( UNARY_OPERATION( PyNumber_Negative, PyObjectTemporary( BUILTIN_LEN( _python_var_defaults.asObject() ) ).asObject() ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 1008 );
        if ( CHECK_IF_TRUE( _python_var_unhandled_params.asObject() ) )
        {
            frame_guard.setLineNumber( 1010 );
            {
                PyObjectTempKeeper1 call35;
                PyObjectTempKeeper0 call39;
                PyObjectTempKeeper0 make_tuple37;
                {
                    PyObjectTemporary tmp_exception_type( ( call39.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call39.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_ec5e10c5bf0ef3b0bab02724da180c27, PyObjectTemporary( ( make_tuple37.assign( _python_var_name.asObject() ), MAKE_TUPLE2( make_tuple37.asObject0(), PyObjectTemporary( ( call35.assign( LOOKUP_ATTRIBUTE( _python_unicode_digest_fc763cb31e9938f37737394681228f83, _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call35.asObject0(), PyObjectTemporary( impl_listcontr_1_of_function_23_parse_bits_of_module_django__template__base( MAKE_ITERATOR( _python_var_unhandled_params.asObject() ), _python_var_p ) ).asObject() ) ) ).asObject() ) ) ).asObject() ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 1013 );
        {
            PyObjectTempKeeper0 make_tuple41;
            return ( make_tuple41.assign( _python_var_args.asObject() ), MAKE_TUPLE2( make_tuple41.asObject0(), _python_var_kwargs.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_takes_context.updateLocalsDict( _python_var_defaults.updateLocalsDict( _python_var_varkw.updateLocalsDict( _python_var_varargs.updateLocalsDict( _python_var_params.updateLocalsDict( _python_var_bits.updateLocalsDict( _python_var_parser.updateLocalsDict( _python_var_p.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_param.updateLocalsDict( _python_var_kwarg.updateLocalsDict( _python_var_bit.updateLocalsDict( _python_var_unhandled_params.updateLocalsDict( _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_23_parse_bits_of_module_django__template__base )
        {
           Py_DECREF( frame_function_23_parse_bits_of_module_django__template__base );
           frame_function_23_parse_bits_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_23_parse_bits_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_parser = NULL;
    PyObject *_python_par_bits = NULL;
    PyObject *_python_par_params = NULL;
    PyObject *_python_par_varargs = NULL;
    PyObject *_python_par_varkw = NULL;
    PyObject *_python_par_defaults = NULL;
    PyObject *_python_par_takes_context = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "parse_bits() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_parser == key )
            {
                if (unlikely( _python_par_parser ))
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'parser'" );
                    goto error_exit;
                }

                _python_par_parser = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_bits == key )
            {
                if (unlikely( _python_par_bits ))
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'bits'" );
                    goto error_exit;
                }

                _python_par_bits = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_params == key )
            {
                if (unlikely( _python_par_params ))
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'params'" );
                    goto error_exit;
                }

                _python_par_params = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_varargs == key )
            {
                if (unlikely( _python_par_varargs ))
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'varargs'" );
                    goto error_exit;
                }

                _python_par_varargs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_varkw == key )
            {
                if (unlikely( _python_par_varkw ))
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'varkw'" );
                    goto error_exit;
                }

                _python_par_varkw = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_defaults == key )
            {
                if (unlikely( _python_par_defaults ))
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'defaults'" );
                    goto error_exit;
                }

                _python_par_defaults = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_takes_context == key )
            {
                if (unlikely( _python_par_takes_context ))
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'takes_context'" );
                    goto error_exit;
                }

                _python_par_takes_context = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_parser, key ) )
            {
                if (unlikely( _python_par_parser ))
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'parser'" );
                    goto error_exit;
                }

                _python_par_parser = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_bits, key ) )
            {
                if (unlikely( _python_par_bits ))
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'bits'" );
                    goto error_exit;
                }

                _python_par_bits = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_params, key ) )
            {
                if (unlikely( _python_par_params ))
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'params'" );
                    goto error_exit;
                }

                _python_par_params = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_varargs, key ) )
            {
                if (unlikely( _python_par_varargs ))
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'varargs'" );
                    goto error_exit;
                }

                _python_par_varargs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_varkw, key ) )
            {
                if (unlikely( _python_par_varkw ))
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'varkw'" );
                    goto error_exit;
                }

                _python_par_varkw = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_defaults, key ) )
            {
                if (unlikely( _python_par_defaults ))
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'defaults'" );
                    goto error_exit;
                }

                _python_par_defaults = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_takes_context, key ) )
            {
                if (unlikely( _python_par_takes_context ))
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'takes_context'" );
                    goto error_exit;
                }

                _python_par_takes_context = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "parse_bits() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 8 ))
    {
        if ( 8 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "parse_bits() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "parse_bits() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "parse_bits() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "parse_bits() takes exactly %d arguments (%zd given)", 8, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 8 == 8 )
            {
                PyErr_Format( PyExc_TypeError, "parse_bits() takes exactly %d positional arguments (%zd given)", 8, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "parse_bits() takes at most %d positional arguments (%zd given)", 8, args_given + kw_only_found );
            }
#else
            if ( 8 == 8 )
            {
                PyErr_Format( PyExc_TypeError, "parse_bits() takes %d positional arguments but %zd were given", 8, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "parse_bits() takes at most %d positional arguments (%zd given)", 8, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 8 ))
    {
        if ( 8 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "parse_bits() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "parse_bits() takes exactly %d non-keyword arguments (%zd given)", 8, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 8 == 8 )
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() takes exactly %d arguments (%zd given)", 8, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "parse_bits() takes at least %d arguments (%zd given)", 8, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 8 ? args_given : 8;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_parser != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'parser'" );
             goto error_exit;
         }

        _python_par_parser = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_bits != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'bits'" );
             goto error_exit;
         }

        _python_par_bits = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_params != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'params'" );
             goto error_exit;
         }

        _python_par_params = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_varargs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'varargs'" );
             goto error_exit;
         }

        _python_par_varargs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_varkw != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'varkw'" );
             goto error_exit;
         }

        _python_par_varkw = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_defaults != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'defaults'" );
             goto error_exit;
         }

        _python_par_defaults = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_takes_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'takes_context'" );
             goto error_exit;
         }

        _python_par_takes_context = INCREASE_REFCOUNT( args[ 6 ] );
    }
    if (likely( 7 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "parse_bits() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 7 ] );
    }


    return impl_function_23_parse_bits_of_module_django__template__base( self, _python_par_parser, _python_par_bits, _python_par_params, _python_par_varargs, _python_par_varkw, _python_par_defaults, _python_par_takes_context, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_parser );
    Py_XDECREF( _python_par_bits );
    Py_XDECREF( _python_par_params );
    Py_XDECREF( _python_par_varargs );
    Py_XDECREF( _python_par_varkw );
    Py_XDECREF( _python_par_defaults );
    Py_XDECREF( _python_par_takes_context );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_23_parse_bits_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 8)
    {
        return impl_function_23_parse_bits_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_23_parse_bits_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_23_parse_bits_of_module_django__template__base( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_p )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1012 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1012 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_p.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_eee7b0934fe224b34ba6722d84ccd2bf, python_closure_p.asObject() ) ).asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_24_generic_tag_compiler_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_parser, PyObject *_python_par_token, PyObject *_python_par_params, PyObject *_python_par_varargs, PyObject *_python_par_varkw, PyObject *_python_par_defaults, PyObject *_python_par_name, PyObject *_python_par_takes_context, PyObject *_python_par_node_class )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_parser( _python_str_plain_parser, _python_par_parser );
    PyObjectLocalParameterVariableNoDel _python_var_token( _python_str_plain_token, _python_par_token );
    PyObjectLocalParameterVariableNoDel _python_var_params( _python_str_plain_params, _python_par_params );
    PyObjectLocalParameterVariableNoDel _python_var_varargs( _python_str_plain_varargs, _python_par_varargs );
    PyObjectLocalParameterVariableNoDel _python_var_varkw( _python_str_plain_varkw, _python_par_varkw );
    PyObjectLocalParameterVariableNoDel _python_var_defaults( _python_str_plain_defaults, _python_par_defaults );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_takes_context( _python_str_plain_takes_context, _python_par_takes_context );
    PyObjectLocalParameterVariableNoDel _python_var_node_class( _python_str_plain_node_class, _python_par_node_class );
    PyObjectLocalVariable _python_var_bits( _python_str_plain_bits );
    PyObjectLocalVariable _python_var_args( _python_str_plain_args );
    PyObjectLocalVariable _python_var_kwargs( _python_str_plain_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_24_generic_tag_compiler_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_24_generic_tag_compiler_of_module_django__template__base ) )
    {
        if ( frame_function_24_generic_tag_compiler_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_24_generic_tag_compiler_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_24_generic_tag_compiler_of_module_django__template__base );
        }

        frame_function_24_generic_tag_compiler_of_module_django__template__base = MAKE_FRAME( _codeobj_7839b75f50f888264bd63726e3f3958f, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_24_generic_tag_compiler_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_24_generic_tag_compiler_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1020 );
        _python_var_bits.assign1( LOOKUP_INDEX_SLICE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_token.asObject(), _python_str_plain_split_contents ) ).asObject() ) ).asObject(), 1, PY_SSIZE_T_MAX ) );
        {
            frame_guard.setLineNumber( 1021 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 call9;
                PyObjectTempKeeper0 make_tuple1;
                PyObjectTempKeeper0 make_tuple2;
                PyObjectTempKeeper0 make_tuple3;
                PyObjectTempKeeper0 make_tuple4;
                PyObjectTempKeeper0 make_tuple5;
                PyObjectTempKeeper0 make_tuple6;
                PyObjectTempKeeper0 make_tuple7;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call9.assign( _mvar_django__template__base_parse_bits.asObject0() ), CALL_FUNCTION_WITH_POSARGS( call9.asObject0(), PyObjectTemporary( ( make_tuple1.assign( _python_var_parser.asObject() ), make_tuple2.assign( _python_var_bits.asObject() ), make_tuple3.assign( _python_var_params.asObject() ), make_tuple4.assign( _python_var_varargs.asObject() ), make_tuple5.assign( _python_var_varkw.asObject() ), make_tuple6.assign( _python_var_defaults.asObject() ), make_tuple7.assign( _python_var_takes_context.asObject() ), MAKE_TUPLE8( make_tuple1.asObject0(), make_tuple2.asObject0(), make_tuple3.asObject0(), make_tuple4.asObject0(), make_tuple5.asObject0(), make_tuple6.asObject0(), make_tuple7.asObject0(), _python_var_name.asObject() ) ) ).asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            _python_var_args.assign0( _python_tmp_element_1.asObject() );
            _python_var_kwargs.assign0( _python_tmp_element_2.asObject() );
        }
        frame_guard.setLineNumber( 1023 );
        {
            PyObjectTempKeeper0 call11;
            PyObjectTempKeeper0 call12;
            PyObjectTempKeeper0 call13;
            return ( call11.assign( _python_var_node_class.asObject() ), call12.assign( _python_var_takes_context.asObject() ), call13.assign( _python_var_args.asObject() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), call12.asObject0(), call13.asObject0(), _python_var_kwargs.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_node_class.updateLocalsDict( _python_var_takes_context.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_defaults.updateLocalsDict( _python_var_varkw.updateLocalsDict( _python_var_varargs.updateLocalsDict( _python_var_params.updateLocalsDict( _python_var_token.updateLocalsDict( _python_var_parser.updateLocalsDict( _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_bits.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_24_generic_tag_compiler_of_module_django__template__base )
        {
           Py_DECREF( frame_function_24_generic_tag_compiler_of_module_django__template__base );
           frame_function_24_generic_tag_compiler_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_24_generic_tag_compiler_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_parser = NULL;
    PyObject *_python_par_token = NULL;
    PyObject *_python_par_params = NULL;
    PyObject *_python_par_varargs = NULL;
    PyObject *_python_par_varkw = NULL;
    PyObject *_python_par_defaults = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_takes_context = NULL;
    PyObject *_python_par_node_class = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "generic_tag_compiler() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_parser == key )
            {
                if (unlikely( _python_par_parser ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'parser'" );
                    goto error_exit;
                }

                _python_par_parser = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_token == key )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_params == key )
            {
                if (unlikely( _python_par_params ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'params'" );
                    goto error_exit;
                }

                _python_par_params = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_varargs == key )
            {
                if (unlikely( _python_par_varargs ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'varargs'" );
                    goto error_exit;
                }

                _python_par_varargs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_varkw == key )
            {
                if (unlikely( _python_par_varkw ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'varkw'" );
                    goto error_exit;
                }

                _python_par_varkw = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_defaults == key )
            {
                if (unlikely( _python_par_defaults ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'defaults'" );
                    goto error_exit;
                }

                _python_par_defaults = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_takes_context == key )
            {
                if (unlikely( _python_par_takes_context ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'takes_context'" );
                    goto error_exit;
                }

                _python_par_takes_context = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_node_class == key )
            {
                if (unlikely( _python_par_node_class ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'node_class'" );
                    goto error_exit;
                }

                _python_par_node_class = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_parser, key ) )
            {
                if (unlikely( _python_par_parser ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'parser'" );
                    goto error_exit;
                }

                _python_par_parser = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_token, key ) )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_params, key ) )
            {
                if (unlikely( _python_par_params ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'params'" );
                    goto error_exit;
                }

                _python_par_params = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_varargs, key ) )
            {
                if (unlikely( _python_par_varargs ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'varargs'" );
                    goto error_exit;
                }

                _python_par_varargs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_varkw, key ) )
            {
                if (unlikely( _python_par_varkw ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'varkw'" );
                    goto error_exit;
                }

                _python_par_varkw = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_defaults, key ) )
            {
                if (unlikely( _python_par_defaults ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'defaults'" );
                    goto error_exit;
                }

                _python_par_defaults = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_takes_context, key ) )
            {
                if (unlikely( _python_par_takes_context ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'takes_context'" );
                    goto error_exit;
                }

                _python_par_takes_context = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_node_class, key ) )
            {
                if (unlikely( _python_par_node_class ))
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'node_class'" );
                    goto error_exit;
                }

                _python_par_node_class = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "generic_tag_compiler() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 9 ))
    {
        if ( 9 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "generic_tag_compiler() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "generic_tag_compiler() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "generic_tag_compiler() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "generic_tag_compiler() takes exactly %d arguments (%zd given)", 9, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 9 == 9 )
            {
                PyErr_Format( PyExc_TypeError, "generic_tag_compiler() takes exactly %d positional arguments (%zd given)", 9, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "generic_tag_compiler() takes at most %d positional arguments (%zd given)", 9, args_given + kw_only_found );
            }
#else
            if ( 9 == 9 )
            {
                PyErr_Format( PyExc_TypeError, "generic_tag_compiler() takes %d positional arguments but %zd were given", 9, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "generic_tag_compiler() takes at most %d positional arguments (%zd given)", 9, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 9 ))
    {
        if ( 9 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "generic_tag_compiler() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "generic_tag_compiler() takes exactly %d non-keyword arguments (%zd given)", 9, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 9 == 9 )
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() takes exactly %d arguments (%zd given)", 9, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "generic_tag_compiler() takes at least %d arguments (%zd given)", 9, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 9 ? args_given : 9;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_parser != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'parser'" );
             goto error_exit;
         }

        _python_par_parser = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_token != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'token'" );
             goto error_exit;
         }

        _python_par_token = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_params != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'params'" );
             goto error_exit;
         }

        _python_par_params = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_varargs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'varargs'" );
             goto error_exit;
         }

        _python_par_varargs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_varkw != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'varkw'" );
             goto error_exit;
         }

        _python_par_varkw = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_defaults != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'defaults'" );
             goto error_exit;
         }

        _python_par_defaults = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 6 ] );
    }
    if (likely( 7 < args_usable_count ))
    {
         if (unlikely( _python_par_takes_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'takes_context'" );
             goto error_exit;
         }

        _python_par_takes_context = INCREASE_REFCOUNT( args[ 7 ] );
    }
    if (likely( 8 < args_usable_count ))
    {
         if (unlikely( _python_par_node_class != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "generic_tag_compiler() got multiple values for keyword argument 'node_class'" );
             goto error_exit;
         }

        _python_par_node_class = INCREASE_REFCOUNT( args[ 8 ] );
    }


    return impl_function_24_generic_tag_compiler_of_module_django__template__base( self, _python_par_parser, _python_par_token, _python_par_params, _python_par_varargs, _python_par_varkw, _python_par_defaults, _python_par_name, _python_par_takes_context, _python_par_node_class );

error_exit:;

    Py_XDECREF( _python_par_parser );
    Py_XDECREF( _python_par_token );
    Py_XDECREF( _python_par_params );
    Py_XDECREF( _python_par_varargs );
    Py_XDECREF( _python_par_varkw );
    Py_XDECREF( _python_par_defaults );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_takes_context );
    Py_XDECREF( _python_par_node_class );

    return NULL;
}

static PyObject *dparse_function_24_generic_tag_compiler_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 9)
    {
        return impl_function_24_generic_tag_compiler_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ), INCREASE_REFCOUNT( args[ 8 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_24_generic_tag_compiler_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_25_TagHelperNode_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_get_resolved_arguments( _python_str_plain_get_resolved_arguments );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var___doc__.assign0( _python_unicode_digest_62e4063f3b46678bda957d0b4c0a21bc );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base(  ) );
    _python_var_get_resolved_arguments.assign1( MAKE_FUNCTION_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base(  ) );
    return _python_var_get_resolved_arguments.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_takes_context, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_takes_context( _python_str_plain_takes_context, _python_par_takes_context );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base ) )
    {
        if ( frame_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_25_TagHelperNode_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base );
        }

        frame_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base = MAKE_FRAME( _codeobj_c04d7e1af9b25b18ec694df1c6addfd9, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1033 );
        {
                PyObject *tmp_identifier = _python_var_takes_context.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_takes_context );
        }
        frame_guard.setLineNumber( 1034 );
        {
                PyObject *tmp_identifier = _python_var_args.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_args );
        }
        frame_guard.setLineNumber( 1035 );
        {
                PyObject *tmp_identifier = _python_var_kwargs.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_kwargs );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_takes_context.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base );
           frame_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_takes_context = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_takes_context == key )
            {
                if (unlikely( _python_par_takes_context ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'takes_context'" );
                    goto error_exit;
                }

                _python_par_takes_context = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_args == key )
            {
                if (unlikely( _python_par_args ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'args'" );
                    goto error_exit;
                }

                _python_par_args = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_kwargs == key )
            {
                if (unlikely( _python_par_kwargs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'kwargs'" );
                    goto error_exit;
                }

                _python_par_kwargs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_takes_context, key ) )
            {
                if (unlikely( _python_par_takes_context ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'takes_context'" );
                    goto error_exit;
                }

                _python_par_takes_context = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_args, key ) )
            {
                if (unlikely( _python_par_args ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'args'" );
                    goto error_exit;
                }

                _python_par_args = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_kwargs, key ) )
            {
                if (unlikely( _python_par_kwargs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'kwargs'" );
                    goto error_exit;
                }

                _python_par_kwargs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_takes_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'takes_context'" );
             goto error_exit;
         }

        _python_par_takes_context = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_args != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'args'" );
             goto error_exit;
         }

        _python_par_args = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_kwargs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'kwargs'" );
             goto error_exit;
         }

        _python_par_kwargs = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base( self, _python_par_self, _python_par_takes_context, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_takes_context );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_context )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectSharedLocalVariable _python_var_context( _python_str_plain_context, _python_par_context );
    PyObjectLocalVariable _python_var_resolved_args( _python_str_plain_resolved_args );
    PyObjectLocalVariable _python_var_resolved_kwargs( _python_str_plain_resolved_kwargs );
    PyObjectLocalVariable _python_var_var( _python_str_plain_var );

    // Actual function code.
    static PyFrameObject *frame_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base ) )
    {
        if ( frame_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base );
        }

        frame_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base = MAKE_FRAME( _codeobj_dd8c3492655dab8c85b21419ca82a810, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1038 );
        _python_var_resolved_args.assign1( impl_listcontr_1_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_args ) ).asObject() ), _python_var_context, _python_var_var ) );
        frame_guard.setLineNumber( 1039 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_takes_context ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 1040 );
            {
                PyObjectTempKeeper1 op1;
                _python_var_resolved_args.assign1( ( op1.assign( MAKE_LIST1( _python_var_context.asObject1() ) ), BINARY_OPERATION_ADD( op1.asObject0(), _python_var_resolved_args.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 1041 );
        _python_var_resolved_kwargs.assign1( TO_DICT( PyObjectTemporary( impl_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_kwargs ) ).asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ), _python_var_context ) ).asObject(), NULL ) );
        frame_guard.setLineNumber( 1043 );
        {
            PyObjectTempKeeper0 make_tuple3;
            return ( make_tuple3.assign( _python_var_resolved_args.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), _python_var_resolved_kwargs.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_context.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_var.updateLocalsDict( _python_var_resolved_kwargs.updateLocalsDict( _python_var_resolved_args.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base );
           frame_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_context = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_resolved_arguments() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_resolved_arguments() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context == key )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "get_resolved_arguments() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_resolved_arguments() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context, key ) )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "get_resolved_arguments() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_resolved_arguments() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_resolved_arguments() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_resolved_arguments() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_resolved_arguments() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_resolved_arguments() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_resolved_arguments() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_resolved_arguments() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_resolved_arguments() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_resolved_arguments() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_resolved_arguments() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_resolved_arguments() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_resolved_arguments() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_resolved_arguments() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_resolved_arguments() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_resolved_arguments() got multiple values for keyword argument 'context'" );
             goto error_exit;
         }

        _python_par_context = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base( self, _python_par_self, _python_par_context );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_context );

    return NULL;
}

static PyObject *dparse_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base( PyObject *_python_par___iterator,PyObjectSharedLocalVariable &python_closure_context,PyObjectLocalVariable &python_closure_var )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1038 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1038 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_var.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper1 call1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( python_closure_var.asObject(), _python_str_plain_resolve ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), python_closure_context.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}



struct _context_generator_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectClosureVariable python_closure_context;
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_k;
    PyObjectLocalVariable python_var_v;
};

static void _context_generator_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base_destructor( void *context_voidptr )
{
    _context_generator_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base_t *_python_context = (struct _context_generator_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base_t *_python_context = (_context_generator_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_k.setVariableName( _python_str_plain_k );
        _python_context->python_var_v.setVariableName( _python_str_plain_v );

        // Actual function code.
        static PyFrameObject *frame_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base ) )
        {
            if ( frame_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base" );
#endif
                Py_DECREF( frame_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base );
            }

            frame_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base = MAKE_FRAME( _codeobj_fb1b58dd8f01a2d75132640ab9d2f2a3, _module_django__template__base );
        }

        Py_INCREF( frame_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base );
        generator->m_frame = frame_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 1041 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 1041 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        {
                            frame_guard.setLineNumber( 1041 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_context->python_var_k.assign0( _python_tmp_element_1.asObject() );
                            _python_context->python_var_v.assign0( _python_tmp_element_2.asObject() );
                        }
                        {
                            PyObjectTempKeeper1 call1;
                            PyObjectTempKeeper0 make_tuple3;
                            YIELD_VALUE( generator, ( make_tuple3.assign( _python_context->python_var_k.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_v.asObject(), _python_str_plain_resolve ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_context->python_closure_context.asObject() ) ) ).asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_context )
{
    // Create context if any
    struct _context_generator_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base_t *_python_context = new _context_generator_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base_t;
    _python_context->python_closure_context.shareWith( python_closure_context );

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base_context,
            _python_str_angle_genexpr,
            _codeobj_8a273590db23520151f5b487862c9d03,
            _python_context,
            _context_generator_genexpr_2_of_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_class_26_Library_of_module_django__template__base(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_tag( _python_str_plain_tag );
    PyObjectLocalVariable _python_var_tag_function( _python_str_plain_tag_function );
    PyObjectLocalVariable _python_var_filter( _python_str_plain_filter );
    PyObjectLocalVariable _python_var_filter_function( _python_str_plain_filter_function );
    PyObjectLocalVariable _python_var_simple_tag( _python_str_plain_simple_tag );
    PyObjectLocalVariable _python_var_assignment_tag( _python_str_plain_assignment_tag );
    PyObjectLocalVariable _python_var_inclusion_tag( _python_str_plain_inclusion_tag );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_26_Library_of_module_django__template__base(  ) );
    _python_var_tag.assign1( MAKE_FUNCTION_function_2_tag_of_class_26_Library_of_module_django__template__base(  ) );
    _python_var_tag_function.assign1( MAKE_FUNCTION_function_3_tag_function_of_class_26_Library_of_module_django__template__base(  ) );
    _python_var_filter.assign1( MAKE_FUNCTION_function_4_filter_of_class_26_Library_of_module_django__template__base(  ) );
    _python_var_filter_function.assign1( MAKE_FUNCTION_function_5_filter_function_of_class_26_Library_of_module_django__template__base(  ) );
    _python_var_simple_tag.assign1( MAKE_FUNCTION_function_6_simple_tag_of_class_26_Library_of_module_django__template__base(  ) );
    _python_var_assignment_tag.assign1( MAKE_FUNCTION_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base(  ) );
    static PyFrameObject *frame_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_class_26_Library_of_module_django__template__base );
        }

        frame_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_730c4d2e1d6550b6ac9a95cc32bf81b6, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1184 );
        _python_var_inclusion_tag.assign1( MAKE_FUNCTION_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( MAKE_TUPLE3( _mvar_django__template__base_Context.asObject0(), Py_False, Py_None ) ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_inclusion_tag.updateLocalsDict( _python_var_assignment_tag.updateLocalsDict( _python_var_simple_tag.updateLocalsDict( _python_var_filter_function.updateLocalsDict( _python_var_filter.updateLocalsDict( _python_var_tag_function.updateLocalsDict( _python_var_tag.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_class_26_Library_of_module_django__template__base );
           frame_class_26_Library_of_module_django__template__base = NULL;
        }

        throw;
    }
    return _python_var_inclusion_tag.updateLocalsDict( _python_var_assignment_tag.updateLocalsDict( _python_var_simple_tag.updateLocalsDict( _python_var_filter_function.updateLocalsDict( _python_var_filter.updateLocalsDict( _python_var_tag_function.updateLocalsDict( _python_var_tag.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_1___init___of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1___init___of_class_26_Library_of_module_django__template__base );
        }

        frame_function_1___init___of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_ed114c54e3681c25321c7a92fb5095ec, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1047 );
        SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain_filters );
        frame_guard.setLineNumber( 1048 );
        SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain_tags );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1___init___of_class_26_Library_of_module_django__template__base );
           frame_function_1___init___of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1___init___of_class_26_Library_of_module_django__template__base( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1___init___of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_compile_function )
{
    // No context is used.

    // Local variable declarations.
    PyObjectSharedLocalVariable _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectSharedLocalVariable _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_compile_function( _python_str_plain_compile_function, _python_par_compile_function );
    PyObjectLocalVariable _python_var_dec( _python_str_plain_dec );

    // Actual function code.
    static PyFrameObject *frame_function_2_tag_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2_tag_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_2_tag_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_tag_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2_tag_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_2_tag_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_54a0ff5f3e8ac97f688e50e304c69ff3, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2_tag_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2_tag_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1051 );
        if ( ( ( _python_var_name.asObject() == Py_None ) && ( _python_var_compile_function.asObject() == Py_None ) ) )
        {
            frame_guard.setLineNumber( 1053 );
            return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tag_function );
        }
        else
        {
            frame_guard.setLineNumber( 1054 );
            if ( ( ( _python_var_name.asObject() != Py_None ) && ( _python_var_compile_function.asObject() == Py_None ) ) )
            {
                frame_guard.setLineNumber( 1055 );
                if ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_callable ), _python_var_name.asObject() ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 1057 );
                    {
                        PyObjectTempKeeper1 call1;
                        return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tag_function ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_name.asObject() ) );
                    }
                }
                else
                {
                    _python_var_dec.assign1( MAKE_FUNCTION_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base( _python_var_name, _python_var_self ) );
                    frame_guard.setLineNumber( 1062 );
                    return _python_var_dec.asObject1();
                }
            }
            else
            {
                frame_guard.setLineNumber( 1063 );
                if ( ( ( _python_var_name.asObject() != Py_None ) && ( _python_var_compile_function.asObject() != Py_None ) ) )
                {
                    frame_guard.setLineNumber( 1065 );
                    {
                            PyObject *tmp_identifier = _python_var_compile_function.asObject();
                            PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tags ) );
                            SET_SUBSCRIPT( tmp_identifier, tmp_subscribed.asObject(), _python_var_name.asObject() );
                    }
                    frame_guard.setLineNumber( 1066 );
                    return _python_var_compile_function.asObject1();
                }
                else
                {
                    frame_guard.setLineNumber( 1068 );
                    {
                        PyObjectTempKeeper0 call5;
                        PyObjectTempKeeper0 make_tuple3;
                        {
                            PyObjectTemporary tmp_exception_type( ( call5.assign( _mvar_django__template__base_InvalidTemplateLibrary.asObject0() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_unicode_digest_0d4bd3bb782b00defc73f20c0871ceb0, PyObjectTemporary( ( make_tuple3.assign( _python_var_name.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), _python_var_compile_function.asObject() ) ) ).asObject() ) ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_compile_function.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_dec.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_tag_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2_tag_of_class_26_Library_of_module_django__template__base );
           frame_function_2_tag_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_compile_function = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "tag() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "tag() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_compile_function == key )
            {
                if (unlikely( _python_par_compile_function ))
                {
                    PyErr_Format( PyExc_TypeError, "tag() got multiple values for keyword argument 'compile_function'" );
                    goto error_exit;
                }

                _python_par_compile_function = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "tag() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_compile_function, key ) )
            {
                if (unlikely( _python_par_compile_function ))
                {
                    PyErr_Format( PyExc_TypeError, "tag() got multiple values for keyword argument 'compile_function'" );
                    goto error_exit;
                }

                _python_par_compile_function = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "tag() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "tag() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "tag() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "tag() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "tag() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "tag() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "tag() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "tag() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "tag() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "tag() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "tag() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "tag() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "tag() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "tag() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "tag() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_compile_function != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "tag() got multiple values for keyword argument 'compile_function'" );
             goto error_exit;
         }

        _python_par_compile_function = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_name == NULL )
    {
        _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_name );
    }
    if ( _python_par_compile_function == NULL )
    {
        _python_par_compile_function = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_compile_function );
    }


    return impl_function_2_tag_of_class_26_Library_of_module_django__template__base( self, _python_par_self, _python_par_name, _python_par_compile_function );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_compile_function );

    return NULL;
}

static PyObject *dparse_function_2_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_2_tag_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_tag_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_func )
{
    // The context of the function.
    struct _context_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (struct _context_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_func( _python_str_plain_func, _python_par_func );

    // Actual function code.
    static PyFrameObject *frame_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_4f6ffad62ed40775e8c2466beebcc106, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1061 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_context->python_closure_self.asObject(), _python_str_plain_tag ) ), call2.assign( _python_context->python_closure_name.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_func.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_func.updateLocalsDict( _python_context->python_closure_name.updateLocalsDict( _python_context->python_closure_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base );
           frame_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_func = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "dec() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_func == key )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_func, key ) )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "dec() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "dec() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "dec() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "dec() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "dec() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "dec() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "dec() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_func != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
             goto error_exit;
         }

        _python_par_func = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base( self, _python_par_func );

error_exit:;

    Py_XDECREF( _python_par_func );

    return NULL;
}

static PyObject *dparse_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_tag_function_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_func )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_func( _python_str_plain_func, _python_par_func );

    // Actual function code.
    static PyFrameObject *frame_function_3_tag_function_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_3_tag_function_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_3_tag_function_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_tag_function_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_3_tag_function_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_3_tag_function_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_7492b106cb07ca3d39bb52fa2e375210, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_3_tag_function_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_3_tag_function_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1072 );
        {
            PyObjectTempKeeper0 getattr1;
            {
                PyObject *tmp_identifier = _python_var_func.asObject();
                PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tags ) );
                SET_SUBSCRIPT( tmp_identifier, tmp_subscribed.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( getattr1.assign( _python_var_func.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), _python_unicode_plain__decorated_function, _python_var_func.asObject() ) ) ).asObject(), _python_str_plain___name__ ) ).asObject() );
        }
        }
        frame_guard.setLineNumber( 1073 );
        return _python_var_func.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_func.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_3_tag_function_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_3_tag_function_of_class_26_Library_of_module_django__template__base );
           frame_function_3_tag_function_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_tag_function_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_func = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "tag_function() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "tag_function() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_func == key )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "tag_function() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "tag_function() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_func, key ) )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "tag_function() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "tag_function() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "tag_function() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "tag_function() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "tag_function() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "tag_function() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "tag_function() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "tag_function() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "tag_function() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "tag_function() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "tag_function() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "tag_function() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "tag_function() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "tag_function() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "tag_function() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_func != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "tag_function() got multiple values for keyword argument 'func'" );
             goto error_exit;
         }

        _python_par_func = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_tag_function_of_class_26_Library_of_module_django__template__base( self, _python_par_self, _python_par_func );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_func );

    return NULL;
}

static PyObject *dparse_function_3_tag_function_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_tag_function_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_tag_function_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_filter_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_filter_func, PyObject *_python_par_flags )
{
    // No context is used.

    // Local variable declarations.
    PyObjectSharedLocalVariable _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectSharedLocalVariable _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_filter_func( _python_str_plain_filter_func, _python_par_filter_func );
    PyObjectSharedLocalVariable _python_var_flags( _python_str_plain_flags, _python_par_flags );
    PyObjectLocalVariable _python_var_dec( _python_str_plain_dec );
    PyObjectLocalVariable _python_var_attr( _python_str_plain_attr );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );

    // Actual function code.
    static PyFrameObject *frame_function_4_filter_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_4_filter_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_4_filter_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_filter_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_4_filter_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_4_filter_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_d283f699a1873f9081cfebf7ad449c4f, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_4_filter_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_4_filter_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1076 );
        if ( ( ( _python_var_name.asObject() == Py_None ) && ( _python_var_filter_func.asObject() == Py_None ) ) )
        {
            _python_var_dec.assign1( MAKE_FUNCTION_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( _python_var_flags, _python_var_self ) );
            frame_guard.setLineNumber( 1080 );
            return _python_var_dec.asObject1();
        }
        else
        {
            frame_guard.setLineNumber( 1082 );
            if ( ( ( _python_var_name.asObject() != Py_None ) && ( _python_var_filter_func.asObject() == Py_None ) ) )
            {
                frame_guard.setLineNumber( 1083 );
                if ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_callable ), _python_var_name.asObject() ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 1085 );
                    {
                        PyObjectTempKeeper1 call_tmp1;
                        PyObjectTempKeeper1 call_tmp2;
                        return ( call_tmp1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_filter_function ) ), call_tmp2.assign( MAKE_TUPLE1( _python_var_name.asObject() ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp1.asObject(), call_tmp2.asObject(), _python_var_flags.asObject1() ) );
                    }
                }
                else
                {
                    _python_var_dec.assign1( MAKE_FUNCTION_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( _python_var_flags, _python_var_name, _python_var_self ) );
                    frame_guard.setLineNumber( 1090 );
                    return _python_var_dec.asObject1();
                }
            }
            else
            {
                frame_guard.setLineNumber( 1092 );
                if ( ( ( _python_var_name.asObject() != Py_None ) && ( _python_var_filter_func.asObject() != Py_None ) ) )
                {
                    frame_guard.setLineNumber( 1094 );
                    {
                            PyObject *tmp_identifier = _python_var_filter_func.asObject();
                            PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_filters ) );
                            SET_SUBSCRIPT( tmp_identifier, tmp_subscribed.asObject(), _python_var_name.asObject() );
                    }
                    {
                        frame_guard.setLineNumber( 1095 );
                        PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_tuple_b0de1a044c768fe900ae7fe83db85f76_tuple ) );
                        while( true )
                        {
                            {
                                frame_guard.setLineNumber( 1095 );
                                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                if ( _tmp_unpack_1 == NULL )
                                {
                                    break;
                                }
                                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                                _python_var_attr.assign0( _python_tmp_iter_value.asObject() );
                            }
                            frame_guard.setLineNumber( 1096 );
                            {
                                PyObjectTempKeeper0 cmp12;
                                if ( ( cmp12.assign( _python_var_attr.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp12.asObject0(), _python_var_flags.asObject() ) ) )
                            {
                                frame_guard.setLineNumber( 1097 );
                                {
                                    PyObjectTempKeeper0 subscr4;
                                    _python_var_value.assign1( ( subscr4.assign( _python_var_flags.asObject() ), LOOKUP_SUBSCRIPT( subscr4.asObject0(), _python_var_attr.asObject() ) ) );
                                }
                                frame_guard.setLineNumber( 1099 );
                                {
                                    PyObjectTempKeeper0 setattr6;
                                    PyObjectTempKeeper0 setattr7;
                                    ( ( setattr6.assign( _python_var_filter_func.asObject() ), setattr7.assign( _python_var_attr.asObject() ), BUILTIN_SETATTR( setattr6.asObject0(), setattr7.asObject0(), _python_var_value.asObject() ) ), Py_None );
                                }
                                frame_guard.setLineNumber( 1102 );
                                if ( HAS_ATTRIBUTE( _python_var_filter_func.asObject(), _python_unicode_plain__decorated_function ) )
                                {
                                    frame_guard.setLineNumber( 1103 );
                                    {
                                        PyObjectTempKeeper0 setattr10;
                                        PyObjectTempKeeper1 setattr9;
                                        ( ( setattr9.assign( LOOKUP_ATTRIBUTE( _python_var_filter_func.asObject(), _python_str_plain__decorated_function ) ), setattr10.assign( _python_var_attr.asObject() ), BUILTIN_SETATTR( setattr9.asObject0(), setattr10.asObject0(), _python_var_value.asObject() ) ), Py_None );
                                    }
                                }
                            }
                            }

                           CONSIDER_THREADING();
                        }
                    }
                    frame_guard.setLineNumber( 1104 );
                    return _python_var_filter_func.asObject1();
                }
                else
                {
                    frame_guard.setLineNumber( 1106 );
                    {
                        PyObjectTempKeeper0 call16;
                        PyObjectTempKeeper0 make_tuple14;
                        {
                            PyObjectTemporary tmp_exception_type( ( call16.assign( _mvar_django__template__base_InvalidTemplateLibrary.asObject0() ), CALL_FUNCTION_WITH_ARGS( call16.asObject0(), _python_unicode_digest_42b49d44fa94aa6228a122dbdf3de77d, PyObjectTemporary( ( make_tuple14.assign( _python_var_name.asObject() ), MAKE_TUPLE2( make_tuple14.asObject0(), _python_var_filter_func.asObject() ) ) ).asObject() ) ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_flags.updateLocalsDict( _python_var_filter_func.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_attr.updateLocalsDict( _python_var_dec.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_filter_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_4_filter_of_class_26_Library_of_module_django__template__base );
           frame_function_4_filter_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_filter_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_filter_func = NULL;
    PyObject *_python_par_flags = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_flags = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_flags = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "filter() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_flags, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "filter() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_flags = (PyObject *)split_copy;
        }
        else
        {
            _python_par_flags = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "filter() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_flags, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_flags = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_flags, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_flags, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument name was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_flags, _python_str_plain_name );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_name == NULL );

            _python_par_name = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_flags, _python_str_plain_name );

            kw_found += 1;
        }
    }

    // Check if argument filter_func was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_flags, _python_str_plain_filter_func );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_filter_func == NULL );

            _python_par_filter_func = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_flags, _python_str_plain_filter_func );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "filter() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "filter() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "filter() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "filter() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "filter() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "filter() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "filter() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "filter() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "filter() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "filter() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "filter() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "filter() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "filter() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "filter() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_filter_func != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "filter() got multiple values for keyword argument 'filter_func'" );
             goto error_exit;
         }

        _python_par_filter_func = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_name == NULL )
    {
        _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_name );
    }
    if ( _python_par_filter_func == NULL )
    {
        _python_par_filter_func = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_filter_func );
    }


    return impl_function_4_filter_of_class_26_Library_of_module_django__template__base( self, _python_par_self, _python_par_name, _python_par_filter_func, _python_par_flags );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_filter_func );
    Py_XDECREF( _python_par_flags );

    return NULL;
}

static PyObject *dparse_function_4_filter_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_4_filter_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_4_filter_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_func )
{
    // The context of the function.
    struct _context_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_t *_python_context = (struct _context_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_func( _python_str_plain_func, _python_par_func );

    // Actual function code.
    static PyFrameObject *frame_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_a5591a48b8af4ce6aaf91bfe4d9f821a, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1079 );
        {
            PyObjectTempKeeper1 call_tmp1;
            PyObjectTempKeeper1 call_tmp2;
            return ( call_tmp1.assign( LOOKUP_ATTRIBUTE( _python_context->python_closure_self.asObject(), _python_str_plain_filter_function ) ), call_tmp2.assign( MAKE_TUPLE1( _python_var_func.asObject() ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp1.asObject(), call_tmp2.asObject(), INCREASE_REFCOUNT( _python_context->python_closure_flags.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_func.updateLocalsDict( _python_context->python_closure_flags.updateLocalsDict( _python_context->python_closure_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base );
           frame_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_func = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "dec() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_func == key )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_func, key ) )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "dec() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "dec() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "dec() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "dec() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "dec() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "dec() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "dec() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_func != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
             goto error_exit;
         }

        _python_par_func = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( self, _python_par_func );

error_exit:;

    Py_XDECREF( _python_par_func );

    return NULL;
}

static PyObject *dparse_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_func )
{
    // The context of the function.
    struct _context_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_t *_python_context = (struct _context_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_func( _python_str_plain_func, _python_par_func );

    // Actual function code.
    static PyFrameObject *frame_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_7d62015a7f80b48c47825f8e9c2af1a0, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1089 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper1 call_tmp4;
            PyObjectTempKeeper0 make_tuple1;
            return ( call_tmp3.assign( LOOKUP_ATTRIBUTE( _python_context->python_closure_self.asObject(), _python_str_plain_filter ) ), call_tmp4.assign( ( make_tuple1.assign( _python_context->python_closure_name.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_func.asObject() ) ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), INCREASE_REFCOUNT( _python_context->python_closure_flags.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_func.updateLocalsDict( _python_context->python_closure_flags.updateLocalsDict( _python_context->python_closure_name.updateLocalsDict( _python_context->python_closure_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base );
           frame_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_func = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "dec() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_func == key )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_func, key ) )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "dec() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "dec() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "dec() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "dec() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "dec() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "dec() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "dec() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_func != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
             goto error_exit;
         }

        _python_par_func = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( self, _python_par_func );

error_exit:;

    Py_XDECREF( _python_par_func );

    return NULL;
}

static PyObject *dparse_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_filter_function_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_func, PyObject *_python_par_flags )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_func( _python_str_plain_func, _python_par_func );
    PyObjectLocalParameterVariableNoDel _python_var_flags( _python_str_plain_flags, _python_par_flags );
    PyObjectLocalVariable _python_var_name( _python_str_plain_name );

    // Actual function code.
    static PyFrameObject *frame_function_5_filter_function_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_5_filter_function_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_5_filter_function_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_filter_function_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_5_filter_function_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_5_filter_function_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_fdeff5e35da32b82898d861526810917, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_5_filter_function_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_5_filter_function_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1110 );
        {
            PyObjectTempKeeper0 getattr1;
            _python_var_name.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( getattr1.assign( _python_var_func.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), _python_unicode_plain__decorated_function, _python_var_func.asObject() ) ) ).asObject(), _python_str_plain___name__ ) );
        }
        frame_guard.setLineNumber( 1111 );
        {
            PyObjectTempKeeper1 call_tmp6;
            PyObjectTempKeeper1 call_tmp7;
            PyObjectTempKeeper0 make_tuple4;
            return ( call_tmp6.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_filter ) ), call_tmp7.assign( ( make_tuple4.assign( _python_var_name.asObject() ), MAKE_TUPLE2( make_tuple4.asObject0(), _python_var_func.asObject() ) ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp6.asObject(), call_tmp7.asObject(), _python_var_flags.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_flags.updateLocalsDict( _python_var_func.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_name.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5_filter_function_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_5_filter_function_of_class_26_Library_of_module_django__template__base );
           frame_function_5_filter_function_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_filter_function_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_func = NULL;
    PyObject *_python_par_flags = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_flags = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_flags = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "filter_function() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_flags, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "filter_function() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_flags = (PyObject *)split_copy;
        }
        else
        {
            _python_par_flags = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "filter_function() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_flags, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_flags = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_flags, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_flags, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument func was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_flags, _python_str_plain_func );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_func == NULL );

            _python_par_func = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_flags, _python_str_plain_func );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "filter_function() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "filter_function() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "filter_function() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "filter_function() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "filter_function() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "filter_function() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "filter_function() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "filter_function() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "filter_function() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "filter_function() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "filter_function() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "filter_function() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "filter_function() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_func != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "filter_function() got multiple values for keyword argument 'func'" );
             goto error_exit;
         }

        _python_par_func = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_5_filter_function_of_class_26_Library_of_module_django__template__base( self, _python_par_self, _python_par_func, _python_par_flags );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_func );
    Py_XDECREF( _python_par_flags );

    return NULL;
}

static PyObject *dparse_function_5_filter_function_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_5_filter_function_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_5_filter_function_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_func, PyObject *_python_par_takes_context, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectSharedLocalVariable _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_func( _python_str_plain_func, _python_par_func );
    PyObjectSharedLocalVariable _python_var_takes_context( _python_str_plain_takes_context, _python_par_takes_context );
    PyObjectSharedLocalVariable _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalVariable _python_var_dec( _python_str_plain_dec );

    // Actual function code.
    _python_var_dec.assign1( MAKE_FUNCTION_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( _python_var_name, _python_var_self, _python_var_takes_context ) );
    static PyFrameObject *frame_function_6_simple_tag_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_6_simple_tag_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_6_simple_tag_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_simple_tag_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_6_simple_tag_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_6_simple_tag_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_a77547dff9e30fa5f030c8db45be0d3d, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_6_simple_tag_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_6_simple_tag_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1133 );
        if ( ( _python_var_func.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 1135 );
            return _python_var_dec.asObject1();
        }
        else
        {
            frame_guard.setLineNumber( 1136 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_callable ), _python_var_func.asObject() ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 1138 );
                {
                    PyObjectTempKeeper0 call1;
                    return ( call1.assign( _python_var_dec.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_func.asObject() ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 1140 );
                {
                        PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_ARGS( _mvar_django__template__base_TemplateSyntaxError.asObject0(), _python_unicode_digest_2c1b2680782b86ca49030ef05d4a5644 ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_takes_context.updateLocalsDict( _python_var_func.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_dec.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_simple_tag_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_6_simple_tag_of_class_26_Library_of_module_django__template__base );
           frame_function_6_simple_tag_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_func = NULL;
    PyObject *_python_par_takes_context = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "simple_tag() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "simple_tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_func == key )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "simple_tag() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_takes_context == key )
            {
                if (unlikely( _python_par_takes_context ))
                {
                    PyErr_Format( PyExc_TypeError, "simple_tag() got multiple values for keyword argument 'takes_context'" );
                    goto error_exit;
                }

                _python_par_takes_context = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "simple_tag() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "simple_tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_func, key ) )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "simple_tag() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_takes_context, key ) )
            {
                if (unlikely( _python_par_takes_context ))
                {
                    PyErr_Format( PyExc_TypeError, "simple_tag() got multiple values for keyword argument 'takes_context'" );
                    goto error_exit;
                }

                _python_par_takes_context = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "simple_tag() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "simple_tag() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "simple_tag() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "simple_tag() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "simple_tag() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "simple_tag() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "simple_tag() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "simple_tag() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "simple_tag() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "simple_tag() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "simple_tag() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "simple_tag() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "simple_tag() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "simple_tag() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "simple_tag() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_func != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "simple_tag() got multiple values for keyword argument 'func'" );
             goto error_exit;
         }

        _python_par_func = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_takes_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "simple_tag() got multiple values for keyword argument 'takes_context'" );
             goto error_exit;
         }

        _python_par_takes_context = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "simple_tag() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_func == NULL )
    {
        _python_par_func = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_func );
    }
    if ( _python_par_takes_context == NULL )
    {
        _python_par_takes_context = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_takes_context );
    }
    if ( _python_par_name == NULL )
    {
        _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_name );
    }


    return impl_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( self, _python_par_self, _python_par_func, _python_par_takes_context, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_func );
    Py_XDECREF( _python_par_takes_context );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_func )
{
    // The context of the function.
    struct _context_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (struct _context_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_t *)self->m_context;

    // Local variable declarations.
    PyObjectSharedLocalVariable _python_var_func( _python_str_plain_func, _python_par_func );
    PyObjectLocalVariable _python_var_params( _python_str_plain_params );
    PyObjectLocalVariable _python_var_varargs( _python_str_plain_varargs );
    PyObjectLocalVariable _python_var_varkw( _python_str_plain_varkw );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );
    PyObjectLocalVariable _python_var_SimpleNode( _python_str_plain_SimpleNode );
    PyObjectLocalVariable _python_var_function_name( _python_str_plain_function_name );
    PyObjectLocalVariable _python_var_compile_func( _python_str_plain_compile_func );

    // Actual function code.
    static PyFrameObject *frame_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_616d899e3254411c69f5cf139e57d5b0, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1115 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 call1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( _mvar_django__template__base_getargspec.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_func.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
            PyObjectTemporary _python_tmp_element_4( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 3 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 4 );
            _python_var_params.assign0( _python_tmp_element_1.asObject() );
            _python_var_varargs.assign0( _python_tmp_element_2.asObject() );
            _python_var_varkw.assign0( _python_tmp_element_3.asObject() );
            _python_var_defaults.assign0( _python_tmp_element_4.asObject() );
        }
        {
            frame_guard.setLineNumber( 1117 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__template__base_TagHelperNode.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( _python_var_func ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call3;
                PyObjectTempKeeper0 call5;
                _tmp_python_tmp_class = ( call3.assign( _python_tmp_metaclass.asObject() ), call5.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_str_plain_SimpleNode, call5.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            _python_var_SimpleNode.assign0( _python_tmp_class.asObject() );
        }
        frame_guard.setLineNumber( 1123 );
        {
            PyObjectTempKeeper0 getattr7;
            PyObjectTempKeeper0 keeper_0;
            _python_var_function_name.assign1( ( CHECK_IF_TRUE( keeper_0.assign( _python_context->python_closure_name.asObject() ) ) ? INCREASE_REFCOUNT( keeper_0.asObject0() ) : LOOKUP_ATTRIBUTE( PyObjectTemporary( ( getattr7.assign( _python_var_func.asObject() ), BUILTIN_GETATTR( getattr7.asObject0(), _python_unicode_plain__decorated_function, _python_var_func.asObject() ) ) ).asObject(), _python_str_plain___name__ ) ) );
        }
        frame_guard.setLineNumber( 1125 );
        {
            PyObjectTempKeeper0 call24;
            PyObjectTempKeeper1 call25;
            PyObjectTempKeeper0 make_dict10;
            PyObjectTempKeeper0 make_dict12;
            PyObjectTempKeeper0 make_dict14;
            PyObjectTempKeeper0 make_dict16;
            PyObjectTempKeeper0 make_dict18;
            PyObjectTempKeeper0 make_dict20;
            _python_var_compile_func.assign1( ( call24.assign( _mvar_django__template__base_partial.asObject0() ), call25.assign( MAKE_TUPLE1( _mvar_django__template__base_generic_tag_compiler.asObject0() ) ), CALL_FUNCTION( call24.asObject0(), call25.asObject0(), PyObjectTemporary( ( make_dict10.assign( _python_var_params.asObject() ), make_dict12.assign( _python_var_varargs.asObject() ), make_dict14.assign( _python_var_varkw.asObject() ), make_dict16.assign( _python_var_defaults.asObject() ), make_dict18.assign( _python_var_function_name.asObject() ), make_dict20.assign( _python_context->python_closure_takes_context.asObject() ), MAKE_DICT7( make_dict10.asObject0(), _python_str_plain_params, make_dict12.asObject0(), _python_str_plain_varargs, make_dict14.asObject0(), _python_str_plain_varkw, make_dict16.asObject0(), _python_str_plain_defaults, make_dict18.asObject0(), _python_str_plain_name, make_dict20.asObject0(), _python_str_plain_takes_context, _python_var_SimpleNode.asObject(), _python_str_plain_node_class ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 1129 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_func.asObject(), _python_str_plain___doc__ ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_compile_func.asObject(), _python_str_plain___doc__ );
        }
        frame_guard.setLineNumber( 1130 );
        {
            PyObjectTempKeeper1 call27;
            PyObjectTempKeeper0 call28;
            DECREASE_REFCOUNT( ( call27.assign( LOOKUP_ATTRIBUTE( _python_context->python_closure_self.asObject(), _python_str_plain_tag ) ), call28.assign( _python_var_function_name.asObject() ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), call28.asObject0(), _python_var_compile_func.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1131 );
        return _python_var_func.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_func.updateLocalsDict( _python_context->python_closure_self.updateLocalsDict( _python_context->python_closure_takes_context.updateLocalsDict( _python_context->python_closure_name.updateLocalsDict( _python_var_compile_func.updateLocalsDict( _python_var_function_name.updateLocalsDict( _python_var_SimpleNode.updateLocalsDict( _python_var_defaults.updateLocalsDict( _python_var_varkw.updateLocalsDict( _python_var_varargs.updateLocalsDict( _python_var_params.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base );
           frame_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_func = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "dec() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_func == key )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_func, key ) )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "dec() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "dec() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "dec() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "dec() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "dec() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "dec() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "dec() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_func != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
             goto error_exit;
         }

        _python_par_func = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( self, _python_par_func );

error_exit:;

    Py_XDECREF( _python_par_func );

    return NULL;
}

static PyObject *dparse_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_func )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var_render.assign1( MAKE_FUNCTION_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( python_closure_func ) );
    return _python_var_render.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );
}


static PyObject *impl_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_context )
{
    // The context of the function.
    struct _context_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (struct _context_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_context( _python_str_plain_context, _python_par_context );
    PyObjectLocalVariable _python_var_resolved_args( _python_str_plain_resolved_args );
    PyObjectLocalVariable _python_var_resolved_kwargs( _python_str_plain_resolved_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_f484ad492178b9f196d8b2e0f5a2db40, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1120 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper1 call1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_resolved_arguments ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_context.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            _python_var_resolved_args.assign0( _python_tmp_element_1.asObject() );
            _python_var_resolved_kwargs.assign0( _python_tmp_element_2.asObject() );
        }
        frame_guard.setLineNumber( 1121 );
        {
            PyObjectTempKeeper0 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            return ( call_tmp3.assign( _python_context->python_closure_func.asObject() ), call_tmp4.assign( _python_var_resolved_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_resolved_kwargs.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_context.updateLocalsDict( _python_var_self.updateLocalsDict( _python_context->python_closure_func.updateLocalsDict( _python_var_resolved_kwargs.updateLocalsDict( _python_var_resolved_args.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base );
           frame_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_context = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context == key )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context, key ) )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
             goto error_exit;
         }

        _python_par_context = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( self, _python_par_self, _python_par_context );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_context );

    return NULL;
}

static PyObject *dparse_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_func, PyObject *_python_par_takes_context, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectSharedLocalVariable _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_func( _python_str_plain_func, _python_par_func );
    PyObjectSharedLocalVariable _python_var_takes_context( _python_str_plain_takes_context, _python_par_takes_context );
    PyObjectSharedLocalVariable _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalVariable _python_var_dec( _python_str_plain_dec );

    // Actual function code.
    _python_var_dec.assign1( MAKE_FUNCTION_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( _python_var_name, _python_var_self, _python_var_takes_context ) );
    static PyFrameObject *frame_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_assignment_tag_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_6a0257931a1fee9ba35bc811adb7a642, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1175 );
        if ( ( _python_var_func.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 1177 );
            return _python_var_dec.asObject1();
        }
        else
        {
            frame_guard.setLineNumber( 1178 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_callable ), _python_var_func.asObject() ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 1180 );
                {
                    PyObjectTempKeeper0 call1;
                    return ( call1.assign( _python_var_dec.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_func.asObject() ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 1182 );
                {
                        PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_ARGS( _mvar_django__template__base_TemplateSyntaxError.asObject0(), _python_unicode_digest_55184478a7232f007a06a954dc1c6da1 ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_takes_context.updateLocalsDict( _python_var_func.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_dec.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base );
           frame_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_func = NULL;
    PyObject *_python_par_takes_context = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "assignment_tag() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "assignment_tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_func == key )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "assignment_tag() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_takes_context == key )
            {
                if (unlikely( _python_par_takes_context ))
                {
                    PyErr_Format( PyExc_TypeError, "assignment_tag() got multiple values for keyword argument 'takes_context'" );
                    goto error_exit;
                }

                _python_par_takes_context = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "assignment_tag() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "assignment_tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_func, key ) )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "assignment_tag() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_takes_context, key ) )
            {
                if (unlikely( _python_par_takes_context ))
                {
                    PyErr_Format( PyExc_TypeError, "assignment_tag() got multiple values for keyword argument 'takes_context'" );
                    goto error_exit;
                }

                _python_par_takes_context = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "assignment_tag() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "assignment_tag() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "assignment_tag() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "assignment_tag() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "assignment_tag() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "assignment_tag() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "assignment_tag() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "assignment_tag() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "assignment_tag() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "assignment_tag() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "assignment_tag() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "assignment_tag() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "assignment_tag() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "assignment_tag() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "assignment_tag() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_func != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "assignment_tag() got multiple values for keyword argument 'func'" );
             goto error_exit;
         }

        _python_par_func = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_takes_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "assignment_tag() got multiple values for keyword argument 'takes_context'" );
             goto error_exit;
         }

        _python_par_takes_context = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "assignment_tag() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_func == NULL )
    {
        _python_par_func = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_func );
    }
    if ( _python_par_takes_context == NULL )
    {
        _python_par_takes_context = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_takes_context );
    }
    if ( _python_par_name == NULL )
    {
        _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_name );
    }


    return impl_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( self, _python_par_self, _python_par_func, _python_par_takes_context, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_func );
    Py_XDECREF( _python_par_takes_context );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_func )
{
    // The context of the function.
    struct _context_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (struct _context_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *)self->m_context;

    // Local variable declarations.
    PyObjectSharedLocalVariable _python_var_func( _python_str_plain_func, _python_par_func );
    PyObjectSharedLocalVariable _python_var_params( _python_str_plain_params );
    PyObjectSharedLocalVariable _python_var_varargs( _python_str_plain_varargs );
    PyObjectSharedLocalVariable _python_var_varkw( _python_str_plain_varkw );
    PyObjectSharedLocalVariable _python_var_defaults( _python_str_plain_defaults );
    PyObjectSharedLocalVariable _python_var_AssignmentNode( _python_str_plain_AssignmentNode );
    PyObjectSharedLocalVariable _python_var_function_name( _python_str_plain_function_name );
    PyObjectLocalVariable _python_var_compile_func( _python_str_plain_compile_func );

    // Actual function code.
    static PyFrameObject *frame_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_fadf28c59956343f20e6e8238a9d3e85, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1144 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 call1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( _mvar_django__template__base_getargspec.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_func.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
            PyObjectTemporary _python_tmp_element_4( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 3 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 4 );
            _python_var_params.assign0( _python_tmp_element_1.asObject() );
            _python_var_varargs.assign0( _python_tmp_element_2.asObject() );
            _python_var_varkw.assign0( _python_tmp_element_3.asObject() );
            _python_var_defaults.assign0( _python_tmp_element_4.asObject() );
        }
        {
            frame_guard.setLineNumber( 1146 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__template__base_TagHelperNode.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( _python_var_AssignmentNode, _python_var_func ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call3;
                PyObjectTempKeeper0 call5;
                _tmp_python_tmp_class = ( call3.assign( _python_tmp_metaclass.asObject() ), call5.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_str_plain_AssignmentNode, call5.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            _python_var_AssignmentNode.assign0( _python_tmp_class.asObject() );
        }
        frame_guard.setLineNumber( 1156 );
        {
            PyObjectTempKeeper0 getattr7;
            PyObjectTempKeeper0 keeper_0;
            _python_var_function_name.assign1( ( CHECK_IF_TRUE( keeper_0.assign( _python_context->python_closure_name.asObject() ) ) ? INCREASE_REFCOUNT( keeper_0.asObject0() ) : LOOKUP_ATTRIBUTE( PyObjectTemporary( ( getattr7.assign( _python_var_func.asObject() ), BUILTIN_GETATTR( getattr7.asObject0(), _python_unicode_plain__decorated_function, _python_var_func.asObject() ) ) ).asObject(), _python_str_plain___name__ ) ) );
        }
        _python_var_compile_func.assign1( MAKE_FUNCTION_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( _python_var_AssignmentNode, _python_var_defaults, _python_var_function_name, _python_var_params, _python_context->python_closure_takes_context, _python_var_varargs, _python_var_varkw ) );
        frame_guard.setLineNumber( 1171 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_func.asObject(), _python_str_plain___doc__ ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_compile_func.asObject(), _python_str_plain___doc__ );
        }
        frame_guard.setLineNumber( 1172 );
        {
            PyObjectTempKeeper1 call10;
            PyObjectTempKeeper0 call11;
            DECREASE_REFCOUNT( ( call10.assign( LOOKUP_ATTRIBUTE( _python_context->python_closure_self.asObject(), _python_str_plain_tag ) ), call11.assign( _python_var_function_name.asObject() ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), call11.asObject0(), _python_var_compile_func.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1173 );
        return _python_var_func.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_func.updateLocalsDict( _python_context->python_closure_self.updateLocalsDict( _python_context->python_closure_name.updateLocalsDict( _python_var_compile_func.updateLocalsDict( _python_var_function_name.updateLocalsDict( _python_var_AssignmentNode.updateLocalsDict( _python_var_defaults.updateLocalsDict( _python_var_varkw.updateLocalsDict( _python_var_varargs.updateLocalsDict( _python_var_params.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base );
           frame_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_func = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "dec() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_func == key )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_func, key ) )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "dec() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "dec() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "dec() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "dec() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "dec() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "dec() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "dec() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_func != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
             goto error_exit;
         }

        _python_par_func = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( self, _python_par_func );

error_exit:;

    Py_XDECREF( _python_par_func );

    return NULL;
}

static PyObject *dparse_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_AssignmentNode,PyObjectSharedLocalVariable &python_closure_func )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( python_closure_AssignmentNode ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( python_closure_func ) );
    return _python_var_render.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_takes_context, PyObject *_python_par_args, PyObject *_python_par_kwargs, PyObject *_python_par_target_var )
{
    // The context of the function.
    struct _context_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (struct _context_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_takes_context( _python_str_plain_takes_context, _python_par_takes_context );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalParameterVariableNoDel _python_var_target_var( _python_str_plain_target_var, _python_par_target_var );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_23865878694aad4c0625bef6ad81b492, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1148 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 call5;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _python_context->python_closure_AssignmentNode.asObject() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call4.assign( _python_var_takes_context.asObject() ), call5.assign( _python_var_args.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), call5.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1149 );
        {
                PyObject *tmp_identifier = _python_var_target_var.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_target_var );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_target_var.updateLocalsDict( _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_takes_context.updateLocalsDict( _python_var_self.updateLocalsDict( _python_context->python_closure_AssignmentNode.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base );
           frame_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_takes_context = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    PyObject *_python_par_target_var = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_takes_context == key )
            {
                if (unlikely( _python_par_takes_context ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'takes_context'" );
                    goto error_exit;
                }

                _python_par_takes_context = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_args == key )
            {
                if (unlikely( _python_par_args ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'args'" );
                    goto error_exit;
                }

                _python_par_args = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_kwargs == key )
            {
                if (unlikely( _python_par_kwargs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'kwargs'" );
                    goto error_exit;
                }

                _python_par_kwargs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_target_var == key )
            {
                if (unlikely( _python_par_target_var ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'target_var'" );
                    goto error_exit;
                }

                _python_par_target_var = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_takes_context, key ) )
            {
                if (unlikely( _python_par_takes_context ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'takes_context'" );
                    goto error_exit;
                }

                _python_par_takes_context = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_args, key ) )
            {
                if (unlikely( _python_par_args ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'args'" );
                    goto error_exit;
                }

                _python_par_args = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_kwargs, key ) )
            {
                if (unlikely( _python_par_kwargs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'kwargs'" );
                    goto error_exit;
                }

                _python_par_kwargs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_target_var, key ) )
            {
                if (unlikely( _python_par_target_var ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'target_var'" );
                    goto error_exit;
                }

                _python_par_target_var = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 5 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 5 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 5 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 5 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 5, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 5, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_takes_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'takes_context'" );
             goto error_exit;
         }

        _python_par_takes_context = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_args != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'args'" );
             goto error_exit;
         }

        _python_par_args = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_kwargs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'kwargs'" );
             goto error_exit;
         }

        _python_par_kwargs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_target_var != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'target_var'" );
             goto error_exit;
         }

        _python_par_target_var = INCREASE_REFCOUNT( args[ 4 ] );
    }


    return impl_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( self, _python_par_self, _python_par_takes_context, _python_par_args, _python_par_kwargs, _python_par_target_var );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_takes_context );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );
    Py_XDECREF( _python_par_target_var );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_context )
{
    // The context of the function.
    struct _context_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (struct _context_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_context( _python_str_plain_context, _python_par_context );
    PyObjectLocalVariable _python_var_resolved_args( _python_str_plain_resolved_args );
    PyObjectLocalVariable _python_var_resolved_kwargs( _python_str_plain_resolved_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_c63bd5d05a15ab1012623afed69db695, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1152 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper1 call1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_resolved_arguments ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_context.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            _python_var_resolved_args.assign0( _python_tmp_element_1.asObject() );
            _python_var_resolved_kwargs.assign0( _python_tmp_element_2.asObject() );
        }
        frame_guard.setLineNumber( 1153 );
        {
            PyObjectTempKeeper0 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            {
                PyObjectTemporary tmp_identifier( ( call_tmp3.assign( _python_context->python_closure_func.asObject() ), call_tmp4.assign( _python_var_resolved_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_resolved_kwargs.asObject1() ) ) );
                PyObject *tmp_subscribed = _python_var_context.asObject();
                SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_target_var ) ).asObject() );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_context.updateLocalsDict( _python_var_self.updateLocalsDict( _python_context->python_closure_func.updateLocalsDict( _python_var_resolved_kwargs.updateLocalsDict( _python_var_resolved_args.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base );
           frame_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( _python_unicode_empty );
}
static PyObject *fparse_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_context = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context == key )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context, key ) )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
             goto error_exit;
         }

        _python_par_context = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( self, _python_par_self, _python_par_context );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_context );

    return NULL;
}

static PyObject *dparse_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_parser, PyObject *_python_par_token )
{
    // The context of the function.
    struct _context_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (struct _context_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_parser( _python_str_plain_parser, _python_par_parser );
    PyObjectLocalParameterVariableNoDel _python_var_token( _python_str_plain_token, _python_par_token );
    PyObjectLocalVariable _python_var_bits( _python_str_plain_bits );
    PyObjectLocalVariable _python_var_target_var( _python_str_plain_target_var );
    PyObjectLocalVariable _python_var_args( _python_str_plain_args );
    PyObjectLocalVariable _python_var_kwargs( _python_str_plain_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_50c2dc39cd4a8e20b850d59fbd803ba3, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1160 );
        _python_var_bits.assign1( LOOKUP_INDEX_SLICE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_token.asObject(), _python_str_plain_split_contents ) ).asObject() ) ).asObject(), 1, PY_SSIZE_T_MAX ) );
        frame_guard.setLineNumber( 1161 );
        if ( ( RICH_COMPARE_BOOL_LT( PyObjectTemporary( BUILTIN_LEN( _python_var_bits.asObject() ) ).asObject(), _python_int_pos_2 ) || RICH_COMPARE_BOOL_NE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_bits.asObject(), _python_int_neg_2, -2 ) ).asObject(), _python_unicode_plain_as ) ) )
        {
            frame_guard.setLineNumber( 1162 );
            {
                PyObjectTempKeeper0 call1;
                {
                    PyObjectTemporary tmp_exception_type( ( call1.assign( _mvar_django__template__base_TemplateSyntaxError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_c2603a0a96f1c3b35605654abd08550e, _python_context->python_closure_function_name.asObject() ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 1165 );
        _python_var_target_var.assign1( LOOKUP_SUBSCRIPT_CONST( _python_var_bits.asObject(), _python_int_neg_1, -1 ) );
        frame_guard.setLineNumber( 1166 );
        _python_var_bits.assign1( LOOKUP_INDEX_SLICE( _python_var_bits.asObject(), 0, -2 ) );
        {
            frame_guard.setLineNumber( 1167 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 call11;
                PyObjectTempKeeper0 make_tuple3;
                PyObjectTempKeeper0 make_tuple4;
                PyObjectTempKeeper0 make_tuple5;
                PyObjectTempKeeper0 make_tuple6;
                PyObjectTempKeeper0 make_tuple7;
                PyObjectTempKeeper0 make_tuple8;
                PyObjectTempKeeper0 make_tuple9;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call11.assign( _mvar_django__template__base_parse_bits.asObject0() ), CALL_FUNCTION_WITH_POSARGS( call11.asObject0(), PyObjectTemporary( ( make_tuple3.assign( _python_var_parser.asObject() ), make_tuple4.assign( _python_var_bits.asObject() ), make_tuple5.assign( _python_context->python_closure_params.asObject() ), make_tuple6.assign( _python_context->python_closure_varargs.asObject() ), make_tuple7.assign( _python_context->python_closure_varkw.asObject() ), make_tuple8.assign( _python_context->python_closure_defaults.asObject() ), make_tuple9.assign( _python_context->python_closure_takes_context.asObject() ), MAKE_TUPLE8( make_tuple3.asObject0(), make_tuple4.asObject0(), make_tuple5.asObject0(), make_tuple6.asObject0(), make_tuple7.asObject0(), make_tuple8.asObject0(), make_tuple9.asObject0(), _python_context->python_closure_function_name.asObject() ) ) ).asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            _python_var_args.assign0( _python_tmp_element_1.asObject() );
            _python_var_kwargs.assign0( _python_tmp_element_2.asObject() );
        }
        frame_guard.setLineNumber( 1169 );
        {
            PyObjectTempKeeper0 call13;
            PyObjectTempKeeper0 call14;
            PyObjectTempKeeper0 call15;
            PyObjectTempKeeper0 call16;
            return ( call13.assign( _python_context->python_closure_AssignmentNode.asObject() ), call14.assign( _python_context->python_closure_takes_context.asObject() ), call15.assign( _python_var_args.asObject() ), call16.assign( _python_var_kwargs.asObject() ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), call14.asObject0(), call15.asObject0(), call16.asObject0(), _python_var_target_var.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_token.updateLocalsDict( _python_var_parser.updateLocalsDict( _python_context->python_closure_AssignmentNode.updateLocalsDict( _python_context->python_closure_takes_context.updateLocalsDict( _python_context->python_closure_defaults.updateLocalsDict( _python_context->python_closure_varkw.updateLocalsDict( _python_context->python_closure_varargs.updateLocalsDict( _python_context->python_closure_params.updateLocalsDict( _python_context->python_closure_function_name.updateLocalsDict( _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_target_var.updateLocalsDict( _python_var_bits.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base );
           frame_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_parser = NULL;
    PyObject *_python_par_token = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "compile_func() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_parser == key )
            {
                if (unlikely( _python_par_parser ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_func() got multiple values for keyword argument 'parser'" );
                    goto error_exit;
                }

                _python_par_parser = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_token == key )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_func() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_parser, key ) )
            {
                if (unlikely( _python_par_parser ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_func() got multiple values for keyword argument 'parser'" );
                    goto error_exit;
                }

                _python_par_parser = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_token, key ) )
            {
                if (unlikely( _python_par_token ))
                {
                    PyErr_Format( PyExc_TypeError, "compile_func() got multiple values for keyword argument 'token'" );
                    goto error_exit;
                }

                _python_par_token = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "compile_func() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "compile_func() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "compile_func() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "compile_func() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "compile_func() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "compile_func() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "compile_func() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "compile_func() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "compile_func() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "compile_func() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "compile_func() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "compile_func() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "compile_func() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_parser != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "compile_func() got multiple values for keyword argument 'parser'" );
             goto error_exit;
         }

        _python_par_parser = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_token != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "compile_func() got multiple values for keyword argument 'token'" );
             goto error_exit;
         }

        _python_par_token = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( self, _python_par_parser, _python_par_token );

error_exit:;

    Py_XDECREF( _python_par_parser );
    Py_XDECREF( _python_par_token );

    return NULL;
}

static PyObject *dparse_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_file_name, PyObject *_python_par_context_class, PyObject *_python_par_takes_context, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectSharedLocalVariable _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectSharedLocalVariable _python_var_file_name( _python_str_plain_file_name, _python_par_file_name );
    PyObjectSharedLocalVariable _python_var_context_class( _python_str_plain_context_class, _python_par_context_class );
    PyObjectSharedLocalVariable _python_var_takes_context( _python_str_plain_takes_context, _python_par_takes_context );
    PyObjectSharedLocalVariable _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalVariable _python_var_dec( _python_str_plain_dec );

    // Actual function code.
    _python_var_dec.assign1( MAKE_FUNCTION_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( _python_var_context_class, _python_var_file_name, _python_var_name, _python_var_self, _python_var_takes_context ) );
    static PyFrameObject *frame_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_503f0f417c394ada57a281111325e8c3, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1227 );
        return _python_var_dec.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_takes_context.updateLocalsDict( _python_var_context_class.updateLocalsDict( _python_var_file_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_dec.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base );
           frame_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_file_name = NULL;
    PyObject *_python_par_context_class = NULL;
    PyObject *_python_par_takes_context = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "inclusion_tag() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "inclusion_tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_file_name == key )
            {
                if (unlikely( _python_par_file_name ))
                {
                    PyErr_Format( PyExc_TypeError, "inclusion_tag() got multiple values for keyword argument 'file_name'" );
                    goto error_exit;
                }

                _python_par_file_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context_class == key )
            {
                if (unlikely( _python_par_context_class ))
                {
                    PyErr_Format( PyExc_TypeError, "inclusion_tag() got multiple values for keyword argument 'context_class'" );
                    goto error_exit;
                }

                _python_par_context_class = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_takes_context == key )
            {
                if (unlikely( _python_par_takes_context ))
                {
                    PyErr_Format( PyExc_TypeError, "inclusion_tag() got multiple values for keyword argument 'takes_context'" );
                    goto error_exit;
                }

                _python_par_takes_context = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "inclusion_tag() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "inclusion_tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_file_name, key ) )
            {
                if (unlikely( _python_par_file_name ))
                {
                    PyErr_Format( PyExc_TypeError, "inclusion_tag() got multiple values for keyword argument 'file_name'" );
                    goto error_exit;
                }

                _python_par_file_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context_class, key ) )
            {
                if (unlikely( _python_par_context_class ))
                {
                    PyErr_Format( PyExc_TypeError, "inclusion_tag() got multiple values for keyword argument 'context_class'" );
                    goto error_exit;
                }

                _python_par_context_class = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_takes_context, key ) )
            {
                if (unlikely( _python_par_takes_context ))
                {
                    PyErr_Format( PyExc_TypeError, "inclusion_tag() got multiple values for keyword argument 'takes_context'" );
                    goto error_exit;
                }

                _python_par_takes_context = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "inclusion_tag() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "inclusion_tag() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "inclusion_tag() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "inclusion_tag() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "inclusion_tag() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "inclusion_tag() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "inclusion_tag() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "inclusion_tag() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "inclusion_tag() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "inclusion_tag() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "inclusion_tag() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "inclusion_tag() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "inclusion_tag() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "inclusion_tag() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inclusion_tag() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_file_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inclusion_tag() got multiple values for keyword argument 'file_name'" );
             goto error_exit;
         }

        _python_par_file_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_context_class != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inclusion_tag() got multiple values for keyword argument 'context_class'" );
             goto error_exit;
         }

        _python_par_context_class = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_takes_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inclusion_tag() got multiple values for keyword argument 'takes_context'" );
             goto error_exit;
         }

        _python_par_takes_context = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "inclusion_tag() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_context_class == NULL )
    {
        _python_par_context_class = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_context_class );
    }
    if ( _python_par_takes_context == NULL )
    {
        _python_par_takes_context = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_takes_context );
    }
    if ( _python_par_name == NULL )
    {
        _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_name );
    }


    return impl_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( self, _python_par_self, _python_par_file_name, _python_par_context_class, _python_par_takes_context, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_file_name );
    Py_XDECREF( _python_par_context_class );
    Py_XDECREF( _python_par_takes_context );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_func )
{
    // The context of the function.
    struct _context_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (struct _context_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_t *)self->m_context;

    // Local variable declarations.
    PyObjectSharedLocalVariable _python_var_func( _python_str_plain_func, _python_par_func );
    PyObjectLocalVariable _python_var_params( _python_str_plain_params );
    PyObjectLocalVariable _python_var_varargs( _python_str_plain_varargs );
    PyObjectLocalVariable _python_var_varkw( _python_str_plain_varkw );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );
    PyObjectLocalVariable _python_var_InclusionNode( _python_str_plain_InclusionNode );
    PyObjectLocalVariable _python_var_function_name( _python_str_plain_function_name );
    PyObjectLocalVariable _python_var_compile_func( _python_str_plain_compile_func );

    // Actual function code.
    static PyFrameObject *frame_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_b241df7bcc741eeaba90830a0eece2c7, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1186 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 call1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( _mvar_django__template__base_getargspec.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_func.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
            PyObjectTemporary _python_tmp_element_4( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 3 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 4 );
            _python_var_params.assign0( _python_tmp_element_1.asObject() );
            _python_var_varargs.assign0( _python_tmp_element_2.asObject() );
            _python_var_varkw.assign0( _python_tmp_element_3.asObject() );
            _python_var_defaults.assign0( _python_tmp_element_4.asObject() );
        }
        {
            frame_guard.setLineNumber( 1188 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__template__base_TagHelperNode.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( _python_context->python_closure_context_class, _python_context->python_closure_file_name, _python_var_func ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call3;
                PyObjectTempKeeper0 call5;
                _tmp_python_tmp_class = ( call3.assign( _python_tmp_metaclass.asObject() ), call5.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_str_plain_InclusionNode, call5.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            _python_var_InclusionNode.assign0( _python_tmp_class.asObject() );
        }
        frame_guard.setLineNumber( 1218 );
        {
            PyObjectTempKeeper0 getattr7;
            PyObjectTempKeeper0 keeper_0;
            _python_var_function_name.assign1( ( CHECK_IF_TRUE( keeper_0.assign( _python_context->python_closure_name.asObject() ) ) ? INCREASE_REFCOUNT( keeper_0.asObject0() ) : LOOKUP_ATTRIBUTE( PyObjectTemporary( ( getattr7.assign( _python_var_func.asObject() ), BUILTIN_GETATTR( getattr7.asObject0(), _python_unicode_plain__decorated_function, _python_var_func.asObject() ) ) ).asObject(), _python_str_plain___name__ ) ) );
        }
        frame_guard.setLineNumber( 1220 );
        {
            PyObjectTempKeeper0 call24;
            PyObjectTempKeeper1 call25;
            PyObjectTempKeeper0 make_dict10;
            PyObjectTempKeeper0 make_dict12;
            PyObjectTempKeeper0 make_dict14;
            PyObjectTempKeeper0 make_dict16;
            PyObjectTempKeeper0 make_dict18;
            PyObjectTempKeeper0 make_dict20;
            _python_var_compile_func.assign1( ( call24.assign( _mvar_django__template__base_partial.asObject0() ), call25.assign( MAKE_TUPLE1( _mvar_django__template__base_generic_tag_compiler.asObject0() ) ), CALL_FUNCTION( call24.asObject0(), call25.asObject0(), PyObjectTemporary( ( make_dict10.assign( _python_var_params.asObject() ), make_dict12.assign( _python_var_varargs.asObject() ), make_dict14.assign( _python_var_varkw.asObject() ), make_dict16.assign( _python_var_defaults.asObject() ), make_dict18.assign( _python_var_function_name.asObject() ), make_dict20.assign( _python_context->python_closure_takes_context.asObject() ), MAKE_DICT7( make_dict10.asObject0(), _python_str_plain_params, make_dict12.asObject0(), _python_str_plain_varargs, make_dict14.asObject0(), _python_str_plain_varkw, make_dict16.asObject0(), _python_str_plain_defaults, make_dict18.asObject0(), _python_str_plain_name, make_dict20.asObject0(), _python_str_plain_takes_context, _python_var_InclusionNode.asObject(), _python_str_plain_node_class ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 1224 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_func.asObject(), _python_str_plain___doc__ ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_compile_func.asObject(), _python_str_plain___doc__ );
        }
        frame_guard.setLineNumber( 1225 );
        {
            PyObjectTempKeeper1 call27;
            PyObjectTempKeeper0 call28;
            DECREASE_REFCOUNT( ( call27.assign( LOOKUP_ATTRIBUTE( _python_context->python_closure_self.asObject(), _python_str_plain_tag ) ), call28.assign( _python_var_function_name.asObject() ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), call28.asObject0(), _python_var_compile_func.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1226 );
        return _python_var_func.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_func.updateLocalsDict( _python_context->python_closure_context_class.updateLocalsDict( _python_context->python_closure_file_name.updateLocalsDict( _python_context->python_closure_self.updateLocalsDict( _python_context->python_closure_takes_context.updateLocalsDict( _python_context->python_closure_name.updateLocalsDict( _python_var_compile_func.updateLocalsDict( _python_var_function_name.updateLocalsDict( _python_var_InclusionNode.updateLocalsDict( _python_var_defaults.updateLocalsDict( _python_var_varkw.updateLocalsDict( _python_var_varargs.updateLocalsDict( _python_var_params.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base );
           frame_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_func = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "dec() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_func == key )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_func, key ) )
            {
                if (unlikely( _python_par_func ))
                {
                    PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
                    goto error_exit;
                }

                _python_par_func = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "dec() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "dec() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "dec() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "dec() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "dec() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "dec() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "dec() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "dec() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "dec() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_func != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "dec() got multiple values for keyword argument 'func'" );
             goto error_exit;
         }

        _python_par_func = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( self, _python_par_func );

error_exit:;

    Py_XDECREF( _python_par_func );

    return NULL;
}

static PyObject *dparse_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_context_class,PyObjectSharedLocalVariable &python_closure_file_name,PyObjectSharedLocalVariable &python_closure_func )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_base );
    _python_var_render.assign1( MAKE_FUNCTION_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( python_closure_context_class, python_closure_file_name, python_closure_func ) );
    return _python_var_render.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );
}


static PyObject *impl_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_context )
{
    // The context of the function.
    struct _context_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = (struct _context_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_context( _python_str_plain_context, _python_par_context );
    PyObjectLocalVariable _python_var_resolved_args( _python_str_plain_resolved_args );
    PyObjectLocalVariable _python_var_resolved_kwargs( _python_str_plain_resolved_kwargs );
    PyObjectLocalVariable _python_var__dict( _python_str_plain__dict );
    PyObjectLocalVariable _python_var_get_template( _python_str_plain_get_template );
    PyObjectLocalVariable _python_var_select_template( _python_str_plain_select_template );
    PyObjectLocalVariable _python_var_t( _python_str_plain_t );
    PyObjectLocalVariable _python_var_new_context( _python_str_plain_new_context );
    PyObjectLocalVariable _python_var_csrf_token( _python_str_plain_csrf_token );

    // Actual function code.
    static PyFrameObject *frame_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base ) )
    {
        if ( frame_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base );
        }

        frame_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base = MAKE_FRAME( _codeobj_8f7e5f1d8ee2ee89e9767aaaae794e77, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1191 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper1 call1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_resolved_arguments ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_context.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            _python_var_resolved_args.assign0( _python_tmp_element_1.asObject() );
            _python_var_resolved_kwargs.assign0( _python_tmp_element_2.asObject() );
        }
        frame_guard.setLineNumber( 1192 );
        {
            PyObjectTempKeeper0 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            _python_var__dict.assign1( ( call_tmp3.assign( _python_context->python_closure_func.asObject() ), call_tmp4.assign( _python_var_resolved_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_resolved_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 1194 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( BUILTIN_GETATTR( _python_var_self.asObject(), _python_unicode_plain_nodelist, Py_False ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 1195 );
            _python_var_get_template.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_bfd85b841356e595bb02a3878b7bc4a8, ((PyModuleObject *)_module_django__template__base)->md_dict, PyObjectTemporary( _python_var_context.updateLocalsDict( _python_var_self.updateLocalsDict( _python_context->python_closure_context_class.updateLocalsDict( _python_context->python_closure_file_name.updateLocalsDict( _python_context->python_closure_func.updateLocalsDict( _python_var_csrf_token.updateLocalsDict( _python_var_new_context.updateLocalsDict( _python_var_t.updateLocalsDict( _python_var_select_template.updateLocalsDict( _python_var_get_template.updateLocalsDict( _python_var__dict.updateLocalsDict( _python_var_resolved_kwargs.updateLocalsDict( _python_var_resolved_args.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ).asObject(), _python_list_str_plain_get_template_str_plain_select_template_list, _python_int_0 ) ).asObject(), _python_str_plain_get_template ) );
            _python_var_select_template.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_bfd85b841356e595bb02a3878b7bc4a8, ((PyModuleObject *)_module_django__template__base)->md_dict, PyObjectTemporary( _python_var_context.updateLocalsDict( _python_var_self.updateLocalsDict( _python_context->python_closure_context_class.updateLocalsDict( _python_context->python_closure_file_name.updateLocalsDict( _python_context->python_closure_func.updateLocalsDict( _python_var_csrf_token.updateLocalsDict( _python_var_new_context.updateLocalsDict( _python_var_t.updateLocalsDict( _python_var_select_template.updateLocalsDict( _python_var_get_template.updateLocalsDict( _python_var__dict.updateLocalsDict( _python_var_resolved_kwargs.updateLocalsDict( _python_var_resolved_args.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ).asObject(), _python_list_str_plain_get_template_str_plain_select_template_list, _python_int_0 ) ).asObject(), _python_str_plain_select_template ) );
            frame_guard.setLineNumber( 1196 );
            {
                PyObjectTempKeeper0 isinstance14;
                if ( ( isinstance14.assign( _python_context->python_closure_file_name.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance14.asObject0(), _mvar_django__template__base_Template.asObject0() ) ) )
            {
                frame_guard.setLineNumber( 1197 );
                _python_var_t.assign0( _python_context->python_closure_file_name.asObject() );
            }
            else
            {
                frame_guard.setLineNumber( 1198 );
                {
                    PyObjectTempKeeper0 call12;
                    PyObjectTempKeeper0 isinstance10;
                    if ( ( (!( ( isinstance10.assign( _python_context->python_closure_file_name.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance10.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__template__base_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) )) && CHECK_IF_TRUE( PyObjectTemporary( ( call12.assign( _mvar_django__template__base_is_iterable.asObject0() ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), _python_context->python_closure_file_name.asObject() ) ) ).asObject() ) ) )
                {
                    frame_guard.setLineNumber( 1199 );
                    {
                        PyObjectTempKeeper0 call6;
                        _python_var_t.assign1( ( call6.assign( _python_var_select_template.asObject() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_context->python_closure_file_name.asObject() ) ) );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 1201 );
                    {
                        PyObjectTempKeeper0 call8;
                        _python_var_t.assign1( ( call8.assign( _python_var_get_template.asObject() ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_context->python_closure_file_name.asObject() ) ) );
                    }
                }
                }
            }
            }
            frame_guard.setLineNumber( 1202 );
            {
                    PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_t.asObject(), _python_str_plain_nodelist ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_nodelist );
            }
        }
        frame_guard.setLineNumber( 1203 );
        {
            PyObjectTempKeeper0 call_tmp24;
            PyObjectTempKeeper1 call_tmp25;
            PyObjectTempKeeper1 make_dict16;
            PyObjectTempKeeper1 make_dict18;
            PyObjectTempKeeper1 make_dict20;
            _python_var_new_context.assign1( ( call_tmp24.assign( _python_context->python_closure_context_class.asObject() ), call_tmp25.assign( MAKE_TUPLE1( _python_var__dict.asObject() ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp24.asObject(), call_tmp25.asObject(), ( make_dict16.assign( LOOKUP_ATTRIBUTE( _python_var_context.asObject(), _python_str_plain_autoescape ) ), make_dict18.assign( LOOKUP_ATTRIBUTE( _python_var_context.asObject(), _python_str_plain_current_app ) ), make_dict20.assign( LOOKUP_ATTRIBUTE( _python_var_context.asObject(), _python_str_plain_use_l10n ) ), MAKE_DICT4( make_dict16.asObject0(), _python_unicode_plain_autoescape, make_dict18.asObject0(), _python_unicode_plain_current_app, make_dict20.asObject0(), _python_unicode_plain_use_l10n, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_context.asObject(), _python_str_plain_use_tz ) ).asObject(), _python_unicode_plain_use_tz ) ) ) ) );
        }
        frame_guard.setLineNumber( 1213 );
        _python_var_csrf_token.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_context.asObject(), _python_str_plain_get ) ).asObject(), _python_unicode_plain_csrf_token, Py_None ) );
        frame_guard.setLineNumber( 1214 );
        if ( ( _python_var_csrf_token.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 1215 );
            {
                    PyObject *tmp_identifier = _python_var_csrf_token.asObject();
                    SET_SUBSCRIPT( tmp_identifier, _python_var_new_context.asObject(), _python_unicode_plain_csrf_token );
            }
        }
        frame_guard.setLineNumber( 1216 );
        {
            PyObjectTempKeeper1 call27;
            return ( call27.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_nodelist ) ).asObject(), _python_str_plain_render ) ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), _python_var_new_context.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_context.updateLocalsDict( _python_var_self.updateLocalsDict( _python_context->python_closure_context_class.updateLocalsDict( _python_context->python_closure_file_name.updateLocalsDict( _python_context->python_closure_func.updateLocalsDict( _python_var_csrf_token.updateLocalsDict( _python_var_new_context.updateLocalsDict( _python_var_t.updateLocalsDict( _python_var_select_template.updateLocalsDict( _python_var_get_template.updateLocalsDict( _python_var__dict.updateLocalsDict( _python_var_resolved_kwargs.updateLocalsDict( _python_var_resolved_args.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base );
           frame_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_context = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_context == key )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_context, key ) )
            {
                if (unlikely( _python_par_context ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
                    goto error_exit;
                }

                _python_par_context = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_context != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'context'" );
             goto error_exit;
         }

        _python_par_context = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( self, _python_par_self, _python_par_context );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_context );

    return NULL;
}

static PyObject *dparse_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_27_is_library_missing_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalVariable _python_var_path( _python_str_plain_path );
    PyObjectLocalVariable _python_var_module( _python_str_plain_module );
    PyObjectLocalVariable _python_var_package( _python_str_plain_package );

    // Actual function code.
    static PyFrameObject *frame_function_27_is_library_missing_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_27_is_library_missing_of_module_django__template__base ) )
    {
        if ( frame_function_27_is_library_missing_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_27_is_library_missing_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_27_is_library_missing_of_module_django__template__base );
        }

        frame_function_27_is_library_missing_of_module_django__template__base = MAKE_FRAME( _codeobj_9dc7f1455929b51ca943e4ae0f21ec04, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_27_is_library_missing_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_27_is_library_missing_of_module_django__template__base ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1238 );
            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_name.asObject(), _python_str_plain_rsplit ) ).asObject(), _python_unicode_dot, _python_int_pos_1 ) ).asObject() ) );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            _python_var_path.assign0( _python_tmp_element_1.asObject() );
            _python_var_module.assign0( _python_tmp_element_2.asObject() );
        }
        frame_guard.setLineNumber( 1239 );
        try
        {
            frame_guard.setLineNumber( 1240 );
            {
                PyObjectTempKeeper0 call3;
                _python_var_package.assign1( ( call3.assign( _mvar_django__template__base_import_module.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_path.asObject() ) ) );
            }
            frame_guard.setLineNumber( 1241 );
            {
                PyObjectTempKeeper0 call5;
                PyObjectTempKeeper0 call6;
                return INCREASE_REFCOUNT( UNARY_OPERATION( UNARY_NOT, PyObjectTemporary( ( call5.assign( _mvar_django__template__base_module_has_submodule.asObject0() ), call6.assign( _python_var_package.asObject() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), call6.asObject0(), _python_var_module.asObject() ) ) ).asObject() ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_ImportError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 1243 );
                {
                    PyObjectTempKeeper0 call1;
                    return ( call1.assign( _mvar_django__template__base_is_library_missing.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_path.asObject() ) );
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_package.updateLocalsDict( _python_var_module.updateLocalsDict( _python_var_path.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_27_is_library_missing_of_module_django__template__base )
        {
           Py_DECREF( frame_function_27_is_library_missing_of_module_django__template__base );
           frame_function_27_is_library_missing_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_27_is_library_missing_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "is_library_missing() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "is_library_missing() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "is_library_missing() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "is_library_missing() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_library_missing() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "is_library_missing() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "is_library_missing() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_library_missing() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "is_library_missing() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_library_missing() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "is_library_missing() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_library_missing() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "is_library_missing() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "is_library_missing() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "is_library_missing() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "is_library_missing() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "is_library_missing() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_27_is_library_missing_of_module_django__template__base( self, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_27_is_library_missing_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_27_is_library_missing_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_27_is_library_missing_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_28_import_library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_taglib_module )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_taglib_module( _python_str_plain_taglib_module, _python_par_taglib_module );
    PyObjectLocalVariable _python_var_mod( _python_str_plain_mod );
    PyObjectLocalVariable _python_var_e( _python_str_plain_e );

    // Actual function code.
    static PyFrameObject *frame_function_28_import_library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_28_import_library_of_module_django__template__base ) )
    {
        if ( frame_function_28_import_library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_28_import_library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_28_import_library_of_module_django__template__base );
        }

        frame_function_28_import_library_of_module_django__template__base = MAKE_FRAME( _codeobj_fb40718a11c8bda9b2486147fe958e16, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_28_import_library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_28_import_library_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1252 );
        try
        {
            frame_guard.setLineNumber( 1253 );
            {
                PyObjectTempKeeper0 call7;
                _python_var_mod.assign1( ( call7.assign( _mvar_django__template__base_import_module.asObject0() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_taglib_module.asObject() ) ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_ImportError ) )
            {
                frame_guard.detachFrame();
                _python_var_e.assign0( _exception.getValue() );
                frame_guard.setLineNumber( 1259 );
                {
                    PyObjectTempKeeper0 call5;
                    if ( CHECK_IF_TRUE( PyObjectTemporary( ( call5.assign( _mvar_django__template__base_is_library_missing.asObject0() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_taglib_module.asObject() ) ) ).asObject() ) )
                {
                    return INCREASE_REFCOUNT( Py_None );
                }
                else
                {
                    frame_guard.setLineNumber( 1262 );
                    {
                        PyObjectTempKeeper0 call3;
                        PyObjectTempKeeper0 make_tuple1;
                        {
                            PyObjectTemporary tmp_exception_type( ( call3.assign( _mvar_django__template__base_InvalidTemplateLibrary.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_546e68aae7b8e42d19ca2719534329f2, PyObjectTemporary( ( make_tuple1.assign( _python_var_taglib_module.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_e.asObject() ) ) ).asObject() ) ).asObject() ) ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 1264 );
        try
        {
            frame_guard.setLineNumber( 1265 );
            return LOOKUP_ATTRIBUTE( _python_var_mod.asObject(), _python_str_plain_register );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_AttributeError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 1267 );
                {
                    PyObjectTempKeeper0 call9;
                    {
                        PyObjectTemporary tmp_exception_type( ( call9.assign( _mvar_django__template__base_InvalidTemplateLibrary.asObject0() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_263f7aeb40630febeb16d724f256bebe, _python_var_taglib_module.asObject() ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_taglib_module.updateLocalsDict( _python_var_e.updateLocalsDict( _python_var_mod.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_28_import_library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_28_import_library_of_module_django__template__base );
           frame_function_28_import_library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_28_import_library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_taglib_module = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "import_library() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_taglib_module == key )
            {
                if (unlikely( _python_par_taglib_module ))
                {
                    PyErr_Format( PyExc_TypeError, "import_library() got multiple values for keyword argument 'taglib_module'" );
                    goto error_exit;
                }

                _python_par_taglib_module = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_taglib_module, key ) )
            {
                if (unlikely( _python_par_taglib_module ))
                {
                    PyErr_Format( PyExc_TypeError, "import_library() got multiple values for keyword argument 'taglib_module'" );
                    goto error_exit;
                }

                _python_par_taglib_module = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "import_library() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "import_library() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "import_library() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "import_library() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "import_library() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "import_library() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "import_library() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "import_library() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "import_library() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "import_library() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "import_library() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "import_library() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "import_library() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_taglib_module != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "import_library() got multiple values for keyword argument 'taglib_module'" );
             goto error_exit;
         }

        _python_par_taglib_module = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_28_import_library_of_module_django__template__base( self, _python_par_taglib_module );

error_exit:;

    Py_XDECREF( _python_par_taglib_module );

    return NULL;
}

static PyObject *dparse_function_28_import_library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_28_import_library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_28_import_library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_29_get_templatetags_modules_of_module_django__template__base( Nuitka_FunctionObject *self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var__templatetags_modules( _python_str_plain__templatetags_modules );
    PyObjectLocalVariable _python_var_app_module( _python_str_plain_app_module );
    PyObjectLocalVariable _python_var_templatetag_module( _python_str_plain_templatetag_module );

    // Actual function code.
    static PyFrameObject *frame_function_29_get_templatetags_modules_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_29_get_templatetags_modules_of_module_django__template__base ) )
    {
        if ( frame_function_29_get_templatetags_modules_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_29_get_templatetags_modules_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_29_get_templatetags_modules_of_module_django__template__base );
        }

        frame_function_29_get_templatetags_modules_of_module_django__template__base = MAKE_FRAME( _codeobj_3ba63b1ef9bd505f2ba885aa1824be71, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_29_get_templatetags_modules_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_29_get_templatetags_modules_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1280 );
        if ( (!( CHECK_IF_TRUE( _mvar_django__template__base_templatetags_modules.asObject0() ) )) )
        {
            _python_var__templatetags_modules.assign1( PyList_New( 0 ) );
            {
                frame_guard.setLineNumber( 1285 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( BINARY_OPERATION_ADD( PyObjectTemporary( LIST_COPY( _python_list_unicode_plain_django_list ) ).asObject(), PyObjectTemporary( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__template__base_settings.asObject0(), _python_str_plain_INSTALLED_APPS ) ).asObject() ) ).asObject() ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 1285 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_var_app_module.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 1286 );
                    try
                    {
                        frame_guard.setLineNumber( 1287 );
                        _python_var_templatetag_module.assign1( BINARY_OPERATION_REMAINDER( _python_unicode_digest_92d50aebc4806744d234dffc6274f988, _python_var_app_module.asObject() ) );
                        frame_guard.setLineNumber( 1288 );
                        {
                            PyObjectTempKeeper0 call1;
                            DECREASE_REFCOUNT( ( call1.assign( _mvar_django__template__base_import_module.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_templatetag_module.asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 1289 );
                        {
                            PyObjectTempKeeper1 call3;
                            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var__templatetags_modules.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_templatetag_module.asObject() ) ) );
                        }
                    }
                    catch ( PythonException &_exception )
                    {
                        if ( !_exception.hasTraceback() )
                        {
                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                        }
                        else
                        {
                            _exception.addTraceback( frame_guard.getFrame0() );
                        }

                        frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                        ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                        _exception.toExceptionHandler();

                        if ( _exception.matches( PyExc_ImportError ) )
                        {
                            frame_guard.detachFrame();
                            frame_guard.setLineNumber( 1291 );
                            CONSIDER_THREADING(); continue;
                        }
                        else
                        {
                            PyTracebackObject *tb = _exception.getTraceback();
                            frame_guard.setLineNumber( tb->tb_lineno );
                            _exception.setTraceback( tb->tb_next );
                            tb->tb_next = NULL;

                            throw;
                        }
                    }

                   CONSIDER_THREADING();
                }
            }
            frame_guard.setLineNumber( 1292 );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_templatetags_modules, _python_var__templatetags_modules.asObject() );
        }
        frame_guard.setLineNumber( 1293 );
        return _mvar_django__template__base_templatetags_modules.asObject();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_templatetag_module.updateLocalsDict( _python_var_app_module.updateLocalsDict( _python_var__templatetags_modules.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_29_get_templatetags_modules_of_module_django__template__base )
        {
           Py_DECREF( frame_function_29_get_templatetags_modules_of_module_django__template__base );
           frame_function_29_get_templatetags_modules_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_29_get_templatetags_modules_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;

    if (unlikely( args_given + kw_size > 0 ))
    {
#if PYTHON_VERSION < 330
        PyErr_Format( PyExc_TypeError, "get_templatetags_modules() takes no arguments (%zd given)", args_given + kw_size );
#else
        if ( kw_size == 0 )
        {
           PyErr_Format( PyExc_TypeError, "get_templatetags_modules() takes 0 positional arguments but %zd was given", args_given );
        }
        else
        {
           PyObject *tmp_iter = PyObject_GetIter( kw );
           PyObject *tmp_arg_name = PyIter_Next( tmp_iter );
           Py_DECREF( tmp_iter );

           PyErr_Format( PyExc_TypeError, "get_templatetags_modules() got an unexpected keyword argument '%s'", Nuitka_String_AsString( tmp_arg_name ) );

           Py_DECREF( tmp_arg_name );
        }
#endif
        goto error_exit;
    }


    return impl_function_29_get_templatetags_modules_of_module_django__template__base( self );

error_exit:;


    return NULL;
}

static PyObject *dparse_function_29_get_templatetags_modules_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 0)
    {
        return impl_function_29_get_templatetags_modules_of_module_django__template__base( self );
    }
    else
    {
        PyObject *result = fparse_function_29_get_templatetags_modules_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_30_get_library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_library_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_library_name( _python_str_plain_library_name, _python_par_library_name );
    PyObjectLocalVariable _python_var_lib( _python_str_plain_lib );
    PyObjectLocalVariable _python_var_templatetags_modules( _python_str_plain_templatetags_modules );
    PyObjectLocalVariable _python_var_tried_modules( _python_str_plain_tried_modules );
    PyObjectLocalVariable _python_var_module( _python_str_plain_module );
    PyObjectLocalVariable _python_var_taglib_module( _python_str_plain_taglib_module );

    // Actual function code.
    static PyFrameObject *frame_function_30_get_library_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_30_get_library_of_module_django__template__base ) )
    {
        if ( frame_function_30_get_library_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_30_get_library_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_30_get_library_of_module_django__template__base );
        }

        frame_function_30_get_library_of_module_django__template__base = MAKE_FRAME( _codeobj_e8e1cf09e588ee7e65cf6a6aef2373e9, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_30_get_library_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_30_get_library_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1307 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_lib.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_libraries.asObject0(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_library_name.asObject(), Py_None ) ) );
        }
        frame_guard.setLineNumber( 1308 );
        if ( (!( CHECK_IF_TRUE( _python_var_lib.asObject() ) )) )
        {
            frame_guard.setLineNumber( 1309 );
            _python_var_templatetags_modules.assign1( CALL_FUNCTION_NO_ARGS( _mvar_django__template__base_get_templatetags_modules.asObject0() ) );
            _python_var_tried_modules.assign1( PyList_New( 0 ) );
            {
                frame_guard.setLineNumber( 1311 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_templatetags_modules.asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 1311 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_var_module.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 1312 );
                    {
                        PyObjectTempKeeper0 make_tuple4;
                        _python_var_taglib_module.assign1( BINARY_OPERATION_REMAINDER( _python_unicode_digest_fffb2b4b5e45eb8109d63f2497fbdbc1, PyObjectTemporary( ( make_tuple4.assign( _python_var_module.asObject() ), MAKE_TUPLE2( make_tuple4.asObject0(), _python_var_library_name.asObject() ) ) ).asObject() ) );
                    }
                    frame_guard.setLineNumber( 1313 );
                    {
                        PyObjectTempKeeper1 call6;
                        DECREASE_REFCOUNT( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_tried_modules.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_taglib_module.asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 1314 );
                    {
                        PyObjectTempKeeper0 call8;
                        _python_var_lib.assign1( ( call8.assign( _mvar_django__template__base_import_library.asObject0() ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_taglib_module.asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 1315 );
                    if ( CHECK_IF_TRUE( _python_var_lib.asObject() ) )
                    {
                        frame_guard.setLineNumber( 1316 );
                        {
                                PyObject *tmp_identifier = _python_var_lib.asObject();
                                PyObject *tmp_subscribed = _mvar_django__template__base_libraries.asObject0();
                                SET_SUBSCRIPT( tmp_identifier, tmp_subscribed, _python_var_library_name.asObject() );
                        }
                        frame_guard.setLineNumber( 1317 );
                        break;
                    }

                   CONSIDER_THREADING();
                }
            }
            frame_guard.setLineNumber( 1318 );
            if ( (!( CHECK_IF_TRUE( _python_var_lib.asObject() ) )) )
            {
                frame_guard.setLineNumber( 1319 );
                {
                    PyObjectTempKeeper1 call10;
                    PyObjectTempKeeper0 call14;
                    PyObjectTempKeeper0 make_tuple12;
                    {
                        PyObjectTemporary tmp_exception_type( ( call14.assign( _mvar_django__template__base_InvalidTemplateLibrary.asObject0() ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_2d273df7902081ce75cc9eba3f9bc8e3, PyObjectTemporary( ( make_tuple12.assign( _python_var_library_name.asObject() ), MAKE_TUPLE2( make_tuple12.asObject0(), PyObjectTemporary( ( call10.assign( LOOKUP_ATTRIBUTE( _python_unicode_chr_44, _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), _python_var_tried_modules.asObject() ) ) ).asObject() ) ) ).asObject() ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
        }
        frame_guard.setLineNumber( 1323 );
        return _python_var_lib.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_library_name.updateLocalsDict( _python_var_taglib_module.updateLocalsDict( _python_var_module.updateLocalsDict( _python_var_tried_modules.updateLocalsDict( _python_var_templatetags_modules.updateLocalsDict( _python_var_lib.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_30_get_library_of_module_django__template__base )
        {
           Py_DECREF( frame_function_30_get_library_of_module_django__template__base );
           frame_function_30_get_library_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_30_get_library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_library_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_library() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_library_name == key )
            {
                if (unlikely( _python_par_library_name ))
                {
                    PyErr_Format( PyExc_TypeError, "get_library() got multiple values for keyword argument 'library_name'" );
                    goto error_exit;
                }

                _python_par_library_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_library_name, key ) )
            {
                if (unlikely( _python_par_library_name ))
                {
                    PyErr_Format( PyExc_TypeError, "get_library() got multiple values for keyword argument 'library_name'" );
                    goto error_exit;
                }

                _python_par_library_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_library() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_library() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_library() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_library() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_library() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_library() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_library() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_library() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_library() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_library() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_library() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_library() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_library() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_library_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_library() got multiple values for keyword argument 'library_name'" );
             goto error_exit;
         }

        _python_par_library_name = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_30_get_library_of_module_django__template__base( self, _python_par_library_name );

error_exit:;

    Py_XDECREF( _python_par_library_name );

    return NULL;
}

static PyObject *dparse_function_30_get_library_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_30_get_library_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_30_get_library_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_31_add_to_builtins_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject *_python_par_module )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_module( _python_str_plain_module, _python_par_module );

    // Actual function code.
    static PyFrameObject *frame_function_31_add_to_builtins_of_module_django__template__base = NULL;

    if ( isFrameUnusable( frame_function_31_add_to_builtins_of_module_django__template__base ) )
    {
        if ( frame_function_31_add_to_builtins_of_module_django__template__base )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_31_add_to_builtins_of_module_django__template__base" );
#endif
            Py_DECREF( frame_function_31_add_to_builtins_of_module_django__template__base );
        }

        frame_function_31_add_to_builtins_of_module_django__template__base = MAKE_FRAME( _codeobj_027ad5ad4dbfa08d092d72f6f403457f, _module_django__template__base );
    }

    FrameGuard frame_guard( frame_function_31_add_to_builtins_of_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_function_31_add_to_builtins_of_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1327 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 call3;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_builtins.asObject0(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( ( call1.assign( _mvar_django__template__base_import_library.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_module.asObject() ) ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_module.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_31_add_to_builtins_of_module_django__template__base )
        {
           Py_DECREF( frame_function_31_add_to_builtins_of_module_django__template__base );
           frame_function_31_add_to_builtins_of_module_django__template__base = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_31_add_to_builtins_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_module = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_to_builtins() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_module == key )
            {
                if (unlikely( _python_par_module ))
                {
                    PyErr_Format( PyExc_TypeError, "add_to_builtins() got multiple values for keyword argument 'module'" );
                    goto error_exit;
                }

                _python_par_module = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_module, key ) )
            {
                if (unlikely( _python_par_module ))
                {
                    PyErr_Format( PyExc_TypeError, "add_to_builtins() got multiple values for keyword argument 'module'" );
                    goto error_exit;
                }

                _python_par_module = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_to_builtins() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_to_builtins() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_to_builtins() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_to_builtins() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_to_builtins() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "add_to_builtins() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_to_builtins() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "add_to_builtins() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_to_builtins() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_to_builtins() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_to_builtins() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "add_to_builtins() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_to_builtins() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_module != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_to_builtins() got multiple values for keyword argument 'module'" );
             goto error_exit;
         }

        _python_par_module = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_31_add_to_builtins_of_module_django__template__base( self, _python_par_module );

error_exit:;

    Py_XDECREF( _python_par_module );

    return NULL;
}

static PyObject *dparse_function_31_add_to_builtins_of_module_django__template__base( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_31_add_to_builtins_of_module_django__template__base( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_31_add_to_builtins_of_module_django__template__base( self, args, size, NULL );
        return result;
    }

}




static PyObject *MAKE_FUNCTION_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base,
        dparse_function_10_empty_variable_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_empty_variable,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6361a73bd188e0370494dfad4ec55a07,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base,
        dparse_function_11_empty_block_tag_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_empty_block_tag,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5c772f0b98badb924a7dec5a346ee584,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base,
        dparse_function_12_invalid_block_tag_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_invalid_block_tag,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_489d4f9a731868c41781971cd3833bea,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base,
        dparse_function_13_unclosed_block_tag_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_unclosed_block_tag,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_951a3960eb8a72e588642f603273bbd3,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_14_compile_filter_error_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_14_compile_filter_error_of_class_12_Parser_of_module_django__template__base,
        dparse_function_14_compile_filter_error_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_compile_filter_error,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_90e38801f81e7f5d882c8d9a025cec41,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_15_compile_function_error_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_15_compile_function_error_of_class_12_Parser_of_module_django__template__base,
        dparse_function_15_compile_function_error_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_compile_function_error,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ea47473f1de1737314a5507bba3832e3,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_15_resolve_variable_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_15_resolve_variable_of_module_django__template__base,
        dparse_function_15_resolve_variable_of_module_django__template__base,
        _python_str_plain_resolve_variable,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1cfb6d8f892adf945b93df50a3d7dd44,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_d5306bf6b619d5c36955458a38e83c81
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_16_next_token_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_16_next_token_of_class_12_Parser_of_module_django__template__base,
        dparse_function_16_next_token_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_next_token,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_844d8dfba2430a0c852f1651deddc3ca,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base,
        dparse_function_17_prepend_token_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_prepend_token,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a08e2fa3e26011c0b762ff2033b88a45,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base,
        dparse_function_18_delete_first_token_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_delete_first_token,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_814f13f0a83edc683213a3888049cdcc,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_19_add_library_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_19_add_library_of_class_12_Parser_of_module_django__template__base,
        dparse_function_19_add_library_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_add_library,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_db7b66dda1668d84716ff6366bb0d766,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_10_Token_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_10_Token_of_module_django__template__base,
        dparse_function_1___init___of_class_10_Token_of_module_django__template__base,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c5c4b2ba6cf5bdb4b2bd554280bf4cc4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_11_Lexer_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_11_Lexer_of_module_django__template__base,
        dparse_function_1___init___of_class_11_Lexer_of_module_django__template__base,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9a60265b2b3e422ed2096b4186ffb3b4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_12_Parser_of_module_django__template__base,
        dparse_function_1___init___of_class_12_Parser_of_module_django__template__base,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ee96c037d227c4f1aa7949e9dfc1b12f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_13_TokenParser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_13_TokenParser_of_module_django__template__base,
        dparse_function_1___init___of_class_13_TokenParser_of_module_django__template__base,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7fc5a166b6676149b0a74e3033bbab3d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_14_FilterExpression_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_14_FilterExpression_of_module_django__template__base,
        dparse_function_1___init___of_class_14_FilterExpression_of_module_django__template__base,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_44ebb4bc234cba73196722e16571f813,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_16_Variable_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_16_Variable_of_module_django__template__base,
        dparse_function_1___init___of_class_16_Variable_of_module_django__template__base,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_bc3cae8168b756ca0fec1fa3d3ddcc70,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_19_TextNode_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_19_TextNode_of_module_django__template__base,
        dparse_function_1___init___of_class_19_TextNode_of_module_django__template__base,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7809f0085e87093417adc45340e92415,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_AssignmentNode )
{
    struct _context_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = new _context_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_AssignmentNode.shareWith( python_closure_AssignmentNode );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base,
        dparse_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_23865878694aad4c0625bef6ad81b492,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None,
        _python_context,
        _context_function_1___init___of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_21_VariableNode_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_21_VariableNode_of_module_django__template__base,
        dparse_function_1___init___of_class_21_VariableNode_of_module_django__template__base,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d98ec92942a6aca1400abcfabbe23669,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base,
        dparse_function_1___init___of_class_25_TagHelperNode_of_module_django__template__base,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c04d7e1af9b25b18ec694df1c6addfd9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_26_Library_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_26_Library_of_module_django__template__base,
        dparse_function_1___init___of_class_26_Library_of_module_django__template__base,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ed114c54e3681c25321c7a92fb5095ec,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base,
        dparse_function_1___init___of_class_4_VariableDoesNotExist_of_module_django__template__base,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_22cfe1cb3493021a710cb378af743f4d,
        INCREASE_REFCOUNT( _python_tuple_tuple_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_6_Origin_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_6_Origin_of_module_django__template__base,
        dparse_function_1___init___of_class_6_Origin_of_module_django__template__base,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7e90105d95bac1875a3719bef88ca8f7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_7_StringOrigin_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_7_StringOrigin_of_module_django__template__base,
        dparse_function_1___init___of_class_7_StringOrigin_of_module_django__template__base,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_fa5fe21b6ab73dd86012fdc5865649b6,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_8_Template_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_8_Template_of_module_django__template__base,
        dparse_function_1___init___of_class_8_Template_of_module_django__template__base,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2dc8de4e75ee7fd58b89393a73dbb4fa,
        INCREASE_REFCOUNT( _python_tuple_none_unicode_digest_afb1876ffe5381a1ec594f75aa2aa548_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_name, PyObjectSharedLocalVariable &python_closure_self )
{
    struct _context_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = new _context_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_name.shareWith( python_closure_name );
    _python_context->python_closure_self.shareWith( python_closure_self );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base,
        dparse_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_dec,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4f6ffad62ed40775e8c2466beebcc106,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None,
        _python_context,
        _context_function_1_dec_of_function_2_tag_of_class_26_Library_of_module_django__template__base_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_flags, PyObjectSharedLocalVariable &python_closure_self )
{
    struct _context_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_t *_python_context = new _context_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_flags.shareWith( python_closure_flags );
    _python_context->python_closure_self.shareWith( python_closure_self );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base,
        dparse_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_dec,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a5591a48b8af4ce6aaf91bfe4d9f821a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None,
        _python_context,
        _context_function_1_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_name, PyObjectSharedLocalVariable &python_closure_self, PyObjectSharedLocalVariable &python_closure_takes_context )
{
    struct _context_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = new _context_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_name.shareWith( python_closure_name );
    _python_context->python_closure_self.shareWith( python_closure_self );
    _python_context->python_closure_takes_context.shareWith( python_closure_takes_context );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base,
        dparse_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_dec,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_616d899e3254411c69f5cf139e57d5b0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None,
        _python_context,
        _context_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_name, PyObjectSharedLocalVariable &python_closure_self, PyObjectSharedLocalVariable &python_closure_takes_context )
{
    struct _context_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = new _context_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_name.shareWith( python_closure_name );
    _python_context->python_closure_self.shareWith( python_closure_self );
    _python_context->python_closure_takes_context.shareWith( python_closure_takes_context );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base,
        dparse_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_dec,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_fadf28c59956343f20e6e8238a9d3e85,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None,
        _python_context,
        _context_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_context_class, PyObjectSharedLocalVariable &python_closure_file_name, PyObjectSharedLocalVariable &python_closure_name, PyObjectSharedLocalVariable &python_closure_self, PyObjectSharedLocalVariable &python_closure_takes_context )
{
    struct _context_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = new _context_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_context_class.shareWith( python_closure_context_class );
    _python_context->python_closure_file_name.shareWith( python_closure_file_name );
    _python_context->python_closure_name.shareWith( python_closure_name );
    _python_context->python_closure_self.shareWith( python_closure_self );
    _python_context->python_closure_takes_context.shareWith( python_closure_takes_context );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base,
        dparse_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_dec,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b241df7bcc741eeaba90830a0eece2c7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None,
        _python_context,
        _context_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base,
        dparse_function_1_next_space_index_of_function_6_value_of_class_13_TokenParser_of_module_django__template__base,
        _python_str_plain_next_space_index,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0bb1d57e79288c1410eff5cfb72792b7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_2ed46301441a2662e0c9d30f96717745
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_render_of_class_17_Node_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_render_of_class_17_Node_of_module_django__template__base,
        dparse_function_1_render_of_class_17_Node_of_module_django__template__base,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_08efbb24e4d80665a5877cb5ca385015,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_2e128ff5fc6c5eb82469bb73b8d013b0
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_render_of_class_18_NodeList_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_render_of_class_18_NodeList_of_module_django__template__base,
        dparse_function_1_render_of_class_18_NodeList_of_module_django__template__base,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d77400344a8f39fe6e34905a5a12161d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_context_class, PyObjectSharedLocalVariable &python_closure_file_name, PyObjectSharedLocalVariable &python_closure_func )
{
    struct _context_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = new _context_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_context_class.shareWith( python_closure_context_class );
    _python_context->python_closure_file_name.shareWith( python_closure_file_name );
    _python_context->python_closure_func.shareWith( python_closure_func );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base,
        dparse_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8f7e5f1d8ee2ee89e9767aaaae794e77,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None,
        _python_context,
        _context_function_1_render_of_class_1_InclusionNode_of_function_1_dec_of_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_func )
{
    struct _context_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = new _context_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_func.shareWith( python_closure_func );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base,
        dparse_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f484ad492178b9f196d8b2e0f5a2db40,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None,
        _python_context,
        _context_function_1_render_of_class_1_SimpleNode_of_function_1_dec_of_function_6_simple_tag_of_class_26_Library_of_module_django__template__base_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base,
        dparse_function_20_compile_filter_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_compile_filter,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f266bc7f070561b0975dc51d16a5fca5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_4fd6617c94eb13de0a98f4652d89320b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_20_render_value_in_context_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_20_render_value_in_context_of_module_django__template__base,
        dparse_function_20_render_value_in_context_of_module_django__template__base,
        _python_str_plain_render_value_in_context,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_af9385ca6377146ebd3b01a1179ca9a2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_6b8b83190564a8b1c9403f9a90d0b783
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_21_find_filter_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_21_find_filter_of_class_12_Parser_of_module_django__template__base,
        dparse_function_21_find_filter_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_find_filter,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_404dd39c4b292013f16a3d0b51fb70e5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_22_token_kwargs_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_22_token_kwargs_of_module_django__template__base,
        dparse_function_22_token_kwargs_of_module_django__template__base,
        _python_str_plain_token_kwargs,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_61ffa2348ca71d7fbb9efbb4b45aa4f0,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_38f9950b5509a8131fd9e0e14bc1cf5d
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_23_parse_bits_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_23_parse_bits_of_module_django__template__base,
        dparse_function_23_parse_bits_of_module_django__template__base,
        _python_str_plain_parse_bits,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4af450357dae37dd83205a7b0d16afda,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_86642ced1f0acd86aad9d92d51d0baa0
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_24_generic_tag_compiler_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_24_generic_tag_compiler_of_module_django__template__base,
        dparse_function_24_generic_tag_compiler_of_module_django__template__base,
        _python_str_plain_generic_tag_compiler,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7839b75f50f888264bd63726e3f3958f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_e1b9740843f89715a366206adac99440
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_27_is_library_missing_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_27_is_library_missing_of_module_django__template__base,
        dparse_function_27_is_library_missing_of_module_django__template__base,
        _python_str_plain_is_library_missing,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9dc7f1455929b51ca943e4ae0f21ec04,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_334c56423a99b40430589554a9f3b5a5
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_28_import_library_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_28_import_library_of_module_django__template__base,
        dparse_function_28_import_library_of_module_django__template__base,
        _python_str_plain_import_library,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_fb40718a11c8bda9b2486147fe958e16,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_315c31798829616602673f255aa0e870
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_29_get_templatetags_modules_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_29_get_templatetags_modules_of_module_django__template__base,
        dparse_function_29_get_templatetags_modules_of_module_django__template__base,
        _python_str_plain_get_templatetags_modules,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3ba63b1ef9bd505f2ba885aa1824be71,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_542dfe81186e264a93e4b48fd95231b1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___iter___of_class_17_Node_of_module_django__template__base(  )
{
    return Nuitka_Function_New(
        fparse_function_2___iter___of_class_17_Node_of_module_django__template__base,
        dparse_function_2___iter___of_class_17_Node_of_module_django__template__base,
        _python_str_plain___iter__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4ad778066d6cfe39b956fb03515a0388,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );
}



static PyObject *MAKE_FUNCTION_function_2___iter___of_class_8_Template_of_module_django__template__base(  )
{
    return Nuitka_Function_New(
        fparse_function_2___iter___of_class_8_Template_of_module_django__template__base,
        dparse_function_2___iter___of_class_8_Template_of_module_django__template__base,
        _python_str_plain___iter__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_140a98c2c3239c38bd6e814b35f78745,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );
}



static PyObject *MAKE_FUNCTION_function_2___repr___of_class_19_TextNode_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___repr___of_class_19_TextNode_of_module_django__template__base,
        dparse_function_2___repr___of_class_19_TextNode_of_module_django__template__base,
        _python_str_plain___repr__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4141099bc05a5a0cb0b3c4a6873338b7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___repr___of_class_21_VariableNode_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___repr___of_class_21_VariableNode_of_module_django__template__base,
        dparse_function_2___repr___of_class_21_VariableNode_of_module_django__template__base,
        _python_str_plain___repr__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_62dabee2d4b579e48833225e2b48b329,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___str___of_class_10_Token_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___str___of_class_10_Token_of_module_django__template__base,
        dparse_function_2___str___of_class_10_Token_of_module_django__template__base,
        _python_str_plain___str__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_06176c9f372f52e6fd8bb00fa443c200,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base,
        dparse_function_2___str___of_class_4_VariableDoesNotExist_of_module_django__template__base,
        _python_str_plain___str__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b5b38291124f4d57eda94da6d2b6f8d4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_AssignmentNode, PyObjectSharedLocalVariable &python_closure_defaults, PyObjectSharedLocalVariable &python_closure_function_name, PyObjectSharedLocalVariable &python_closure_params, PyObjectSharedLocalVariable &python_closure_takes_context, PyObjectSharedLocalVariable &python_closure_varargs, PyObjectSharedLocalVariable &python_closure_varkw )
{
    struct _context_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = new _context_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_AssignmentNode.shareWith( python_closure_AssignmentNode );
    _python_context->python_closure_defaults.shareWith( python_closure_defaults );
    _python_context->python_closure_function_name.shareWith( python_closure_function_name );
    _python_context->python_closure_params.shareWith( python_closure_params );
    _python_context->python_closure_takes_context.shareWith( python_closure_takes_context );
    _python_context->python_closure_varargs.shareWith( python_closure_varargs );
    _python_context->python_closure_varkw.shareWith( python_closure_varkw );

    PyObject *result = Nuitka_Function_New(
        fparse_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base,
        dparse_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_compile_func,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_50c2dc39cd4a8e20b850d59fbd803ba3,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None,
        _python_context,
        _context_function_2_compile_func_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_flags, PyObjectSharedLocalVariable &python_closure_name, PyObjectSharedLocalVariable &python_closure_self )
{
    struct _context_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_t *_python_context = new _context_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_flags.shareWith( python_closure_flags );
    _python_context->python_closure_name.shareWith( python_closure_name );
    _python_context->python_closure_self.shareWith( python_closure_self );

    PyObject *result = Nuitka_Function_New(
        fparse_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base,
        dparse_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_dec,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7d62015a7f80b48c47825f8e9c2af1a0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None,
        _python_context,
        _context_function_2_dec_of_function_4_filter_of_class_26_Library_of_module_django__template__base_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base,
        dparse_function_2_get_nodes_by_type_of_class_18_NodeList_of_module_django__template__base,
        _python_str_plain_get_nodes_by_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c783d13252bb06fb58b0cf31b583660a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_e6436cef4d81392eced2a4e0776012a7
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base,
        dparse_function_2_get_resolved_arguments_of_class_25_TagHelperNode_of_module_django__template__base,
        _python_str_plain_get_resolved_arguments,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_dd8c3492655dab8c85b21419ca82a810,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_parse_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_parse_of_class_12_Parser_of_module_django__template__base,
        dparse_function_2_parse_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_parse,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f6f267967c7e41c55fb71dd9892ac8f7,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_reload_of_class_6_Origin_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_reload_of_class_6_Origin_of_module_django__template__base,
        dparse_function_2_reload_of_class_6_Origin_of_module_django__template__base,
        _python_str_plain_reload,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5beb0d6e6435348976493a7645024b1e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base,
        dparse_function_2_reload_of_class_7_StringOrigin_of_module_django__template__base,
        _python_str_plain_reload,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_deda9f00beceac842fc6969e0dee63b7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base( PyObjectSharedLocalVariable &python_closure_func )
{
    struct _context_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t *_python_context = new _context_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_func.shareWith( python_closure_func );

    PyObject *result = Nuitka_Function_New(
        fparse_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base,
        dparse_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c63bd5d05a15ab1012623afed69db695,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None,
        _python_context,
        _context_function_2_render_of_class_1_AssignmentNode_of_function_1_dec_of_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base,
        dparse_function_2_resolve_of_class_14_FilterExpression_of_module_django__template__base,
        _python_str_plain_resolve,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7166d0ff51f0804a03851c04f65e5ef3,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_resolve_of_class_16_Variable_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_resolve_of_class_16_Variable_of_module_django__template__base,
        dparse_function_2_resolve_of_class_16_Variable_of_module_django__template__base,
        _python_str_plain_resolve,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_803a74f9572e124d14aa5ccecfd567b7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_22efc8ced817943d218af3400970e44a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_tag_of_class_26_Library_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_tag_of_class_26_Library_of_module_django__template__base,
        dparse_function_2_tag_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_tag,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_54a0ff5f3e8ac97f688e50e304c69ff3,
        INCREASE_REFCOUNT( _python_tuple_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base,
        dparse_function_2_tokenize_of_class_11_Lexer_of_module_django__template__base,
        _python_str_plain_tokenize,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0c045038deb3fc0794aba80e06c412fb,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_2088b0e8e4759425d13b3b17027a9425
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_top_of_class_13_TokenParser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_top_of_class_13_TokenParser_of_module_django__template__base,
        dparse_function_2_top_of_class_13_TokenParser_of_module_django__template__base,
        _python_str_plain_top,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_35bd5679e556b72e556adfbec9f644ab,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_d4159e969c050149b5e4b47a250bc1f1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_30_get_library_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_30_get_library_of_module_django__template__base,
        dparse_function_30_get_library_of_module_django__template__base,
        _python_str_plain_get_library,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e8e1cf09e588ee7e65cf6a6aef2373e9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_84bce9ea1e8aa40258c23d993ba6f128
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_31_add_to_builtins_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_31_add_to_builtins_of_module_django__template__base,
        dparse_function_31_add_to_builtins_of_module_django__template__base,
        _python_str_plain_add_to_builtins,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_027ad5ad4dbfa08d092d72f6f403457f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3___repr___of_class_16_Variable_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3___repr___of_class_16_Variable_of_module_django__template__base,
        dparse_function_3___repr___of_class_16_Variable_of_module_django__template__base,
        _python_str_plain___repr__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f0f2224805fcca779f94a1557511ca40,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3___str___of_class_6_Origin_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3___str___of_class_6_Origin_of_module_django__template__base,
        dparse_function_3___str___of_class_6_Origin_of_module_django__template__base,
        _python_str_plain___str__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_cd52daa255e9f96c7e062d9ed9fbd281,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3__render_of_class_8_Template_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3__render_of_class_8_Template_of_module_django__template__base,
        dparse_function_3__render_of_class_8_Template_of_module_django__template__base,
        _python_str_plain__render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_bca2adce3b44eeb4e48cb075c97dff39,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base,
        dparse_function_3_args_check_of_class_14_FilterExpression_of_module_django__template__base,
        _python_str_plain_args_check,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_fd7636e1fa563e5b8d2db35e34c3f46c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_create_token_of_class_11_Lexer_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_create_token_of_class_11_Lexer_of_module_django__template__base,
        dparse_function_3_create_token_of_class_11_Lexer_of_module_django__template__base,
        _python_str_plain_create_token,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8961497ed5ccce2e20909175ba39949e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_4e73501e8598dbd4e49372a69e81cb35
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base,
        dparse_function_3_get_nodes_by_type_of_class_17_Node_of_module_django__template__base,
        _python_str_plain_get_nodes_by_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4185ca5aa617955b87b31076e6fd4bfa,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_31cd22459a966056e45c102fc82151d1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_more_of_class_13_TokenParser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_more_of_class_13_TokenParser_of_module_django__template__base,
        dparse_function_3_more_of_class_13_TokenParser_of_module_django__template__base,
        _python_str_plain_more,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_68a6b6238ab643c337b4b79cb73f665c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_18e3f5dc11499d7e8584069083cdccdf
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_render_node_of_class_18_NodeList_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_render_node_of_class_18_NodeList_of_module_django__template__base,
        dparse_function_3_render_node_of_class_18_NodeList_of_module_django__template__base,
        _python_str_plain_render_node,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_99253c801efdab5abd16374925974661,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_render_of_class_19_TextNode_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_render_of_class_19_TextNode_of_module_django__template__base,
        dparse_function_3_render_of_class_19_TextNode_of_module_django__template__base,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3cc0641f463eed15648640156360ca96,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_render_of_class_21_VariableNode_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_render_of_class_21_VariableNode_of_module_django__template__base,
        dparse_function_3_render_of_class_21_VariableNode_of_module_django__template__base,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b22cc496c47ea236e9c8f7fe54e83399,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_skip_past_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_skip_past_of_class_12_Parser_of_module_django__template__base,
        dparse_function_3_skip_past_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_skip_past,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_18cdaec9fcfb5b14e80902ad43bfe9c3,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_split_contents_of_class_10_Token_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_split_contents_of_class_10_Token_of_module_django__template__base,
        dparse_function_3_split_contents_of_class_10_Token_of_module_django__template__base,
        _python_str_plain_split_contents,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c45350170d9daf1640b364852c313669,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_tag_function_of_class_26_Library_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_tag_function_of_class_26_Library_of_module_django__template__base,
        dparse_function_3_tag_function_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_tag_function,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7492b106cb07ca3d39bb52fa2e375210,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4___str___of_class_14_FilterExpression_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4___str___of_class_14_FilterExpression_of_module_django__template__base,
        dparse_function_4___str___of_class_14_FilterExpression_of_module_django__template__base,
        _python_str_plain___str__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4e15beb0677d88cb09d46c2f9e9fe145,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4___str___of_class_16_Variable_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4___str___of_class_16_Variable_of_module_django__template__base,
        dparse_function_4___str___of_class_16_Variable_of_module_django__template__base,
        _python_str_plain___str__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a519677d311f0f5f83cfb95069ac9360,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_back_of_class_13_TokenParser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_back_of_class_13_TokenParser_of_module_django__template__base,
        dparse_function_4_back_of_class_13_TokenParser_of_module_django__template__base,
        _python_str_plain_back,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4b7d3040d907cb5b6a9c1d32b69441c9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_7d34c07038840fef553ca46474895197
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base,
        dparse_function_4_create_variable_node_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_create_variable_node,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d4f5eec881a6e23e4d7f3fd776472d08,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_filter_of_class_26_Library_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_filter_of_class_26_Library_of_module_django__template__base,
        dparse_function_4_filter_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_filter,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d283f699a1873f9081cfebf7ad449c4f,
        INCREASE_REFCOUNT( _python_tuple_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_render_of_class_8_Template_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_render_of_class_8_Template_of_module_django__template__base,
        dparse_function_4_render_of_class_8_Template_of_module_django__template__base,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7a0e8034b281902f5783f82769eafa83,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_5941a0d291644fbea7bddefc71656650
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base,
        dparse_function_5__resolve_lookup_of_class_16_Variable_of_module_django__template__base,
        _python_str_plain__resolve_lookup,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c49bc14b674da4414882e64ed1c4ab81,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_e5c1e7f6ad391df0caad6a95fe9b7a1a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base,
        dparse_function_5_create_nodelist_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_create_nodelist,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6504f2eac249bf1c944b231523f94de9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_filter_function_of_class_26_Library_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_filter_function_of_class_26_Library_of_module_django__template__base,
        dparse_function_5_filter_function_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_filter_function,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_fdeff5e35da32b82898d861526810917,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_tag_of_class_13_TokenParser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_tag_of_class_13_TokenParser_of_module_django__template__base,
        dparse_function_5_tag_of_class_13_TokenParser_of_module_django__template__base,
        _python_str_plain_tag,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2d68a0b08e8df5924eae6c3850e04e0d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_f12e8691ec34c7686c5918e2395d93eb
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base,
        dparse_function_6_extend_nodelist_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_extend_nodelist,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_782478ca969a2660121bb11155e7deb9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_simple_tag_of_class_26_Library_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_simple_tag_of_class_26_Library_of_module_django__template__base,
        dparse_function_6_simple_tag_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_simple_tag,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a77547dff9e30fa5f030c8db45be0d3d,
        INCREASE_REFCOUNT( _python_tuple_none_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_value_of_class_13_TokenParser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_value_of_class_13_TokenParser_of_module_django__template__base,
        dparse_function_6_value_of_class_13_TokenParser_of_module_django__template__base,
        _python_str_plain_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2dc0317183cfedcb9d130bac1245f92d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_c0db611f6079f38c374c52bac1d7fb53
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base,
        dparse_function_7_assignment_tag_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_assignment_tag,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6a0257931a1fee9ba35bc811adb7a642,
        INCREASE_REFCOUNT( _python_tuple_none_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_enter_command_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_enter_command_of_class_12_Parser_of_module_django__template__base,
        dparse_function_7_enter_command_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_enter_command,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a6ea7e838466065c63a4f04c51869403,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_exit_command_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_exit_command_of_class_12_Parser_of_module_django__template__base,
        dparse_function_8_exit_command_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_exit_command,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1d356e525108f07c530c38d864ddf09e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base,
        dparse_function_8_inclusion_tag_of_class_26_Library_of_module_django__template__base,
        _python_str_plain_inclusion_tag,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_503f0f417c394ada57a281111325e8c3,
        defaults,
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_compile_string_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9_compile_string_of_module_django__template__base,
        dparse_function_9_compile_string_of_module_django__template__base,
        _python_str_plain_compile_string,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_286438b5a91d5a9c55f981d146e85f87,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        _python_unicode_digest_17ac8488f7819e56b0a2c3fa5744b351
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_error_of_class_12_Parser_of_module_django__template__base(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9_error_of_class_12_Parser_of_module_django__template__base,
        dparse_function_9_error_of_class_12_Parser_of_module_django__template__base,
        _python_str_plain_error,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_660b24ced8130d2abcd217aa896cfab3,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__template__base,
        Py_None
    );

    return result;
}


#if PYTHON_VERSION >= 300
static struct PyModuleDef _moduledef =
{
    PyModuleDef_HEAD_INIT,
    "django.template.base",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#define _MODULE_UNFREEZER 0

#if _MODULE_UNFREEZER
// For embedded modules, to be unpacked. Used by main program/package only
extern void registerMetaPathBasedUnfreezer( struct _inittab *_frozen_modules );

// Our own inittab for lookup of "frozen" modules, i.e. the ones included in this binary.
static struct _inittab _frozen_modules[] =
{

    { NULL, NULL }
};

// For loader attribute.
#if PYTHON_VERSION >= 330
extern PyObject *loader_frozen_modules;
#endif

#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( django__template__base )
{

#if defined( _NUITKA_EXE ) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Packages can be imported recursively in deep executables.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( _module_django__template__base );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    _initConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );

    patchInspectModule();

    patchBuiltinModule();
#endif

#if _MODULE_UNFREEZER
    registerMetaPathBasedUnfreezer( _frozen_modules );
#endif

    // puts( "in initdjango__template__base" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    _module_django__template__base = Py_InitModule4(
        "django.template.base",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    _module_django__template__base = PyModule_Create( &_moduledef );
#endif

    _moduledict_django__template__base = (PyDictObject *)((PyModuleObject *)_module_django__template__base)->md_dict;

    assertObject( _module_django__template__base );

#ifndef _NUITKA_MODULE
// Seems to work for Python2.7 out of the box, but for Python3.2, the module
// doesn't automatically enter "sys.modules" with the object that it should, so
// do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), _python_str_digest_c72c0a4e58601775d8884d77d5268783, _module_django__template__base );

        assert( r != -1 );
    }
#endif
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( _module_django__template__base );

    if ( PyDict_GetItem( module_dict, _python_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = ( PyObject *)module_builtin;

#ifdef _NUITKA_EXE
        if ( _module_django__template__base != _module___main__ )
        {
#endif
            value = PyModule_GetDict( value );
#ifdef _NUITKA_EXE
        }
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, _python_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
#if _MODULE_UNFREEZER
    PyDict_SetItem( module_dict, _python_str_plain___loader__, loader_frozen_modules );
#else
    PyDict_SetItem( module_dict, _python_str_plain___loader__, Py_None );
#endif
#endif

    // Module code
    UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain___doc__, Py_None );
    UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain___file__, _python_str_digest_88418c8adce50cd0162cbb98ec946b57 );
    PyFrameObject *frame_module_django__template__base = MAKE_FRAME( _codeobj_f2e344e8a889b0132938a33924852b87, _module_django__template__base );

    FrameGuard frame_guard( frame_module_django__template__base );
    try
    {
        assert( Py_REFCNT( frame_module_django__template__base ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_absolute_import, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain___future__, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_absolute_import_str_plain_unicode_literals_list, _python_int_0 ) ).asObject(), _python_str_plain_absolute_import ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_unicode_literals, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain___future__, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_absolute_import_str_plain_unicode_literals_list, _python_int_0 ) ).asObject(), _python_str_plain_unicode_literals ) );
        frame_guard.setLineNumber( 3 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_re, IMPORT_MODULE( _python_str_plain_re, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, Py_None, _python_int_0 ) );
        frame_guard.setLineNumber( 4 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_partial, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain_functools, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_partial_list, _python_int_0 ) ).asObject(), _python_str_plain_partial ) );
        frame_guard.setLineNumber( 5 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_getargspec, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain_inspect, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_getargspec_list, _python_int_0 ) ).asObject(), _python_str_plain_getargspec ) );
        frame_guard.setLineNumber( 7 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_settings, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_262bd828f67160809670905d543ae3a0, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_settings_list, _python_int_0 ) ).asObject(), _python_str_plain_settings ) );
        frame_guard.setLineNumber( 8 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_Context, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_8b7dc8b536c1e7fa9f5b923b42af7a82, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_2c9bdf026dc84ae3c65d29456a728de2_list, _python_int_0 ) ).asObject(), _python_str_plain_Context ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_RequestContext, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_8b7dc8b536c1e7fa9f5b923b42af7a82, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_2c9bdf026dc84ae3c65d29456a728de2_list, _python_int_0 ) ).asObject(), _python_str_plain_RequestContext ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_ContextPopException, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_8b7dc8b536c1e7fa9f5b923b42af7a82, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_2c9bdf026dc84ae3c65d29456a728de2_list, _python_int_0 ) ).asObject(), _python_str_plain_ContextPopException ) );
        frame_guard.setLineNumber( 10 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_import_module, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_4fc502edf9b4c184659c220d993c01d3, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_import_module_list, _python_int_0 ) ).asObject(), _python_str_plain_import_module ) );
        frame_guard.setLineNumber( 11 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_is_iterable, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_0599d93f624d0369bf099e5d99880ff0, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_is_iterable_list, _python_int_0 ) ).asObject(), _python_str_plain_is_iterable ) );
        frame_guard.setLineNumber( 12 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_smart_split, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_1863593e728059f3c0ba0d01334514dd, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_29eb50452e3fc5c532efac3cc2aa4b49_list, _python_int_0 ) ).asObject(), _python_str_plain_smart_split ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_unescape_string_literal, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_1863593e728059f3c0ba0d01334514dd, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_29eb50452e3fc5c532efac3cc2aa4b49_list, _python_int_0 ) ).asObject(), _python_str_plain_unescape_string_literal ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_get_text_list, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_1863593e728059f3c0ba0d01334514dd, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_29eb50452e3fc5c532efac3cc2aa4b49_list, _python_int_0 ) ).asObject(), _python_str_plain_get_text_list ) );
        frame_guard.setLineNumber( 14 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_force_str, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_5c6adb5fc6275b5d2a085f73ed00809a, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_force_str_str_plain_force_text_list, _python_int_0 ) ).asObject(), _python_str_plain_force_str ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_force_text, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_5c6adb5fc6275b5d2a085f73ed00809a, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_force_str_str_plain_force_text_list, _python_int_0 ) ).asObject(), _python_str_plain_force_text ) );
        frame_guard.setLineNumber( 15 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_ugettext_lazy, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_695d25035a0d5e79b21b6e2fa3e00631, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_ugettext_lazy_str_plain_pgettext_lazy_list, _python_int_0 ) ).asObject(), _python_str_plain_ugettext_lazy ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_pgettext_lazy, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_695d25035a0d5e79b21b6e2fa3e00631, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_ugettext_lazy_str_plain_pgettext_lazy_list, _python_int_0 ) ).asObject(), _python_str_plain_pgettext_lazy ) );
        frame_guard.setLineNumber( 16 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_SafeData, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_33422e2c698707541621bf8ab31ea849, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_bcc657864b852c500a46b6b9fa563c06_list, _python_int_0 ) ).asObject(), _python_str_plain_SafeData ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_EscapeData, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_33422e2c698707541621bf8ab31ea849, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_bcc657864b852c500a46b6b9fa563c06_list, _python_int_0 ) ).asObject(), _python_str_plain_EscapeData ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_mark_safe, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_33422e2c698707541621bf8ab31ea849, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_bcc657864b852c500a46b6b9fa563c06_list, _python_int_0 ) ).asObject(), _python_str_plain_mark_safe ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_mark_for_escaping, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_33422e2c698707541621bf8ab31ea849, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_bcc657864b852c500a46b6b9fa563c06_list, _python_int_0 ) ).asObject(), _python_str_plain_mark_for_escaping ) );
        frame_guard.setLineNumber( 18 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_localize, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_9600baca1bef71c37deac7bf246177c1, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_localize_list, _python_int_0 ) ).asObject(), _python_str_plain_localize ) );
        frame_guard.setLineNumber( 19 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_escape, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_d3a0db97fb5d78c487963bfc1490797d, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_escape_list, _python_int_0 ) ).asObject(), _python_str_plain_escape ) );
        frame_guard.setLineNumber( 20 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_module_has_submodule, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_03bb9f131d782ff4dbd31e0966379285, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_module_has_submodule_list, _python_int_0 ) ).asObject(), _python_str_plain_module_has_submodule ) );
        frame_guard.setLineNumber( 21 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_six, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_11a3eb3229bb1ce81f02aa3fc01149d5, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_six_list, _python_int_0 ) ).asObject(), _python_str_plain_six ) );
        frame_guard.setLineNumber( 22 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_template_localtime, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_73d3e50847215b8dcd97fb275615b5ea, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_template_localtime_list, _python_int_0 ) ).asObject(), _python_str_plain_template_localtime ) );
        frame_guard.setLineNumber( 23 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_python_2_unicode_compatible, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_5c6adb5fc6275b5d2a085f73ed00809a, ((PyModuleObject *)_module_django__template__base)->md_dict, ((PyModuleObject *)_module_django__template__base)->md_dict, _python_list_str_plain_python_2_unicode_compatible_list, _python_int_0 ) ).asObject(), _python_str_plain_python_2_unicode_compatible ) );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_TOKEN_TEXT, _python_int_0 );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_TOKEN_VAR, _python_int_pos_1 );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_TOKEN_BLOCK, _python_int_pos_2 );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_TOKEN_COMMENT, _python_int_pos_3 );
        frame_guard.setLineNumber( 30 );
        {
            PyObjectTempKeeper0 make_dict2;
            PyObjectTempKeeper0 make_dict4;
            PyObjectTempKeeper0 make_dict6;
            UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_TOKEN_MAPPING, ( make_dict2.assign( _mvar_django__template__base_TOKEN_TEXT.asObject0() ), make_dict4.assign( _mvar_django__template__base_TOKEN_VAR.asObject0() ), make_dict6.assign( _mvar_django__template__base_TOKEN_BLOCK.asObject0() ), MAKE_DICT4( _python_unicode_plain_Text, make_dict2.asObject0(), _python_unicode_plain_Var, make_dict4.asObject0(), _python_unicode_plain_Block, make_dict6.asObject0(), _python_unicode_plain_Comment, _mvar_django__template__base_TOKEN_COMMENT.asObject0() ) ) );
        }
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_FILTER_SEPARATOR, _python_unicode_chr_124 );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_FILTER_ARGUMENT_SEPARATOR, _python_unicode_chr_58 );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_VARIABLE_ATTRIBUTE_SEPARATOR, _python_unicode_dot );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_BLOCK_TAG_START, _python_unicode_digest_8a7c69862350d2048e1fc3d30ef59582 );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_BLOCK_TAG_END, _python_unicode_digest_e091e9f7599a0d572222b0c95c362ec2 );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_VARIABLE_TAG_START, _python_unicode_digest_e0cd4aa7d36323291836aed2ba1a2f35 );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_VARIABLE_TAG_END, _python_unicode_digest_67c0904ef67556c8b54cfb9c83f28bea );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_COMMENT_TAG_START, _python_unicode_digest_c414219bc0c615cb12723e1482342080 );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_COMMENT_TAG_END, _python_unicode_digest_9b34cbcf4f08445130eb28e904f081cd );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_TRANSLATOR_COMMENT_MARK, _python_unicode_plain_Translators );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_SINGLE_BRACE_START, _python_unicode_chr_123 );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_SINGLE_BRACE_END, _python_unicode_chr_125 );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_ALLOWED_VARIABLE_CHARS, _python_unicode_digest_056ca5796b608093c56e659ea08b9760 );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_UNKNOWN_SOURCE, _python_unicode_digest_de2a0fd00df289d260d48041b21c01b5 );
        frame_guard.setLineNumber( 60 );
        {
            PyObjectTempKeeper1 call11;
            PyObjectTempKeeper1 call13;
            PyObjectTempKeeper1 call15;
            PyObjectTempKeeper1 call17;
            PyObjectTempKeeper1 call19;
            PyObjectTempKeeper1 call27;
            PyObjectTempKeeper1 call9;
            PyObjectTempKeeper1 make_tuple21;
            PyObjectTempKeeper1 make_tuple22;
            PyObjectTempKeeper1 make_tuple23;
            PyObjectTempKeeper1 make_tuple24;
            PyObjectTempKeeper1 make_tuple25;
            UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_tag_re, ( call27.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_re.asObject0(), _python_str_plain_compile ) ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_68cdf4fb70a59a55b337e88576af86bc, PyObjectTemporary( ( make_tuple21.assign( ( call9.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_re.asObject0(), _python_str_plain_escape ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _mvar_django__template__base_BLOCK_TAG_START.asObject0() ) ) ), make_tuple22.assign( ( call11.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_re.asObject0(), _python_str_plain_escape ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _mvar_django__template__base_BLOCK_TAG_END.asObject0() ) ) ), make_tuple23.assign( ( call13.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_re.asObject0(), _python_str_plain_escape ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), _mvar_django__template__base_VARIABLE_TAG_START.asObject0() ) ) ), make_tuple24.assign( ( call15.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_re.asObject0(), _python_str_plain_escape ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), _mvar_django__template__base_VARIABLE_TAG_END.asObject0() ) ) ), make_tuple25.assign( ( call17.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_re.asObject0(), _python_str_plain_escape ) ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), _mvar_django__template__base_COMMENT_TAG_START.asObject0() ) ) ), MAKE_TUPLE6( make_tuple21.asObject0(), make_tuple22.asObject0(), make_tuple23.asObject0(), make_tuple24.asObject0(), make_tuple25.asObject0(), PyObjectTemporary( ( call19.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_re.asObject0(), _python_str_plain_escape ) ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), _mvar_django__template__base_COMMENT_TAG_END.asObject0() ) ) ).asObject() ) ) ).asObject() ) ).asObject() ) ) );
        }
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_libraries, PyDict_New() );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_builtins, PyList_New( 0 ) );
        UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_invalid_var_format_string, Py_None );
        {
            frame_guard.setLineNumber( 74 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( PyExc_Exception ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_1_TemplateSyntaxError_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call29;
                PyObjectTempKeeper0 call31;
                _tmp_python_tmp_class = ( call29.assign( _python_tmp_metaclass.asObject() ), call31.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call29.asObject0(), _python_str_plain_TemplateSyntaxError, call31.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_TemplateSyntaxError, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 77 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( PyExc_Exception ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_2_TemplateDoesNotExist_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call33;
                PyObjectTempKeeper0 call35;
                _tmp_python_tmp_class = ( call33.assign( _python_tmp_metaclass.asObject() ), call35.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call33.asObject0(), _python_str_plain_TemplateDoesNotExist, call35.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_TemplateDoesNotExist, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 80 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( PyExc_Exception ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_3_TemplateEncodingError_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call37;
                PyObjectTempKeeper0 call39;
                _tmp_python_tmp_class = ( call37.assign( _python_tmp_metaclass.asObject() ), call39.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call37.asObject0(), _python_str_plain_TemplateEncodingError, call39.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_TemplateEncodingError, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 83 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( PyExc_Exception ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_4_VariableDoesNotExist_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call41;
                PyObjectTempKeeper0 call43;
                _tmp_python_tmp_class = ( call41.assign( _python_tmp_metaclass.asObject() ), call43.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call41.asObject0(), _python_str_plain_VariableDoesNotExist, call43.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            {
                PyObjectTempKeeper0 call45;
                _python_tmp_class.assign1( ( call45.assign( _mvar_django__template__base_python_2_unicode_compatible.asObject0() ), CALL_FUNCTION_WITH_ARGS( call45.asObject0(), _python_tmp_class.asObject() ) ) );
            }
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_VariableDoesNotExist, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 94 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( PyExc_Exception ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_5_InvalidTemplateLibrary_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call47;
                PyObjectTempKeeper0 call49;
                _tmp_python_tmp_class = ( call47.assign( _python_tmp_metaclass.asObject() ), call49.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call47.asObject0(), _python_str_plain_InvalidTemplateLibrary, call49.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_InvalidTemplateLibrary, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 97 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_6_Origin_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call51;
                PyObjectTempKeeper0 call53;
                _tmp_python_tmp_class = ( call51.assign( _python_tmp_metaclass.asObject() ), call53.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call51.asObject0(), _python_str_plain_Origin, call53.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_Origin, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 107 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__template__base_Origin.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_7_StringOrigin_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call55;
                PyObjectTempKeeper0 call57;
                _tmp_python_tmp_class = ( call55.assign( _python_tmp_metaclass.asObject() ), call57.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call55.asObject0(), _python_str_plain_StringOrigin, call57.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_StringOrigin, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 115 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_8_Template_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call59;
                PyObjectTempKeeper0 call61;
                _tmp_python_tmp_class = ( call59.assign( _python_tmp_metaclass.asObject() ), call61.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call59.asObject0(), _python_str_plain_Template, call61.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_Template, _python_tmp_class.asObject() );
        }
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_compile_string, MAKE_FUNCTION_function_9_compile_string_of_module_django__template__base(  ) );
        {
            frame_guard.setLineNumber( 155 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_10_Token_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call63;
                PyObjectTempKeeper0 call65;
                _tmp_python_tmp_class = ( call63.assign( _python_tmp_metaclass.asObject() ), call65.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call63.asObject0(), _python_str_plain_Token, call65.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_Token, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 182 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_11_Lexer_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call67;
                PyObjectTempKeeper0 call69;
                _tmp_python_tmp_class = ( call67.assign( _python_tmp_metaclass.asObject() ), call69.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call67.asObject0(), _python_str_plain_Lexer, call69.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_Lexer, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 233 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_12_Parser_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call71;
                PyObjectTempKeeper0 call73;
                _tmp_python_tmp_class = ( call71.assign( _python_tmp_metaclass.asObject() ), call73.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call71.asObject0(), _python_str_plain_Parser, call73.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_Parser, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 368 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_13_TokenParser_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call75;
                PyObjectTempKeeper0 call77;
                _tmp_python_tmp_class = ( call75.assign( _python_tmp_metaclass.asObject() ), call77.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call75.asObject0(), _python_str_plain_TokenParser, call77.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_TokenParser, _python_tmp_class.asObject() );
        }
        frame_guard.setLineNumber( 487 );
        {
            PyObjectTempKeeper1 make_dict83;
            UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_constant_string, BINARY_OPERATION_REMAINDER( _python_unicode_digest_715c9b8c3506682d1a3e3d20cb46d0b9, PyObjectTemporary( ( make_dict83.assign( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__template__base_re.asObject0(), _python_str_plain_escape ) ).asObject(), _python_unicode_digest_06f7f064590d235cfa9a87dc4c446296 ) ), MAKE_DICT4( _python_unicode_digest_f7b45f31a940dfb566968aecbb9c6977, _python_unicode_plain_strdq, _python_unicode_digest_c1f6b974ab55b0dbf2b56c659641709a, _python_unicode_plain_strsq, make_dict83.asObject0(), _python_unicode_plain_i18n_open, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__template__base_re.asObject0(), _python_str_plain_escape ) ).asObject(), _python_unicode_chr_41 ) ).asObject(), _python_unicode_plain_i18n_close ) ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 498 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_constant_string, CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__template__base_constant_string.asObject0(), _python_str_plain_replace ) ).asObject(), _python_unicode_chr_10, _python_unicode_empty ) );
        frame_guard.setLineNumber( 500 );
        {
            PyObjectTempKeeper1 call87;
            PyObjectTempKeeper1 call89;
            PyObjectTempKeeper0 make_dict91;
            PyObjectTempKeeper1 make_dict97;
            UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_filter_raw_string, BINARY_OPERATION_REMAINDER( _python_unicode_digest_617cb8e678c04a7b692e38051e66a41e, PyObjectTemporary( ( make_dict91.assign( _mvar_django__template__base_constant_string.asObject0() ), make_dict97.assign( ( call87.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_re.asObject0(), _python_str_plain_escape ) ), CALL_FUNCTION_WITH_ARGS( call87.asObject0(), _mvar_django__template__base_FILTER_SEPARATOR.asObject0() ) ) ), MAKE_DICT5( make_dict91.asObject0(), _python_unicode_plain_constant, _python_unicode_digest_889a493dcb668bc604cbb67225a80749, _python_unicode_plain_num, _python_unicode_digest_5f42b4fcaa43380b3ad4203fbd851b70, _python_unicode_plain_var_chars, make_dict97.asObject0(), _python_unicode_plain_filter_sep, PyObjectTemporary( ( call89.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_re.asObject0(), _python_str_plain_escape ) ), CALL_FUNCTION_WITH_ARGS( call89.asObject0(), _mvar_django__template__base_FILTER_ARGUMENT_SEPARATOR.asObject0() ) ) ).asObject(), _python_unicode_plain_arg_sep ) ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 519 );
        {
            PyObjectTempKeeper1 call103;
            PyObjectTempKeeper0 call104;
            PyObjectTempKeeper1 op101;
            UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_filter_re, ( call103.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_re.asObject0(), _python_str_plain_compile ) ), call104.assign( _mvar_django__template__base_filter_raw_string.asObject0() ), CALL_FUNCTION_WITH_ARGS( call103.asObject0(), call104.asObject0(), PyObjectTemporary( ( op101.assign( LOOKUP_ATTRIBUTE( _mvar_django__template__base_re.asObject0(), _python_str_plain_UNICODE ) ), BINARY_OPERATION( PyNumber_Or, op101.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__template__base_re.asObject0(), _python_str_plain_VERBOSE ) ).asObject() ) ) ).asObject() ) ) );
        }
        {
            frame_guard.setLineNumber( 521 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_14_FilterExpression_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call106;
                PyObjectTempKeeper0 call108;
                _tmp_python_tmp_class = ( call106.assign( _python_tmp_metaclass.asObject() ), call108.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call106.asObject0(), _python_str_plain_FilterExpression, call108.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_FilterExpression, _python_tmp_class.asObject() );
        }
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_resolve_variable, MAKE_FUNCTION_function_15_resolve_variable_of_module_django__template__base(  ) );
        {
            frame_guard.setLineNumber( 668 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_16_Variable_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call110;
                PyObjectTempKeeper0 call112;
                _tmp_python_tmp_class = ( call110.assign( _python_tmp_metaclass.asObject() ), call112.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call110.asObject0(), _python_str_plain_Variable, call112.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_Variable, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 799 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_17_Node_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call114;
                PyObjectTempKeeper0 call116;
                _tmp_python_tmp_class = ( call114.assign( _python_tmp_metaclass.asObject() ), call116.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call114.asObject0(), _python_str_plain_Node, call116.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_Node, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 828 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_list ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_18_NodeList_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call118;
                PyObjectTempKeeper0 call120;
                _tmp_python_tmp_class = ( call118.assign( _python_tmp_metaclass.asObject() ), call120.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call118.asObject0(), _python_str_plain_NodeList, call120.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_NodeList, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 853 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__template__base_Node.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_19_TextNode_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call122;
                PyObjectTempKeeper0 call124;
                _tmp_python_tmp_class = ( call122.assign( _python_tmp_metaclass.asObject() ), call124.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call122.asObject0(), _python_str_plain_TextNode, call124.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_TextNode, _python_tmp_class.asObject() );
        }
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_render_value_in_context, MAKE_FUNCTION_function_20_render_value_in_context_of_module_django__template__base(  ) );
        {
            frame_guard.setLineNumber( 879 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__template__base_Node.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_21_VariableNode_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call126;
                PyObjectTempKeeper0 call128;
                _tmp_python_tmp_class = ( call126.assign( _python_tmp_metaclass.asObject() ), call128.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call126.asObject0(), _python_str_plain_VariableNode, call128.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_VariableNode, _python_tmp_class.asObject() );
        }
        frame_guard.setLineNumber( 897 );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_kwarg_re, CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__template__base_re.asObject0(), _python_str_plain_compile ) ).asObject(), _python_unicode_digest_9e8d05008476cc763638e382a52d5d74 ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_token_kwargs, MAKE_FUNCTION_function_22_token_kwargs_of_module_django__template__base(  ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_parse_bits, MAKE_FUNCTION_function_23_parse_bits_of_module_django__template__base(  ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_generic_tag_compiler, MAKE_FUNCTION_function_24_generic_tag_compiler_of_module_django__template__base(  ) );
        {
            frame_guard.setLineNumber( 1025 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__template__base_Node.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_25_TagHelperNode_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call130;
                PyObjectTempKeeper0 call132;
                _tmp_python_tmp_class = ( call130.assign( _python_tmp_metaclass.asObject() ), call132.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call130.asObject0(), _python_str_plain_TagHelperNode, call132.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_TagHelperNode, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1045 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_26_Library_of_module_django__template__base(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__template__base___metaclass__.isInitialized( false ) ? _mvar_django__template__base___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call134;
                PyObjectTempKeeper0 call136;
                _tmp_python_tmp_class = ( call134.assign( _python_tmp_metaclass.asObject() ), call136.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call134.asObject0(), _python_str_plain_Library, call136.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_Library, _python_tmp_class.asObject() );
        }
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_is_library_missing, MAKE_FUNCTION_function_27_is_library_missing_of_module_django__template__base(  ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_import_library, MAKE_FUNCTION_function_28_import_library_of_module_django__template__base(  ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_templatetags_modules, PyList_New( 0 ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_get_templatetags_modules, MAKE_FUNCTION_function_29_get_templatetags_modules_of_module_django__template__base(  ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_get_library, MAKE_FUNCTION_function_30_get_library_of_module_django__template__base(  ) );
        UPDATE_STRING_DICT1( _moduledict_django__template__base, (Nuitka_StringObject *)_python_str_plain_add_to_builtins, MAKE_FUNCTION_function_31_add_to_builtins_of_module_django__template__base(  ) );
        frame_guard.setLineNumber( 1330 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( _mvar_django__template__base_add_to_builtins.asObject0(), _python_unicode_digest_3b845e31d918334627f4736961626157 ) );
        frame_guard.setLineNumber( 1331 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( _mvar_django__template__base_add_to_builtins.asObject0(), _python_unicode_digest_cbac6a147ba82985d011af4fb566864b ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

#if 0
    // TODO: Recognize the need for it
        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = INCREASE_REFCOUNT( ((PyModuleObject *)_module_django__template__base)->md_dict );
#endif

    // Return the error.
        _exception.toPython();
        return MOD_RETURN_VALUE( NULL );
    }

   return MOD_RETURN_VALUE( _module_django__template__base );
}
