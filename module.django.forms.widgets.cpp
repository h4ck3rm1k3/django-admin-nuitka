// Generated code for Python source for module 'django.forms.widgets'
// created by Nuitka version 0.4.4pre3

// This code is in part copyright 2013 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__modules.hpp"
#include "__constants.hpp"
#include "__helpers.hpp"

// The _module_django__forms__widgets is a Python object pointer of module type.

// Note: For full compatability with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *_module_django__forms__widgets;
PyDictObject *_moduledict_django__forms__widgets;

// The module level variables.
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_CheckboxChoiceInput( &_module_django__forms__widgets, &_python_str_plain_CheckboxChoiceInput );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_CheckboxFieldRenderer( &_module_django__forms__widgets, &_python_str_plain_CheckboxFieldRenderer );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_CheckboxInput( &_module_django__forms__widgets, &_python_str_plain_CheckboxInput );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_ChoiceFieldRenderer( &_module_django__forms__widgets, &_python_str_plain_ChoiceFieldRenderer );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_ChoiceInput( &_module_django__forms__widgets, &_python_str_plain_ChoiceInput );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_ClearableFileInput( &_module_django__forms__widgets, &_python_str_plain_ClearableFileInput );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_DateInput( &_module_django__forms__widgets, &_python_str_plain_DateInput );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_DateTimeInput( &_module_django__forms__widgets, &_python_str_plain_DateTimeInput );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_FILE_INPUT_CONTRADICTION( &_module_django__forms__widgets, &_python_str_plain_FILE_INPUT_CONTRADICTION );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_FileInput( &_module_django__forms__widgets, &_python_str_plain_FileInput );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_HiddenInput( &_module_django__forms__widgets, &_python_str_plain_HiddenInput );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_Input( &_module_django__forms__widgets, &_python_str_plain_Input );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_MEDIA_TYPES( &_module_django__forms__widgets, &_python_str_plain_MEDIA_TYPES );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_Media( &_module_django__forms__widgets, &_python_str_plain_Media );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_MediaDefiningClass( &_module_django__forms__widgets, &_python_str_plain_MediaDefiningClass );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_MergeDict( &_module_django__forms__widgets, &_python_str_plain_MergeDict );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_MultiValueDict( &_module_django__forms__widgets, &_python_str_plain_MultiValueDict );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_MultiWidget( &_module_django__forms__widgets, &_python_str_plain_MultiWidget );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_MultipleHiddenInput( &_module_django__forms__widgets, &_python_str_plain_MultipleHiddenInput );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_NullBooleanSelect( &_module_django__forms__widgets, &_python_str_plain_NullBooleanSelect );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_PasswordInput( &_module_django__forms__widgets, &_python_str_plain_PasswordInput );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_PendingDeprecationWarning( &_module_django__forms__widgets, &_python_str_plain_PendingDeprecationWarning );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_RadioChoiceInput( &_module_django__forms__widgets, &_python_str_plain_RadioChoiceInput );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_RadioFieldRenderer( &_module_django__forms__widgets, &_python_str_plain_RadioFieldRenderer );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_RadioInput( &_module_django__forms__widgets, &_python_str_plain_RadioInput );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_RendererMixin( &_module_django__forms__widgets, &_python_str_plain_RendererMixin );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_Select( &_module_django__forms__widgets, &_python_str_plain_Select );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_SelectMultiple( &_module_django__forms__widgets, &_python_str_plain_SelectMultiple );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_SplitDateTimeWidget( &_module_django__forms__widgets, &_python_str_plain_SplitDateTimeWidget );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_SplitHiddenDateTimeWidget( &_module_django__forms__widgets, &_python_str_plain_SplitHiddenDateTimeWidget );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_SubWidget( &_module_django__forms__widgets, &_python_str_plain_SubWidget );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_TextInput( &_module_django__forms__widgets, &_python_str_plain_TextInput );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_Textarea( &_module_django__forms__widgets, &_python_str_plain_Textarea );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_TimeInput( &_module_django__forms__widgets, &_python_str_plain_TimeInput );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_Widget( &_module_django__forms__widgets, &_python_str_plain_Widget );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets___metaclass__( &_module_django__forms__widgets, &_python_str_plain___metaclass__ );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_boolean_check( &_module_django__forms__widgets, &_python_str_plain_boolean_check );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_chain( &_module_django__forms__widgets, &_python_str_plain_chain );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_conditional_escape( &_module_django__forms__widgets, &_python_str_plain_conditional_escape );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_copy( &_module_django__forms__widgets, &_python_str_plain_copy );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_datetime_safe( &_module_django__forms__widgets, &_python_str_plain_datetime_safe );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_flatatt( &_module_django__forms__widgets, &_python_str_plain_flatatt );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_force_text( &_module_django__forms__widgets, &_python_str_plain_force_text );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_format_html( &_module_django__forms__widgets, &_python_str_plain_format_html );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_formats( &_module_django__forms__widgets, &_python_str_plain_formats );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_mark_safe( &_module_django__forms__widgets, &_python_str_plain_mark_safe );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_media_property( &_module_django__forms__widgets, &_python_str_plain_media_property );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_python_2_unicode_compatible( &_module_django__forms__widgets, &_python_str_plain_python_2_unicode_compatible );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_settings( &_module_django__forms__widgets, &_python_str_plain_settings );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_six( &_module_django__forms__widgets, &_python_str_plain_six );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_to_current_timezone( &_module_django__forms__widgets, &_python_str_plain_to_current_timezone );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_ugettext_lazy( &_module_django__forms__widgets, &_python_str_plain_ugettext_lazy );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_urljoin( &_module_django__forms__widgets, &_python_str_plain_urljoin );
static PyObjectGlobalVariable_django__forms__widgets _mvar_django__forms__widgets_warnings( &_module_django__forms__widgets, &_python_str_plain_warnings );

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_Media_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_3_render_of_class_1_Media_of_module_django__forms__widgets( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_name, PyObjectLocalParameterVariableNoDel &python_closure_self );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_path, PyObjectLocalParameterVariableNoDel &python_closure_self );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_medium, PyObjectSharedLocalVariable &python_closure_path, PyObjectSharedLocalVariable &python_closure_self );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_listcontr_1_of_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_medium, PyObjectSharedLocalVariable &python_closure_path, PyObjectSharedLocalVariable &python_closure_self );


NUITKA_LOCAL_MODULE PyObject *impl_class_3_MediaDefiningClass_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_4_SubWidget_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_5_Widget_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_6_Input_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_7_TextInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_8_NumberInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_9_EmailInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_10_URLInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_11_PasswordInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_12_HiddenInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_13_MultipleHiddenInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_14_FileInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_15_ClearableFileInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_16_Textarea_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_17_DateInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_18_DateTimeInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_19_TimeInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_21_CheckboxInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_22_Select_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets( PyObject *_python_par___iterator );


NUITKA_LOCAL_MODULE PyObject *impl_class_23_NullBooleanSelect_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_24_SelectMultiple_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_25_ChoiceInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_26_RadioChoiceInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_27_RadioInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_28_CheckboxChoiceInput_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets( PyObject *_python_par___iterator );


NUITKA_LOCAL_MODULE PyObject *impl_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_30_RadioFieldRenderer_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_31_CheckboxFieldRenderer_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_32_RendererMixin_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_33_RadioSelect_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_34_CheckboxSelectMultiple_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_35_MultiWidget_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_w );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &python_closure_data, PyObjectLocalParameterVariableNoDel &python_closure_files, PyObjectLocalVariable &python_closure_i, PyObjectLocalParameterVariableNoDel &python_closure_name, PyObjectLocalVariable &python_closure_widget );


NUITKA_LOCAL_MODULE PyObject *impl_class_36_SplitDateTimeWidget_of_module_django__forms__widgets(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_10___add___of_class_1_Media_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_1_Media_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_22_Select_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_5_Widget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1__media_of_function_2_media_property_of_module_django__forms__widgets( PyObjectSharedLocalVariable &python_closure_cls );


// This structure is for attachment as self of function_1__media_of_function_2_media_property_of_module_django__forms__widgets.
// It is allocated at the time the function object is created.
struct _context_function_1__media_of_function_2_media_property_of_module_django__forms__widgets_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_cls;
};

static void _context_function_1__media_of_function_2_media_property_of_module_django__forms__widgets_destructor( void *context_voidptr )
{
    _context_function_1__media_of_function_2_media_property_of_module_django__forms__widgets_t *_python_context = (_context_function_1__media_of_function_2_media_property_of_module_django__forms__widgets_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_20_boolean_check_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2___str___of_class_1_Media_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2_media_property_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2_render_of_class_22_Select_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2_render_of_class_6_Input_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_3_render_of_class_1_Media_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_4_render_of_class_5_Widget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets(  );


static PyObject *MAKE_FUNCTION_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets(  );


// The module function definitions.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_Media_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___str__( _python_str_plain___str__ );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );
    PyObjectLocalVariable _python_var_render_js( _python_str_plain_render_js );
    PyObjectLocalVariable _python_var_render_css( _python_str_plain_render_css );
    PyObjectLocalVariable _python_var_absolute_path( _python_str_plain_absolute_path );
    PyObjectLocalVariable _python_var___getitem__( _python_str_plain___getitem__ );
    PyObjectLocalVariable _python_var_add_js( _python_str_plain_add_js );
    PyObjectLocalVariable _python_var_add_css( _python_str_plain_add_css );
    PyObjectLocalVariable _python_var___add__( _python_str_plain___add__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_1_Media_of_module_django__forms__widgets(  ) );
    _python_var___str__.assign1( MAKE_FUNCTION_function_2___str___of_class_1_Media_of_module_django__forms__widgets(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_3_render_of_class_1_Media_of_module_django__forms__widgets(  ) );
    _python_var_render_js.assign1( MAKE_FUNCTION_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets(  ) );
    _python_var_render_css.assign1( MAKE_FUNCTION_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets(  ) );
    _python_var_absolute_path.assign1( MAKE_FUNCTION_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets(  ) );
    _python_var___getitem__.assign1( MAKE_FUNCTION_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets(  ) );
    _python_var_add_js.assign1( MAKE_FUNCTION_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets(  ) );
    _python_var_add_css.assign1( MAKE_FUNCTION_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets(  ) );
    _python_var___add__.assign1( MAKE_FUNCTION_function_10___add___of_class_1_Media_of_module_django__forms__widgets(  ) );
    return _python_var___add__.updateLocalsDict( _python_var_add_css.updateLocalsDict( _python_var_add_js.updateLocalsDict( _python_var___getitem__.updateLocalsDict( _python_var_absolute_path.updateLocalsDict( _python_var_render_css.updateLocalsDict( _python_var_render_js.updateLocalsDict( _python_var_render.updateLocalsDict( _python_var___str__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_media, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_media( _python_str_plain_media, _python_par_media );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_media_attrs( _python_str_plain_media_attrs );
    PyObjectLocalVariable _python_var_name( _python_str_plain_name );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_1_Media_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_1_Media_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_1_Media_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_1_Media_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_1_Media_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_1_Media_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_4f21e2d740cc0cc2dca44f9a6aacd3f9, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_1_Media_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_1_Media_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 40 );
        if ( CHECK_IF_TRUE( _python_var_media.asObject() ) )
        {
            frame_guard.setLineNumber( 41 );
            _python_var_media_attrs.assign1( LOOKUP_ATTRIBUTE( _python_var_media.asObject(), _python_str_plain___dict__ ) );
        }
        else
        {
            frame_guard.setLineNumber( 43 );
            _python_var_media_attrs.assign0( _python_var_kwargs.asObject() );
        }
        frame_guard.setLineNumber( 45 );
        SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain__css );
        frame_guard.setLineNumber( 46 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain__js );
        {
            frame_guard.setLineNumber( 48 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _mvar_django__forms__widgets_MEDIA_TYPES.asObject0() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 48 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_name.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 49 );
                {
                    PyObjectTempKeeper1 call4;
                    PyObjectTempKeeper1 call7;
                    PyObjectTempKeeper0 getattr1;
                    DECREASE_REFCOUNT( ( call7.assign( ( getattr1.assign( _python_var_self.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( _python_unicode_plain_add_, _python_var_name.asObject() ) ).asObject(), NULL ) ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), PyObjectTemporary( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_media_attrs.asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_name.asObject(), Py_None ) ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_media.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_media_attrs.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_1_Media_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_1_Media_of_module_django__forms__widgets );
           frame_function_1___init___of_class_1_Media_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_media = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument media was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_media );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_media == NULL );

            _python_par_media = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_media );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_media != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'media'" );
             goto error_exit;
         }

        _python_par_media = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_media == NULL )
    {
        _python_par_media = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_media );
    }


    return impl_function_1___init___of_class_1_Media_of_module_django__forms__widgets( self, _python_par_self, _python_par_media, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_media );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_1_Media_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_1_Media_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___str___of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2___str___of_class_1_Media_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2___str___of_class_1_Media_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2___str___of_class_1_Media_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2___str___of_class_1_Media_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2___str___of_class_1_Media_of_module_django__forms__widgets );
        }

        frame_function_2___str___of_class_1_Media_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_d7e168606f3c45f96f655b53b75ff55c, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2___str___of_class_1_Media_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2___str___of_class_1_Media_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 56 );
        return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_render ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2___str___of_class_1_Media_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2___str___of_class_1_Media_of_module_django__forms__widgets );
           frame_function_2___str___of_class_1_Media_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2___str___of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__str__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__str__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__str__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2___str___of_class_1_Media_of_module_django__forms__widgets( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___str___of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2___str___of_class_1_Media_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___str___of_class_1_Media_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_render_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_name( _python_str_plain_name );

    // Actual function code.
    static PyFrameObject *frame_function_3_render_of_class_1_Media_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_3_render_of_class_1_Media_of_module_django__forms__widgets ) )
    {
        if ( frame_function_3_render_of_class_1_Media_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_render_of_class_1_Media_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_3_render_of_class_1_Media_of_module_django__forms__widgets );
        }

        frame_function_3_render_of_class_1_Media_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_7bf16d85e1724cbdee4949cd11e2a08e, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_3_render_of_class_1_Media_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_3_render_of_class_1_Media_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 59 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call5;
            PyObjectTempKeeper0 call_tmp1;
            return ( call5.assign( _mvar_django__forms__widgets_mark_safe.asObject0() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( _python_unicode_chr_10, _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( ( call_tmp1.assign( _mvar_django__forms__widgets_chain.asObject0() ), impl_function_7_complex_call_helper_star_list_of_module___internal__( call_tmp1.asObject(), impl_listcontr_1_of_function_3_render_of_class_1_Media_of_module_django__forms__widgets( MAKE_ITERATOR( _mvar_django__forms__widgets_MEDIA_TYPES.asObject0() ), _python_var_name, _python_var_self ) ) ) ).asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_name.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_3_render_of_class_1_Media_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_3_render_of_class_1_Media_of_module_django__forms__widgets );
           frame_function_3_render_of_class_1_Media_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_render_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_render_of_class_1_Media_of_module_django__forms__widgets( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_render_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_render_of_class_1_Media_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_render_of_class_1_Media_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_3_render_of_class_1_Media_of_module_django__forms__widgets( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_name,PyObjectLocalParameterVariableNoDel &python_closure_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 59 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 59 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_name.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 getattr1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( ( getattr1.assign( python_closure_self.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( _python_unicode_plain_render_, python_closure_name.asObject() ) ).asObject(), NULL ) ) ).asObject() ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_path( _python_str_plain_path );

    // Actual function code.
    static PyFrameObject *frame_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets ) )
    {
        if ( frame_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_render_js_of_class_1_Media_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets );
        }

        frame_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_b799d43c1f3a725df3de519eb76e41b5, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 62 );
        return impl_listcontr_1_of_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__js ) ).asObject() ), _python_var_path, _python_var_self );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_path.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets );
           frame_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render_js() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render_js() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render_js() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render_js() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render_js() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render_js() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render_js() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render_js() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "render_js() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render_js() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "render_js() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render_js() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render_js() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render_js() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "render_js() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render_js() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render_js() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_path,PyObjectLocalParameterVariableNoDel &python_closure_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 62 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 62 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_path.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper0 call3;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call3.assign( _mvar_django__forms__widgets_format_html.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_unicode_digest_4882dac831445974ac04fafb284da9cc, PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( python_closure_self.asObject(), _python_str_plain_absolute_path ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), python_closure_path.asObject() ) ) ).asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectSharedLocalVariable _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_media( _python_str_plain_media );
    PyObjectSharedLocalVariable _python_var_medium( _python_str_plain_medium );
    PyObjectSharedLocalVariable _python_var_path( _python_str_plain_path );

    // Actual function code.
    static PyFrameObject *frame_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets ) )
    {
        if ( frame_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_render_css_of_class_1_Media_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets );
        }

        frame_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_31f9fc35d6ba1fd0bb8a345cdb795e17, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 67 );
        _python_var_media.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_sorted ), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__css ) ).asObject(), _python_str_plain_keys ) ).asObject() ) ).asObject() ) );
        frame_guard.setLineNumber( 68 );
        {
            PyObjectTempKeeper0 call_tmp1;
            return ( call_tmp1.assign( _mvar_django__forms__widgets_chain.asObject0() ), impl_function_7_complex_call_helper_star_list_of_module___internal__( call_tmp1.asObject(), impl_listcontr_1_of_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets( MAKE_ITERATOR( _python_var_media.asObject() ), _python_var_medium, _python_var_path, _python_var_self ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_path.updateLocalsDict( _python_var_medium.updateLocalsDict( _python_var_media.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets );
           frame_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render_css() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render_css() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render_css() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render_css() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render_css() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render_css() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render_css() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render_css() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "render_css() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render_css() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "render_css() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render_css() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render_css() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render_css() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "render_css() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render_css() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render_css() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets( PyObject *_python_par___iterator,PyObjectSharedLocalVariable &python_closure_medium,PyObjectSharedLocalVariable &python_closure_path,PyObjectSharedLocalVariable &python_closure_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 69 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 69 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_medium.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper1 subscr1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( impl_listcontr_1_of_listcontr_1_of_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets( MAKE_ITERATOR( PyObjectTemporary( ( subscr1.assign( LOOKUP_ATTRIBUTE( python_closure_self.asObject(), _python_str_plain__css ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), python_closure_medium.asObject() ) ) ).asObject() ), python_closure_medium, python_closure_path, python_closure_self ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_listcontr_1_of_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets( PyObject *_python_par___iterator,PyObjectSharedLocalVariable &python_closure_medium,PyObjectSharedLocalVariable &python_closure_path,PyObjectSharedLocalVariable &python_closure_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 69 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 69 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_path.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper0 call3;
                    PyObjectTempKeeper1 call5;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call3.assign( _mvar_django__forms__widgets_format_html.asObject0() ), call5.assign( ( call1.assign( LOOKUP_ATTRIBUTE( python_closure_self.asObject(), _python_str_plain_absolute_path ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), python_closure_path.asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_unicode_digest_58c7f7f42825d3f3c2b6ac2711f8c2fa, call5.asObject0(), python_closure_medium.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_path, PyObject *_python_par_prefix )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_path( _python_str_plain_path, _python_par_path );
    PyObjectLocalParameterVariableNoDel _python_var_prefix( _python_str_plain_prefix, _python_par_prefix );

    // Actual function code.
    static PyFrameObject *frame_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets ) )
    {
        if ( frame_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets );
        }

        frame_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_b4dee3d90b6cbebf2b660e402c41d516, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 74 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_path.asObject(), _python_str_plain_startswith ) ).asObject(), _python_tuple_283646f70067a75eff7f7c55f8816c9e_tuple ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 75 );
            return _python_var_path.asObject1();
        }
        frame_guard.setLineNumber( 76 );
        if ( ( _python_var_prefix.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 77 );
            if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_settings.asObject0(), _python_str_plain_STATIC_URL ) ).asObject() == Py_None ) )
            {
                frame_guard.setLineNumber( 79 );
                _python_var_prefix.assign1( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_settings.asObject0(), _python_str_plain_MEDIA_URL ) );
            }
            else
            {
                frame_guard.setLineNumber( 81 );
                _python_var_prefix.assign1( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_settings.asObject0(), _python_str_plain_STATIC_URL ) );
            }
        }
        frame_guard.setLineNumber( 82 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            return ( call1.assign( _mvar_django__forms__widgets_urljoin.asObject0() ), call2.assign( _python_var_prefix.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_path.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_prefix.updateLocalsDict( _python_var_path.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets );
           frame_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_path = NULL;
    PyObject *_python_par_prefix = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "absolute_path() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "absolute_path() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_path == key )
            {
                if (unlikely( _python_par_path ))
                {
                    PyErr_Format( PyExc_TypeError, "absolute_path() got multiple values for keyword argument 'path'" );
                    goto error_exit;
                }

                _python_par_path = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_prefix == key )
            {
                if (unlikely( _python_par_prefix ))
                {
                    PyErr_Format( PyExc_TypeError, "absolute_path() got multiple values for keyword argument 'prefix'" );
                    goto error_exit;
                }

                _python_par_prefix = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "absolute_path() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_path, key ) )
            {
                if (unlikely( _python_par_path ))
                {
                    PyErr_Format( PyExc_TypeError, "absolute_path() got multiple values for keyword argument 'path'" );
                    goto error_exit;
                }

                _python_par_path = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_prefix, key ) )
            {
                if (unlikely( _python_par_prefix ))
                {
                    PyErr_Format( PyExc_TypeError, "absolute_path() got multiple values for keyword argument 'prefix'" );
                    goto error_exit;
                }

                _python_par_prefix = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "absolute_path() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "absolute_path() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "absolute_path() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "absolute_path() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "absolute_path() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "absolute_path() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "absolute_path() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "absolute_path() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "absolute_path() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "absolute_path() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "absolute_path() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "absolute_path() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "absolute_path() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "absolute_path() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_path != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "absolute_path() got multiple values for keyword argument 'path'" );
             goto error_exit;
         }

        _python_par_path = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_prefix != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "absolute_path() got multiple values for keyword argument 'prefix'" );
             goto error_exit;
         }

        _python_par_prefix = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_prefix == NULL )
    {
        _python_par_prefix = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_prefix );
    }


    return impl_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets( self, _python_par_self, _python_par_path, _python_par_prefix );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_path );
    Py_XDECREF( _python_par_prefix );

    return NULL;
}

static PyObject *dparse_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );

    // Actual function code.
    static PyFrameObject *frame_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets ) )
    {
        if ( frame_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7___getitem___of_class_1_Media_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets );
        }

        frame_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_a8b85ad367b0521387bb365721ffc211, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 86 );
        {
            PyObjectTempKeeper0 cmp8;
            if ( ( cmp8.assign( _python_var_name.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp8.asObject0(), _mvar_django__forms__widgets_MEDIA_TYPES.asObject0() ) ) )
        {
            frame_guard.setLineNumber( 87 );
            {
                PyObjectTempKeeper0 call_tmp6;
                PyObjectTempKeeper0 getattr1;
                PyObjectTempKeeper1 make_dict4;
                return ( call_tmp6.assign( _mvar_django__forms__widgets_Media.asObject0() ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp6.asObject(), ( make_dict4.assign( ( getattr1.assign( _python_var_self.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( _python_unicode_plain__, _python_var_name.asObject() ) ).asObject(), NULL ) ) ), MAKE_DICT1( make_dict4.asObject0(), PyObjectTemporary( TO_STR( _python_var_name.asObject() ) ).asObject() ) ) ) );
            }
        }
        }
        frame_guard.setLineNumber( 88 );
        {
                PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_KeyError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_aac2f1c367995babe4f4dcb15243b6cd, _python_var_name.asObject() ) ).asObject() ) ).asObject() ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets );
           frame_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__getitem__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__getitem__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets( self, _python_par_self, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalVariable _python_var_path( _python_str_plain_path );

    // Actual function code.
    static PyFrameObject *frame_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets ) )
    {
        if ( frame_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_add_js_of_class_1_Media_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets );
        }

        frame_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_6646adf550a39fa4b8d7ab86c7c70222, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 91 );
        if ( CHECK_IF_TRUE( _python_var_data.asObject() ) )
        {
            {
                frame_guard.setLineNumber( 92 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_data.asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 92 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_var_path.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 93 );
                    {
                        PyObjectTempKeeper0 cmp3;
                        if ( ( cmp3.assign( _python_var_path.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__js ) ).asObject() ) ) )
                    {
                        frame_guard.setLineNumber( 94 );
                        {
                            PyObjectTempKeeper1 call1;
                            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__js ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_path.asObject() ) ) );
                        }
                    }
                    }

                   CONSIDER_THREADING();
                }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_path.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets );
           frame_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_js() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_js() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "add_js() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_js() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "add_js() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_js() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_js() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_js() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_js() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_js() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_js() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_js() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_js() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_js() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_js() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_js() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "add_js() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_js() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_js() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_js() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets( self, _python_par_self, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalVariable _python_var_medium( _python_str_plain_medium );
    PyObjectLocalVariable _python_var_paths( _python_str_plain_paths );
    PyObjectLocalVariable _python_var_path( _python_str_plain_path );

    // Actual function code.
    static PyFrameObject *frame_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets ) )
    {
        if ( frame_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9_add_css_of_class_1_Media_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets );
        }

        frame_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_d3f4246ebb777af89515bc68d8708138, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 97 );
        if ( CHECK_IF_TRUE( _python_var_data.asObject() ) )
        {
            {
                frame_guard.setLineNumber( 98 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_data.asObject(), _python_str_plain_items ) ).asObject() ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 98 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        {
                            frame_guard.setLineNumber( 98 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_var_medium.assign0( _python_tmp_element_1.asObject() );
                            _python_var_paths.assign0( _python_tmp_element_2.asObject() );
                        }
                    }
                    {
                        frame_guard.setLineNumber( 99 );
                        PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_paths.asObject() ) );
                        while( true )
                        {
                            {
                                frame_guard.setLineNumber( 99 );
                                PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                if ( _tmp_unpack_2 == NULL )
                                {
                                    break;
                                }
                                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                                _python_var_path.assign0( _python_tmp_iter_value.asObject() );
                            }
                            frame_guard.setLineNumber( 100 );
                            {
                                PyObjectTempKeeper1 call6;
                                PyObjectTempKeeper0 cmp10;
                                PyObjectTempKeeper1 subscr8;
                                if ( ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( call6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__css ) ).asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_medium.asObject() ) ) ).asObject() ) )) || ( cmp10.assign( _python_var_path.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp10.asObject0(), PyObjectTemporary( ( subscr8.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__css ) ), LOOKUP_SUBSCRIPT( subscr8.asObject0(), _python_var_medium.asObject() ) ) ).asObject() ) ) ) )
                            {
                                frame_guard.setLineNumber( 101 );
                                {
                                    PyObjectTempKeeper1 call1;
                                    PyObjectTempKeeper1 call4;
                                    DECREASE_REFCOUNT( ( call4.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__css ) ).asObject(), _python_str_plain_setdefault ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_medium.asObject(), PyObjectTemporary( PyList_New( 0 ) ).asObject() ) ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_path.asObject() ) ) );
                                }
                            }
                            }

                           CONSIDER_THREADING();
                        }
                    }

                   CONSIDER_THREADING();
                }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_path.updateLocalsDict( _python_var_paths.updateLocalsDict( _python_var_medium.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets );
           frame_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_css() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_css() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "add_css() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add_css() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "add_css() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_css() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_css() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_css() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_css() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_css() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_css() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_css() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "add_css() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_css() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_css() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_css() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "add_css() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_css() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_css() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_css() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets( self, _python_par_self, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_10___add___of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_other )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_other( _python_str_plain_other, _python_par_other );
    PyObjectLocalVariable _python_var_combined( _python_str_plain_combined );
    PyObjectLocalVariable _python_var_name( _python_str_plain_name );

    // Actual function code.
    static PyFrameObject *frame_function_10___add___of_class_1_Media_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_10___add___of_class_1_Media_of_module_django__forms__widgets ) )
    {
        if ( frame_function_10___add___of_class_1_Media_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_10___add___of_class_1_Media_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_10___add___of_class_1_Media_of_module_django__forms__widgets );
        }

        frame_function_10___add___of_class_1_Media_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_d89f0a85a29cce621218d122b5325df8, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_10___add___of_class_1_Media_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_10___add___of_class_1_Media_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 104 );
        _python_var_combined.assign1( CALL_FUNCTION_NO_ARGS( _mvar_django__forms__widgets_Media.asObject0() ) );
        {
            frame_guard.setLineNumber( 105 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _mvar_django__forms__widgets_MEDIA_TYPES.asObject0() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 105 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_name.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 106 );
                {
                    PyObjectTempKeeper1 call7;
                    PyObjectTempKeeper0 getattr1;
                    PyObjectTempKeeper0 getattr4;
                    DECREASE_REFCOUNT( ( call7.assign( ( getattr1.assign( _python_var_combined.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( _python_unicode_plain_add_, _python_var_name.asObject() ) ).asObject(), NULL ) ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), PyObjectTemporary( ( getattr4.assign( _python_var_self.asObject() ), BUILTIN_GETATTR( getattr4.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( _python_unicode_plain__, _python_var_name.asObject() ) ).asObject(), Py_None ) ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 107 );
                {
                    PyObjectTempKeeper1 call15;
                    PyObjectTempKeeper0 getattr12;
                    PyObjectTempKeeper0 getattr9;
                    DECREASE_REFCOUNT( ( call15.assign( ( getattr9.assign( _python_var_combined.asObject() ), BUILTIN_GETATTR( getattr9.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( _python_unicode_plain_add_, _python_var_name.asObject() ) ).asObject(), NULL ) ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), PyObjectTemporary( ( getattr12.assign( _python_var_other.asObject() ), BUILTIN_GETATTR( getattr12.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( _python_unicode_plain__, _python_var_name.asObject() ) ).asObject(), Py_None ) ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 108 );
        return _python_var_combined.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_other.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_combined.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_10___add___of_class_1_Media_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_10___add___of_class_1_Media_of_module_django__forms__widgets );
           frame_function_10___add___of_class_1_Media_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_10___add___of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_other = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__add__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__add__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_other == key )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "__add__() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__add__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_other, key ) )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "__add__() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__add__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__add__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__add__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__add__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__add__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__add__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__add__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__add__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__add__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__add__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__add__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__add__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__add__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__add__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_other != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__add__() got multiple values for keyword argument 'other'" );
             goto error_exit;
         }

        _python_par_other = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_10___add___of_class_1_Media_of_module_django__forms__widgets( self, _python_par_self, _python_par_other );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_other );

    return NULL;
}

static PyObject *dparse_function_10___add___of_class_1_Media_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_10___add___of_class_1_Media_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10___add___of_class_1_Media_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_media_property_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_cls )
{
    // No context is used.

    // Local variable declarations.
    PyObjectSharedLocalVariable _python_var_cls( _python_str_plain_cls, _python_par_cls );
    PyObjectLocalVariable _python_var__media( _python_str_plain__media );

    // Actual function code.
    _python_var__media.assign1( MAKE_FUNCTION_function_1__media_of_function_2_media_property_of_module_django__forms__widgets( _python_var_cls ) );
    static PyFrameObject *frame_function_2_media_property_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2_media_property_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2_media_property_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_media_property_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2_media_property_of_module_django__forms__widgets );
        }

        frame_function_2_media_property_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_a38a8a2f9e63e9a5229f20a9633f6440, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2_media_property_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2_media_property_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 135 );
        return CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), _python_var__media.asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_cls.updateLocalsDict( _python_var__media.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2_media_property_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2_media_property_of_module_django__forms__widgets );
           frame_function_2_media_property_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_2_media_property_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_cls = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "media_property() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "media_property() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "media_property() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "media_property() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "media_property() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "media_property() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "media_property() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "media_property() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "media_property() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "media_property() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "media_property() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "media_property() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "media_property() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "media_property() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "media_property() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "media_property() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "media_property() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_media_property_of_module_django__forms__widgets( self, _python_par_cls );

error_exit:;

    Py_XDECREF( _python_par_cls );

    return NULL;
}

static PyObject *dparse_function_2_media_property_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_media_property_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_media_property_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1__media_of_function_2_media_property_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // The context of the function.
    struct _context_function_1__media_of_function_2_media_property_of_module_django__forms__widgets_t *_python_context = (struct _context_function_1__media_of_function_2_media_property_of_module_django__forms__widgets_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_sup_cls( _python_str_plain_sup_cls );
    PyObjectLocalVariable _python_var_base( _python_str_plain_base );
    PyObjectLocalVariable _python_var_definition( _python_str_plain_definition );
    PyObjectLocalVariable _python_var_extend( _python_str_plain_extend );
    PyObjectLocalVariable _python_var_m( _python_str_plain_m );
    PyObjectLocalVariable _python_var_medium( _python_str_plain_medium );

    // Actual function code.
    static PyFrameObject *frame_function_1__media_of_function_2_media_property_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1__media_of_function_2_media_property_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1__media_of_function_2_media_property_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1__media_of_function_2_media_property_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1__media_of_function_2_media_property_of_module_django__forms__widgets );
        }

        frame_function_1__media_of_function_2_media_property_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_a338160b51bee85e5d3d9875f1caba91, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1__media_of_function_2_media_property_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1__media_of_function_2_media_property_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 113 );
        {
            PyObjectTempKeeper0 super1;
            _python_var_sup_cls.assign1( ( super1.assign( _python_context->python_closure_cls.asObject() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) );
        }
        frame_guard.setLineNumber( 114 );
        try
        {
            frame_guard.setLineNumber( 115 );
            _python_var_base.assign1( LOOKUP_ATTRIBUTE( _python_var_sup_cls.asObject(), _python_str_plain_media ) );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_AttributeError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 117 );
                _python_var_base.assign1( CALL_FUNCTION_NO_ARGS( _mvar_django__forms__widgets_Media.asObject0() ) );
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 120 );
        _python_var_definition.assign1( BUILTIN_GETATTR( _python_context->python_closure_cls.asObject(), _python_unicode_plain_Media, Py_None ) );
        frame_guard.setLineNumber( 121 );
        if ( CHECK_IF_TRUE( _python_var_definition.asObject() ) )
        {
            frame_guard.setLineNumber( 122 );
            _python_var_extend.assign1( BUILTIN_GETATTR( _python_var_definition.asObject(), _python_unicode_plain_extend, Py_True ) );
            frame_guard.setLineNumber( 123 );
            if ( CHECK_IF_TRUE( _python_var_extend.asObject() ) )
            {
                frame_guard.setLineNumber( 124 );
                if ( RICH_COMPARE_BOOL_EQ( _python_var_extend.asObject(), Py_True ) )
                {
                    frame_guard.setLineNumber( 125 );
                    _python_var_m.assign0( _python_var_base.asObject() );
                }
                else
                {
                    frame_guard.setLineNumber( 127 );
                    _python_var_m.assign1( CALL_FUNCTION_NO_ARGS( _mvar_django__forms__widgets_Media.asObject0() ) );
                    {
                        frame_guard.setLineNumber( 128 );
                        PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_extend.asObject() ) );
                        while( true )
                        {
                            {
                                frame_guard.setLineNumber( 128 );
                                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                if ( _tmp_unpack_1 == NULL )
                                {
                                    break;
                                }
                                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                                _python_var_medium.assign0( _python_tmp_iter_value.asObject() );
                            }
                            frame_guard.setLineNumber( 129 );
                            {
                                PyObjectTempKeeper0 op5;
                                PyObjectTempKeeper0 subscr3;
                                _python_var_m.assign1( ( op5.assign( _python_var_m.asObject() ), BINARY_OPERATION_ADD( op5.asObject0(), PyObjectTemporary( ( subscr3.assign( _python_var_base.asObject() ), LOOKUP_SUBSCRIPT( subscr3.asObject0(), _python_var_medium.asObject() ) ) ).asObject() ) ) );
                            }

                           CONSIDER_THREADING();
                        }
                    }
                }
                frame_guard.setLineNumber( 130 );
                {
                    PyObjectTempKeeper0 call7;
                    PyObjectTempKeeper0 op9;
                    return ( op9.assign( _python_var_m.asObject() ), BINARY_OPERATION_ADD( op9.asObject0(), PyObjectTemporary( ( call7.assign( _mvar_django__forms__widgets_Media.asObject0() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_definition.asObject() ) ) ).asObject() ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 132 );
                {
                    PyObjectTempKeeper0 call11;
                    return ( call11.assign( _mvar_django__forms__widgets_Media.asObject0() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _python_var_definition.asObject() ) );
                }
            }
        }
        else
        {
            frame_guard.setLineNumber( 134 );
            return _python_var_base.asObject1();
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_context->python_closure_cls.updateLocalsDict( _python_var_medium.updateLocalsDict( _python_var_m.updateLocalsDict( _python_var_extend.updateLocalsDict( _python_var_definition.updateLocalsDict( _python_var_base.updateLocalsDict( _python_var_sup_cls.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1__media_of_function_2_media_property_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1__media_of_function_2_media_property_of_module_django__forms__widgets );
           frame_function_1__media_of_function_2_media_property_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1__media_of_function_2_media_property_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_media() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_media() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_media() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_media() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_media() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_media() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_media() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_media() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_media() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_media() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_media() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_media() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_media() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_media() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_media() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_media() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_media() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1__media_of_function_2_media_property_of_module_django__forms__widgets( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_1__media_of_function_2_media_property_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1__media_of_function_2_media_property_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1__media_of_function_2_media_property_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_3_MediaDefiningClass_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var___new__( _python_str_plain___new__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___doc__.assign0( _python_unicode_digest_c1922e36ade56a4818c7f78a772d52db );
    static PyFrameObject *frame_class_3_MediaDefiningClass_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_class_3_MediaDefiningClass_of_module_django__forms__widgets ) )
    {
        if ( frame_class_3_MediaDefiningClass_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_3_MediaDefiningClass_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_class_3_MediaDefiningClass_of_module_django__forms__widgets );
        }

        frame_class_3_MediaDefiningClass_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_48faa0708c4bedec4affa661619f3d3b, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_class_3_MediaDefiningClass_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_class_3_MediaDefiningClass_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 139 );
        _python_var___new__.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_staticmethod ), PyObjectTemporary( MAKE_FUNCTION_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets(  ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var___new__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_class_3_MediaDefiningClass_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_class_3_MediaDefiningClass_of_module_django__forms__widgets );
           frame_class_3_MediaDefiningClass_of_module_django__forms__widgets = NULL;
        }

        throw;
    }
    return _python_var___new__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_cls, PyObject *_python_par_name, PyObject *_python_par_bases, PyObject *_python_par_attrs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_bases( _python_str_plain_bases, _python_par_bases );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalVariable _python_var_new_class( _python_str_plain_new_class );

    // Actual function code.
    static PyFrameObject *frame_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets );
        }

        frame_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_782ae9cb9b01494fdd01b79ff18876c1, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 140 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 call5;
            PyObjectTempKeeper0 call6;
            PyObjectTempKeeper0 super1;
            _python_var_new_class.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_MediaDefiningClass.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_cls.asObject() ) ) ).asObject(), _python_str_plain___new__ ) ), call4.assign( _python_var_cls.asObject() ), call5.assign( _python_var_name.asObject() ), call6.assign( _python_var_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), call5.asObject0(), call6.asObject0(), _python_var_attrs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 142 );
        if ( SEQUENCE_CONTAINS_NOT_BOOL( _python_unicode_plain_media, _python_var_attrs.asObject() ) )
        {
            frame_guard.setLineNumber( 143 );
            {
                PyObjectTempKeeper0 call8;
                {
                    PyObjectTemporary tmp_identifier( ( call8.assign( _mvar_django__forms__widgets_media_property.asObject0() ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_new_class.asObject() ) ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_new_class.asObject(), _python_str_plain_media );
            }
            }
        }
        frame_guard.setLineNumber( 144 );
        return _python_var_new_class.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attrs.updateLocalsDict( _python_var_bases.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_cls.updateLocalsDict( _python_var_new_class.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets );
           frame_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_cls = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_bases = NULL;
    PyObject *_python_par_attrs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__new__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_bases == key )
            {
                if (unlikely( _python_par_bases ))
                {
                    PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'bases'" );
                    goto error_exit;
                }

                _python_par_bases = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_bases, key ) )
            {
                if (unlikely( _python_par_bases ))
                {
                    PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'bases'" );
                    goto error_exit;
                }

                _python_par_bases = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__new__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__new__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__new__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__new__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__new__() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "__new__() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__new__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "__new__() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__new__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__new__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__new__() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "__new__() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__new__() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_bases != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'bases'" );
             goto error_exit;
         }

        _python_par_bases = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__new__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets( self, _python_par_cls, _python_par_name, _python_par_bases, _python_par_attrs );

error_exit:;

    Py_XDECREF( _python_par_cls );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_bases );
    Py_XDECREF( _python_par_attrs );

    return NULL;
}

static PyObject *dparse_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_4_SubWidget_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___str__( _python_str_plain___str__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___doc__.assign0( _python_unicode_digest_7afe7c6830cf24a0f91f1217f0a2549e );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets(  ) );
    _python_var___str__.assign1( MAKE_FUNCTION_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets(  ) );
    return _python_var___str__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_parent_widget, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs, PyObject *_python_par_choices )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_parent_widget( _python_str_plain_parent_widget, _python_par_parent_widget );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_choices( _python_str_plain_choices, _python_par_choices );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_d2f679295df5e1897090f264f7f5ad53, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 153 );
        {
                PyObject *tmp_identifier = _python_var_parent_widget.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_parent_widget );
        }
        {
            frame_guard.setLineNumber( 154 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( _python_var_name.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_value.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_name );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_value );
            }
        }
        {
            frame_guard.setLineNumber( 155 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple3;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple3.assign( _python_var_attrs.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), _python_var_choices.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_attrs );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_choices );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_choices.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_parent_widget.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets );
           frame_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_parent_widget = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_choices = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_parent_widget == key )
            {
                if (unlikely( _python_par_parent_widget ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'parent_widget'" );
                    goto error_exit;
                }

                _python_par_parent_widget = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_choices == key )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_parent_widget, key ) )
            {
                if (unlikely( _python_par_parent_widget ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'parent_widget'" );
                    goto error_exit;
                }

                _python_par_parent_widget = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_choices, key ) )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 6 ))
    {
        if ( 6 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 6, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 6 == 6 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
#else
            if ( 6 == 6 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 6, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 6 ))
    {
        if ( 6 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 6, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 6 == 6 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 6, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 6, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 6 ? args_given : 6;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_parent_widget != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'parent_widget'" );
             goto error_exit;
         }

        _python_par_parent_widget = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choices'" );
             goto error_exit;
         }

        _python_par_choices = INCREASE_REFCOUNT( args[ 5 ] );
    }


    return impl_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets( self, _python_par_self, _python_par_parent_widget, _python_par_name, _python_par_value, _python_par_attrs, _python_par_choices );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_parent_widget );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_choices );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6)
    {
        return impl_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_args( _python_str_plain_args );

    // Actual function code.
    static PyFrameObject *frame_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets );
        }

        frame_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_3efd778ebda6438a5ffb8d8117e7cb04, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 158 );
        {
            PyObjectTempKeeper1 make_list1;
            PyObjectTempKeeper1 make_list2;
            _python_var_args.assign1( ( make_list1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ), make_list2.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_value ) ), MAKE_LIST3( make_list1.asObject(), make_list2.asObject(), LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attrs ) ) ) );
        }
        frame_guard.setLineNumber( 159 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 160 );
            {
                PyObjectTempKeeper1 call4;
                DECREASE_REFCOUNT( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_args.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 161 );
        {
            PyObjectTempKeeper1 call_tmp6;
            return ( call_tmp6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_parent_widget ) ).asObject(), _python_str_plain_render ) ), impl_function_7_complex_call_helper_star_list_of_module___internal__( call_tmp6.asObject(), _python_var_args.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_args.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets );
           frame_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__str__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__str__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__str__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_5_Widget_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_is_hidden( _python_str_plain_is_hidden );
    PyObjectLocalVariable _python_var_needs_multipart_form( _python_str_plain_needs_multipart_form );
    PyObjectLocalVariable _python_var_is_localized( _python_str_plain_is_localized );
    PyObjectLocalVariable _python_var_is_required( _python_str_plain_is_required );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___deepcopy__( _python_str_plain___deepcopy__ );
    PyObjectLocalVariable _python_var_subwidgets( _python_str_plain_subwidgets );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );
    PyObjectLocalVariable _python_var_build_attrs( _python_str_plain_build_attrs );
    PyObjectLocalVariable _python_var_value_from_datadict( _python_str_plain_value_from_datadict );
    PyObjectLocalVariable _python_var_id_for_label( _python_str_plain_id_for_label );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var_is_hidden.assign0( Py_False );
    _python_var_needs_multipart_form.assign0( Py_False );
    _python_var_is_localized.assign0( Py_False );
    _python_var_is_required.assign0( Py_False );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_5_Widget_of_module_django__forms__widgets(  ) );
    _python_var___deepcopy__.assign1( MAKE_FUNCTION_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets(  ) );
    _python_var_subwidgets.assign1( MAKE_FUNCTION_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_4_render_of_class_5_Widget_of_module_django__forms__widgets(  ) );
    _python_var_build_attrs.assign1( MAKE_FUNCTION_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets(  ) );
    _python_var_value_from_datadict.assign1( MAKE_FUNCTION_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets(  ) );
    _python_var_id_for_label.assign1( MAKE_FUNCTION_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets(  ) );
    return _python_var_id_for_label.updateLocalsDict( _python_var_value_from_datadict.updateLocalsDict( _python_var_build_attrs.updateLocalsDict( _python_var_render.updateLocalsDict( _python_var_subwidgets.updateLocalsDict( _python_var___deepcopy__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_is_required.updateLocalsDict( _python_var_is_localized.updateLocalsDict( _python_var_needs_multipart_form.updateLocalsDict( _python_var_is_hidden.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_attrs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_5_Widget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_5_Widget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_5_Widget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_5_Widget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_5_Widget_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_5_Widget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_cc3d192a33e8ac5411621af7293b8679, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_5_Widget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_5_Widget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 170 );
        if ( ( _python_var_attrs.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 171 );
            {
                    PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_attrs.asObject(), _python_str_plain_copy ) ).asObject() ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_attrs );
            }
        }
        else
        {
            frame_guard.setLineNumber( 173 );
            SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain_attrs );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attrs.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_5_Widget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_5_Widget_of_module_django__forms__widgets );
           frame_function_1___init___of_class_5_Widget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_attrs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }


    return impl_function_1___init___of_class_5_Widget_of_module_django__forms__widgets( self, _python_par_self, _python_par_attrs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_attrs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_5_Widget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_5_Widget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_memo )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_memo( _python_str_plain_memo, _python_par_memo );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets );
        }

        frame_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_269ebbf83032a10076f57c63d233bee9, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 176 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_obj.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_copy.asObject0(), _python_str_plain_copy ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_self.asObject() ) ) );
        }
        frame_guard.setLineNumber( 177 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attrs ) ).asObject(), _python_str_plain_copy ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_attrs );
        }
        frame_guard.setLineNumber( 178 );
        {
                PyObject *tmp_identifier = _python_var_obj.asObject();
                PyObject *tmp_subscribed = _python_var_memo.asObject();
                SET_SUBSCRIPT( tmp_identifier, tmp_subscribed, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_id ), _python_var_self.asObject() ) ).asObject() );
        }
        frame_guard.setLineNumber( 179 );
        return _python_var_obj.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_memo.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_obj.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets );
           frame_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_memo = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_memo == key )
            {
                if (unlikely( _python_par_memo ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
                    goto error_exit;
                }

                _python_par_memo = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_memo, key ) )
            {
                if (unlikely( _python_par_memo ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
                    goto error_exit;
                }

                _python_par_memo = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__deepcopy__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_memo != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
             goto error_exit;
         }

        _python_par_memo = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets( self, _python_par_self, _python_par_memo );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_memo );

    return NULL;
}

static PyObject *dparse_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel python_var_self;
    PyObjectLocalParameterVariableNoDel python_var_name;
    PyObjectLocalParameterVariableNoDel python_var_value;
    PyObjectLocalParameterVariableNoDel python_var_attrs;
    PyObjectLocalParameterVariableNoDel python_var_choices;
};

static void _context_generator_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets_destructor( void *context_voidptr )
{
    _context_generator_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets_t *_python_context = (struct _context_generator_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets_t *)context_voidptr;

    delete _python_context;
}

static void function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets_t *_python_context = (_context_generator_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets_t *)generator->m_context;


        // Local variable inits


        // Actual function code.
        static PyFrameObject *frame_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets ) )
        {
            if ( frame_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets )
            {
#if _DEBUG_REFRAME
                puts( "reframe for function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets" );
#endif
                Py_DECREF( frame_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets );
            }

            frame_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_60cc32444faf1d24f812f79bf64f9e74, _module_django__forms__widgets );
        }

        Py_INCREF( frame_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets );
        generator->m_frame = frame_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            frame_guard.setLineNumber( 188 );
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 call2;
                PyObjectTempKeeper0 call3;
                PyObjectTempKeeper0 call4;
                PyObjectTempKeeper0 call5;
                YIELD_VALUE( generator, ( call1.assign( _mvar_django__forms__widgets_SubWidget.asObject0() ), call2.assign( _python_context->python_var_self.asObject() ), call3.assign( _python_context->python_var_name.asObject() ), call4.assign( _python_context->python_var_value.asObject() ), call5.assign( _python_context->python_var_attrs.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), call4.asObject0(), call5.asObject0(), _python_context->python_var_choices.asObject() ) ) );
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs, PyObject *_python_par_choices )
{
    // Create context if any
    struct _context_generator_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets_t *_python_context = new _context_generator_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets_context,
            _python_str_plain_subwidgets,
            _codeobj_60cc32444faf1d24f812f79bf64f9e74,
            _python_context,
            _context_generator_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function subwidgets" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var_self.setVariableNameAndValue( _python_str_plain_self, _python_par_self );
        _python_context->python_var_name.setVariableNameAndValue( _python_str_plain_name, _python_par_name );
        _python_context->python_var_value.setVariableNameAndValue( _python_str_plain_value, _python_par_value );
        _python_context->python_var_attrs.setVariableNameAndValue( _python_str_plain_attrs, _python_par_attrs );
        _python_context->python_var_choices.setVariableNameAndValue( _python_str_plain_choices, _python_par_choices );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}
static PyObject *fparse_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_choices = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "subwidgets() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_choices == key )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_choices, key ) )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "subwidgets() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "subwidgets() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "subwidgets() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "subwidgets() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "subwidgets() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "subwidgets() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "subwidgets() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "subwidgets() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "subwidgets() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "subwidgets() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "subwidgets() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'choices'" );
             goto error_exit;
         }

        _python_par_choices = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_choices == NULL )
    {
        _python_par_choices = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_choices );
    }


    return impl_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs, _python_par_choices );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_choices );

    return NULL;
}

static PyObject *dparse_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_render_of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );

    // Actual function code.
    static PyFrameObject *frame_function_4_render_of_class_5_Widget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_4_render_of_class_5_Widget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_4_render_of_class_5_Widget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_render_of_class_5_Widget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_4_render_of_class_5_Widget_of_module_django__forms__widgets );
        }

        frame_function_4_render_of_class_5_Widget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_56799b4904ad0b1feeaa46b9019b52af, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_4_render_of_class_5_Widget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_4_render_of_class_5_Widget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 197 );
        RAISE_EXCEPTION_WITH_TYPE( PyExc_NotImplementedError, PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_render_of_class_5_Widget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_4_render_of_class_5_Widget_of_module_django__forms__widgets );
           frame_function_4_render_of_class_5_Widget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_render_of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }


    return impl_function_4_render_of_class_5_Widget_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );

    return NULL;
}

static PyObject *dparse_function_4_render_of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_4_render_of_class_5_Widget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_render_of_class_5_Widget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_extra_attrs, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_extra_attrs( _python_str_plain_extra_attrs, _python_par_extra_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_attrs( _python_str_plain_attrs );

    // Actual function code.
    static PyFrameObject *frame_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets );
        }

        frame_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_160561090f0d95825e944ba6e5d725c4, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 201 );
        {
            PyObjectTempKeeper1 call_tmp2;
            _python_var_attrs.assign1( ( call_tmp2.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attrs ) ).asObject() ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( INCREASE_REFCOUNT( LOOKUP_BUILTIN( _python_str_plain_dict ) ), call_tmp2.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 202 );
        if ( CHECK_IF_TRUE( _python_var_extra_attrs.asObject() ) )
        {
            frame_guard.setLineNumber( 203 );
            {
                PyObjectTempKeeper1 call4;
                DECREASE_REFCOUNT( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_attrs.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_extra_attrs.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 204 );
        return _python_var_attrs.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_extra_attrs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_attrs.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets );
           frame_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_extra_attrs = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "build_attrs() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "build_attrs() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "build_attrs() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument extra_attrs was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_extra_attrs );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_extra_attrs == NULL );

            _python_par_extra_attrs = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_extra_attrs );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "build_attrs() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "build_attrs() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "build_attrs() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "build_attrs() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "build_attrs() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "build_attrs() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "build_attrs() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "build_attrs() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "build_attrs() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "build_attrs() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "build_attrs() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "build_attrs() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "build_attrs() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_extra_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "build_attrs() got multiple values for keyword argument 'extra_attrs'" );
             goto error_exit;
         }

        _python_par_extra_attrs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_extra_attrs == NULL )
    {
        _python_par_extra_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_extra_attrs );
    }


    return impl_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets( self, _python_par_self, _python_par_extra_attrs, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_extra_attrs );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data, PyObject *_python_par_files, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalParameterVariableNoDel _python_var_files( _python_str_plain_files, _python_par_files );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );

    // Actual function code.
    static PyFrameObject *frame_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets );
        }

        frame_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_dcdbfb9244addf464ed441b61e8b16d9, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 211 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_data.asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_name.asObject(), Py_None ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_files.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets );
           frame_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    PyObject *_python_par_files = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_files == key )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_files, key ) )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_from_datadict() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_files != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
             goto error_exit;
         }

        _python_par_files = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets( self, _python_par_self, _python_par_data, _python_par_files, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );
    Py_XDECREF( _python_par_files );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_id_ )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_id_( _python_str_plain_id_, _python_par_id_ );

    // Actual function code.
    static PyFrameObject *frame_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets );
        }

        frame_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_3a0cdc09ead37713c2689385952cb5e5, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 223 );
        return _python_var_id_.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_id_.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets );
           frame_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_id_ = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_id_ == key )
            {
                if (unlikely( _python_par_id_ ))
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'id_'" );
                    goto error_exit;
                }

                _python_par_id_ = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_id_, key ) )
            {
                if (unlikely( _python_par_id_ ))
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'id_'" );
                    goto error_exit;
                }

                _python_par_id_ = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "id_for_label() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "id_for_label() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_id_ != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'id_'" );
             goto error_exit;
         }

        _python_par_id_ = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets( self, _python_par_self, _python_par_id_ );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_id_ );

    return NULL;
}

static PyObject *dparse_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_6_Input_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var_input_type( _python_str_plain_input_type );
    PyObjectLocalVariable _python_var__format_value( _python_str_plain__format_value );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___doc__.assign0( _python_unicode_digest_6f2ccf0b27f17842e46075b09e4d84ef );
    _python_var_input_type.assign0( Py_None );
    _python_var__format_value.assign1( MAKE_FUNCTION_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_2_render_of_class_6_Input_of_module_django__forms__widgets(  ) );
    return _python_var_render.updateLocalsDict( _python_var__format_value.updateLocalsDict( _python_var_input_type.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );
}


static PyObject *impl_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1__format_value_of_class_6_Input_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets );
        }

        frame_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_4a5d9c260c0682be5a7484a72128177b, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 233 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_is_localized ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 234 );
            {
                PyObjectTempKeeper1 call1;
                return ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_formats.asObject0(), _python_str_plain_localize_input ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) );
            }
        }
        frame_guard.setLineNumber( 235 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets );
           frame_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_format_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_format_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_format_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_format_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_format_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_format_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_format_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_render_of_class_6_Input_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalVariable _python_var_final_attrs( _python_str_plain_final_attrs );

    // Actual function code.
    static PyFrameObject *frame_function_2_render_of_class_6_Input_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2_render_of_class_6_Input_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2_render_of_class_6_Input_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_render_of_class_6_Input_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2_render_of_class_6_Input_of_module_django__forms__widgets );
        }

        frame_function_2_render_of_class_6_Input_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_d0450708044471a58940f021e81e0dcf, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2_render_of_class_6_Input_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2_render_of_class_6_Input_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 238 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            _python_var_value.assign0( _python_unicode_empty );
        }
        frame_guard.setLineNumber( 240 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper1 call6;
            PyObjectTempKeeper1 make_dict1;
            _python_var_final_attrs.assign1( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_build_attrs ) ), call6.assign( MAKE_TUPLE1( _python_var_attrs.asObject() ) ), CALL_FUNCTION( call5.asObject0(), call6.asObject0(), PyObjectTemporary( ( make_dict1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_input_type ) ), MAKE_DICT2( make_dict1.asObject0(), _python_str_plain_type, _python_var_name.asObject(), _python_str_plain_name ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 241 );
        if ( RICH_COMPARE_BOOL_NE( _python_var_value.asObject(), _python_unicode_empty ) )
        {
            frame_guard.setLineNumber( 243 );
            {
                PyObjectTempKeeper0 call10;
                PyObjectTempKeeper1 call8;
                {
                    PyObjectTemporary tmp_identifier( ( call10.assign( _mvar_django__forms__widgets_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), PyObjectTemporary( ( call8.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__format_value ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_value.asObject() ) ) ).asObject() ) ) );
                    SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_final_attrs.asObject(), _python_unicode_plain_value );
            }
            }
        }
        frame_guard.setLineNumber( 244 );
        {
            PyObjectTempKeeper0 call12;
            PyObjectTempKeeper0 call14;
            return ( call14.assign( _mvar_django__forms__widgets_format_html.asObject0() ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), _python_unicode_digest_112bd2c039828fc5ded92f3d11afdfa1, PyObjectTemporary( ( call12.assign( _mvar_django__forms__widgets_flatatt.asObject0() ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), _python_var_final_attrs.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_final_attrs.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_render_of_class_6_Input_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2_render_of_class_6_Input_of_module_django__forms__widgets );
           frame_function_2_render_of_class_6_Input_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_render_of_class_6_Input_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }


    return impl_function_2_render_of_class_6_Input_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );

    return NULL;
}

static PyObject *dparse_function_2_render_of_class_6_Input_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_2_render_of_class_6_Input_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_render_of_class_6_Input_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_7_TextInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_input_type( _python_str_plain_input_type );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var_input_type.assign0( _python_unicode_plain_text );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets(  ) );
    return _python_var___init__.updateLocalsDict( _python_var_input_type.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_attrs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_7_TextInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_400352f27efe18006476db6a55f8c816, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 251 );
        if ( ( _python_var_attrs.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 252 );
            {
                PyObjectTempKeeper1 call1;
                {
                    PyObjectTemporary tmp_identifier( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_attrs.asObject(), _python_str_plain_pop ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_unicode_plain_type, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_input_type ) ).asObject() ) ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_input_type );
            }
            }
        }
        frame_guard.setLineNumber( 253 );
        {
            PyObjectTempKeeper1 call6;
            PyObjectTempKeeper0 super4;
            DECREASE_REFCOUNT( ( call6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super4.assign( _mvar_django__forms__widgets_TextInput.asObject0() ), BUILTIN_SUPER( super4.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_attrs.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attrs.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets );
           frame_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_attrs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }


    return impl_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_attrs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_attrs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_8_NumberInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_input_type( _python_str_plain_input_type );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var_input_type.assign0( _python_unicode_plain_number );
    return _python_var_input_type.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );
}


NUITKA_LOCAL_MODULE PyObject *impl_class_9_EmailInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_input_type( _python_str_plain_input_type );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var_input_type.assign0( _python_unicode_plain_email );
    return _python_var_input_type.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );
}


NUITKA_LOCAL_MODULE PyObject *impl_class_10_URLInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_input_type( _python_str_plain_input_type );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var_input_type.assign0( _python_unicode_plain_url );
    return _python_var_input_type.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );
}


NUITKA_LOCAL_MODULE PyObject *impl_class_11_PasswordInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_input_type( _python_str_plain_input_type );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var_input_type.assign0( _python_unicode_plain_password );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets(  ) );
    return _python_var_render.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_input_type.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_attrs, PyObject *_python_par_render_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_render_value( _python_str_plain_render_value, _python_par_render_value );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_800fb487256f3984ad4a2fad2196ce90, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 272 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_PasswordInput.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_attrs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 273 );
        {
                PyObject *tmp_identifier = _python_var_render_value.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_render_value );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_render_value.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets );
           frame_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_render_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_render_value == key )
            {
                if (unlikely( _python_par_render_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'render_value'" );
                    goto error_exit;
                }

                _python_par_render_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_render_value, key ) )
            {
                if (unlikely( _python_par_render_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'render_value'" );
                    goto error_exit;
                }

                _python_par_render_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_render_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'render_value'" );
             goto error_exit;
         }

        _python_par_render_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_render_value == NULL )
    {
        _python_par_render_value = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_render_value );
    }


    return impl_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_attrs, _python_par_render_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_render_value );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );

    // Actual function code.
    static PyFrameObject *frame_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets );
        }

        frame_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_f0d50fd5d442300376ab1262197785c7, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 276 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_render_value ) ).asObject() ) )) )
        {
            _python_var_value.assign0( Py_None );
        }
        frame_guard.setLineNumber( 277 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 call5;
            PyObjectTempKeeper0 super1;
            return ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_PasswordInput.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_render ) ), call4.assign( _python_var_name.asObject() ), call5.assign( _python_var_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), call5.asObject0(), _python_var_attrs.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets );
           frame_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }


    return impl_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );

    return NULL;
}

static PyObject *dparse_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_12_HiddenInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_input_type( _python_str_plain_input_type );
    PyObjectLocalVariable _python_var_is_hidden( _python_str_plain_is_hidden );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var_input_type.assign0( _python_unicode_plain_hidden );
    _python_var_is_hidden.assign0( Py_True );
    return _python_var_is_hidden.updateLocalsDict( _python_var_input_type.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


NUITKA_LOCAL_MODULE PyObject *impl_class_13_MultipleHiddenInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );
    PyObjectLocalVariable _python_var_value_from_datadict( _python_str_plain_value_from_datadict );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___doc__.assign0( _python_unicode_digest_f135fb85f8b0f93c4f0707edce02dcb3 );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets(  ) );
    _python_var_value_from_datadict.assign1( MAKE_FUNCTION_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets(  ) );
    return _python_var_value_from_datadict.updateLocalsDict( _python_var_render.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_attrs, PyObject *_python_par_choices )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_choices( _python_str_plain_choices, _python_par_choices );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_2519a3e49b3af11909c8295acf77dbea, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 289 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_MultipleHiddenInput.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_attrs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 291 );
        {
                PyObject *tmp_identifier = _python_var_choices.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_choices );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_choices.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets );
           frame_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_choices = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_choices == key )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_choices, key ) )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choices'" );
             goto error_exit;
         }

        _python_par_choices = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_choices == NULL )
    {
        _python_par_choices = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_choices );
    }


    return impl_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_attrs, _python_par_choices );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_choices );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs, PyObject *_python_par_choices )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_choices( _python_str_plain_choices, _python_par_choices );
    PyObjectLocalVariable _python_var_final_attrs( _python_str_plain_final_attrs );
    PyObjectLocalVariable _python_var_id_( _python_str_plain_id_ );
    PyObjectLocalVariable _python_var_inputs( _python_str_plain_inputs );
    PyObjectLocalVariable _python_var_i( _python_str_plain_i );
    PyObjectLocalVariable _python_var_v( _python_str_plain_v );
    PyObjectLocalVariable _python_var_input_attrs( _python_str_plain_input_attrs );

    // Actual function code.
    static PyFrameObject *frame_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets );
        }

        frame_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_5ae37a48a5b79d8655d817fe42171776, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 294 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            _python_var_value.assign1( PyList_New( 0 ) );
        }
        frame_guard.setLineNumber( 295 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper1 call6;
            PyObjectTempKeeper1 make_dict1;
            _python_var_final_attrs.assign1( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_build_attrs ) ), call6.assign( MAKE_TUPLE1( _python_var_attrs.asObject() ) ), CALL_FUNCTION( call5.asObject0(), call6.asObject0(), PyObjectTemporary( ( make_dict1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_input_type ) ), MAKE_DICT2( make_dict1.asObject0(), _python_str_plain_type, _python_var_name.asObject(), _python_str_plain_name ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 296 );
        _python_var_id_.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_final_attrs.asObject(), _python_str_plain_get ) ).asObject(), _python_unicode_plain_id, Py_None ) );
        _python_var_inputs.assign1( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 298 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), _python_var_value.asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 298 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 298 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_i.assign0( _python_tmp_element_1.asObject() );
                        _python_var_v.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 299 );
                {
                    PyObjectTempKeeper0 call8;
                    PyObjectTempKeeper1 call_tmp11;
                    _python_var_input_attrs.assign1( ( call_tmp11.assign( MAKE_DICT1( PyObjectTemporary( ( call8.assign( _mvar_django__forms__widgets_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_v.asObject() ) ) ).asObject(), _python_str_plain_value ) ), impl_function_6_complex_call_helper_keywords_star_dict_of_module___internal__( INCREASE_REFCOUNT( LOOKUP_BUILTIN( _python_str_plain_dict ) ), call_tmp11.asObject(), _python_var_final_attrs.asObject1() ) ) );
                }
                frame_guard.setLineNumber( 300 );
                if ( CHECK_IF_TRUE( _python_var_id_.asObject() ) )
                {
                    frame_guard.setLineNumber( 303 );
                    {
                        PyObjectTempKeeper0 make_tuple13;
                        {
                            PyObjectTemporary tmp_identifier( BINARY_OPERATION_REMAINDER( _python_unicode_digest_2c4280e570e051c9f90f753460217fb9, PyObjectTemporary( ( make_tuple13.assign( _python_var_id_.asObject() ), MAKE_TUPLE2( make_tuple13.asObject0(), _python_var_i.asObject() ) ) ).asObject() ) );
                            SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_input_attrs.asObject(), _python_unicode_plain_id );
                    }
                    }
                }
                frame_guard.setLineNumber( 304 );
                {
                    PyObjectTempKeeper0 call15;
                    PyObjectTempKeeper0 call17;
                    PyObjectTempKeeper1 call20;
                    DECREASE_REFCOUNT( ( call20.assign( LOOKUP_ATTRIBUTE( _python_var_inputs.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call20.asObject0(), PyObjectTemporary( ( call17.assign( _mvar_django__forms__widgets_format_html.asObject0() ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), _python_unicode_digest_112bd2c039828fc5ded92f3d11afdfa1, PyObjectTemporary( ( call15.assign( _mvar_django__forms__widgets_flatatt.asObject0() ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), _python_var_input_attrs.asObject() ) ) ).asObject() ) ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 305 );
        {
            PyObjectTempKeeper1 call22;
            PyObjectTempKeeper0 call24;
            return ( call24.assign( _mvar_django__forms__widgets_mark_safe.asObject0() ), CALL_FUNCTION_WITH_ARGS( call24.asObject0(), PyObjectTemporary( ( call22.assign( LOOKUP_ATTRIBUTE( _python_unicode_chr_10, _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call22.asObject0(), _python_var_inputs.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_choices.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_input_attrs.updateLocalsDict( _python_var_v.updateLocalsDict( _python_var_i.updateLocalsDict( _python_var_inputs.updateLocalsDict( _python_var_id_.updateLocalsDict( _python_var_final_attrs.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets );
           frame_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_choices = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_choices == key )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_choices, key ) )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
             goto error_exit;
         }

        _python_par_choices = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_choices == NULL )
    {
        _python_par_choices = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_choices );
    }


    return impl_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs, _python_par_choices );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_choices );

    return NULL;
}

static PyObject *dparse_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data, PyObject *_python_par_files, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalParameterVariableNoDel _python_var_files( _python_str_plain_files, _python_par_files );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );

    // Actual function code.
    static PyFrameObject *frame_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets );
        }

        frame_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_c132849bd9ba1c04cd1740eaf839fd86, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 308 );
        {
            PyObjectTempKeeper0 isinstance5;
            PyObjectTempKeeper0 make_tuple3;
            if ( ( isinstance5.assign( _python_var_data.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance5.asObject0(), PyObjectTemporary( ( make_tuple3.assign( _mvar_django__forms__widgets_MultiValueDict.asObject0() ), MAKE_TUPLE2( make_tuple3.asObject0(), _mvar_django__forms__widgets_MergeDict.asObject0() ) ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 309 );
            {
                PyObjectTempKeeper1 call1;
                return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_data.asObject(), _python_str_plain_getlist ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_name.asObject() ) );
            }
        }
        }
        frame_guard.setLineNumber( 310 );
        {
            PyObjectTempKeeper1 call7;
            return ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_data.asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_name.asObject(), Py_None ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_files.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets );
           frame_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    PyObject *_python_par_files = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_files == key )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_files, key ) )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_from_datadict() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_files != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
             goto error_exit;
         }

        _python_par_files = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_data, _python_par_files, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );
    Py_XDECREF( _python_par_files );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_14_FileInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_input_type( _python_str_plain_input_type );
    PyObjectLocalVariable _python_var_needs_multipart_form( _python_str_plain_needs_multipart_form );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );
    PyObjectLocalVariable _python_var_value_from_datadict( _python_str_plain_value_from_datadict );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var_input_type.assign0( _python_unicode_plain_file );
    _python_var_needs_multipart_form.assign0( Py_True );
    _python_var_render.assign1( MAKE_FUNCTION_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets(  ) );
    _python_var_value_from_datadict.assign1( MAKE_FUNCTION_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets(  ) );
    return _python_var_value_from_datadict.updateLocalsDict( _python_var_render.updateLocalsDict( _python_var_needs_multipart_form.updateLocalsDict( _python_var_input_type.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );
}


static PyObject *impl_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );

    // Actual function code.
    static PyFrameObject *frame_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_render_of_class_14_FileInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets );
        }

        frame_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_30b57064f70bdc9865f6ec74b93ee94c, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 317 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 call4;
            PyObjectTempKeeper0 super1;
            return ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_FileInput.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_render ) ), call4.assign( MAKE_TUPLE2( _python_var_name.asObject(), Py_None ) ), CALL_FUNCTION( call3.asObject0(), call4.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_attrs.asObject(), _python_str_plain_attrs ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets );
           frame_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }


    return impl_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );

    return NULL;
}

static PyObject *dparse_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data, PyObject *_python_par_files, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalParameterVariableNoDel _python_var_files( _python_str_plain_files, _python_par_files );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );

    // Actual function code.
    static PyFrameObject *frame_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets );
        }

        frame_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_87448cbacd7439beb364084b387eab6a, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 321 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_files.asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_name.asObject(), Py_None ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_files.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets );
           frame_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    PyObject *_python_par_files = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_files == key )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_files, key ) )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_from_datadict() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_files != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
             goto error_exit;
         }

        _python_par_files = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_data, _python_par_files, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );
    Py_XDECREF( _python_par_files );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_15_ClearableFileInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_initial_text( _python_str_plain_initial_text );
    PyObjectLocalVariable _python_var_input_text( _python_str_plain_input_text );
    PyObjectLocalVariable _python_var_clear_checkbox_label( _python_str_plain_clear_checkbox_label );
    PyObjectLocalVariable _python_var_template_with_initial( _python_str_plain_template_with_initial );
    PyObjectLocalVariable _python_var_template_with_clear( _python_str_plain_template_with_clear );
    PyObjectLocalVariable _python_var_url_markup_template( _python_str_plain_url_markup_template );
    PyObjectLocalVariable _python_var_clear_checkbox_name( _python_str_plain_clear_checkbox_name );
    PyObjectLocalVariable _python_var_clear_checkbox_id( _python_str_plain_clear_checkbox_id );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );
    PyObjectLocalVariable _python_var_value_from_datadict( _python_str_plain_value_from_datadict );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    static PyFrameObject *frame_class_15_ClearableFileInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_class_15_ClearableFileInput_of_module_django__forms__widgets ) )
    {
        if ( frame_class_15_ClearableFileInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_15_ClearableFileInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_class_15_ClearableFileInput_of_module_django__forms__widgets );
        }

        frame_class_15_ClearableFileInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_577d01a3e1e23f9393359842ebf0c954, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_class_15_ClearableFileInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_class_15_ClearableFileInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 327 );
        _python_var_initial_text.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__widgets_ugettext_lazy.asObject0(), _python_unicode_plain_Currently ) );
        frame_guard.setLineNumber( 328 );
        _python_var_input_text.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__widgets_ugettext_lazy.asObject0(), _python_unicode_plain_Change ) );
        frame_guard.setLineNumber( 329 );
        _python_var_clear_checkbox_label.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__widgets_ugettext_lazy.asObject0(), _python_unicode_plain_Clear ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value_from_datadict.updateLocalsDict( _python_var_render.updateLocalsDict( _python_var_clear_checkbox_id.updateLocalsDict( _python_var_clear_checkbox_name.updateLocalsDict( _python_var_url_markup_template.updateLocalsDict( _python_var_template_with_clear.updateLocalsDict( _python_var_template_with_initial.updateLocalsDict( _python_var_clear_checkbox_label.updateLocalsDict( _python_var_input_text.updateLocalsDict( _python_var_initial_text.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_15_ClearableFileInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_class_15_ClearableFileInput_of_module_django__forms__widgets );
           frame_class_15_ClearableFileInput_of_module_django__forms__widgets = NULL;
        }

        throw;
    }
    _python_var_template_with_initial.assign0( _python_unicode_digest_d3792abbc82bddfcb2ac7f6e6d85ac03 );
    _python_var_template_with_clear.assign0( _python_unicode_digest_14d937f28344b8ed8d87d73464fe98c7 );
    _python_var_url_markup_template.assign0( _python_unicode_digest_2ae08384a4d50050c35f891d515d539f );
    _python_var_clear_checkbox_name.assign1( MAKE_FUNCTION_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets(  ) );
    _python_var_clear_checkbox_id.assign1( MAKE_FUNCTION_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets(  ) );
    _python_var_value_from_datadict.assign1( MAKE_FUNCTION_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets(  ) );
    return _python_var_value_from_datadict.updateLocalsDict( _python_var_render.updateLocalsDict( _python_var_clear_checkbox_id.updateLocalsDict( _python_var_clear_checkbox_name.updateLocalsDict( _python_var_url_markup_template.updateLocalsDict( _python_var_template_with_clear.updateLocalsDict( _python_var_template_with_initial.updateLocalsDict( _python_var_clear_checkbox_label.updateLocalsDict( _python_var_input_text.updateLocalsDict( _python_var_initial_text.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );

    // Actual function code.
    static PyFrameObject *frame_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets );
        }

        frame_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_35fde81b6630cc9c3a10c85405380a25, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 342 );
        return BINARY_OPERATION_ADD( _python_var_name.asObject(), _python_unicode_digest_d960fd2a3749298959ca9e3b45ccf418 );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets );
           frame_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clear_checkbox_name() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_checkbox_name() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_checkbox_name() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_checkbox_name() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_checkbox_name() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clear_checkbox_name() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear_checkbox_name() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clear_checkbox_name() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clear_checkbox_name() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear_checkbox_name() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clear_checkbox_name() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear_checkbox_name() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clear_checkbox_name() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear_checkbox_name() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clear_checkbox_name() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clear_checkbox_name() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "clear_checkbox_name() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clear_checkbox_name() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clear_checkbox_name() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clear_checkbox_name() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );

    // Actual function code.
    static PyFrameObject *frame_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets );
        }

        frame_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_8a547918991d55c32c7c9b2e74a5e09f, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 348 );
        return BINARY_OPERATION_ADD( _python_var_name.asObject(), _python_unicode_plain__id );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets );
           frame_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clear_checkbox_id() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_checkbox_id() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_checkbox_id() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_checkbox_id() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "clear_checkbox_id() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clear_checkbox_id() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear_checkbox_id() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clear_checkbox_id() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clear_checkbox_id() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear_checkbox_id() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clear_checkbox_id() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear_checkbox_id() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clear_checkbox_id() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear_checkbox_id() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clear_checkbox_id() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clear_checkbox_id() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "clear_checkbox_id() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clear_checkbox_id() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clear_checkbox_id() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clear_checkbox_id() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalVariable _python_var_substitutions( _python_str_plain_substitutions );
    PyObjectLocalVariable _python_var_template( _python_str_plain_template );
    PyObjectLocalVariable _python_var_checkbox_name( _python_str_plain_checkbox_name );
    PyObjectLocalVariable _python_var_checkbox_id( _python_str_plain_checkbox_id );

    // Actual function code.
    static PyFrameObject *frame_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets );
        }

        frame_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_d2a875b87b3f83f7b52c51db7518646d, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 351 );
        {
            PyObjectTempKeeper1 make_dict1;
            PyObjectTempKeeper1 make_dict3;
            _python_var_substitutions.assign1( ( make_dict1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_initial_text ) ), make_dict3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_input_text ) ), MAKE_DICT4( make_dict1.asObject0(), _python_unicode_plain_initial_text, make_dict3.asObject0(), _python_unicode_plain_input_text, _python_unicode_empty, _python_unicode_plain_clear_template, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_clear_checkbox_label ) ).asObject(), _python_unicode_plain_clear_checkbox_label ) ) );
        }
        _python_var_template.assign0( _python_unicode_digest_89e98ed7ec5902eb56030c2bbe4668dc );
        frame_guard.setLineNumber( 358 );
        {
            PyObjectTempKeeper1 call11;
            PyObjectTempKeeper0 call12;
            PyObjectTempKeeper0 call13;
            PyObjectTempKeeper0 super9;
            {
                PyObjectTemporary tmp_identifier( ( call11.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super9.assign( _mvar_django__forms__widgets_ClearableFileInput.asObject0() ), BUILTIN_SUPER( super9.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_render ) ), call12.assign( _python_var_name.asObject() ), call13.assign( _python_var_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), call12.asObject0(), call13.asObject0(), _python_var_attrs.asObject() ) ) );
                SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_substitutions.asObject(), _python_unicode_plain_input );
        }
        }
        frame_guard.setLineNumber( 360 );
        if ( ( CHECK_IF_TRUE( _python_var_value.asObject() ) && HAS_ATTRIBUTE( _python_var_value.asObject(), _python_unicode_plain_url ) ) )
        {
            frame_guard.setLineNumber( 361 );
            _python_var_template.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_template_with_initial ) );
            frame_guard.setLineNumber( 362 );
            {
                PyObjectTempKeeper0 call15;
                PyObjectTempKeeper0 call17;
                PyObjectTempKeeper1 call18;
                PyObjectTempKeeper1 call19;
                {
                    PyObjectTemporary tmp_identifier( ( call17.assign( _mvar_django__forms__widgets_format_html.asObject0() ), call18.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_url_markup_template ) ), call19.assign( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_url ) ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), call18.asObject0(), call19.asObject0(), PyObjectTemporary( ( call15.assign( _mvar_django__forms__widgets_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), _python_var_value.asObject() ) ) ).asObject() ) ) );
                    SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_substitutions.asObject(), _python_unicode_plain_initial );
            }
            }
            frame_guard.setLineNumber( 365 );
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_is_required ) ).asObject() ) )) )
            {
                frame_guard.setLineNumber( 366 );
                {
                    PyObjectTempKeeper1 call21;
                    _python_var_checkbox_name.assign1( ( call21.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_clear_checkbox_name ) ), CALL_FUNCTION_WITH_ARGS( call21.asObject0(), _python_var_name.asObject() ) ) );
                }
                frame_guard.setLineNumber( 367 );
                {
                    PyObjectTempKeeper1 call23;
                    _python_var_checkbox_id.assign1( ( call23.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_clear_checkbox_id ) ), CALL_FUNCTION_WITH_ARGS( call23.asObject0(), _python_var_checkbox_name.asObject() ) ) );
                }
                frame_guard.setLineNumber( 368 );
                {
                    PyObjectTempKeeper0 call25;
                    {
                        PyObjectTemporary tmp_identifier( ( call25.assign( _mvar_django__forms__widgets_conditional_escape.asObject0() ), CALL_FUNCTION_WITH_ARGS( call25.asObject0(), _python_var_checkbox_name.asObject() ) ) );
                        SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_substitutions.asObject(), _python_unicode_plain_clear_checkbox_name );
                }
                }
                frame_guard.setLineNumber( 369 );
                {
                    PyObjectTempKeeper0 call27;
                    {
                        PyObjectTemporary tmp_identifier( ( call27.assign( _mvar_django__forms__widgets_conditional_escape.asObject0() ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), _python_var_checkbox_id.asObject() ) ) );
                        SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_substitutions.asObject(), _python_unicode_plain_clear_checkbox_id );
                }
                }
                frame_guard.setLineNumber( 370 );
                {
                    PyObjectTempKeeper1 call29;
                    PyObjectTempKeeper1 call30;
                    {
                        PyObjectTemporary tmp_identifier( ( call29.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( _mvar_django__forms__widgets_CheckboxInput.asObject0() ) ).asObject(), _python_str_plain_render ) ), call30.assign( MAKE_TUPLE2( _python_var_checkbox_name.asObject(), Py_False ) ), CALL_FUNCTION( call29.asObject0(), call30.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( MAKE_DICT1( _python_var_checkbox_id.asObject(), _python_unicode_plain_id ) ).asObject(), _python_str_plain_attrs ) ).asObject() ) ) );
                        SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_substitutions.asObject(), _python_unicode_plain_clear );
                }
                }
                frame_guard.setLineNumber( 371 );
                {
                    PyObjectTempKeeper1 op32;
                    {
                        PyObjectTemporary tmp_identifier( ( op32.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_template_with_clear ) ), BINARY_OPERATION_REMAINDER( op32.asObject0(), _python_var_substitutions.asObject() ) ) );
                        SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_substitutions.asObject(), _python_unicode_plain_clear_template );
                }
                }
            }
        }
        frame_guard.setLineNumber( 373 );
        {
            PyObjectTempKeeper0 call36;
            PyObjectTempKeeper0 op34;
            return ( call36.assign( _mvar_django__forms__widgets_mark_safe.asObject0() ), CALL_FUNCTION_WITH_ARGS( call36.asObject0(), PyObjectTemporary( ( op34.assign( _python_var_template.asObject() ), BINARY_OPERATION_REMAINDER( op34.asObject0(), _python_var_substitutions.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_checkbox_id.updateLocalsDict( _python_var_checkbox_name.updateLocalsDict( _python_var_template.updateLocalsDict( _python_var_substitutions.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets );
           frame_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }


    return impl_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );

    return NULL;
}

static PyObject *dparse_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data, PyObject *_python_par_files, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalParameterVariableNoDel _python_var_files( _python_str_plain_files, _python_par_files );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalVariable _python_var_upload( _python_str_plain_upload );

    // Actual function code.
    static PyFrameObject *frame_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets );
        }

        frame_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_51dcd813f8f6b5616378978343e6aab5, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 376 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 call5;
            PyObjectTempKeeper0 super1;
            _python_var_upload.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_ClearableFileInput.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_value_from_datadict ) ), call4.assign( _python_var_data.asObject() ), call5.assign( _python_var_files.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), call5.asObject0(), _python_var_name.asObject() ) ) );
        }
        frame_guard.setLineNumber( 377 );
        {
            PyObjectTempKeeper0 call10;
            PyObjectTempKeeper0 call11;
            PyObjectTempKeeper1 call7;
            PyObjectTempKeeper1 call9;
            if ( ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_is_required ) ).asObject() ) )) && CHECK_IF_TRUE( PyObjectTemporary( ( call9.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( _mvar_django__forms__widgets_CheckboxInput.asObject0() ) ).asObject(), _python_str_plain_value_from_datadict ) ), call10.assign( _python_var_data.asObject() ), call11.assign( _python_var_files.asObject() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), call10.asObject0(), call11.asObject0(), PyObjectTemporary( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_clear_checkbox_name ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_name.asObject() ) ) ).asObject() ) ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 379 );
            if ( CHECK_IF_TRUE( _python_var_upload.asObject() ) )
            {
                frame_guard.setLineNumber( 383 );
                return _mvar_django__forms__widgets_FILE_INPUT_CONTRADICTION.asObject();
            }
            return INCREASE_REFCOUNT( Py_False );
        }
        }
        frame_guard.setLineNumber( 386 );
        return _python_var_upload.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_files.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_upload.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets );
           frame_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    PyObject *_python_par_files = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_files == key )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_files, key ) )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_from_datadict() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_files != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
             goto error_exit;
         }

        _python_par_files = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_data, _python_par_files, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );
    Py_XDECREF( _python_par_files );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_16_Textarea_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets(  ) );
    return _python_var_render.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_attrs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalVariable _python_var_default_attrs( _python_str_plain_default_attrs );

    // Actual function code.
    _python_var_default_attrs.assign1( PyDict_Copy( _python_dict_5c16294640a5eee4da1878b691817f44 ) );
    static PyFrameObject *frame_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_16_Textarea_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_69109c11864dab322e7b31a022d15ef4, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 392 );
        if ( CHECK_IF_TRUE( _python_var_attrs.asObject() ) )
        {
            frame_guard.setLineNumber( 393 );
            {
                PyObjectTempKeeper1 call1;
                DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_default_attrs.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_attrs.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 394 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper0 super3;
            DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__forms__widgets_Textarea.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_default_attrs.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attrs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_default_attrs.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets );
           frame_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_attrs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }


    return impl_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets( self, _python_par_self, _python_par_attrs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_attrs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalVariable _python_var_final_attrs( _python_str_plain_final_attrs );

    // Actual function code.
    static PyFrameObject *frame_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_render_of_class_16_Textarea_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets );
        }

        frame_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_3a67777c856780e38b79dc83e208f111, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 397 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            _python_var_value.assign0( _python_unicode_empty );
        }
        frame_guard.setLineNumber( 398 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call2;
            _python_var_final_attrs.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_build_attrs ) ), call2.assign( MAKE_TUPLE1( _python_var_attrs.asObject() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_name.asObject(), _python_str_plain_name ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 399 );
        {
            PyObjectTempKeeper1 call10;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 call6;
            PyObjectTempKeeper0 call8;
            return ( call8.assign( _mvar_django__forms__widgets_format_html.asObject0() ), call10.assign( ( call4.assign( _mvar_django__forms__widgets_flatatt.asObject0() ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_final_attrs.asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_unicode_digest_351b55ddd45c840deeecc00a662ebb9d, call10.asObject0(), PyObjectTemporary( ( call6.assign( _mvar_django__forms__widgets_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_value.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_final_attrs.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets );
           frame_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }


    return impl_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );

    return NULL;
}

static PyObject *dparse_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_17_DateInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var__format_value( _python_str_plain__format_value );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets(  ) );
    _python_var__format_value.assign1( MAKE_FUNCTION_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets(  ) );
    return _python_var__format_value.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_attrs, PyObject *_python_par_format )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_format( _python_str_plain_format, _python_par_format );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_17_DateInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_01d5a33041a15abcf85d2f0e17495242, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 406 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_DateInput.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_attrs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 407 );
        if ( CHECK_IF_TRUE( _python_var_format.asObject() ) )
        {
            frame_guard.setLineNumber( 408 );
            {
                    PyObject *tmp_identifier = _python_var_format.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_format );
            }
            frame_guard.setLineNumber( 409 );
            SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain_manual_format );
        }
        else
        {
            frame_guard.setLineNumber( 411 );
            {
                    PyObjectTemporary tmp_identifier( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_formats.asObject0(), _python_str_plain_get_format ) ).asObject(), _python_unicode_plain_DATE_INPUT_FORMATS ) ).asObject(), _python_int_0, 0 ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_format );
            }
            frame_guard.setLineNumber( 412 );
            SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_manual_format );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_format.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets );
           frame_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_format = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_format == key )
            {
                if (unlikely( _python_par_format ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'format'" );
                    goto error_exit;
                }

                _python_par_format = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_format, key ) )
            {
                if (unlikely( _python_par_format ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'format'" );
                    goto error_exit;
                }

                _python_par_format = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_format != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'format'" );
             goto error_exit;
         }

        _python_par_format = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_format == NULL )
    {
        _python_par_format = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_format );
    }


    return impl_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_attrs, _python_par_format );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_format );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets );
        }

        frame_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_db2d7581790a87eabd4cd96bdc024577, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 415 );
        if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_is_localized ) ).asObject() ) && (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_manual_format ) ).asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 416 );
            {
                PyObjectTempKeeper1 call1;
                return ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_formats.asObject0(), _python_str_plain_localize_input ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 417 );
            if ( HAS_ATTRIBUTE( _python_var_value.asObject(), _python_unicode_plain_strftime ) )
            {
                frame_guard.setLineNumber( 418 );
                {
                    PyObjectTempKeeper1 call3;
                    _python_var_value.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_datetime_safe.asObject0(), _python_str_plain_new_date ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) ) );
                }
                frame_guard.setLineNumber( 419 );
                {
                    PyObjectTempKeeper1 call5;
                    return ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_strftime ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_format ) ).asObject() ) );
                }
            }
        }
        frame_guard.setLineNumber( 420 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets );
           frame_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_format_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_format_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_format_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_format_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_format_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_format_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_format_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_18_DateTimeInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var__format_value( _python_str_plain__format_value );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets(  ) );
    _python_var__format_value.assign1( MAKE_FUNCTION_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets(  ) );
    return _python_var__format_value.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_attrs, PyObject *_python_par_format )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_format( _python_str_plain_format, _python_par_format );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_82560f2327de21ea0615844d2fa5a07c, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 425 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_DateTimeInput.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_attrs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 426 );
        if ( CHECK_IF_TRUE( _python_var_format.asObject() ) )
        {
            frame_guard.setLineNumber( 427 );
            {
                    PyObject *tmp_identifier = _python_var_format.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_format );
            }
            frame_guard.setLineNumber( 428 );
            SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain_manual_format );
        }
        else
        {
            frame_guard.setLineNumber( 430 );
            {
                    PyObjectTemporary tmp_identifier( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_formats.asObject0(), _python_str_plain_get_format ) ).asObject(), _python_unicode_plain_DATETIME_INPUT_FORMATS ) ).asObject(), _python_int_0, 0 ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_format );
            }
            frame_guard.setLineNumber( 431 );
            SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_manual_format );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_format.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets );
           frame_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_format = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_format == key )
            {
                if (unlikely( _python_par_format ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'format'" );
                    goto error_exit;
                }

                _python_par_format = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_format, key ) )
            {
                if (unlikely( _python_par_format ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'format'" );
                    goto error_exit;
                }

                _python_par_format = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_format != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'format'" );
             goto error_exit;
         }

        _python_par_format = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_format == NULL )
    {
        _python_par_format = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_format );
    }


    return impl_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_attrs, _python_par_format );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_format );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets );
        }

        frame_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_288114e45af56d5a118e432ad5d2e64c, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 434 );
        if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_is_localized ) ).asObject() ) && (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_manual_format ) ).asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 435 );
            {
                PyObjectTempKeeper1 call1;
                return ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_formats.asObject0(), _python_str_plain_localize_input ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 436 );
            if ( HAS_ATTRIBUTE( _python_var_value.asObject(), _python_unicode_plain_strftime ) )
            {
                frame_guard.setLineNumber( 437 );
                {
                    PyObjectTempKeeper1 call3;
                    _python_var_value.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_datetime_safe.asObject0(), _python_str_plain_new_datetime ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) ) );
                }
                frame_guard.setLineNumber( 438 );
                {
                    PyObjectTempKeeper1 call5;
                    return ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_strftime ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_format ) ).asObject() ) );
                }
            }
        }
        frame_guard.setLineNumber( 439 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets );
           frame_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_format_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_format_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_format_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_format_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_format_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_format_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_format_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_19_TimeInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var__format_value( _python_str_plain__format_value );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets(  ) );
    _python_var__format_value.assign1( MAKE_FUNCTION_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets(  ) );
    return _python_var__format_value.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_attrs, PyObject *_python_par_format )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_format( _python_str_plain_format, _python_par_format );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_f20c89746e2fae73a35dc174259286db, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 444 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_TimeInput.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_attrs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 445 );
        if ( CHECK_IF_TRUE( _python_var_format.asObject() ) )
        {
            frame_guard.setLineNumber( 446 );
            {
                    PyObject *tmp_identifier = _python_var_format.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_format );
            }
            frame_guard.setLineNumber( 447 );
            SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain_manual_format );
        }
        else
        {
            frame_guard.setLineNumber( 449 );
            {
                    PyObjectTemporary tmp_identifier( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_formats.asObject0(), _python_str_plain_get_format ) ).asObject(), _python_unicode_plain_TIME_INPUT_FORMATS ) ).asObject(), _python_int_0, 0 ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_format );
            }
            frame_guard.setLineNumber( 450 );
            SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_manual_format );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_format.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets );
           frame_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_format = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_format == key )
            {
                if (unlikely( _python_par_format ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'format'" );
                    goto error_exit;
                }

                _python_par_format = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_format, key ) )
            {
                if (unlikely( _python_par_format ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'format'" );
                    goto error_exit;
                }

                _python_par_format = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_format != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'format'" );
             goto error_exit;
         }

        _python_par_format = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_format == NULL )
    {
        _python_par_format = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_format );
    }


    return impl_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_attrs, _python_par_format );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_format );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets );
        }

        frame_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_08a8585cfd595ccc4044b3f13282cb6d, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 453 );
        if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_is_localized ) ).asObject() ) && (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_manual_format ) ).asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 454 );
            {
                PyObjectTempKeeper1 call1;
                return ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_formats.asObject0(), _python_str_plain_localize_input ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 455 );
            if ( HAS_ATTRIBUTE( _python_var_value.asObject(), _python_unicode_plain_strftime ) )
            {
                frame_guard.setLineNumber( 456 );
                {
                    PyObjectTempKeeper1 call3;
                    return ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_strftime ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_format ) ).asObject() ) );
                }
            }
        }
        frame_guard.setLineNumber( 457 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets );
           frame_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_format_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_format_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_format_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_format_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_format_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_format_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_format_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_format_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_format_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_format_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_20_boolean_check_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_v )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_v( _python_str_plain_v, _python_par_v );

    // Actual function code.
    static PyFrameObject *frame_function_20_boolean_check_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_20_boolean_check_of_module_django__forms__widgets ) )
    {
        if ( frame_function_20_boolean_check_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_20_boolean_check_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_20_boolean_check_of_module_django__forms__widgets );
        }

        frame_function_20_boolean_check_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_ad39392d256292042cac77c6eaf6bcef, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_20_boolean_check_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_20_boolean_check_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 462 );
        {
            PyObjectTempKeeper0 keeper_0;
            PyObjectTempKeeper0 keeper_1;
            return INCREASE_REFCOUNT( UNARY_OPERATION( UNARY_NOT, PyObjectTemporary( ( CHECK_IF_TRUE( keeper_1.assign( BOOL_FROM( ( _python_var_v.asObject() == Py_False ) ) ) ) ? INCREASE_REFCOUNT( keeper_1.asObject0() ) : ( CHECK_IF_TRUE( keeper_0.assign( BOOL_FROM( ( _python_var_v.asObject() == Py_None ) ) ) ) ? INCREASE_REFCOUNT( keeper_0.asObject0() ) : RICH_COMPARE_EQ( _python_var_v.asObject(), _python_unicode_empty ) ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_v.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_20_boolean_check_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_20_boolean_check_of_module_django__forms__widgets );
           frame_function_20_boolean_check_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_20_boolean_check_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_v = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "boolean_check() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_v == key )
            {
                if (unlikely( _python_par_v ))
                {
                    PyErr_Format( PyExc_TypeError, "boolean_check() got multiple values for keyword argument 'v'" );
                    goto error_exit;
                }

                _python_par_v = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_v, key ) )
            {
                if (unlikely( _python_par_v ))
                {
                    PyErr_Format( PyExc_TypeError, "boolean_check() got multiple values for keyword argument 'v'" );
                    goto error_exit;
                }

                _python_par_v = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "boolean_check() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "boolean_check() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "boolean_check() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "boolean_check() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "boolean_check() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "boolean_check() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "boolean_check() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "boolean_check() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "boolean_check() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "boolean_check() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "boolean_check() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "boolean_check() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "boolean_check() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_v != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "boolean_check() got multiple values for keyword argument 'v'" );
             goto error_exit;
         }

        _python_par_v = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_20_boolean_check_of_module_django__forms__widgets( self, _python_par_v );

error_exit:;

    Py_XDECREF( _python_par_v );

    return NULL;
}

static PyObject *dparse_function_20_boolean_check_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_20_boolean_check_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_20_boolean_check_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_21_CheckboxInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );
    PyObjectLocalVariable _python_var_value_from_datadict( _python_str_plain_value_from_datadict );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets(  ) );
    _python_var_value_from_datadict.assign1( MAKE_FUNCTION_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets(  ) );
    return _python_var_value_from_datadict.updateLocalsDict( _python_var_render.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_attrs, PyObject *_python_par_check_test )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_check_test( _python_str_plain_check_test, _python_par_check_test );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_6f217af584b6b2c67516a3f7e1bf7c9a, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 467 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_CheckboxInput.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_attrs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 470 );
        {
                PyObject *tmp_identifier = ( ( _python_var_check_test.asObject() == Py_None ) ? _mvar_django__forms__widgets_boolean_check.asObject0() : _python_var_check_test.asObject() );
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_check_test );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_check_test.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets );
           frame_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_check_test = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_check_test == key )
            {
                if (unlikely( _python_par_check_test ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'check_test'" );
                    goto error_exit;
                }

                _python_par_check_test = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_check_test, key ) )
            {
                if (unlikely( _python_par_check_test ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'check_test'" );
                    goto error_exit;
                }

                _python_par_check_test = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_check_test != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'check_test'" );
             goto error_exit;
         }

        _python_par_check_test = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_check_test == NULL )
    {
        _python_par_check_test = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_check_test );
    }


    return impl_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_attrs, _python_par_check_test );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_check_test );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalVariable _python_var_final_attrs( _python_str_plain_final_attrs );

    // Actual function code.
    static PyFrameObject *frame_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets );
        }

        frame_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_f4ce21ed8ce630cc8978b05ea621100c, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 473 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call2;
            _python_var_final_attrs.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_build_attrs ) ), call2.assign( MAKE_TUPLE1( _python_var_attrs.asObject() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( MAKE_DICT2( _python_unicode_plain_checkbox, _python_str_plain_type, _python_var_name.asObject(), _python_str_plain_name ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 474 );
        {
            PyObjectTempKeeper1 call4;
            if ( CHECK_IF_TRUE( PyObjectTemporary( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_check_test ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_value.asObject() ) ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 475 );
            SET_SUBSCRIPT( _python_unicode_plain_checked, _python_var_final_attrs.asObject(), _python_unicode_plain_checked );
        }
        }
        frame_guard.setLineNumber( 476 );
        if ( (!( ( ( _python_var_value.asObject() == Py_True ) || ( ( _python_var_value.asObject() == Py_False ) || ( ( _python_var_value.asObject() == Py_None ) || RICH_COMPARE_BOOL_EQ( _python_var_value.asObject(), _python_unicode_empty ) ) ) ) )) )
        {
            frame_guard.setLineNumber( 478 );
            {
                PyObjectTempKeeper0 call6;
                {
                    PyObjectTemporary tmp_identifier( ( call6.assign( _mvar_django__forms__widgets_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_value.asObject() ) ) );
                    SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_final_attrs.asObject(), _python_unicode_plain_value );
            }
            }
        }
        frame_guard.setLineNumber( 479 );
        {
            PyObjectTempKeeper0 call10;
            PyObjectTempKeeper0 call8;
            return ( call10.assign( _mvar_django__forms__widgets_format_html.asObject0() ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), _python_unicode_digest_112bd2c039828fc5ded92f3d11afdfa1, PyObjectTemporary( ( call8.assign( _mvar_django__forms__widgets_flatatt.asObject0() ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_final_attrs.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_final_attrs.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets );
           frame_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }


    return impl_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );

    return NULL;
}

static PyObject *dparse_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data, PyObject *_python_par_files, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalParameterVariableNoDel _python_var_files( _python_str_plain_files, _python_par_files );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );
    PyObjectLocalVariable _python_var_values( _python_str_plain_values );

    // Actual function code.
    static PyFrameObject *frame_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets );
        }

        frame_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_9c5c2de37f635af1aafccf78889cdcc6, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 482 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( _python_var_name.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp1.asObject0(), _python_var_data.asObject() ) ) )
        {
            return INCREASE_REFCOUNT( Py_False );
        }
        }
        frame_guard.setLineNumber( 486 );
        {
            PyObjectTempKeeper1 call3;
            _python_var_value.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_data.asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_name.asObject() ) ) );
        }
        _python_var_values.assign1( PyDict_Copy( _python_dict_fdbdf3dcf456c29c678a4170e94c458a ) );
        frame_guard.setLineNumber( 489 );
        {
            PyObjectTempKeeper0 isinstance8;
            if ( ( isinstance8.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance8.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 490 );
            {
                PyObjectTempKeeper1 call5;
                PyObjectTempKeeper1 call6;
                _python_var_value.assign1( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_values.asObject(), _python_str_plain_get ) ), call6.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_lower ) ).asObject() ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), call6.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        }
        frame_guard.setLineNumber( 491 );
        return INCREASE_REFCOUNT( TO_BOOL( _python_var_value.asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_files.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_values.updateLocalsDict( _python_var_value.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets );
           frame_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    PyObject *_python_par_files = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_files == key )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_files, key ) )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_from_datadict() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_files != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
             goto error_exit;
         }

        _python_par_files = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_data, _python_par_files, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );
    Py_XDECREF( _python_par_files );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_22_Select_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_allow_multiple_selected( _python_str_plain_allow_multiple_selected );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );
    PyObjectLocalVariable _python_var_render_option( _python_str_plain_render_option );
    PyObjectLocalVariable _python_var_render_options( _python_str_plain_render_options );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var_allow_multiple_selected.assign0( Py_False );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_22_Select_of_module_django__forms__widgets(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_2_render_of_class_22_Select_of_module_django__forms__widgets(  ) );
    _python_var_render_option.assign1( MAKE_FUNCTION_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets(  ) );
    _python_var_render_options.assign1( MAKE_FUNCTION_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets(  ) );
    return _python_var_render_options.updateLocalsDict( _python_var_render_option.updateLocalsDict( _python_var_render.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_allow_multiple_selected.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_22_Select_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_attrs, PyObject *_python_par_choices )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_choices( _python_str_plain_choices, _python_par_choices );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_22_Select_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_22_Select_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_22_Select_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_22_Select_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_22_Select_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_22_Select_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_a7394c2b31d205606de5a338d469639a, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_22_Select_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_22_Select_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 498 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_Select.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_attrs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 502 );
        {
                PyObjectTemporary tmp_identifier( TO_LIST( _python_var_choices.asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_choices );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_choices.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_22_Select_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_22_Select_of_module_django__forms__widgets );
           frame_function_1___init___of_class_22_Select_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_22_Select_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_choices = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_choices == key )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_choices, key ) )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choices'" );
             goto error_exit;
         }

        _python_par_choices = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_choices == NULL )
    {
        _python_par_choices = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_choices );
    }


    return impl_function_1___init___of_class_22_Select_of_module_django__forms__widgets( self, _python_par_self, _python_par_attrs, _python_par_choices );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_choices );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_22_Select_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_22_Select_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_22_Select_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_render_of_class_22_Select_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs, PyObject *_python_par_choices )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_choices( _python_str_plain_choices, _python_par_choices );
    PyObjectLocalVariable _python_var_final_attrs( _python_str_plain_final_attrs );
    PyObjectLocalVariable _python_var_output( _python_str_plain_output );
    PyObjectLocalVariable _python_var_options( _python_str_plain_options );

    // Actual function code.
    static PyFrameObject *frame_function_2_render_of_class_22_Select_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2_render_of_class_22_Select_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2_render_of_class_22_Select_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_render_of_class_22_Select_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2_render_of_class_22_Select_of_module_django__forms__widgets );
        }

        frame_function_2_render_of_class_22_Select_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_591fa67f7004e4d73ee63a7f0063fc14, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2_render_of_class_22_Select_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2_render_of_class_22_Select_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 505 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            _python_var_value.assign0( _python_unicode_empty );
        }
        frame_guard.setLineNumber( 506 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call2;
            _python_var_final_attrs.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_build_attrs ) ), call2.assign( MAKE_TUPLE1( _python_var_attrs.asObject() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_name.asObject(), _python_str_plain_name ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 507 );
        {
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 call6;
            _python_var_output.assign1( MAKE_LIST1( ( call6.assign( _mvar_django__forms__widgets_format_html.asObject0() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_unicode_digest_7c5424ebc615b32fc79309458782b1aa, PyObjectTemporary( ( call4.assign( _mvar_django__forms__widgets_flatatt.asObject0() ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_final_attrs.asObject() ) ) ).asObject() ) ) ) );
        }
        frame_guard.setLineNumber( 508 );
        {
            PyObjectTempKeeper0 call10;
            PyObjectTempKeeper1 call9;
            _python_var_options.assign1( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_render_options ) ), call10.assign( _python_var_choices.asObject() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), call10.asObject0(), PyObjectTemporary( MAKE_LIST1( _python_var_value.asObject1() ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 509 );
        if ( CHECK_IF_TRUE( _python_var_options.asObject() ) )
        {
            frame_guard.setLineNumber( 510 );
            {
                PyObjectTempKeeper1 call12;
                DECREASE_REFCOUNT( ( call12.assign( LOOKUP_ATTRIBUTE( _python_var_output.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), _python_var_options.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 511 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_output.asObject(), _python_str_plain_append ) ).asObject(), _python_unicode_digest_215ce5eabab31919de85708a54ec6a08 ) );
        frame_guard.setLineNumber( 512 );
        {
            PyObjectTempKeeper1 call14;
            PyObjectTempKeeper0 call16;
            return ( call16.assign( _mvar_django__forms__widgets_mark_safe.asObject0() ), CALL_FUNCTION_WITH_ARGS( call16.asObject0(), PyObjectTemporary( ( call14.assign( LOOKUP_ATTRIBUTE( _python_unicode_chr_10, _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), _python_var_output.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_choices.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_options.updateLocalsDict( _python_var_output.updateLocalsDict( _python_var_final_attrs.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_render_of_class_22_Select_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2_render_of_class_22_Select_of_module_django__forms__widgets );
           frame_function_2_render_of_class_22_Select_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_render_of_class_22_Select_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_choices = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_choices == key )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_choices, key ) )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
             goto error_exit;
         }

        _python_par_choices = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_choices == NULL )
    {
        _python_par_choices = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_choices );
    }


    return impl_function_2_render_of_class_22_Select_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs, _python_par_choices );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_choices );

    return NULL;
}

static PyObject *dparse_function_2_render_of_class_22_Select_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_2_render_of_class_22_Select_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_render_of_class_22_Select_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_selected_choices, PyObject *_python_par_option_value, PyObject *_python_par_option_label )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_selected_choices( _python_str_plain_selected_choices, _python_par_selected_choices );
    PyObjectLocalParameterVariableNoDel _python_var_option_value( _python_str_plain_option_value, _python_par_option_value );
    PyObjectLocalParameterVariableNoDel _python_var_option_label( _python_str_plain_option_label, _python_par_option_label );
    PyObjectLocalVariable _python_var_selected_html( _python_str_plain_selected_html );

    // Actual function code.
    static PyFrameObject *frame_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets ) )
    {
        if ( frame_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_render_option_of_class_22_Select_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets );
        }

        frame_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_a33bf8602753f0068882d32dadb6d33b, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 515 );
        {
            PyObjectTempKeeper0 call1;
            _python_var_option_value.assign1( ( call1.assign( _mvar_django__forms__widgets_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_option_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 516 );
        {
            PyObjectTempKeeper0 cmp5;
            if ( ( cmp5.assign( _python_var_option_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp5.asObject0(), _python_var_selected_choices.asObject() ) ) )
        {
            frame_guard.setLineNumber( 517 );
            _python_var_selected_html.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__widgets_mark_safe.asObject0(), _python_unicode_digest_1be79c8346a262ef1d82b6b81f8be520 ) );
            frame_guard.setLineNumber( 518 );
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_allow_multiple_selected ) ).asObject() ) )) )
            {
                frame_guard.setLineNumber( 520 );
                {
                    PyObjectTempKeeper1 call3;
                    DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_selected_choices.asObject(), _python_str_plain_remove ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_option_value.asObject() ) ) );
                }
            }
        }
        else
        {
            _python_var_selected_html.assign0( _python_unicode_empty );
        }
        }
        frame_guard.setLineNumber( 523 );
        {
            PyObjectTempKeeper0 call11;
            PyObjectTempKeeper0 call12;
            PyObjectTempKeeper0 call7;
            PyObjectTempKeeper0 call9;
            return ( call9.assign( _mvar_django__forms__widgets_format_html.asObject0() ), call11.assign( _python_var_option_value.asObject() ), call12.assign( _python_var_selected_html.asObject() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_unicode_digest_c80ebb0c2c0ea92a5c635f95a9875ebe, call11.asObject0(), call12.asObject0(), PyObjectTemporary( ( call7.assign( _mvar_django__forms__widgets_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_option_label.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_option_label.updateLocalsDict( _python_var_option_value.updateLocalsDict( _python_var_selected_choices.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_selected_html.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets );
           frame_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_selected_choices = NULL;
    PyObject *_python_par_option_value = NULL;
    PyObject *_python_par_option_label = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render_option() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render_option() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_selected_choices == key )
            {
                if (unlikely( _python_par_selected_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render_option() got multiple values for keyword argument 'selected_choices'" );
                    goto error_exit;
                }

                _python_par_selected_choices = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_option_value == key )
            {
                if (unlikely( _python_par_option_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render_option() got multiple values for keyword argument 'option_value'" );
                    goto error_exit;
                }

                _python_par_option_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_option_label == key )
            {
                if (unlikely( _python_par_option_label ))
                {
                    PyErr_Format( PyExc_TypeError, "render_option() got multiple values for keyword argument 'option_label'" );
                    goto error_exit;
                }

                _python_par_option_label = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render_option() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_selected_choices, key ) )
            {
                if (unlikely( _python_par_selected_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render_option() got multiple values for keyword argument 'selected_choices'" );
                    goto error_exit;
                }

                _python_par_selected_choices = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_option_value, key ) )
            {
                if (unlikely( _python_par_option_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render_option() got multiple values for keyword argument 'option_value'" );
                    goto error_exit;
                }

                _python_par_option_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_option_label, key ) )
            {
                if (unlikely( _python_par_option_label ))
                {
                    PyErr_Format( PyExc_TypeError, "render_option() got multiple values for keyword argument 'option_label'" );
                    goto error_exit;
                }

                _python_par_option_label = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render_option() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render_option() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render_option() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render_option() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render_option() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "render_option() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render_option() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "render_option() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render_option() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render_option() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render_option() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "render_option() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render_option() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render_option() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_selected_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render_option() got multiple values for keyword argument 'selected_choices'" );
             goto error_exit;
         }

        _python_par_selected_choices = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_option_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render_option() got multiple values for keyword argument 'option_value'" );
             goto error_exit;
         }

        _python_par_option_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_option_label != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render_option() got multiple values for keyword argument 'option_label'" );
             goto error_exit;
         }

        _python_par_option_label = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets( self, _python_par_self, _python_par_selected_choices, _python_par_option_value, _python_par_option_label );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_selected_choices );
    Py_XDECREF( _python_par_option_value );
    Py_XDECREF( _python_par_option_label );

    return NULL;
}

static PyObject *dparse_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_choices, PyObject *_python_par_selected_choices )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_choices( _python_str_plain_choices, _python_par_choices );
    PyObjectLocalParameterVariableNoDel _python_var_selected_choices( _python_str_plain_selected_choices, _python_par_selected_choices );
    PyObjectLocalVariable _python_var_output( _python_str_plain_output );
    PyObjectLocalVariable _python_var_option_value( _python_str_plain_option_value );
    PyObjectLocalVariable _python_var_option_label( _python_str_plain_option_label );
    PyObjectLocalVariable _python_var_option( _python_str_plain_option );

    // Actual function code.
    static PyFrameObject *frame_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets ) )
    {
        if ( frame_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_render_options_of_class_22_Select_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets );
        }

        frame_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_9d17866f51bc09e6b64102fdf72fc117, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 530 );
        _python_var_selected_choices.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( impl_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets( MAKE_ITERATOR( _python_var_selected_choices.asObject() ) ) ).asObject() ) );
        _python_var_output.assign1( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 532 );
            PyObject *_tmp_python_tmp_for_iterator;
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper1 call2;
                _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( _mvar_django__forms__widgets_chain.asObject0() ), call2.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_choices.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 532 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 532 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_option_value.assign0( _python_tmp_element_1.asObject() );
                        _python_var_option_label.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 533 );
                if ( BUILTIN_ISINSTANCE_BOOL( _python_var_option_label.asObject(), PyObjectTemporary( MAKE_TUPLE2( LOOKUP_BUILTIN( _python_str_plain_list ), LOOKUP_BUILTIN( _python_str_plain_tuple ) ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 534 );
                    {
                        PyObjectTempKeeper0 call4;
                        PyObjectTempKeeper0 call6;
                        PyObjectTempKeeper1 call9;
                        DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_output.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), PyObjectTemporary( ( call6.assign( _mvar_django__forms__widgets_format_html.asObject0() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_unicode_digest_a12d35c2ce8882c3f0479e24bf10ae6b, PyObjectTemporary( ( call4.assign( _mvar_django__forms__widgets_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_option_value.asObject() ) ) ).asObject() ) ) ).asObject() ) ) );
                    }
                    {
                        frame_guard.setLineNumber( 535 );
                        PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_option_label.asObject() ) );
                        while( true )
                        {
                            {
                                frame_guard.setLineNumber( 535 );
                                PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                if ( _tmp_unpack_2 == NULL )
                                {
                                    break;
                                }
                                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                                _python_var_option.assign0( _python_tmp_iter_value.asObject() );
                            }
                            frame_guard.setLineNumber( 536 );
                            {
                                PyObjectTempKeeper1 call14;
                                PyObjectTempKeeper1 call_tmp11;
                                PyObjectTempKeeper1 call_tmp12;
                                DECREASE_REFCOUNT( ( call14.assign( LOOKUP_ATTRIBUTE( _python_var_output.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), PyObjectTemporary( ( call_tmp11.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_render_option ) ), call_tmp12.assign( MAKE_TUPLE1( _python_var_selected_choices.asObject() ) ), impl_function_5_complex_call_helper_pos_star_list_of_module___internal__( call_tmp11.asObject(), call_tmp12.asObject(), _python_var_option.asObject1() ) ) ).asObject() ) ) );
                            }

                           CONSIDER_THREADING();
                        }
                    }
                    frame_guard.setLineNumber( 537 );
                    DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_output.asObject(), _python_str_plain_append ) ).asObject(), _python_unicode_digest_546d4a22b77dd8841bbf9b1b6980bccc ) );
                }
                else
                {
                    frame_guard.setLineNumber( 539 );
                    {
                        PyObjectTempKeeper1 call16;
                        PyObjectTempKeeper0 call17;
                        PyObjectTempKeeper0 call18;
                        PyObjectTempKeeper1 call20;
                        DECREASE_REFCOUNT( ( call20.assign( LOOKUP_ATTRIBUTE( _python_var_output.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call20.asObject0(), PyObjectTemporary( ( call16.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_render_option ) ), call17.assign( _python_var_selected_choices.asObject() ), call18.assign( _python_var_option_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call16.asObject0(), call17.asObject0(), call18.asObject0(), _python_var_option_label.asObject() ) ) ).asObject() ) ) );
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 540 );
        {
            PyObjectTempKeeper1 call22;
            return ( call22.assign( LOOKUP_ATTRIBUTE( _python_unicode_chr_10, _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call22.asObject0(), _python_var_output.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_selected_choices.updateLocalsDict( _python_var_choices.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_option.updateLocalsDict( _python_var_option_label.updateLocalsDict( _python_var_option_value.updateLocalsDict( _python_var_output.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets );
           frame_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_choices = NULL;
    PyObject *_python_par_selected_choices = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render_options() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render_options() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_choices == key )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render_options() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_selected_choices == key )
            {
                if (unlikely( _python_par_selected_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render_options() got multiple values for keyword argument 'selected_choices'" );
                    goto error_exit;
                }

                _python_par_selected_choices = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render_options() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_choices, key ) )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render_options() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_selected_choices, key ) )
            {
                if (unlikely( _python_par_selected_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render_options() got multiple values for keyword argument 'selected_choices'" );
                    goto error_exit;
                }

                _python_par_selected_choices = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render_options() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render_options() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render_options() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render_options() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render_options() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render_options() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render_options() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render_options() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render_options() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render_options() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render_options() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "render_options() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render_options() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render_options() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render_options() got multiple values for keyword argument 'choices'" );
             goto error_exit;
         }

        _python_par_choices = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_selected_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render_options() got multiple values for keyword argument 'selected_choices'" );
             goto error_exit;
         }

        _python_par_selected_choices = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets( self, _python_par_self, _python_par_choices, _python_par_selected_choices );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_choices );
    Py_XDECREF( _python_par_selected_choices );

    return NULL;
}

static PyObject *dparse_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_v;
};

static void _context_generator_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets_t *_python_context = (struct _context_generator_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets_t *_python_context = (_context_generator_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_v.setVariableName( _python_str_plain_v );

        // Actual function code.
        static PyFrameObject *frame_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets ) )
        {
            if ( frame_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets" );
#endif
                Py_DECREF( frame_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets );
            }

            frame_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_4bda0a7aa03d76967f9335015fde5702, _module_django__forms__widgets );
        }

        Py_INCREF( frame_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets );
        generator->m_frame = frame_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 530 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 530 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_context->python_var_v.assign0( _python_tmp_iter_value.asObject() );
                        {
                            PyObjectTempKeeper0 call1;
                            YIELD_VALUE( generator, ( call1.assign( _mvar_django__forms__widgets_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_context->python_var_v.asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets( PyObject *_python_par___iterator )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets_t *_python_context = new _context_generator_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets_context,
            _python_str_angle_genexpr,
            _codeobj_d658c809363d8f31e76003046132d6b0,
            _python_context,
            _context_generator_genexpr_1_of_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_class_23_NullBooleanSelect_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );
    PyObjectLocalVariable _python_var_value_from_datadict( _python_str_plain_value_from_datadict );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___doc__.assign0( _python_unicode_digest_8b41f2c179aa6c93b986235558f86fd3 );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets(  ) );
    _python_var_value_from_datadict.assign1( MAKE_FUNCTION_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets(  ) );
    return _python_var_value_from_datadict.updateLocalsDict( _python_var_render.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_attrs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalVariable _python_var_choices( _python_str_plain_choices );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_a3e407d54781c233d0cb1c82a83287bf, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 547 );
        {
            PyObjectTempKeeper1 make_tuple1;
            PyObjectTempKeeper1 make_tuple2;
            _python_var_choices.assign1( ( make_tuple1.assign( MAKE_TUPLE2( _python_unicode_plain_1, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__widgets_ugettext_lazy.asObject0(), _python_unicode_plain_Unknown ) ).asObject() ) ), make_tuple2.assign( MAKE_TUPLE2( _python_unicode_plain_2, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__widgets_ugettext_lazy.asObject0(), _python_unicode_plain_Yes ) ).asObject() ) ), MAKE_TUPLE3( make_tuple1.asObject0(), make_tuple2.asObject0(), PyObjectTemporary( MAKE_TUPLE2( _python_unicode_plain_3, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__widgets_ugettext_lazy.asObject0(), _python_unicode_plain_No ) ).asObject() ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 550 );
        {
            PyObjectTempKeeper1 call6;
            PyObjectTempKeeper0 call7;
            PyObjectTempKeeper0 super4;
            DECREASE_REFCOUNT( ( call6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super4.assign( _mvar_django__forms__widgets_NullBooleanSelect.asObject0() ), BUILTIN_SUPER( super4.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call7.assign( _python_var_attrs.asObject() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), call7.asObject0(), _python_var_choices.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attrs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_choices.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets );
           frame_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_attrs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }


    return impl_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets( self, _python_par_self, _python_par_attrs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_attrs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs, PyObject *_python_par_choices )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_choices( _python_str_plain_choices, _python_par_choices );

    // Actual function code.
    static PyFrameObject *frame_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets );
        }

        frame_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_7af27a3f38aaf1977e8b5c76a63cf16d, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 553 );
        try
        {
            frame_guard.setLineNumber( 554 );
            _python_var_value.assign1( LOOKUP_SUBSCRIPT( PyObjectTemporary( PyDict_Copy( _python_dict_b738ca4292f8b3acf09abc3731692fee ) ).asObject(), _python_var_value.asObject() ) );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_KeyError ) )
            {
                frame_guard.detachFrame();
                _python_var_value.assign0( _python_unicode_plain_1 );
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 557 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 call5;
            PyObjectTempKeeper0 call6;
            PyObjectTempKeeper0 super1;
            return ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_NullBooleanSelect.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_render ) ), call4.assign( _python_var_name.asObject() ), call5.assign( _python_var_value.asObject() ), call6.assign( _python_var_attrs.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), call5.asObject0(), call6.asObject0(), _python_var_choices.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_choices.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets );
           frame_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_choices = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_choices == key )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_choices, key ) )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
             goto error_exit;
         }

        _python_par_choices = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_choices == NULL )
    {
        _python_par_choices = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_choices );
    }


    return impl_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs, _python_par_choices );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_choices );

    return NULL;
}

static PyObject *dparse_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data, PyObject *_python_par_files, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalParameterVariableNoDel _python_var_files( _python_str_plain_files, _python_par_files );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );

    // Actual function code.
    static PyFrameObject *frame_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets ) )
    {
        if ( frame_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets );
        }

        frame_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_a46e747d0035d2dc58b62d372a033f07, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 560 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_value.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_data.asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_name.asObject(), Py_None ) ) );
        }
        frame_guard.setLineNumber( 561 );
        {
            PyObjectTempKeeper1 call4;
            return ( call4.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( PyDict_Copy( _python_dict_08088f1a5a72a7977a4d8589eaf8adc9 ) ).asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_value.asObject(), Py_None ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_files.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_value.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets );
           frame_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    PyObject *_python_par_files = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_files == key )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_files, key ) )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_from_datadict() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_files != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
             goto error_exit;
         }

        _python_par_files = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets( self, _python_par_self, _python_par_data, _python_par_files, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );
    Py_XDECREF( _python_par_files );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_24_SelectMultiple_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_allow_multiple_selected( _python_str_plain_allow_multiple_selected );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );
    PyObjectLocalVariable _python_var_value_from_datadict( _python_str_plain_value_from_datadict );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var_allow_multiple_selected.assign0( Py_True );
    _python_var_render.assign1( MAKE_FUNCTION_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets(  ) );
    _python_var_value_from_datadict.assign1( MAKE_FUNCTION_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets(  ) );
    return _python_var_value_from_datadict.updateLocalsDict( _python_var_render.updateLocalsDict( _python_var_allow_multiple_selected.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs, PyObject *_python_par_choices )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_choices( _python_str_plain_choices, _python_par_choices );
    PyObjectLocalVariable _python_var_final_attrs( _python_str_plain_final_attrs );
    PyObjectLocalVariable _python_var_output( _python_str_plain_output );
    PyObjectLocalVariable _python_var_options( _python_str_plain_options );

    // Actual function code.
    static PyFrameObject *frame_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets );
        }

        frame_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_b6ec47208fd731430e1b643f4fcdd002, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 573 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            _python_var_value.assign1( PyList_New( 0 ) );
        }
        frame_guard.setLineNumber( 574 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call2;
            _python_var_final_attrs.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_build_attrs ) ), call2.assign( MAKE_TUPLE1( _python_var_attrs.asObject() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_name.asObject(), _python_str_plain_name ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 575 );
        {
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 call6;
            _python_var_output.assign1( MAKE_LIST1( ( call6.assign( _mvar_django__forms__widgets_format_html.asObject0() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_unicode_digest_42278ac96d5d4bae600ee881aef19387, PyObjectTemporary( ( call4.assign( _mvar_django__forms__widgets_flatatt.asObject0() ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_final_attrs.asObject() ) ) ).asObject() ) ) ) );
        }
        frame_guard.setLineNumber( 576 );
        {
            PyObjectTempKeeper0 call10;
            PyObjectTempKeeper1 call9;
            _python_var_options.assign1( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_render_options ) ), call10.assign( _python_var_choices.asObject() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), call10.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 577 );
        if ( CHECK_IF_TRUE( _python_var_options.asObject() ) )
        {
            frame_guard.setLineNumber( 578 );
            {
                PyObjectTempKeeper1 call12;
                DECREASE_REFCOUNT( ( call12.assign( LOOKUP_ATTRIBUTE( _python_var_output.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), _python_var_options.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 579 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_output.asObject(), _python_str_plain_append ) ).asObject(), _python_unicode_digest_215ce5eabab31919de85708a54ec6a08 ) );
        frame_guard.setLineNumber( 580 );
        {
            PyObjectTempKeeper1 call14;
            PyObjectTempKeeper0 call16;
            return ( call16.assign( _mvar_django__forms__widgets_mark_safe.asObject0() ), CALL_FUNCTION_WITH_ARGS( call16.asObject0(), PyObjectTemporary( ( call14.assign( LOOKUP_ATTRIBUTE( _python_unicode_chr_10, _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), _python_var_output.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_choices.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_options.updateLocalsDict( _python_var_output.updateLocalsDict( _python_var_final_attrs.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets );
           frame_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_choices = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_choices == key )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_choices, key ) )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
             goto error_exit;
         }

        _python_par_choices = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_choices == NULL )
    {
        _python_par_choices = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_choices );
    }


    return impl_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs, _python_par_choices );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_choices );

    return NULL;
}

static PyObject *dparse_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data, PyObject *_python_par_files, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalParameterVariableNoDel _python_var_files( _python_str_plain_files, _python_par_files );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );

    // Actual function code.
    static PyFrameObject *frame_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets );
        }

        frame_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_a1737371503c7b5bc75d83dfe07ef438, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 583 );
        {
            PyObjectTempKeeper0 isinstance5;
            PyObjectTempKeeper0 make_tuple3;
            if ( ( isinstance5.assign( _python_var_data.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance5.asObject0(), PyObjectTemporary( ( make_tuple3.assign( _mvar_django__forms__widgets_MultiValueDict.asObject0() ), MAKE_TUPLE2( make_tuple3.asObject0(), _mvar_django__forms__widgets_MergeDict.asObject0() ) ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 584 );
            {
                PyObjectTempKeeper1 call1;
                return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_data.asObject(), _python_str_plain_getlist ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_name.asObject() ) );
            }
        }
        }
        frame_guard.setLineNumber( 585 );
        {
            PyObjectTempKeeper1 call7;
            return ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_data.asObject(), _python_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_name.asObject(), Py_None ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_files.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets );
           frame_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    PyObject *_python_par_files = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_files == key )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_files, key ) )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_from_datadict() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_files != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
             goto error_exit;
         }

        _python_par_files = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets( self, _python_par_self, _python_par_data, _python_par_files, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );
    Py_XDECREF( _python_par_files );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_25_ChoiceInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var_input_type( _python_str_plain_input_type );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___str__( _python_str_plain___str__ );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );
    PyObjectLocalVariable _python_var_is_checked( _python_str_plain_is_checked );
    PyObjectLocalVariable _python_var_tag( _python_str_plain_tag );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___doc__.assign0( _python_unicode_digest_645af9a9dece51286a93b3e81456e25b );
    _python_var_input_type.assign0( Py_None );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets(  ) );
    _python_var___str__.assign1( MAKE_FUNCTION_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets(  ) );
    _python_var_is_checked.assign1( MAKE_FUNCTION_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets(  ) );
    _python_var_tag.assign1( MAKE_FUNCTION_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets(  ) );
    return _python_var_tag.updateLocalsDict( _python_var_is_checked.updateLocalsDict( _python_var_render.updateLocalsDict( _python_var___str__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_input_type.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs, PyObject *_python_par_choice, PyObject *_python_par_index )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_choice( _python_str_plain_choice, _python_par_choice );
    PyObjectLocalParameterVariableNoDel _python_var_index( _python_str_plain_index, _python_par_index );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_d881b7835ea2bdc7b2727ebc822b0ad1, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 597 );
        {
                PyObject *tmp_identifier = _python_var_name.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_name );
        }
        frame_guard.setLineNumber( 598 );
        {
                PyObject *tmp_identifier = _python_var_value.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_value );
        }
        frame_guard.setLineNumber( 599 );
        {
                PyObject *tmp_identifier = _python_var_attrs.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_attrs );
        }
        frame_guard.setLineNumber( 600 );
        {
            PyObjectTempKeeper0 call1;
            {
                PyObjectTemporary tmp_identifier( ( call1.assign( _mvar_django__forms__widgets_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_choice.asObject(), _python_int_0, 0 ) ).asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_choice_value );
        }
        }
        frame_guard.setLineNumber( 601 );
        {
            PyObjectTempKeeper0 call3;
            {
                PyObjectTemporary tmp_identifier( ( call3.assign( _mvar_django__forms__widgets_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_choice.asObject(), _python_int_pos_1, 1 ) ).asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_choice_label );
        }
        }
        frame_guard.setLineNumber( 602 );
        {
                PyObject *tmp_identifier = _python_var_index.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_index );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_index.updateLocalsDict( _python_var_choice.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets );
           frame_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_choice = NULL;
    PyObject *_python_par_index = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_choice == key )
            {
                if (unlikely( _python_par_choice ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choice'" );
                    goto error_exit;
                }

                _python_par_choice = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_index == key )
            {
                if (unlikely( _python_par_index ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'index'" );
                    goto error_exit;
                }

                _python_par_index = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_choice, key ) )
            {
                if (unlikely( _python_par_choice ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choice'" );
                    goto error_exit;
                }

                _python_par_choice = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_index, key ) )
            {
                if (unlikely( _python_par_index ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'index'" );
                    goto error_exit;
                }

                _python_par_index = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 6 ))
    {
        if ( 6 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 6, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 6 == 6 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
#else
            if ( 6 == 6 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 6, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 6, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 6 ))
    {
        if ( 6 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 6, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 6 == 6 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 6, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 6, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 6 ? args_given : 6;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_choice != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choice'" );
             goto error_exit;
         }

        _python_par_choice = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_index != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'index'" );
             goto error_exit;
         }

        _python_par_index = INCREASE_REFCOUNT( args[ 5 ] );
    }


    return impl_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs, _python_par_choice, _python_par_index );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_choice );
    Py_XDECREF( _python_par_index );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6)
    {
        return impl_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets );
        }

        frame_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_a349040bb4676ca151b16e7ce05501cc, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 605 );
        return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_render ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets );
           frame_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__str__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__str__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__str__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs, PyObject *_python_par_choices )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_choices( _python_str_plain_choices, _python_par_choices );
    PyObjectLocalVariable _python_var_label_for( _python_str_plain_label_for );

    // Actual function code.
    static PyFrameObject *frame_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets );
        }

        frame_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_02d23790596660840771b5904a27d841, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 608 );
        {
            PyObjectTempKeeper0 keeper_0;
            _python_var_name.assign1( ( CHECK_IF_TRUE( keeper_0.assign( _python_var_name.asObject() ) ) ? INCREASE_REFCOUNT( keeper_0.asObject0() ) : LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ) );
        }
        frame_guard.setLineNumber( 609 );
        {
            PyObjectTempKeeper0 keeper_1;
            _python_var_value.assign1( ( CHECK_IF_TRUE( keeper_1.assign( _python_var_value.asObject() ) ) ? INCREASE_REFCOUNT( keeper_1.asObject0() ) : LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_value ) ) );
        }
        frame_guard.setLineNumber( 610 );
        {
            PyObjectTempKeeper0 keeper_2;
            _python_var_attrs.assign1( ( CHECK_IF_TRUE( keeper_2.assign( _python_var_attrs.asObject() ) ) ? INCREASE_REFCOUNT( keeper_2.asObject0() ) : LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attrs ) ) );
        }
        frame_guard.setLineNumber( 611 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_unicode_plain_id, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attrs ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 612 );
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper1 call3;
                _python_var_label_for.assign1( ( call1.assign( _mvar_django__forms__widgets_format_html.asObject0() ), call3.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attrs ) ).asObject(), _python_unicode_plain_id ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_unicode_digest_9a610f3a8d2ae971cbfd64f2ddb605b9, call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_index ) ).asObject() ) ) );
            }
        }
        else
        {
            _python_var_label_for.assign0( _python_unicode_empty );
        }
        frame_guard.setLineNumber( 615 );
        {
            PyObjectTempKeeper0 call5;
            PyObjectTempKeeper0 call7;
            PyObjectTempKeeper1 call8;
            return ( call5.assign( _mvar_django__forms__widgets_format_html.asObject0() ), call7.assign( _python_var_label_for.asObject() ), call8.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_tag ) ).asObject() ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_unicode_digest_7f03b30854095d77e9aea962e47ab3d2, call7.asObject0(), call8.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choice_label ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_choices.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_label_for.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets );
           frame_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_choices = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_choices == key )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_choices, key ) )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
             goto error_exit;
         }

        _python_par_choices = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_name == NULL )
    {
        _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_name );
    }
    if ( _python_par_value == NULL )
    {
        _python_par_value = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_value );
    }
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_choices == NULL )
    {
        _python_par_choices = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_choices );
    }


    return impl_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs, _python_par_choices );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_choices );

    return NULL;
}

static PyObject *dparse_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets );
        }

        frame_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_588438d3d4ee37ebc1a745cd833f824b, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 618 );
        {
            PyObjectTempKeeper1 cmp1;
            return ( cmp1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_value ) ), RICH_COMPARE_EQ( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choice_value ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets );
           frame_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "is_checked() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "is_checked() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "is_checked() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "is_checked() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_checked() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "is_checked() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "is_checked() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_checked() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "is_checked() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_checked() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "is_checked() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_checked() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "is_checked() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "is_checked() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "is_checked() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "is_checked() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "is_checked() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_final_attrs( _python_str_plain_final_attrs );

    // Actual function code.
    static PyFrameObject *frame_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets );
        }

        frame_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_cc789d85df07731a0ae6a33d2b3eb566, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 621 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_unicode_plain_id, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attrs ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 622 );
            {
                PyObjectTempKeeper1 make_tuple1;
                {
                    PyObjectTemporary tmp_identifier( BINARY_OPERATION_REMAINDER( _python_unicode_digest_2c4280e570e051c9f90f753460217fb9, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attrs ) ).asObject(), _python_unicode_plain_id ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_index ) ).asObject() ) ) ).asObject() ) );
                    SET_SUBSCRIPT( tmp_identifier.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attrs ) ).asObject(), _python_unicode_plain_id );
            }
            }
        }
        frame_guard.setLineNumber( 623 );
        {
            PyObjectTempKeeper1 make_dict3;
            PyObjectTempKeeper1 make_dict5;
            _python_var_final_attrs.assign1( TO_DICT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attrs ) ).asObject(), PyObjectTemporary( ( make_dict3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_input_type ) ), make_dict5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ), MAKE_DICT3( make_dict3.asObject0(), _python_str_plain_type, make_dict5.asObject0(), _python_str_plain_name, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choice_value ) ).asObject(), _python_str_plain_value ) ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 624 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_is_checked ) ).asObject() ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 625 );
            SET_SUBSCRIPT( _python_unicode_plain_checked, _python_var_final_attrs.asObject(), _python_unicode_plain_checked );
        }
        frame_guard.setLineNumber( 626 );
        {
            PyObjectTempKeeper0 call11;
            PyObjectTempKeeper0 call9;
            return ( call11.assign( _mvar_django__forms__widgets_format_html.asObject0() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _python_unicode_digest_112bd2c039828fc5ded92f3d11afdfa1, PyObjectTemporary( ( call9.assign( _mvar_django__forms__widgets_flatatt.asObject0() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_var_final_attrs.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_final_attrs.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets );
           frame_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "tag() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "tag() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "tag() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "tag() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "tag() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "tag() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "tag() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "tag() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "tag() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "tag() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "tag() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "tag() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "tag() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "tag() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "tag() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "tag() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_26_RadioChoiceInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_input_type( _python_str_plain_input_type );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var_input_type.assign0( _python_unicode_plain_radio );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets(  ) );
    return _python_var___init__.updateLocalsDict( _python_var_input_type.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_cce5810583afcefe0d4d5af96c1b595f, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 633 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_RadioChoiceInput.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp4.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 634 );
        {
            PyObjectTempKeeper0 call6;
            {
                PyObjectTemporary tmp_identifier( ( call6.assign( _mvar_django__forms__widgets_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_value ) ).asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_value );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets );
           frame_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_27_RadioInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets(  ) );
    return _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );
}


static PyObject *impl_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_msg( _python_str_plain_msg );

    // Actual function code.
    _python_var_msg.assign0( _python_unicode_digest_22f009e7fc3d5016d470af20d789aa39 );
    static PyFrameObject *frame_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_78b78758829ad861bfdc05cbfa75c205, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 640 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 make_tuple1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_warnings.asObject0(), _python_str_plain_warn ) ), CALL_FUNCTION( call3.asObject0(), PyObjectTemporary( ( make_tuple1.assign( _python_var_msg.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _mvar_django__forms__widgets_PendingDeprecationWarning.asObject0() ) ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_f154c9a58c9419d7e391901d7b7fe49e ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 641 );
        {
            PyObjectTempKeeper1 call_tmp8;
            PyObjectTempKeeper0 call_tmp9;
            PyObjectTempKeeper0 super6;
            DECREASE_REFCOUNT( ( call_tmp8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super6.assign( _mvar_django__forms__widgets_RadioInput.asObject0() ), BUILTIN_SUPER( super6.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp9.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp8.asObject(), call_tmp9.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_msg.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets );
           frame_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_28_CheckboxChoiceInput_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_input_type( _python_str_plain_input_type );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_is_checked( _python_str_plain_is_checked );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var_input_type.assign0( _python_unicode_plain_checkbox );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets(  ) );
    _python_var_is_checked.assign1( MAKE_FUNCTION_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets(  ) );
    return _python_var_is_checked.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_input_type.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_5f5f80180fb0abd5f1133c21d02efcb8, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 648 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_CheckboxChoiceInput.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp4.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 649 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( impl_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_value ) ).asObject() ) ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_value );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets );
           frame_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_v;
};

static void _context_generator_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets_t *_python_context = (struct _context_generator_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets_t *_python_context = (_context_generator_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_v.setVariableName( _python_str_plain_v );

        // Actual function code.
        static PyFrameObject *frame_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets ) )
        {
            if ( frame_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets" );
#endif
                Py_DECREF( frame_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets );
            }

            frame_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_d1b2e289213ec4d17815b41c086d9fe3, _module_django__forms__widgets );
        }

        Py_INCREF( frame_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets );
        generator->m_frame = frame_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 649 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 649 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_context->python_var_v.assign0( _python_tmp_iter_value.asObject() );
                        {
                            PyObjectTempKeeper0 call1;
                            YIELD_VALUE( generator, ( call1.assign( _mvar_django__forms__widgets_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_context->python_var_v.asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets( PyObject *_python_par___iterator )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets_t *_python_context = new _context_generator_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets_context,
            _python_str_angle_genexpr,
            _codeobj_ae10cbd6dd12b37e28abd541f7d52a7b,
            _python_context,
            _context_generator_genexpr_1_of_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}


static PyObject *impl_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets );
        }

        frame_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_8929f2c6fe9d42219f8728b8cd8224e8, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 652 );
        {
            PyObjectTempKeeper1 cmp1;
            return INCREASE_REFCOUNT( ( cmp1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choice_value ) ), SEQUENCE_CONTAINS( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_value ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets );
           frame_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "is_checked() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "is_checked() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "is_checked() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "is_checked() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_checked() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "is_checked() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "is_checked() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_checked() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "is_checked() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_checked() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "is_checked() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_checked() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "is_checked() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "is_checked() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "is_checked() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "is_checked() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "is_checked() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var_choice_input_class( _python_str_plain_choice_input_class );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___iter__( _python_str_plain___iter__ );
    PyObjectLocalVariable _python_var___getitem__( _python_str_plain___getitem__ );
    PyObjectLocalVariable _python_var___str__( _python_str_plain___str__ );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___doc__.assign0( _python_unicode_digest_f0640c50f70c6d80898b763a74e3be4b );
    _python_var_choice_input_class.assign0( Py_None );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  ) );
    _python_var___iter__.assign1( MAKE_FUNCTION_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  ) );
    _python_var___getitem__.assign1( MAKE_FUNCTION_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  ) );
    _python_var___str__.assign1( MAKE_FUNCTION_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  ) );
    return _python_var_render.updateLocalsDict( _python_var___str__.updateLocalsDict( _python_var___getitem__.updateLocalsDict( _python_var___iter__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_choice_input_class.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs, PyObject *_python_par_choices )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_choices( _python_str_plain_choices, _python_par_choices );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_6390ec65dde882bb332cca7c34b6a726, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 664 );
        {
                PyObject *tmp_identifier = _python_var_name.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_name );
        }
        frame_guard.setLineNumber( 665 );
        {
                PyObject *tmp_identifier = _python_var_value.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_value );
        }
        frame_guard.setLineNumber( 666 );
        {
                PyObject *tmp_identifier = _python_var_attrs.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_attrs );
        }
        frame_guard.setLineNumber( 667 );
        {
                PyObject *tmp_identifier = _python_var_choices.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_choices );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_choices.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets );
           frame_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_choices = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_choices == key )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_choices, key ) )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 5 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 5 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 5 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 5 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 5, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 5, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choices'" );
             goto error_exit;
         }

        _python_par_choices = INCREASE_REFCOUNT( args[ 4 ] );
    }


    return impl_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs, _python_par_choices );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_choices );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel python_var_self;
    PyObjectLocalVariable python_var_i;
    PyObjectLocalVariable python_var_choice;
};

static void _context_generator_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets_destructor( void *context_voidptr )
{
    _context_generator_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets_t *_python_context = (struct _context_generator_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets_t *)context_voidptr;

    delete _python_context;
}

static void function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets_t *_python_context = (_context_generator_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_i.setVariableName( _python_str_plain_i );
        _python_context->python_var_choice.setVariableName( _python_str_plain_choice );

        // Actual function code.
        static PyFrameObject *frame_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets ) )
        {
            if ( frame_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets )
            {
#if _DEBUG_REFRAME
                puts( "reframe for function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets" );
#endif
                Py_DECREF( frame_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets );
            }

            frame_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_bbf9c5bb949ab2a664097788c3801fab, _module_django__forms__widgets );
        }

        Py_INCREF( frame_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets );
        generator->m_frame = frame_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                frame_guard.setLineNumber( 670 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_choices ) ).asObject() ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 670 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        {
                            frame_guard.setLineNumber( 670 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_context->python_var_i.assign0( _python_tmp_element_1.asObject() );
                            _python_context->python_var_choice.assign0( _python_tmp_element_2.asObject() );
                        }
                    }
                    frame_guard.setLineNumber( 671 );
                    {
                        PyObjectTempKeeper1 call1;
                        PyObjectTempKeeper1 call2;
                        PyObjectTempKeeper1 call3;
                        PyObjectTempKeeper1 call4;
                        PyObjectTempKeeper0 call5;
                        YIELD_VALUE( generator, ( call1.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_choice_input_class ) ), call2.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_name ) ), call3.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_value ) ), call4.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_attrs ) ).asObject(), _python_str_plain_copy ) ).asObject() ) ), call5.assign( _python_context->python_var_choice.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), call4.asObject0(), call5.asObject0(), _python_context->python_var_i.asObject() ) ) );
                    }

                   CONSIDER_THREADING();
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // Create context if any
    struct _context_generator_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets_t *_python_context = new _context_generator_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets_context,
            _python_str_plain___iter__,
            _codeobj_bbf9c5bb949ab2a664097788c3801fab,
            _python_context,
            _context_generator_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function __iter__" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var_self.setVariableNameAndValue( _python_str_plain_self, _python_par_self );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}
static PyObject *fparse_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__iter__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__iter__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__iter__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__iter__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__iter__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__iter__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_idx )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_idx( _python_str_plain_idx, _python_par_idx );
    PyObjectLocalVariable _python_var_choice( _python_str_plain_choice );

    // Actual function code.
    static PyFrameObject *frame_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets ) )
    {
        if ( frame_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets );
        }

        frame_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_44b5fb43f03e8373195ce275f431902d, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 674 );
        {
            PyObjectTempKeeper1 subscr1;
            _python_var_choice.assign1( ( subscr1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), _python_var_idx.asObject() ) ) );
        }
        frame_guard.setLineNumber( 675 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 call4;
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper1 call6;
            PyObjectTempKeeper0 call7;
            return ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choice_input_class ) ), call4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ), call5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_value ) ), call6.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attrs ) ).asObject(), _python_str_plain_copy ) ).asObject() ) ), call7.assign( _python_var_choice.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), call5.asObject0(), call6.asObject0(), call7.asObject0(), _python_var_idx.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_idx.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_choice.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets );
           frame_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_idx = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_idx == key )
            {
                if (unlikely( _python_par_idx ))
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'idx'" );
                    goto error_exit;
                }

                _python_par_idx = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_idx, key ) )
            {
                if (unlikely( _python_par_idx ))
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'idx'" );
                    goto error_exit;
                }

                _python_par_idx = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__getitem__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__getitem__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__getitem__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_idx != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__getitem__() got multiple values for keyword argument 'idx'" );
             goto error_exit;
         }

        _python_par_idx = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( self, _python_par_self, _python_par_idx );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_idx );

    return NULL;
}

static PyObject *dparse_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets ) )
    {
        if ( frame_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets );
        }

        frame_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_56c5bfa7fb06f8acf39d05942f291008, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 678 );
        return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_render ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets );
           frame_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__str__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__str__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__str__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__str__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__str__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__str__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_id_( _python_str_plain_id_ );
    PyObjectLocalVariable _python_var_start_tag( _python_str_plain_start_tag );
    PyObjectLocalVariable _python_var_output( _python_str_plain_output );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );

    // Actual function code.
    static PyFrameObject *frame_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets ) )
    {
        if ( frame_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets );
        }

        frame_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_3423ec490449e0f605d4cebd8282f44c, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 686 );
        _python_var_id_.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attrs ) ).asObject(), _python_str_plain_get ) ).asObject(), _python_unicode_plain_id, Py_None ) );
        frame_guard.setLineNumber( 687 );
        {
            PyObjectTempKeeper0 call1;
            _python_var_start_tag.assign1( ( CHECK_IF_TRUE( _python_var_id_.asObject() ) ? ( call1.assign( _mvar_django__forms__widgets_format_html.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_unicode_digest_ef24e4bb8ea6bac24af521fe0af83043, _python_var_id_.asObject() ) ) : INCREASE_REFCOUNT( _python_unicode_angle_ul ) ) );
        }
        frame_guard.setLineNumber( 688 );
        _python_var_output.assign1( MAKE_LIST1( _python_var_start_tag.asObject1() ) );
        {
            frame_guard.setLineNumber( 689 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_self.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 689 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_widget.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 690 );
                {
                    PyObjectTempKeeper0 call4;
                    PyObjectTempKeeper0 call6;
                    PyObjectTempKeeper1 call9;
                    DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_output.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), PyObjectTemporary( ( call6.assign( _mvar_django__forms__widgets_format_html.asObject0() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_unicode_digest_09482d26fc81f630c6f3a7a6f77d102a, PyObjectTemporary( ( call4.assign( _mvar_django__forms__widgets_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_widget.asObject() ) ) ).asObject() ) ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 691 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_output.asObject(), _python_str_plain_append ) ).asObject(), _python_unicode_digest_9bf6f7ea027d82ffd3e42c8ce420975d ) );
        frame_guard.setLineNumber( 692 );
        {
            PyObjectTempKeeper1 call11;
            PyObjectTempKeeper0 call13;
            return ( call13.assign( _mvar_django__forms__widgets_mark_safe.asObject0() ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), PyObjectTemporary( ( call11.assign( LOOKUP_ATTRIBUTE( _python_unicode_chr_10, _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _python_var_output.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var_output.updateLocalsDict( _python_var_start_tag.updateLocalsDict( _python_var_id_.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets );
           frame_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_30_RadioFieldRenderer_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_choice_input_class( _python_str_plain_choice_input_class );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    static PyFrameObject *frame_class_30_RadioFieldRenderer_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_class_30_RadioFieldRenderer_of_module_django__forms__widgets ) )
    {
        if ( frame_class_30_RadioFieldRenderer_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_30_RadioFieldRenderer_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_class_30_RadioFieldRenderer_of_module_django__forms__widgets );
        }

        frame_class_30_RadioFieldRenderer_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_fb756268d2c7d017d263613e6b479a3a, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_class_30_RadioFieldRenderer_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_class_30_RadioFieldRenderer_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 696 );
        _python_var_choice_input_class.assign0( _mvar_django__forms__widgets_RadioChoiceInput.asObject0() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_choice_input_class.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_class_30_RadioFieldRenderer_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_class_30_RadioFieldRenderer_of_module_django__forms__widgets );
           frame_class_30_RadioFieldRenderer_of_module_django__forms__widgets = NULL;
        }

        throw;
    }
    return _python_var_choice_input_class.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );
}


NUITKA_LOCAL_MODULE PyObject *impl_class_31_CheckboxFieldRenderer_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_choice_input_class( _python_str_plain_choice_input_class );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    static PyFrameObject *frame_class_31_CheckboxFieldRenderer_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_class_31_CheckboxFieldRenderer_of_module_django__forms__widgets ) )
    {
        if ( frame_class_31_CheckboxFieldRenderer_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_31_CheckboxFieldRenderer_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_class_31_CheckboxFieldRenderer_of_module_django__forms__widgets );
        }

        frame_class_31_CheckboxFieldRenderer_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_067d7161153acde97b0b5ecdab9f8c85, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_class_31_CheckboxFieldRenderer_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_class_31_CheckboxFieldRenderer_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 700 );
        _python_var_choice_input_class.assign0( _mvar_django__forms__widgets_CheckboxChoiceInput.asObject0() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_choice_input_class.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_class_31_CheckboxFieldRenderer_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_class_31_CheckboxFieldRenderer_of_module_django__forms__widgets );
           frame_class_31_CheckboxFieldRenderer_of_module_django__forms__widgets = NULL;
        }

        throw;
    }
    return _python_var_choice_input_class.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );
}


NUITKA_LOCAL_MODULE PyObject *impl_class_32_RendererMixin_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_renderer( _python_str_plain_renderer );
    PyObjectLocalVariable _python_var__empty_value( _python_str_plain__empty_value );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_subwidgets( _python_str_plain_subwidgets );
    PyObjectLocalVariable _python_var_get_renderer( _python_str_plain_get_renderer );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );
    PyObjectLocalVariable _python_var_id_for_label( _python_str_plain_id_for_label );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var_renderer.assign0( Py_None );
    _python_var__empty_value.assign0( Py_None );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets(  ) );
    _python_var_subwidgets.assign1( MAKE_FUNCTION_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets(  ) );
    _python_var_get_renderer.assign1( MAKE_FUNCTION_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets(  ) );
    _python_var_id_for_label.assign1( MAKE_FUNCTION_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets(  ) );
    return _python_var_id_for_label.updateLocalsDict( _python_var_render.updateLocalsDict( _python_var_get_renderer.updateLocalsDict( _python_var_subwidgets.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var__empty_value.updateLocalsDict( _python_var_renderer.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_renderer( _python_str_plain_renderer );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_e9675382f17d22c3b62a9ba0aceeb135, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 709 );
        _python_var_renderer.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_unicode_plain_renderer, Py_None ) );
        frame_guard.setLineNumber( 710 );
        if ( CHECK_IF_TRUE( _python_var_renderer.asObject() ) )
        {
            frame_guard.setLineNumber( 711 );
            {
                    PyObject *tmp_identifier = _python_var_renderer.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_renderer );
            }
        }
        frame_guard.setLineNumber( 712 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_RendererMixin.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp4.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_renderer.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets );
           frame_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel python_var_self;
    PyObjectLocalParameterVariableNoDel python_var_name;
    PyObjectLocalParameterVariableNoDel python_var_value;
    PyObjectLocalParameterVariableNoDel python_var_attrs;
    PyObjectLocalParameterVariableNoDel python_var_choices;
    PyObjectLocalVariable python_var_widget;
};

static void _context_generator_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets_destructor( void *context_voidptr )
{
    _context_generator_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets_t *_python_context = (struct _context_generator_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets_t *)context_voidptr;

    delete _python_context;
}

static void function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets_t *_python_context = (_context_generator_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_widget.setVariableName( _python_str_plain_widget );

        // Actual function code.
        static PyFrameObject *frame_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets ) )
        {
            if ( frame_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets )
            {
#if _DEBUG_REFRAME
                puts( "reframe for function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets" );
#endif
                Py_DECREF( frame_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets );
            }

            frame_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_68938eedfea003a0243a645ad8345b97, _module_django__forms__widgets );
        }

        Py_INCREF( frame_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets );
        generator->m_frame = frame_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                frame_guard.setLineNumber( 715 );
                PyObject *_tmp_python_tmp_for_iterator;
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper0 call2;
                    PyObjectTempKeeper0 call3;
                    PyObjectTempKeeper0 call4;
                    _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_self.asObject(), _python_str_plain_get_renderer ) ), call2.assign( _python_context->python_var_name.asObject() ), call3.assign( _python_context->python_var_value.asObject() ), call4.assign( _python_context->python_var_attrs.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), call4.asObject0(), _python_context->python_var_choices.asObject() ) ) ).asObject() );
                }
                PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 715 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_context->python_var_widget.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 716 );
                    YIELD_VALUE( generator, _python_context->python_var_widget.asObject1() );

                   CONSIDER_THREADING();
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs, PyObject *_python_par_choices )
{
    // Create context if any
    struct _context_generator_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets_t *_python_context = new _context_generator_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets_context,
            _python_str_plain_subwidgets,
            _codeobj_68938eedfea003a0243a645ad8345b97,
            _python_context,
            _context_generator_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function subwidgets" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var_self.setVariableNameAndValue( _python_str_plain_self, _python_par_self );
        _python_context->python_var_name.setVariableNameAndValue( _python_str_plain_name, _python_par_name );
        _python_context->python_var_value.setVariableNameAndValue( _python_str_plain_value, _python_par_value );
        _python_context->python_var_attrs.setVariableNameAndValue( _python_str_plain_attrs, _python_par_attrs );
        _python_context->python_var_choices.setVariableNameAndValue( _python_str_plain_choices, _python_par_choices );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}
static PyObject *fparse_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_choices = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "subwidgets() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_choices == key )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_choices, key ) )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "subwidgets() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "subwidgets() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "subwidgets() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "subwidgets() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "subwidgets() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "subwidgets() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "subwidgets() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "subwidgets() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "subwidgets() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "subwidgets() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "subwidgets() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "subwidgets() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "subwidgets() got multiple values for keyword argument 'choices'" );
             goto error_exit;
         }

        _python_par_choices = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_choices == NULL )
    {
        _python_par_choices = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_choices );
    }


    return impl_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs, _python_par_choices );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_choices );

    return NULL;
}

static PyObject *dparse_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs, PyObject *_python_par_choices )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_choices( _python_str_plain_choices, _python_par_choices );
    PyObjectLocalVariable _python_var_final_attrs( _python_str_plain_final_attrs );

    // Actual function code.
    static PyFrameObject *frame_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets ) )
    {
        if ( frame_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets );
        }

        frame_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_6b0e50239c7c1946bd5344b3976e627b, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 720 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 721 );
            _python_var_value.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__empty_value ) );
        }
        frame_guard.setLineNumber( 722 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_final_attrs.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_build_attrs ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_attrs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 723 );
        {
            PyObjectTempKeeper0 call3;
            PyObjectTempKeeper1 call4;
            _python_var_choices.assign1( TO_LIST( PyObjectTemporary( ( call3.assign( _mvar_django__forms__widgets_chain.asObject0() ), call4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_choices.asObject() ) ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 724 );
        {
            PyObjectTempKeeper1 call6;
            PyObjectTempKeeper0 call7;
            PyObjectTempKeeper0 call8;
            PyObjectTempKeeper0 call9;
            return ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_renderer ) ), call7.assign( _python_var_name.asObject() ), call8.assign( _python_var_value.asObject() ), call9.assign( _python_var_final_attrs.asObject() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), call7.asObject0(), call8.asObject0(), call9.asObject0(), _python_var_choices.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_choices.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_final_attrs.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets );
           frame_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_choices = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_renderer() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_renderer() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "get_renderer() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_renderer() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "get_renderer() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_choices == key )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "get_renderer() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_renderer() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "get_renderer() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_renderer() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "get_renderer() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_choices, key ) )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "get_renderer() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_renderer() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_renderer() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_renderer() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_renderer() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_renderer() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_renderer() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_renderer() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_renderer() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_renderer() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_renderer() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_renderer() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "get_renderer() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_renderer() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_renderer() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_renderer() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_renderer() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_renderer() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_renderer() got multiple values for keyword argument 'choices'" );
             goto error_exit;
         }

        _python_par_choices = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_choices == NULL )
    {
        _python_par_choices = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_choices );
    }


    return impl_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs, _python_par_choices );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_choices );

    return NULL;
}

static PyObject *dparse_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs, PyObject *_python_par_choices )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_choices( _python_str_plain_choices, _python_par_choices );

    // Actual function code.
    static PyFrameObject *frame_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets ) )
    {
        if ( frame_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets );
        }

        frame_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_aae845fe532383bd264e1ad9b6ab679e, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 727 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            PyObjectTempKeeper0 call3;
            PyObjectTempKeeper0 call4;
            return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_renderer ) ), call2.assign( _python_var_name.asObject() ), call3.assign( _python_var_value.asObject() ), call4.assign( _python_var_attrs.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), call4.asObject0(), _python_var_choices.asObject() ) ) ).asObject(), _python_str_plain_render ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_choices.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets );
           frame_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_choices = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_choices == key )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_choices, key ) )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'choices'" );
             goto error_exit;
         }

        _python_par_choices = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_choices == NULL )
    {
        _python_par_choices = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_choices );
    }


    return impl_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs, _python_par_choices );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_choices );

    return NULL;
}

static PyObject *dparse_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_id_ )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_id_( _python_str_plain_id_, _python_par_id_ );

    // Actual function code.
    static PyFrameObject *frame_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets ) )
    {
        if ( frame_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets );
        }

        frame_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_13fb7616f64fcc99a55e65b15a1474fc, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 735 );
        if ( CHECK_IF_TRUE( _python_var_id_.asObject() ) )
        {
            {
                frame_guard.setLineNumber( 736 );
                PyObject *_python_tmp_inplace_start = _python_var_id_.asObject();
                PyObjectTemporary _python_tmp_inplace_end( BINARY_OPERATION( PyNumber_InPlaceAdd, _python_tmp_inplace_start, _python_unicode_plain__0 ) );
                if ( ( _python_tmp_inplace_start != _python_tmp_inplace_end.asObject() ) )
                {
                    _python_var_id_.assign0( _python_tmp_inplace_end.asObject() );
                }
            }
        }
        frame_guard.setLineNumber( 737 );
        return _python_var_id_.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_id_.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets );
           frame_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_id_ = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_id_ == key )
            {
                if (unlikely( _python_par_id_ ))
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'id_'" );
                    goto error_exit;
                }

                _python_par_id_ = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_id_, key ) )
            {
                if (unlikely( _python_par_id_ ))
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'id_'" );
                    goto error_exit;
                }

                _python_par_id_ = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "id_for_label() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "id_for_label() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_id_ != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'id_'" );
             goto error_exit;
         }

        _python_par_id_ = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets( self, _python_par_self, _python_par_id_ );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_id_ );

    return NULL;
}

static PyObject *dparse_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_33_RadioSelect_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_renderer( _python_str_plain_renderer );
    PyObjectLocalVariable _python_var__empty_value( _python_str_plain__empty_value );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    static PyFrameObject *frame_class_33_RadioSelect_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_class_33_RadioSelect_of_module_django__forms__widgets ) )
    {
        if ( frame_class_33_RadioSelect_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_33_RadioSelect_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_class_33_RadioSelect_of_module_django__forms__widgets );
        }

        frame_class_33_RadioSelect_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_795f974281a5ffcf8ca492e07ae60cba, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_class_33_RadioSelect_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_class_33_RadioSelect_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 741 );
        _python_var_renderer.assign0( _mvar_django__forms__widgets_RadioFieldRenderer.asObject0() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var__empty_value.updateLocalsDict( _python_var_renderer.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_class_33_RadioSelect_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_class_33_RadioSelect_of_module_django__forms__widgets );
           frame_class_33_RadioSelect_of_module_django__forms__widgets = NULL;
        }

        throw;
    }
    _python_var__empty_value.assign0( _python_unicode_empty );
    return _python_var__empty_value.updateLocalsDict( _python_var_renderer.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


NUITKA_LOCAL_MODULE PyObject *impl_class_34_CheckboxSelectMultiple_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_renderer( _python_str_plain_renderer );
    PyObjectLocalVariable _python_var__empty_value( _python_str_plain__empty_value );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    static PyFrameObject *frame_class_34_CheckboxSelectMultiple_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_class_34_CheckboxSelectMultiple_of_module_django__forms__widgets ) )
    {
        if ( frame_class_34_CheckboxSelectMultiple_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_34_CheckboxSelectMultiple_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_class_34_CheckboxSelectMultiple_of_module_django__forms__widgets );
        }

        frame_class_34_CheckboxSelectMultiple_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_25241bb332ece6f14e84eb01bb2da4e2, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_class_34_CheckboxSelectMultiple_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_class_34_CheckboxSelectMultiple_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 746 );
        _python_var_renderer.assign0( _mvar_django__forms__widgets_CheckboxFieldRenderer.asObject0() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var__empty_value.updateLocalsDict( _python_var_renderer.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_class_34_CheckboxSelectMultiple_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_class_34_CheckboxSelectMultiple_of_module_django__forms__widgets );
           frame_class_34_CheckboxSelectMultiple_of_module_django__forms__widgets = NULL;
        }

        throw;
    }
    _python_var__empty_value.assign1( PyList_New( 0 ) );
    return _python_var__empty_value.updateLocalsDict( _python_var_renderer.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


NUITKA_LOCAL_MODULE PyObject *impl_class_35_MultiWidget_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_render( _python_str_plain_render );
    PyObjectLocalVariable _python_var_id_for_label( _python_str_plain_id_for_label );
    PyObjectLocalVariable _python_var_value_from_datadict( _python_str_plain_value_from_datadict );
    PyObjectLocalVariable _python_var_format_output( _python_str_plain_format_output );
    PyObjectLocalVariable _python_var_decompress( _python_str_plain_decompress );
    PyObjectLocalVariable _python_var__get_media( _python_str_plain__get_media );
    PyObjectLocalVariable _python_var_media( _python_str_plain_media );
    PyObjectLocalVariable _python_var___deepcopy__( _python_str_plain___deepcopy__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___doc__.assign0( _python_unicode_digest_6adc352c119a8ce75435eccbddf201bb );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets(  ) );
    _python_var_render.assign1( MAKE_FUNCTION_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets(  ) );
    _python_var_id_for_label.assign1( MAKE_FUNCTION_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets(  ) );
    _python_var_value_from_datadict.assign1( MAKE_FUNCTION_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets(  ) );
    _python_var_format_output.assign1( MAKE_FUNCTION_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets(  ) );
    _python_var_decompress.assign1( MAKE_FUNCTION_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets(  ) );
    _python_var__get_media.assign1( MAKE_FUNCTION_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets(  ) );
    static PyFrameObject *frame_class_35_MultiWidget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_class_35_MultiWidget_of_module_django__forms__widgets ) )
    {
        if ( frame_class_35_MultiWidget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_35_MultiWidget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_class_35_MultiWidget_of_module_django__forms__widgets );
        }

        frame_class_35_MultiWidget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_d42024883ab4dedeccbeb5cd6034a178, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_class_35_MultiWidget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_class_35_MultiWidget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 835 );
        _python_var_media.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), _python_var__get_media.asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var___deepcopy__.updateLocalsDict( _python_var_media.updateLocalsDict( _python_var__get_media.updateLocalsDict( _python_var_decompress.updateLocalsDict( _python_var_format_output.updateLocalsDict( _python_var_value_from_datadict.updateLocalsDict( _python_var_id_for_label.updateLocalsDict( _python_var_render.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_35_MultiWidget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_class_35_MultiWidget_of_module_django__forms__widgets );
           frame_class_35_MultiWidget_of_module_django__forms__widgets = NULL;
        }

        throw;
    }
    _python_var___deepcopy__.assign1( MAKE_FUNCTION_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets(  ) );
    return _python_var___deepcopy__.updateLocalsDict( _python_var_media.updateLocalsDict( _python_var__get_media.updateLocalsDict( _python_var_decompress.updateLocalsDict( _python_var_format_output.updateLocalsDict( _python_var_value_from_datadict.updateLocalsDict( _python_var_id_for_label.updateLocalsDict( _python_var_render.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_widgets, PyObject *_python_par_attrs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_widgets( _python_str_plain_widgets, _python_par_widgets );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalVariable _python_var_w( _python_str_plain_w );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_8d7bacf14199e2a8aeb75413df5202a2, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 778 );
        {
                PyObjectTemporary tmp_identifier( impl_listcontr_1_of_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets( MAKE_ITERATOR( _python_var_widgets.asObject() ), _python_var_w ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_widgets );
        }
        frame_guard.setLineNumber( 779 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_MultiWidget.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_attrs.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attrs.updateLocalsDict( _python_var_widgets.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_w.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets );
           frame_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_widgets = NULL;
    PyObject *_python_par_attrs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_widgets == key )
            {
                if (unlikely( _python_par_widgets ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'widgets'" );
                    goto error_exit;
                }

                _python_par_widgets = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_widgets, key ) )
            {
                if (unlikely( _python_par_widgets ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'widgets'" );
                    goto error_exit;
                }

                _python_par_widgets = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_widgets != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'widgets'" );
             goto error_exit;
         }

        _python_par_widgets = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }


    return impl_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets( self, _python_par_self, _python_par_widgets, _python_par_attrs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_widgets );
    Py_XDECREF( _python_par_attrs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_w )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 778 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 778 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_w.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( BUILTIN_ISINSTANCE_BOOL( python_closure_w.asObject(), LOOKUP_BUILTIN( _python_str_plain_type ) ) ? CALL_FUNCTION_NO_ARGS( python_closure_w.asObject() ) : INCREASE_REFCOUNT( python_closure_w.asObject() ) ) ).asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name, PyObject *_python_par_value, PyObject *_python_par_attrs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );
    PyObjectLocalVariable _python_var_output( _python_str_plain_output );
    PyObjectLocalVariable _python_var_final_attrs( _python_str_plain_final_attrs );
    PyObjectLocalVariable _python_var_id_( _python_str_plain_id_ );
    PyObjectLocalVariable _python_var_i( _python_str_plain_i );
    PyObjectLocalVariable _python_var_widget_value( _python_str_plain_widget_value );

    // Actual function code.
    static PyFrameObject *frame_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets );
        }

        frame_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_b4a9d23f194e59f3e8a99f33e0ab6adf, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 782 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_is_localized ) ).asObject() ) )
        {
            {
                frame_guard.setLineNumber( 783 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_widgets ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 783 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_var_widget.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 784 );
                    {
                            PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_is_localized ) );
                            SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_widget.asObject(), _python_str_plain_is_localized );
                    }

                   CONSIDER_THREADING();
                }
            }
        }
        frame_guard.setLineNumber( 787 );
        if ( (!( BUILTIN_ISINSTANCE_BOOL( _python_var_value.asObject(), LOOKUP_BUILTIN( _python_str_plain_list ) ) )) )
        {
            frame_guard.setLineNumber( 788 );
            {
                PyObjectTempKeeper1 call1;
                _python_var_value.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_decompress ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        _python_var_output.assign1( PyList_New( 0 ) );
        frame_guard.setLineNumber( 790 );
        {
            PyObjectTempKeeper1 call3;
            _python_var_final_attrs.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_build_attrs ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_attrs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 791 );
        _python_var_id_.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_final_attrs.asObject(), _python_str_plain_get ) ).asObject(), _python_unicode_plain_id, Py_None ) );
        {
            frame_guard.setLineNumber( 792 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_widgets ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 792 );
                    PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_2 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                    {
                        frame_guard.setLineNumber( 792 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_i.assign0( _python_tmp_element_1.asObject() );
                        _python_var_widget.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 793 );
                try
                {
                    frame_guard.setLineNumber( 794 );
                    {
                        PyObjectTempKeeper0 subscr5;
                        _python_var_widget_value.assign1( ( subscr5.assign( _python_var_value.asObject() ), LOOKUP_SUBSCRIPT( subscr5.asObject0(), _python_var_i.asObject() ) ) );
                    }
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( PyExc_IndexError ) )
                    {
                        frame_guard.detachFrame();
                        _python_var_widget_value.assign0( Py_None );
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }
                frame_guard.setLineNumber( 797 );
                if ( CHECK_IF_TRUE( _python_var_id_.asObject() ) )
                {
                    frame_guard.setLineNumber( 798 );
                    {
                        PyObjectTempKeeper0 make_tuple7;
                        _python_var_final_attrs.assign1( TO_DICT( _python_var_final_attrs.asObject(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_2c4280e570e051c9f90f753460217fb9, PyObjectTemporary( ( make_tuple7.assign( _python_var_id_.asObject() ), MAKE_TUPLE2( make_tuple7.asObject0(), _python_var_i.asObject() ) ) ).asObject() ) ).asObject(), _python_str_plain_id ) ).asObject() ) );
                    }
                }
                frame_guard.setLineNumber( 799 );
                {
                    PyObjectTempKeeper1 call11;
                    PyObjectTempKeeper1 call12;
                    PyObjectTempKeeper0 call13;
                    PyObjectTempKeeper1 call15;
                    PyObjectTempKeeper0 op9;
                    DECREASE_REFCOUNT( ( call15.assign( LOOKUP_ATTRIBUTE( _python_var_output.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), PyObjectTemporary( ( call11.assign( LOOKUP_ATTRIBUTE( _python_var_widget.asObject(), _python_str_plain_render ) ), call12.assign( ( op9.assign( _python_var_name.asObject() ), BINARY_OPERATION_ADD( op9.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_c74b822dac82f0ca20e278f0236d4ada, _python_var_i.asObject() ) ).asObject() ) ) ), call13.assign( _python_var_widget_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), call12.asObject0(), call13.asObject0(), _python_var_final_attrs.asObject() ) ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 800 );
        {
            PyObjectTempKeeper1 call17;
            PyObjectTempKeeper0 call19;
            return ( call19.assign( _mvar_django__forms__widgets_mark_safe.asObject0() ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), PyObjectTemporary( ( call17.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_format_output ) ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), _python_var_output.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attrs.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_widget_value.updateLocalsDict( _python_var_i.updateLocalsDict( _python_var_id_.updateLocalsDict( _python_var_final_attrs.updateLocalsDict( _python_var_output.updateLocalsDict( _python_var_widget.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets );
           frame_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_attrs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "render() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "render() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "render() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "render() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "render() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "render() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "render() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "render() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "render() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }


    return impl_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets( self, _python_par_self, _python_par_name, _python_par_value, _python_par_attrs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_attrs );

    return NULL;
}

static PyObject *dparse_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_id_ )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_id_( _python_str_plain_id_, _python_par_id_ );

    // Actual function code.
    static PyFrameObject *frame_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets );
        }

        frame_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_beecf0fe2fd3a9ce8f3804f0a0e100fa, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 804 );
        if ( CHECK_IF_TRUE( _python_var_id_.asObject() ) )
        {
            {
                frame_guard.setLineNumber( 805 );
                PyObject *_python_tmp_inplace_start = _python_var_id_.asObject();
                PyObjectTemporary _python_tmp_inplace_end( BINARY_OPERATION( PyNumber_InPlaceAdd, _python_tmp_inplace_start, _python_unicode_plain__0 ) );
                if ( ( _python_tmp_inplace_start != _python_tmp_inplace_end.asObject() ) )
                {
                    _python_var_id_.assign0( _python_tmp_inplace_end.asObject() );
                }
            }
        }
        frame_guard.setLineNumber( 806 );
        return _python_var_id_.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_id_.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets );
           frame_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_id_ = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_id_ == key )
            {
                if (unlikely( _python_par_id_ ))
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'id_'" );
                    goto error_exit;
                }

                _python_par_id_ = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_id_, key ) )
            {
                if (unlikely( _python_par_id_ ))
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'id_'" );
                    goto error_exit;
                }

                _python_par_id_ = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "id_for_label() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "id_for_label() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "id_for_label() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_id_ != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "id_for_label() got multiple values for keyword argument 'id_'" );
             goto error_exit;
         }

        _python_par_id_ = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets( self, _python_par_self, _python_par_id_ );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_id_ );

    return NULL;
}

static PyObject *dparse_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data, PyObject *_python_par_files, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalParameterVariableNoDel _python_var_files( _python_str_plain_files, _python_par_files );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalVariable _python_var_i( _python_str_plain_i );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );

    // Actual function code.
    static PyFrameObject *frame_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets );
        }

        frame_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_9c5ae057e47ad37dcd6e173d3ab93499, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 809 );
        return impl_listcontr_1_of_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_widgets ) ).asObject() ) ).asObject() ), _python_var_data, _python_var_files, _python_var_i, _python_var_name, _python_var_widget );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_files.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var_i.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets );
           frame_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    PyObject *_python_par_files = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_files == key )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_files, key ) )
            {
                if (unlikely( _python_par_files ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
                    goto error_exit;
                }

                _python_par_files = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_from_datadict() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_from_datadict() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_files != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'files'" );
             goto error_exit;
         }

        _python_par_files = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_datadict() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets( self, _python_par_self, _python_par_data, _python_par_files, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );
    Py_XDECREF( _python_par_files );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets( PyObject *_python_par___iterator,PyObjectLocalParameterVariableNoDel &python_closure_data,PyObjectLocalParameterVariableNoDel &python_closure_files,PyObjectLocalVariable &python_closure_i,PyObjectLocalParameterVariableNoDel &python_closure_name,PyObjectLocalVariable &python_closure_widget )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 809 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 809 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                {
                    frame_guard.setLineNumber( 809 );
                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                    python_closure_i.assign0( _python_tmp_element_1.asObject() );
                    python_closure_widget.assign0( _python_tmp_element_2.asObject() );
                }
                {
                    PyObjectTempKeeper1 call3;
                    PyObjectTempKeeper0 call4;
                    PyObjectTempKeeper0 call5;
                    PyObjectTempKeeper0 op1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( python_closure_widget.asObject(), _python_str_plain_value_from_datadict ) ), call4.assign( python_closure_data.asObject() ), call5.assign( python_closure_files.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), call5.asObject0(), PyObjectTemporary( ( op1.assign( python_closure_name.asObject() ), BINARY_OPERATION_ADD( op1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_c74b822dac82f0ca20e278f0236d4ada, python_closure_i.asObject() ) ).asObject() ) ) ).asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_rendered_widgets )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_rendered_widgets( _python_str_plain_rendered_widgets, _python_par_rendered_widgets );

    // Actual function code.
    static PyFrameObject *frame_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets );
        }

        frame_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_c897f607c95a98d12635b8059b330d84, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 819 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_unicode_empty, _python_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_rendered_widgets.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_rendered_widgets.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets );
           frame_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_rendered_widgets = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "format_output() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "format_output() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_rendered_widgets == key )
            {
                if (unlikely( _python_par_rendered_widgets ))
                {
                    PyErr_Format( PyExc_TypeError, "format_output() got multiple values for keyword argument 'rendered_widgets'" );
                    goto error_exit;
                }

                _python_par_rendered_widgets = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "format_output() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_rendered_widgets, key ) )
            {
                if (unlikely( _python_par_rendered_widgets ))
                {
                    PyErr_Format( PyExc_TypeError, "format_output() got multiple values for keyword argument 'rendered_widgets'" );
                    goto error_exit;
                }

                _python_par_rendered_widgets = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "format_output() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "format_output() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "format_output() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "format_output() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "format_output() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "format_output() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "format_output() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "format_output() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "format_output() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "format_output() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "format_output() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "format_output() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "format_output() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "format_output() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_rendered_widgets != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "format_output() got multiple values for keyword argument 'rendered_widgets'" );
             goto error_exit;
         }

        _python_par_rendered_widgets = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets( self, _python_par_self, _python_par_rendered_widgets );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_rendered_widgets );

    return NULL;
}

static PyObject *dparse_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets );
        }

        frame_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_ed2036c9761d8f5938d20f18205b8b0c, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 827 );
        {
                PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_NotImplementedError, PyObjectTemporary( MAKE_TUPLE1( _python_unicode_digest_dece4130b01c435b3c2cb641609e7bdd ) ).asObject() ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets );
           frame_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "decompress() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "decompress() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "decompress() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "decompress() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "decompress() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "decompress() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "decompress() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "decompress() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "decompress() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "decompress() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "decompress() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "decompress() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "decompress() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "decompress() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "decompress() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "decompress() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "decompress() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "decompress() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "decompress() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "decompress() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_media( _python_str_plain_media );
    PyObjectLocalVariable _python_var_w( _python_str_plain_w );

    // Actual function code.
    static PyFrameObject *frame_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets );
        }

        frame_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_a4da4d52344c56b6c4923a0b5b0352b2, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 831 );
        _python_var_media.assign1( CALL_FUNCTION_NO_ARGS( _mvar_django__forms__widgets_Media.asObject0() ) );
        {
            frame_guard.setLineNumber( 832 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_widgets ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 832 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_w.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 833 );
                {
                    PyObjectTempKeeper0 op1;
                    _python_var_media.assign1( ( op1.assign( _python_var_media.asObject() ), BINARY_OPERATION_ADD( op1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_w.asObject(), _python_str_plain_media ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 834 );
        return _python_var_media.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_w.updateLocalsDict( _python_var_media.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets );
           frame_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_media() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_media() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_media() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_media() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_media() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_get_media() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_get_media() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_media() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_media() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_media() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_media() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_media() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_get_media() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_get_media() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_get_media() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_get_media() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_media() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_memo )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_memo( _python_str_plain_memo, _python_par_memo );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets );
        }

        frame_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_206e50613a7f1d5a009848ac04db087e, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 838 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            _python_var_obj.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_MultiWidget.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___deepcopy__ ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_memo.asObject() ) ) );
        }
        frame_guard.setLineNumber( 839 );
        {
            PyObjectTempKeeper1 call5;
            {
                PyObjectTemporary tmp_identifier( ( call5.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_copy.asObject0(), _python_str_plain_deepcopy ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_widgets ) ).asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_widgets );
        }
        }
        frame_guard.setLineNumber( 840 );
        return _python_var_obj.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_memo.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_obj.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets );
           frame_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_memo = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_memo == key )
            {
                if (unlikely( _python_par_memo ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
                    goto error_exit;
                }

                _python_par_memo = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_memo, key ) )
            {
                if (unlikely( _python_par_memo ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
                    goto error_exit;
                }

                _python_par_memo = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__deepcopy__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_memo != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
             goto error_exit;
         }

        _python_par_memo = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets( self, _python_par_self, _python_par_memo );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_memo );

    return NULL;
}

static PyObject *dparse_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_36_SplitDateTimeWidget_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_decompress( _python_str_plain_decompress );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___doc__.assign0( _python_unicode_digest_12bd02424a117028ec3a54945c2c346e );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets(  ) );
    _python_var_decompress.assign1( MAKE_FUNCTION_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets(  ) );
    return _python_var_decompress.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_attrs, PyObject *_python_par_date_format, PyObject *_python_par_time_format )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_date_format( _python_str_plain_date_format, _python_par_date_format );
    PyObjectLocalParameterVariableNoDel _python_var_time_format( _python_str_plain_time_format, _python_par_time_format );
    PyObjectLocalVariable _python_var_widgets( _python_str_plain_widgets );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_a7c3f1156dab9f43cbccf8d59dceeaa6, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 848 );
        {
            PyObjectTempKeeper0 call12;
            PyObjectTempKeeper0 call5;
            PyObjectTempKeeper0 make_dict1;
            PyObjectTempKeeper0 make_dict8;
            PyObjectTempKeeper1 make_tuple15;
            _python_var_widgets.assign1( ( make_tuple15.assign( ( call5.assign( _mvar_django__forms__widgets_DateInput.asObject0() ), CALL_FUNCTION( call5.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict1.assign( _python_var_attrs.asObject() ), MAKE_DICT2( make_dict1.asObject0(), _python_str_plain_attrs, _python_var_date_format.asObject(), _python_str_plain_format ) ) ).asObject() ) ) ), MAKE_TUPLE2( make_tuple15.asObject0(), PyObjectTemporary( ( call12.assign( _mvar_django__forms__widgets_TimeInput.asObject0() ), CALL_FUNCTION( call12.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict8.assign( _python_var_attrs.asObject() ), MAKE_DICT2( make_dict8.asObject0(), _python_str_plain_attrs, _python_var_time_format.asObject(), _python_str_plain_format ) ) ).asObject() ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 850 );
        {
            PyObjectTempKeeper1 call19;
            PyObjectTempKeeper0 call20;
            PyObjectTempKeeper0 super17;
            DECREASE_REFCOUNT( ( call19.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super17.assign( _mvar_django__forms__widgets_SplitDateTimeWidget.asObject0() ), BUILTIN_SUPER( super17.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call20.assign( _python_var_widgets.asObject() ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), call20.asObject0(), _python_var_attrs.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_time_format.updateLocalsDict( _python_var_date_format.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_widgets.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets );
           frame_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_date_format = NULL;
    PyObject *_python_par_time_format = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_date_format == key )
            {
                if (unlikely( _python_par_date_format ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'date_format'" );
                    goto error_exit;
                }

                _python_par_date_format = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_time_format == key )
            {
                if (unlikely( _python_par_time_format ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'time_format'" );
                    goto error_exit;
                }

                _python_par_time_format = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_date_format, key ) )
            {
                if (unlikely( _python_par_date_format ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'date_format'" );
                    goto error_exit;
                }

                _python_par_date_format = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_time_format, key ) )
            {
                if (unlikely( _python_par_time_format ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'time_format'" );
                    goto error_exit;
                }

                _python_par_time_format = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_date_format != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'date_format'" );
             goto error_exit;
         }

        _python_par_date_format = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_time_format != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'time_format'" );
             goto error_exit;
         }

        _python_par_time_format = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_date_format == NULL )
    {
        _python_par_date_format = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_date_format );
    }
    if ( _python_par_time_format == NULL )
    {
        _python_par_time_format = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_time_format );
    }


    return impl_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets( self, _python_par_self, _python_par_attrs, _python_par_date_format, _python_par_time_format );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_date_format );
    Py_XDECREF( _python_par_time_format );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets );
        }

        frame_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_cfee67485fe2a5fc8de5c0960b745d8a, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 853 );
        if ( CHECK_IF_TRUE( _python_var_value.asObject() ) )
        {
            frame_guard.setLineNumber( 854 );
            {
                PyObjectTempKeeper0 call1;
                _python_var_value.assign1( ( call1.assign( _mvar_django__forms__widgets_to_current_timezone.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) );
            }
            frame_guard.setLineNumber( 855 );
            {
                PyObjectTempKeeper1 make_list3;
                return ( make_list3.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_date ) ).asObject() ) ), MAKE_LIST2( make_list3.asObject(), CALL_FUNCTION( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_time ) ).asObject() ) ).asObject(), _python_str_plain_replace ) ).asObject(), _python_tuple_empty, PyObjectTemporary( PyDict_Copy( _python_dict_06d5271781148d39cf5de821baf0de78 ) ).asObject() ) ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets );
           frame_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return LIST_COPY( _python_list_none_none_list );
}
static PyObject *fparse_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "decompress() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "decompress() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "decompress() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "decompress() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "decompress() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "decompress() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "decompress() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "decompress() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "decompress() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "decompress() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "decompress() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "decompress() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "decompress() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "decompress() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "decompress() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "decompress() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "decompress() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "decompress() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "decompress() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "decompress() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var_is_hidden( _python_str_plain_is_hidden );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_widgets );
    _python_var___doc__.assign0( _python_unicode_digest_f225caa551a66481ce26d0276587474e );
    _python_var_is_hidden.assign0( Py_True );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets(  ) );
    return _python_var___init__.updateLocalsDict( _python_var_is_hidden.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_attrs, PyObject *_python_par_date_format, PyObject *_python_par_time_format )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_attrs( _python_str_plain_attrs, _python_par_attrs );
    PyObjectLocalParameterVariableNoDel _python_var_date_format( _python_str_plain_date_format, _python_par_date_format );
    PyObjectLocalParameterVariableNoDel _python_var_time_format( _python_str_plain_time_format, _python_par_time_format );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets ) )
    {
        if ( frame_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets" );
#endif
            Py_DECREF( frame_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets );
        }

        frame_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets = MAKE_FRAME( _codeobj_0d3cd5639ae75fcae7011af6ed90b8a9, _module_django__forms__widgets );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 865 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 call5;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__widgets_SplitHiddenDateTimeWidget.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call4.assign( _python_var_attrs.asObject() ), call5.assign( _python_var_date_format.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), call5.asObject0(), _python_var_time_format.asObject() ) ) );
        }
        {
            frame_guard.setLineNumber( 866 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_widgets ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 866 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_widget.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 867 );
                SET_ATTRIBUTE( _python_unicode_plain_hidden, _python_var_widget.asObject(), _python_str_plain_input_type );
                frame_guard.setLineNumber( 868 );
                SET_ATTRIBUTE( Py_True, _python_var_widget.asObject(), _python_str_plain_is_hidden );

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_time_format.updateLocalsDict( _python_var_date_format.updateLocalsDict( _python_var_attrs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_widget.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets )
        {
           Py_DECREF( frame_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets );
           frame_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_attrs = NULL;
    PyObject *_python_par_date_format = NULL;
    PyObject *_python_par_time_format = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attrs == key )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_date_format == key )
            {
                if (unlikely( _python_par_date_format ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'date_format'" );
                    goto error_exit;
                }

                _python_par_date_format = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_time_format == key )
            {
                if (unlikely( _python_par_time_format ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'time_format'" );
                    goto error_exit;
                }

                _python_par_time_format = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attrs, key ) )
            {
                if (unlikely( _python_par_attrs ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
                    goto error_exit;
                }

                _python_par_attrs = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_date_format, key ) )
            {
                if (unlikely( _python_par_date_format ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'date_format'" );
                    goto error_exit;
                }

                _python_par_date_format = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_time_format, key ) )
            {
                if (unlikely( _python_par_time_format ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'time_format'" );
                    goto error_exit;
                }

                _python_par_time_format = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_attrs != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'attrs'" );
             goto error_exit;
         }

        _python_par_attrs = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_date_format != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'date_format'" );
             goto error_exit;
         }

        _python_par_date_format = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_time_format != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'time_format'" );
             goto error_exit;
         }

        _python_par_time_format = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_attrs == NULL )
    {
        _python_par_attrs = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_attrs );
    }
    if ( _python_par_date_format == NULL )
    {
        _python_par_date_format = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_date_format );
    }
    if ( _python_par_time_format == NULL )
    {
        _python_par_time_format = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_time_format );
    }


    return impl_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets( self, _python_par_self, _python_par_attrs, _python_par_date_format, _python_par_time_format );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_attrs );
    Py_XDECREF( _python_par_date_format );
    Py_XDECREF( _python_par_time_format );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets( self, args, size, NULL );
        return result;
    }

}




static PyObject *MAKE_FUNCTION_function_10___add___of_class_1_Media_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10___add___of_class_1_Media_of_module_django__forms__widgets,
        dparse_function_10___add___of_class_1_Media_of_module_django__forms__widgets,
        _python_str_plain___add__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d89f0a85a29cce621218d122b5325df8,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_11_PasswordInput_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_800fb487256f3984ad4a2fad2196ce90,
        INCREASE_REFCOUNT( _python_tuple_none_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_13_MultipleHiddenInput_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2519a3e49b3af11909c8295acf77dbea,
        INCREASE_REFCOUNT( _python_tuple_none_tuple_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_16_Textarea_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_69109c11864dab322e7b31a022d15ef4,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_17_DateInput_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_01d5a33041a15abcf85d2f0e17495242,
        INCREASE_REFCOUNT( _python_tuple_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_18_DateTimeInput_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_82560f2327de21ea0615844d2fa5a07c,
        INCREASE_REFCOUNT( _python_tuple_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_19_TimeInput_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f20c89746e2fae73a35dc174259286db,
        INCREASE_REFCOUNT( _python_tuple_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_1_Media_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_1_Media_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_1_Media_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4f21e2d740cc0cc2dca44f9a6aacd3f9,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_21_CheckboxInput_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6f217af584b6b2c67516a3f7e1bf7c9a,
        INCREASE_REFCOUNT( _python_tuple_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_22_Select_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_22_Select_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_22_Select_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a7394c2b31d205606de5a338d469639a,
        INCREASE_REFCOUNT( _python_tuple_none_tuple_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_23_NullBooleanSelect_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a3e407d54781c233d0cb1c82a83287bf,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_25_ChoiceInput_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d881b7835ea2bdc7b2727ebc822b0ad1,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_26_RadioChoiceInput_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_cce5810583afcefe0d4d5af96c1b595f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_27_RadioInput_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_78b78758829ad861bfdc05cbfa75c205,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5f5f80180fb0abd5f1133c21d02efcb8,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6390ec65dde882bb332cca7c34b6a726,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_32_RendererMixin_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e9675382f17d22c3b62a9ba0aceeb135,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_35_MultiWidget_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8d7bacf14199e2a8aeb75413df5202a2,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a7c3f1156dab9f43cbccf8d59dceeaa6,
        INCREASE_REFCOUNT( _python_tuple_none_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0d3cd5639ae75fcae7011af6ed90b8a9,
        INCREASE_REFCOUNT( _python_tuple_none_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_4_SubWidget_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d2f679295df5e1897090f264f7f5ad53,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_5_Widget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_5_Widget_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_5_Widget_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_cc3d192a33e8ac5411621af7293b8679,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets,
        dparse_function_1___init___of_class_7_TextInput_of_module_django__forms__widgets,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_400352f27efe18006476db6a55f8c816,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets,
        dparse_function_1___new___of_class_3_MediaDefiningClass_of_module_django__forms__widgets,
        _python_str_plain___new__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_782ae9cb9b01494fdd01b79ff18876c1,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets,
        dparse_function_1__format_value_of_class_6_Input_of_module_django__forms__widgets,
        _python_str_plain__format_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4a5d9c260c0682be5a7484a72128177b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1__media_of_function_2_media_property_of_module_django__forms__widgets( PyObjectSharedLocalVariable &python_closure_cls )
{
    struct _context_function_1__media_of_function_2_media_property_of_module_django__forms__widgets_t *_python_context = new _context_function_1__media_of_function_2_media_property_of_module_django__forms__widgets_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_cls.shareWith( python_closure_cls );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1__media_of_function_2_media_property_of_module_django__forms__widgets,
        dparse_function_1__media_of_function_2_media_property_of_module_django__forms__widgets,
        _python_str_plain__media,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a338160b51bee85e5d3d9875f1caba91,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None,
        _python_context,
        _context_function_1__media_of_function_2_media_property_of_module_django__forms__widgets_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets,
        dparse_function_1_clear_checkbox_name_of_class_15_ClearableFileInput_of_module_django__forms__widgets,
        _python_str_plain_clear_checkbox_name,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_35fde81b6630cc9c3a10c85405380a25,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        _python_unicode_digest_e25c4dd722e83b871df70e960e2d9868
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets,
        dparse_function_1_render_of_class_14_FileInput_of_module_django__forms__widgets,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_30b57064f70bdc9865f6ec74b93ee94c,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets,
        dparse_function_1_render_of_class_24_SelectMultiple_of_module_django__forms__widgets,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b6ec47208fd731430e1b643f4fcdd002,
        INCREASE_REFCOUNT( _python_tuple_none_tuple_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_20_boolean_check_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_20_boolean_check_of_module_django__forms__widgets,
        dparse_function_20_boolean_check_of_module_django__forms__widgets,
        _python_str_plain_boolean_check,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ad39392d256292042cac77c6eaf6bcef,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets,
        dparse_function_2___deepcopy___of_class_5_Widget_of_module_django__forms__widgets,
        _python_str_plain___deepcopy__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_269ebbf83032a10076f57c63d233bee9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  )
{
    return Nuitka_Function_New(
        fparse_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets,
        dparse_function_2___iter___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets,
        _python_str_plain___iter__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_bbf9c5bb949ab2a664097788c3801fab,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );
}



static PyObject *MAKE_FUNCTION_function_2___str___of_class_1_Media_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___str___of_class_1_Media_of_module_django__forms__widgets,
        dparse_function_2___str___of_class_1_Media_of_module_django__forms__widgets,
        _python_str_plain___str__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d7e168606f3c45f96f655b53b75ff55c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets,
        dparse_function_2___str___of_class_25_ChoiceInput_of_module_django__forms__widgets,
        _python_str_plain___str__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a349040bb4676ca151b16e7ce05501cc,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets,
        dparse_function_2___str___of_class_4_SubWidget_of_module_django__forms__widgets,
        _python_str_plain___str__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3efd778ebda6438a5ffb8d8117e7cb04,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets,
        dparse_function_2__format_value_of_class_17_DateInput_of_module_django__forms__widgets,
        _python_str_plain__format_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_db2d7581790a87eabd4cd96bdc024577,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets,
        dparse_function_2__format_value_of_class_18_DateTimeInput_of_module_django__forms__widgets,
        _python_str_plain__format_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_288114e45af56d5a118e432ad5d2e64c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets,
        dparse_function_2__format_value_of_class_19_TimeInput_of_module_django__forms__widgets,
        _python_str_plain__format_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_08a8585cfd595ccc4044b3f13282cb6d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets,
        dparse_function_2_clear_checkbox_id_of_class_15_ClearableFileInput_of_module_django__forms__widgets,
        _python_str_plain_clear_checkbox_id,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8a547918991d55c32c7c9b2e74a5e09f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        _python_unicode_digest_b00e3dd50397dd1c082388a25ee1f2b5
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets,
        dparse_function_2_decompress_of_class_36_SplitDateTimeWidget_of_module_django__forms__widgets,
        _python_str_plain_decompress,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_cfee67485fe2a5fc8de5c0960b745d8a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets,
        dparse_function_2_is_checked_of_class_28_CheckboxChoiceInput_of_module_django__forms__widgets,
        _python_str_plain_is_checked,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8929f2c6fe9d42219f8728b8cd8224e8,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_media_property_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_media_property_of_module_django__forms__widgets,
        dparse_function_2_media_property_of_module_django__forms__widgets,
        _python_str_plain_media_property,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a38a8a2f9e63e9a5229f20a9633f6440,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets,
        dparse_function_2_render_of_class_11_PasswordInput_of_module_django__forms__widgets,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f0d50fd5d442300376ab1262197785c7,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets,
        dparse_function_2_render_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5ae37a48a5b79d8655d817fe42171776,
        INCREASE_REFCOUNT( _python_tuple_none_tuple_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets,
        dparse_function_2_render_of_class_16_Textarea_of_module_django__forms__widgets,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3a67777c856780e38b79dc83e208f111,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets,
        dparse_function_2_render_of_class_21_CheckboxInput_of_module_django__forms__widgets,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f4ce21ed8ce630cc8978b05ea621100c,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_render_of_class_22_Select_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_render_of_class_22_Select_of_module_django__forms__widgets,
        dparse_function_2_render_of_class_22_Select_of_module_django__forms__widgets,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_591fa67f7004e4d73ee63a7f0063fc14,
        INCREASE_REFCOUNT( _python_tuple_none_tuple_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets,
        dparse_function_2_render_of_class_23_NullBooleanSelect_of_module_django__forms__widgets,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7af27a3f38aaf1977e8b5c76a63cf16d,
        INCREASE_REFCOUNT( _python_tuple_none_tuple_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets,
        dparse_function_2_render_of_class_35_MultiWidget_of_module_django__forms__widgets,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b4a9d23f194e59f3e8a99f33e0ab6adf,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_render_of_class_6_Input_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_render_of_class_6_Input_of_module_django__forms__widgets,
        dparse_function_2_render_of_class_6_Input_of_module_django__forms__widgets,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d0450708044471a58940f021e81e0dcf,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets(  )
{
    return Nuitka_Function_New(
        fparse_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets,
        dparse_function_2_subwidgets_of_class_32_RendererMixin_of_module_django__forms__widgets,
        _python_str_plain_subwidgets,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_68938eedfea003a0243a645ad8345b97,
        INCREASE_REFCOUNT( _python_tuple_none_tuple_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );
}



static PyObject *MAKE_FUNCTION_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets,
        dparse_function_2_value_from_datadict_of_class_14_FileInput_of_module_django__forms__widgets,
        _python_str_plain_value_from_datadict,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_87448cbacd7439beb364084b387eab6a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        _python_unicode_digest_b48166c1e07544172b79d1630255a5fd
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets,
        dparse_function_2_value_from_datadict_of_class_24_SelectMultiple_of_module_django__forms__widgets,
        _python_str_plain_value_from_datadict,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a1737371503c7b5bc75d83dfe07ef438,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets,
        dparse_function_3___getitem___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets,
        _python_str_plain___getitem__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_44b5fb43f03e8373195ce275f431902d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets,
        dparse_function_3_get_renderer_of_class_32_RendererMixin_of_module_django__forms__widgets,
        _python_str_plain_get_renderer,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6b0e50239c7c1946bd5344b3976e627b,
        INCREASE_REFCOUNT( _python_tuple_none_tuple_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        _python_unicode_digest_ffec4c4222f63d119dc21ce502ce69bc
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets,
        dparse_function_3_id_for_label_of_class_35_MultiWidget_of_module_django__forms__widgets,
        _python_str_plain_id_for_label,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_beecf0fe2fd3a9ce8f3804f0a0e100fa,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets,
        dparse_function_3_render_of_class_15_ClearableFileInput_of_module_django__forms__widgets,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d2a875b87b3f83f7b52c51db7518646d,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_render_of_class_1_Media_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_render_of_class_1_Media_of_module_django__forms__widgets,
        dparse_function_3_render_of_class_1_Media_of_module_django__forms__widgets,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7bf16d85e1724cbdee4949cd11e2a08e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets,
        dparse_function_3_render_of_class_25_ChoiceInput_of_module_django__forms__widgets,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_02d23790596660840771b5904a27d841,
        INCREASE_REFCOUNT( _python_tuple_none_none_none_tuple_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets,
        dparse_function_3_render_option_of_class_22_Select_of_module_django__forms__widgets,
        _python_str_plain_render_option,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a33bf8602753f0068882d32dadb6d33b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets(  )
{
    return Nuitka_Function_New(
        fparse_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets,
        dparse_function_3_subwidgets_of_class_5_Widget_of_module_django__forms__widgets,
        _python_str_plain_subwidgets,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_60cc32444faf1d24f812f79bf64f9e74,
        INCREASE_REFCOUNT( _python_tuple_none_tuple_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        _python_unicode_digest_2ffa1de1906844a4ba77899db8e2922a
    );
}



static PyObject *MAKE_FUNCTION_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets,
        dparse_function_3_value_from_datadict_of_class_13_MultipleHiddenInput_of_module_django__forms__widgets,
        _python_str_plain_value_from_datadict,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c132849bd9ba1c04cd1740eaf839fd86,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets,
        dparse_function_3_value_from_datadict_of_class_21_CheckboxInput_of_module_django__forms__widgets,
        _python_str_plain_value_from_datadict,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9c5c2de37f635af1aafccf78889cdcc6,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets,
        dparse_function_3_value_from_datadict_of_class_23_NullBooleanSelect_of_module_django__forms__widgets,
        _python_str_plain_value_from_datadict,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a46e747d0035d2dc58b62d372a033f07,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets,
        dparse_function_4___str___of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets,
        _python_str_plain___str__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_56c5bfa7fb06f8acf39d05942f291008,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets,
        dparse_function_4_is_checked_of_class_25_ChoiceInput_of_module_django__forms__widgets,
        _python_str_plain_is_checked,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_588438d3d4ee37ebc1a745cd833f824b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets,
        dparse_function_4_render_js_of_class_1_Media_of_module_django__forms__widgets,
        _python_str_plain_render_js,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b799d43c1f3a725df3de519eb76e41b5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets,
        dparse_function_4_render_of_class_32_RendererMixin_of_module_django__forms__widgets,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_aae845fe532383bd264e1ad9b6ab679e,
        INCREASE_REFCOUNT( _python_tuple_none_tuple_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_render_of_class_5_Widget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_render_of_class_5_Widget_of_module_django__forms__widgets,
        dparse_function_4_render_of_class_5_Widget_of_module_django__forms__widgets,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_56799b4904ad0b1feeaa46b9019b52af,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        _python_unicode_digest_49a352b31a974669171adfed52610877
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets,
        dparse_function_4_render_options_of_class_22_Select_of_module_django__forms__widgets,
        _python_str_plain_render_options,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9d17866f51bc09e6b64102fdf72fc117,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets,
        dparse_function_4_value_from_datadict_of_class_15_ClearableFileInput_of_module_django__forms__widgets,
        _python_str_plain_value_from_datadict,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_51dcd813f8f6b5616378978343e6aab5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets,
        dparse_function_4_value_from_datadict_of_class_35_MultiWidget_of_module_django__forms__widgets,
        _python_str_plain_value_from_datadict,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9c5ae057e47ad37dcd6e173d3ab93499,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets,
        dparse_function_5_build_attrs_of_class_5_Widget_of_module_django__forms__widgets,
        _python_str_plain_build_attrs,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_160561090f0d95825e944ba6e5d725c4,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        _python_unicode_digest_f203306f1dd832dca2c4bf282df1e193
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets,
        dparse_function_5_format_output_of_class_35_MultiWidget_of_module_django__forms__widgets,
        _python_str_plain_format_output,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c897f607c95a98d12635b8059b330d84,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        _python_unicode_digest_6e4d4fcc4524da9882acbac18efabc93
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets,
        dparse_function_5_id_for_label_of_class_32_RendererMixin_of_module_django__forms__widgets,
        _python_str_plain_id_for_label,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_13fb7616f64fcc99a55e65b15a1474fc,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets,
        dparse_function_5_render_css_of_class_1_Media_of_module_django__forms__widgets,
        _python_str_plain_render_css,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_31f9fc35d6ba1fd0bb8a345cdb795e17,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets,
        dparse_function_5_render_of_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets,
        _python_str_plain_render,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3423ec490449e0f605d4cebd8282f44c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        _python_unicode_digest_1fe20ea30458cde4183c06c05041021b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets,
        dparse_function_5_tag_of_class_25_ChoiceInput_of_module_django__forms__widgets,
        _python_str_plain_tag,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_cc789d85df07731a0ae6a33d2b3eb566,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets,
        dparse_function_6_absolute_path_of_class_1_Media_of_module_django__forms__widgets,
        _python_str_plain_absolute_path,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b4dee3d90b6cbebf2b660e402c41d516,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets,
        dparse_function_6_decompress_of_class_35_MultiWidget_of_module_django__forms__widgets,
        _python_str_plain_decompress,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ed2036c9761d8f5938d20f18205b8b0c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        _python_unicode_digest_3f262f27e626367b5d10662384e725ad
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets,
        dparse_function_6_value_from_datadict_of_class_5_Widget_of_module_django__forms__widgets,
        _python_str_plain_value_from_datadict,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_dcdbfb9244addf464ed441b61e8b16d9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        _python_unicode_digest_a1333d11ee4cfb63b146f882b836c962
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets,
        dparse_function_7___getitem___of_class_1_Media_of_module_django__forms__widgets,
        _python_str_plain___getitem__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a8b85ad367b0521387bb365721ffc211,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        _python_unicode_digest_1f3732d97418f43186a38eabd055e180
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets,
        dparse_function_7__get_media_of_class_35_MultiWidget_of_module_django__forms__widgets,
        _python_str_plain__get_media,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a4da4d52344c56b6c4923a0b5b0352b2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        _python_unicode_digest_4a54543dd923baf4398facda7f214b76
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets,
        dparse_function_7_id_for_label_of_class_5_Widget_of_module_django__forms__widgets,
        _python_str_plain_id_for_label,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3a0cdc09ead37713c2689385952cb5e5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        _python_unicode_digest_9f79ba455e6889156e4bb6c8639d5786
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets,
        dparse_function_8___deepcopy___of_class_35_MultiWidget_of_module_django__forms__widgets,
        _python_str_plain___deepcopy__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_206e50613a7f1d5a009848ac04db087e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets,
        dparse_function_8_add_js_of_class_1_Media_of_module_django__forms__widgets,
        _python_str_plain_add_js,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6646adf550a39fa4b8d7ab86c7c70222,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets,
        dparse_function_9_add_css_of_class_1_Media_of_module_django__forms__widgets,
        _python_str_plain_add_css,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d3f4246ebb777af89515bc68d8708138,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__widgets,
        Py_None
    );

    return result;
}


#if PYTHON_VERSION >= 300
static struct PyModuleDef _moduledef =
{
    PyModuleDef_HEAD_INIT,
    "django.forms.widgets",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#define _MODULE_UNFREEZER 0

#if _MODULE_UNFREEZER
// For embedded modules, to be unpacked. Used by main program/package only
extern void registerMetaPathBasedUnfreezer( struct _inittab *_frozen_modules );

// Our own inittab for lookup of "frozen" modules, i.e. the ones included in this binary.
static struct _inittab _frozen_modules[] =
{

    { NULL, NULL }
};

// For loader attribute.
#if PYTHON_VERSION >= 330
extern PyObject *loader_frozen_modules;
#endif

#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( django__forms__widgets )
{

#if defined( _NUITKA_EXE ) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Packages can be imported recursively in deep executables.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( _module_django__forms__widgets );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    _initConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );

    patchInspectModule();

    patchBuiltinModule();
#endif

#if _MODULE_UNFREEZER
    registerMetaPathBasedUnfreezer( _frozen_modules );
#endif

    // puts( "in initdjango__forms__widgets" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    _module_django__forms__widgets = Py_InitModule4(
        "django.forms.widgets",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    _module_django__forms__widgets = PyModule_Create( &_moduledef );
#endif

    _moduledict_django__forms__widgets = (PyDictObject *)((PyModuleObject *)_module_django__forms__widgets)->md_dict;

    assertObject( _module_django__forms__widgets );

#ifndef _NUITKA_MODULE
// Seems to work for Python2.7 out of the box, but for Python3.2, the module
// doesn't automatically enter "sys.modules" with the object that it should, so
// do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, _module_django__forms__widgets );

        assert( r != -1 );
    }
#endif
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( _module_django__forms__widgets );

    if ( PyDict_GetItem( module_dict, _python_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = ( PyObject *)module_builtin;

#ifdef _NUITKA_EXE
        if ( _module_django__forms__widgets != _module___main__ )
        {
#endif
            value = PyModule_GetDict( value );
#ifdef _NUITKA_EXE
        }
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, _python_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
#if _MODULE_UNFREEZER
    PyDict_SetItem( module_dict, _python_str_plain___loader__, loader_frozen_modules );
#else
    PyDict_SetItem( module_dict, _python_str_plain___loader__, Py_None );
#endif
#endif

    // Module code
    UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain___doc__, _python_unicode_digest_572c20cc566fddb044eaffbbb589e1bd );
    UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain___file__, _python_str_digest_6a4709482ad674a56906b692b72a2aed );
    PyFrameObject *frame_module_django__forms__widgets = MAKE_FRAME( _codeobj_b6ed60b2e01297c06eedd81a6c7abe6d, _module_django__forms__widgets );

    FrameGuard frame_guard( frame_module_django__forms__widgets );
    try
    {
        assert( Py_REFCNT( frame_module_django__forms__widgets ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 5 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_absolute_import, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain___future__, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_absolute_import_str_plain_unicode_literals_list, _python_int_0 ) ).asObject(), _python_str_plain_absolute_import ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_unicode_literals, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain___future__, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_absolute_import_str_plain_unicode_literals_list, _python_int_0 ) ).asObject(), _python_str_plain_unicode_literals ) );
        frame_guard.setLineNumber( 7 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_copy, IMPORT_MODULE( _python_str_plain_copy, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, Py_None, _python_int_0 ) );
        frame_guard.setLineNumber( 8 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_datetime, IMPORT_MODULE( _python_str_plain_datetime, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, Py_None, _python_int_0 ) );
        frame_guard.setLineNumber( 9 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_chain, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain_itertools, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_chain_list, _python_int_0 ) ).asObject(), _python_str_plain_chain ) );
        frame_guard.setLineNumber( 10 );
        try
        {
            frame_guard.setLineNumber( 11 );
            UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_urljoin, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_16d628fa9b79bd53ede39389589a2bbf, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_urljoin_list, _python_int_0 ) ).asObject(), _python_str_plain_urljoin ) );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_ImportError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 13 );
                UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_urljoin, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain_urlparse, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_urljoin_list, _python_int_0 ) ).asObject(), _python_str_plain_urljoin ) );
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 14 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_warnings, IMPORT_MODULE( _python_str_plain_warnings, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, Py_None, _python_int_0 ) );
        frame_guard.setLineNumber( 16 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_settings, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_262bd828f67160809670905d543ae3a0, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_settings_list, _python_int_0 ) ).asObject(), _python_str_plain_settings ) );
        frame_guard.setLineNumber( 17 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_flatatt, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_1b1c01abd93a1fdb33baf4e4eaa9ff68, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_flatatt_str_plain_to_current_timezone_list, _python_int_0 ) ).asObject(), _python_str_plain_flatatt ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_to_current_timezone, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_1b1c01abd93a1fdb33baf4e4eaa9ff68, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_flatatt_str_plain_to_current_timezone_list, _python_int_0 ) ).asObject(), _python_str_plain_to_current_timezone ) );
        frame_guard.setLineNumber( 18 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_MultiValueDict, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_36fff8b06be9a51fbe6af4a1029911c0, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_MultiValueDict_str_plain_MergeDict_list, _python_int_0 ) ).asObject(), _python_str_plain_MultiValueDict ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_MergeDict, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_36fff8b06be9a51fbe6af4a1029911c0, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_MultiValueDict_str_plain_MergeDict_list, _python_int_0 ) ).asObject(), _python_str_plain_MergeDict ) );
        frame_guard.setLineNumber( 19 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_conditional_escape, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_d3a0db97fb5d78c487963bfc1490797d, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_35ce08c5a91c74b34e440f67cb0db3f9_list, _python_int_0 ) ).asObject(), _python_str_plain_conditional_escape ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_format_html, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_d3a0db97fb5d78c487963bfc1490797d, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_35ce08c5a91c74b34e440f67cb0db3f9_list, _python_int_0 ) ).asObject(), _python_str_plain_format_html ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_format_html_join, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_d3a0db97fb5d78c487963bfc1490797d, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_35ce08c5a91c74b34e440f67cb0db3f9_list, _python_int_0 ) ).asObject(), _python_str_plain_format_html_join ) );
        frame_guard.setLineNumber( 20 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_ugettext, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_695d25035a0d5e79b21b6e2fa3e00631, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_ugettext_str_plain_ugettext_lazy_list, _python_int_0 ) ).asObject(), _python_str_plain_ugettext ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_ugettext_lazy, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_695d25035a0d5e79b21b6e2fa3e00631, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_ugettext_str_plain_ugettext_lazy_list, _python_int_0 ) ).asObject(), _python_str_plain_ugettext_lazy ) );
        frame_guard.setLineNumber( 21 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_force_text, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_5c6adb5fc6275b5d2a085f73ed00809a, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_force_text_str_plain_python_2_unicode_compatible_list, _python_int_0 ) ).asObject(), _python_str_plain_force_text ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_python_2_unicode_compatible, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_5c6adb5fc6275b5d2a085f73ed00809a, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_force_text_str_plain_python_2_unicode_compatible_list, _python_int_0 ) ).asObject(), _python_str_plain_python_2_unicode_compatible ) );
        frame_guard.setLineNumber( 22 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_mark_safe, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_33422e2c698707541621bf8ab31ea849, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_mark_safe_list, _python_int_0 ) ).asObject(), _python_str_plain_mark_safe ) );
        frame_guard.setLineNumber( 23 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_datetime_safe, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_11a3eb3229bb1ce81f02aa3fc01149d5, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_datetime_safe_str_plain_formats_str_plain_six_list, _python_int_0 ) ).asObject(), _python_str_plain_datetime_safe ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_formats, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_11a3eb3229bb1ce81f02aa3fc01149d5, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_datetime_safe_str_plain_formats_str_plain_six_list, _python_int_0 ) ).asObject(), _python_str_plain_formats ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_six, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_11a3eb3229bb1ce81f02aa3fc01149d5, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, ((PyModuleObject *)_module_django__forms__widgets)->md_dict, _python_list_str_plain_datetime_safe_str_plain_formats_str_plain_six_list, _python_int_0 ) ).asObject(), _python_str_plain_six ) );
        UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain___all__, _python_tuple_e9858fce8d6282d42d69186497f546e6_tuple );
        UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_MEDIA_TYPES, _python_tuple_unicode_plain_css_unicode_plain_js_tuple );
        {
            frame_guard.setLineNumber( 37 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_1_Media_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 call3;
                _tmp_python_tmp_class = ( call1.assign( _python_tmp_metaclass.asObject() ), call3.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_str_plain_Media, call3.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            {
                PyObjectTempKeeper0 call5;
                _python_tmp_class.assign1( ( call5.assign( _mvar_django__forms__widgets_python_2_unicode_compatible.asObject0() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_tmp_class.asObject() ) ) );
            }
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_Media, _python_tmp_class.asObject() );
        }
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_media_property, MAKE_FUNCTION_function_2_media_property_of_module_django__forms__widgets(  ) );
        {
            frame_guard.setLineNumber( 137 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_type ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_3_MediaDefiningClass_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call7;
                PyObjectTempKeeper0 call9;
                _tmp_python_tmp_class = ( call7.assign( _python_tmp_metaclass.asObject() ), call9.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_str_plain_MediaDefiningClass, call9.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_MediaDefiningClass, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 146 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_4_SubWidget_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call11;
                PyObjectTempKeeper0 call13;
                _tmp_python_tmp_class = ( call11.assign( _python_tmp_metaclass.asObject() ), call13.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _python_str_plain_SubWidget, call13.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            {
                PyObjectTempKeeper0 call15;
                _python_tmp_class.assign1( ( call15.assign( _mvar_django__forms__widgets_python_2_unicode_compatible.asObject0() ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), _python_tmp_class.asObject() ) ) );
            }
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_SubWidget, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 163 );
            PyObject *_tmp_python_tmp_bases;
            {
                PyObjectTempKeeper1 call17;
                _tmp_python_tmp_bases = MAKE_TUPLE1( PyObjectTemporary( ( call17.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__widgets_six.asObject0(), _python_str_plain_with_metaclass ) ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), _mvar_django__forms__widgets_MediaDefiningClass.asObject0() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_bases( _tmp_python_tmp_bases );
            PyObjectTemporary _python_tmp_class_dict( impl_class_5_Widget_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call19;
                PyObjectTempKeeper0 call21;
                _tmp_python_tmp_class = ( call19.assign( _python_tmp_metaclass.asObject() ), call21.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), _python_str_plain_Widget, call21.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_Widget, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 225 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_Widget.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_6_Input_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call23;
                PyObjectTempKeeper0 call25;
                _tmp_python_tmp_class = ( call23.assign( _python_tmp_metaclass.asObject() ), call25.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call23.asObject0(), _python_str_plain_Input, call25.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_Input, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 247 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_Input.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_7_TextInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call27;
                PyObjectTempKeeper0 call29;
                _tmp_python_tmp_class = ( call27.assign( _python_tmp_metaclass.asObject() ), call29.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), _python_str_plain_TextInput, call29.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_TextInput, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 256 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_TextInput.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_8_NumberInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call31;
                PyObjectTempKeeper0 call33;
                _tmp_python_tmp_class = ( call31.assign( _python_tmp_metaclass.asObject() ), call33.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call31.asObject0(), _python_str_plain_NumberInput, call33.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_NumberInput, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 260 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_TextInput.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_9_EmailInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call35;
                PyObjectTempKeeper0 call37;
                _tmp_python_tmp_class = ( call35.assign( _python_tmp_metaclass.asObject() ), call37.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call35.asObject0(), _python_str_plain_EmailInput, call37.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_EmailInput, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 264 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_TextInput.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_10_URLInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call39;
                PyObjectTempKeeper0 call41;
                _tmp_python_tmp_class = ( call39.assign( _python_tmp_metaclass.asObject() ), call41.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call39.asObject0(), _python_str_plain_URLInput, call41.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_URLInput, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 268 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_TextInput.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_11_PasswordInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call43;
                PyObjectTempKeeper0 call45;
                _tmp_python_tmp_class = ( call43.assign( _python_tmp_metaclass.asObject() ), call45.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call43.asObject0(), _python_str_plain_PasswordInput, call45.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_PasswordInput, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 279 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_Input.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_12_HiddenInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call47;
                PyObjectTempKeeper0 call49;
                _tmp_python_tmp_class = ( call47.assign( _python_tmp_metaclass.asObject() ), call49.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call47.asObject0(), _python_str_plain_HiddenInput, call49.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_HiddenInput, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 283 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_HiddenInput.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_13_MultipleHiddenInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call51;
                PyObjectTempKeeper0 call53;
                _tmp_python_tmp_class = ( call51.assign( _python_tmp_metaclass.asObject() ), call53.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call51.asObject0(), _python_str_plain_MultipleHiddenInput, call53.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_MultipleHiddenInput, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 312 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_Input.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_14_FileInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call55;
                PyObjectTempKeeper0 call57;
                _tmp_python_tmp_class = ( call55.assign( _python_tmp_metaclass.asObject() ), call57.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call55.asObject0(), _python_str_plain_FileInput, call57.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_FileInput, _python_tmp_class.asObject() );
        }
        frame_guard.setLineNumber( 324 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_FILE_INPUT_CONTRADICTION, CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
        {
            frame_guard.setLineNumber( 326 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_FileInput.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_15_ClearableFileInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call59;
                PyObjectTempKeeper0 call61;
                _tmp_python_tmp_class = ( call59.assign( _python_tmp_metaclass.asObject() ), call61.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call59.asObject0(), _python_str_plain_ClearableFileInput, call61.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_ClearableFileInput, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 388 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_Widget.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_16_Textarea_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call63;
                PyObjectTempKeeper0 call65;
                _tmp_python_tmp_class = ( call63.assign( _python_tmp_metaclass.asObject() ), call65.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call63.asObject0(), _python_str_plain_Textarea, call65.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_Textarea, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 404 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_TextInput.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_17_DateInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call67;
                PyObjectTempKeeper0 call69;
                _tmp_python_tmp_class = ( call67.assign( _python_tmp_metaclass.asObject() ), call69.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call67.asObject0(), _python_str_plain_DateInput, call69.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_DateInput, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 423 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_TextInput.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_18_DateTimeInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call71;
                PyObjectTempKeeper0 call73;
                _tmp_python_tmp_class = ( call71.assign( _python_tmp_metaclass.asObject() ), call73.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call71.asObject0(), _python_str_plain_DateTimeInput, call73.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_DateTimeInput, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 442 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_TextInput.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_19_TimeInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call75;
                PyObjectTempKeeper0 call77;
                _tmp_python_tmp_class = ( call75.assign( _python_tmp_metaclass.asObject() ), call77.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call75.asObject0(), _python_str_plain_TimeInput, call77.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_TimeInput, _python_tmp_class.asObject() );
        }
        UPDATE_STRING_DICT1( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_boolean_check, MAKE_FUNCTION_function_20_boolean_check_of_module_django__forms__widgets(  ) );
        {
            frame_guard.setLineNumber( 465 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_Widget.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_21_CheckboxInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call79;
                PyObjectTempKeeper0 call81;
                _tmp_python_tmp_class = ( call79.assign( _python_tmp_metaclass.asObject() ), call81.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call79.asObject0(), _python_str_plain_CheckboxInput, call81.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_CheckboxInput, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 494 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_Widget.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_22_Select_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call83;
                PyObjectTempKeeper0 call85;
                _tmp_python_tmp_class = ( call83.assign( _python_tmp_metaclass.asObject() ), call85.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call83.asObject0(), _python_str_plain_Select, call85.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_Select, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 542 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_Select.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_23_NullBooleanSelect_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call87;
                PyObjectTempKeeper0 call89;
                _tmp_python_tmp_class = ( call87.assign( _python_tmp_metaclass.asObject() ), call89.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call87.asObject0(), _python_str_plain_NullBooleanSelect, call89.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_NullBooleanSelect, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 569 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_Select.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_24_SelectMultiple_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call91;
                PyObjectTempKeeper0 call93;
                _tmp_python_tmp_class = ( call91.assign( _python_tmp_metaclass.asObject() ), call93.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call91.asObject0(), _python_str_plain_SelectMultiple, call93.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_SelectMultiple, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 588 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_SubWidget.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_25_ChoiceInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call95;
                PyObjectTempKeeper0 call97;
                _tmp_python_tmp_class = ( call95.assign( _python_tmp_metaclass.asObject() ), call97.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call95.asObject0(), _python_str_plain_ChoiceInput, call97.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            {
                PyObjectTempKeeper0 call99;
                _python_tmp_class.assign1( ( call99.assign( _mvar_django__forms__widgets_python_2_unicode_compatible.asObject0() ), CALL_FUNCTION_WITH_ARGS( call99.asObject0(), _python_tmp_class.asObject() ) ) );
            }
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_ChoiceInput, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 629 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_ChoiceInput.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_26_RadioChoiceInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call101;
                PyObjectTempKeeper0 call103;
                _tmp_python_tmp_class = ( call101.assign( _python_tmp_metaclass.asObject() ), call103.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call101.asObject0(), _python_str_plain_RadioChoiceInput, call103.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_RadioChoiceInput, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 637 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_RadioChoiceInput.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_27_RadioInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call105;
                PyObjectTempKeeper0 call107;
                _tmp_python_tmp_class = ( call105.assign( _python_tmp_metaclass.asObject() ), call107.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call105.asObject0(), _python_str_plain_RadioInput, call107.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_RadioInput, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 644 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_ChoiceInput.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_28_CheckboxChoiceInput_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call109;
                PyObjectTempKeeper0 call111;
                _tmp_python_tmp_class = ( call109.assign( _python_tmp_metaclass.asObject() ), call111.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call109.asObject0(), _python_str_plain_CheckboxChoiceInput, call111.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_CheckboxChoiceInput, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 655 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_29_ChoiceFieldRenderer_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call113;
                PyObjectTempKeeper0 call115;
                _tmp_python_tmp_class = ( call113.assign( _python_tmp_metaclass.asObject() ), call115.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call113.asObject0(), _python_str_plain_ChoiceFieldRenderer, call115.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            {
                PyObjectTempKeeper0 call117;
                _python_tmp_class.assign1( ( call117.assign( _mvar_django__forms__widgets_python_2_unicode_compatible.asObject0() ), CALL_FUNCTION_WITH_ARGS( call117.asObject0(), _python_tmp_class.asObject() ) ) );
            }
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_ChoiceFieldRenderer, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 695 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_ChoiceFieldRenderer.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_30_RadioFieldRenderer_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call119;
                PyObjectTempKeeper0 call121;
                _tmp_python_tmp_class = ( call119.assign( _python_tmp_metaclass.asObject() ), call121.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call119.asObject0(), _python_str_plain_RadioFieldRenderer, call121.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_RadioFieldRenderer, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 699 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_ChoiceFieldRenderer.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_31_CheckboxFieldRenderer_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call123;
                PyObjectTempKeeper0 call125;
                _tmp_python_tmp_class = ( call123.assign( _python_tmp_metaclass.asObject() ), call125.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call123.asObject0(), _python_str_plain_CheckboxFieldRenderer, call125.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_CheckboxFieldRenderer, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 703 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_32_RendererMixin_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call127;
                PyObjectTempKeeper0 call129;
                _tmp_python_tmp_class = ( call127.assign( _python_tmp_metaclass.asObject() ), call129.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call127.asObject0(), _python_str_plain_RendererMixin, call129.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_RendererMixin, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 740 );
            PyObject *_tmp_python_tmp_bases;
            {
                PyObjectTempKeeper0 make_tuple131;
                _tmp_python_tmp_bases = ( make_tuple131.assign( _mvar_django__forms__widgets_RendererMixin.asObject0() ), MAKE_TUPLE2( make_tuple131.asObject0(), _mvar_django__forms__widgets_Select.asObject0() ) );
            }
            PyObjectTemporary _python_tmp_bases( _tmp_python_tmp_bases );
            PyObjectTemporary _python_tmp_class_dict( impl_class_33_RadioSelect_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call133;
                PyObjectTempKeeper0 call135;
                _tmp_python_tmp_class = ( call133.assign( _python_tmp_metaclass.asObject() ), call135.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call133.asObject0(), _python_str_plain_RadioSelect, call135.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_RadioSelect, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 745 );
            PyObject *_tmp_python_tmp_bases;
            {
                PyObjectTempKeeper0 make_tuple137;
                _tmp_python_tmp_bases = ( make_tuple137.assign( _mvar_django__forms__widgets_RendererMixin.asObject0() ), MAKE_TUPLE2( make_tuple137.asObject0(), _mvar_django__forms__widgets_SelectMultiple.asObject0() ) );
            }
            PyObjectTemporary _python_tmp_bases( _tmp_python_tmp_bases );
            PyObjectTemporary _python_tmp_class_dict( impl_class_34_CheckboxSelectMultiple_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call139;
                PyObjectTempKeeper0 call141;
                _tmp_python_tmp_class = ( call139.assign( _python_tmp_metaclass.asObject() ), call141.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call139.asObject0(), _python_str_plain_CheckboxSelectMultiple, call141.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_CheckboxSelectMultiple, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 750 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_Widget.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_35_MultiWidget_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call143;
                PyObjectTempKeeper0 call145;
                _tmp_python_tmp_class = ( call143.assign( _python_tmp_metaclass.asObject() ), call145.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call143.asObject0(), _python_str_plain_MultiWidget, call145.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_MultiWidget, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 842 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_MultiWidget.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_36_SplitDateTimeWidget_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call147;
                PyObjectTempKeeper0 call149;
                _tmp_python_tmp_class = ( call147.assign( _python_tmp_metaclass.asObject() ), call149.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call147.asObject0(), _python_str_plain_SplitDateTimeWidget, call149.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_SplitDateTimeWidget, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 858 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__widgets_SplitDateTimeWidget.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_37_SplitHiddenDateTimeWidget_of_module_django__forms__widgets(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__widgets___metaclass__.isInitialized( false ) ? _mvar_django__forms__widgets___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call151;
                PyObjectTempKeeper0 call153;
                _tmp_python_tmp_class = ( call151.assign( _python_tmp_metaclass.asObject() ), call153.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call151.asObject0(), _python_str_plain_SplitHiddenDateTimeWidget, call153.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__widgets, (Nuitka_StringObject *)_python_str_plain_SplitHiddenDateTimeWidget, _python_tmp_class.asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

#if 0
    // TODO: Recognize the need for it
        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = INCREASE_REFCOUNT( ((PyModuleObject *)_module_django__forms__widgets)->md_dict );
#endif

    // Return the error.
        _exception.toPython();
        return MOD_RETURN_VALUE( NULL );
    }

   return MOD_RETURN_VALUE( _module_django__forms__widgets );
}
