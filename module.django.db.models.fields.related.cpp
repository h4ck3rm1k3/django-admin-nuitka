// Generated code for Python source for module 'django.db.models.fields.related'
// created by Nuitka version 0.4.4pre3

// This code is in part copyright 2013 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__modules.hpp"
#include "__constants.hpp"
#include "__helpers.hpp"

// The _module_django__db__models__fields__related is a Python object pointer of module type.

// Note: For full compatability with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *_module_django__db__models__fields__related;
PyDictObject *_moduledict_django__db__models__fields__related;

// The module level variables.
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_AutoField( &_module_django__db__models__fields__related, &_python_str_plain_AutoField );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_CASCADE( &_module_django__db__models__fields__related, &_python_str_plain_CASCADE );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_Field( &_module_django__db__models__fields__related, &_python_str_plain_Field );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_FieldDoesNotExist( &_module_django__db__models__fields__related, &_python_str_plain_FieldDoesNotExist );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_ForeignKey( &_module_django__db__models__fields__related, &_python_str_plain_ForeignKey );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_ForeignObject( &_module_django__db__models__fields__related, &_python_str_plain_ForeignObject );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_ForeignObjectRel( &_module_django__db__models__fields__related, &_python_str_plain_ForeignObjectRel );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_ForeignRelatedObjectsDescriptor( &_module_django__db__models__fields__related, &_python_str_plain_ForeignRelatedObjectsDescriptor );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_IntegerField( &_module_django__db__models__fields__related, &_python_str_plain_IntegerField );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_ManyRelatedObjectsDescriptor( &_module_django__db__models__fields__related, &_python_str_plain_ManyRelatedObjectsDescriptor );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_ManyToManyField( &_module_django__db__models__fields__related, &_python_str_plain_ManyToManyField );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_ManyToManyRel( &_module_django__db__models__fields__related, &_python_str_plain_ManyToManyRel );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_ManyToOneRel( &_module_django__db__models__fields__related, &_python_str_plain_ManyToOneRel );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_OneToOneField( &_module_django__db__models__fields__related, &_python_str_plain_OneToOneField );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_OneToOneRel( &_module_django__db__models__fields__related, &_python_str_plain_OneToOneRel );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_PathInfo( &_module_django__db__models__fields__related, &_python_str_plain_PathInfo );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_PendingDeprecationWarning( &_module_django__db__models__fields__related, &_python_str_plain_PendingDeprecationWarning );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_PositiveIntegerField( &_module_django__db__models__fields__related, &_python_str_plain_PositiveIntegerField );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_PositiveSmallIntegerField( &_module_django__db__models__fields__related, &_python_str_plain_PositiveSmallIntegerField );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_QuerySet( &_module_django__db__models__fields__related, &_python_str_plain_QuerySet );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_RECURSIVE_RELATIONSHIP_CONSTANT( &_module_django__db__models__fields__related, &_python_str_plain_RECURSIVE_RELATIONSHIP_CONSTANT );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_RelatedField( &_module_django__db__models__fields__related, &_python_str_plain_RelatedField );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_RelatedObject( &_module_django__db__models__fields__related, &_python_str_plain_RelatedObject );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_RenameMethodsBase( &_module_django__db__models__fields__related, &_python_str_plain_RenameMethodsBase );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_RenameRelatedObjectDescriptorMethods( &_module_django__db__models__fields__related, &_python_str_plain_RenameRelatedObjectDescriptorMethods );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_ReverseManyRelatedObjectsDescriptor( &_module_django__db__models__fields__related, &_python_str_plain_ReverseManyRelatedObjectsDescriptor );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_ReverseSingleRelatedObjectDescriptor( &_module_django__db__models__fields__related, &_python_str_plain_ReverseSingleRelatedObjectDescriptor );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_SingleRelatedObjectDescriptor( &_module_django__db__models__fields__related, &_python_str_plain_SingleRelatedObjectDescriptor );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related__( &_module_django__db__models__fields__related, &_python_str_plain__ );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related___metaclass__( &_module_django__db__models__fields__related, &_python_str_plain___metaclass__ );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_add_lazy_relation( &_module_django__db__models__fields__related, &_python_str_plain_add_lazy_relation );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_attrgetter( &_module_django__db__models__fields__related, &_python_str_plain_attrgetter );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_cached_property( &_module_django__db__models__fields__related, &_python_str_plain_cached_property );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_connection( &_module_django__db__models__fields__related, &_python_str_plain_connection );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_connections( &_module_django__db__models__fields__related, &_python_str_plain_connections );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_create_many_related_manager( &_module_django__db__models__fields__related, &_python_str_plain_create_many_related_manager );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_create_many_to_many_intermediary_model( &_module_django__db__models__fields__related, &_python_str_plain_create_many_to_many_intermediary_model );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_curry( &_module_django__db__models__fields__related, &_python_str_plain_curry );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_do_pending_lookups( &_module_django__db__models__fields__related, &_python_str_plain_do_pending_lookups );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_exceptions( &_module_django__db__models__fields__related, &_python_str_plain_exceptions );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_forms( &_module_django__db__models__fields__related, &_python_str_plain_forms );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_get_model( &_module_django__db__models__fields__related, &_python_str_plain_get_model );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_pending_lookups( &_module_django__db__models__fields__related, &_python_str_plain_pending_lookups );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_router( &_module_django__db__models__fields__related, &_python_str_plain_router );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_signals( &_module_django__db__models__fields__related, &_python_str_plain_signals );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_six( &_module_django__db__models__fields__related, &_python_str_plain_six );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_smart_text( &_module_django__db__models__fields__related, &_python_str_plain_smart_text );
static PyObjectGlobalVariable_django__db__models__fields__related _mvar_django__db__models__fields__related_util( &_module_django__db__models__fields__related, &_python_str_plain_util );

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_class_3_RelatedField_of_module_django__db__models__fields__related(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_4_RenameRelatedObjectDescriptorMethods_of_module_django__db__models__fields__related(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_instance_attr );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_field, PyObjectLocalParameterVariableNoDel &python_closure_instance );


NUITKA_LOCAL_MODULE PyObject *impl_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_instance_attr );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_instance );


NUITKA_LOCAL_MODULE PyObject *impl_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_RelatedManager, PyObjectSharedLocalVariable &python_closure_rel_field, PyObjectSharedLocalVariable &python_closure_rel_model );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_instance_attr );


NUITKA_LOCAL_MODULE PyObject *impl_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_ManyRelatedManager, PyObjectLocalParameterVariableNoDel &python_closure_rel );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_join_table, PyObjectSharedLocalVariable &python_closure_qn );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_f, PyObjectLocalParameterVariableNoDel &python_closure_result );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_f, PyObjectLocalParameterVariableNoDel &python_closure_inst );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_obj_id, PyObjectLocalParameterVariableNoDel &python_closure_self, PyObjectLocalParameterVariableNoDel &python_closure_source_field_name, PyObjectLocalParameterVariableNoDel &python_closure_target_field_name );


NUITKA_LOCAL_MODULE PyObject *impl_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_12_ManyToOneRel_of_module_django__db__models__fields__related(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_13_OneToOneRel_of_module_django__db__models__fields__related(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_14_ManyToManyRel_of_module_django__db__models__fields__related(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_lhs_field, PyObjectLocalVariable &python_closure_rhs_field );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_lhs_field, PyObjectLocalVariable &python_closure_rhs_field );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_lhs_field, PyObjectLocalVariable &python_closure_rhs_field );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_field, PyObjectLocalParameterVariableNoDel &python_closure_instance );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_lhs_field, PyObjectLocalVariable &python_closure_rhs_field );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_target );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_3_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_source );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_4_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_get_normalized_value, PyObjectLocalVariable &python_closure_value );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_5_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_val );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_6_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_get_normalized_value, PyObjectLocalVariable &python_closure_value );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_field );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_field );


NUITKA_LOCAL_MODULE PyObject *impl_class_16_ForeignKey_of_module_django__db__models__fields__related(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_17_OneToOneField_of_module_django__db__models__fields__related(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_instance );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_i );


static PyObject *MAKE_FUNCTION_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_12_set_attributes_from_rel_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_13_get_extra_descriptor_filter_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_14_get_extra_restriction_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_ManyRelatedManager );


// This structure is for attachment as self of function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_ManyRelatedManager;
};

static void _context_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = (_context_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_RelatedManager, PyObjectSharedLocalVariable &python_closure_rel_field, PyObjectSharedLocalVariable &python_closure_rel_model );


// This structure is for attachment as self of function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_RelatedManager;
    PyObjectClosureVariable python_closure_rel_field;
    PyObjectClosureVariable python_closure_rel_model;
};

static void _context_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (_context_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1_add_lazy_relation_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1_db_type_of_class_3_RelatedField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_sources );


// This structure is for attachment as self of function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_sources;
};

static void _context_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related_t *_python_context = (_context_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_2_do_pending_lookups_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_RelatedManager, PyObjectSharedLocalVariable &python_closure_rel_field );


// This structure is for attachment as self of function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_RelatedManager;
    PyObjectClosureVariable python_closure_rel_field;
};

static void _context_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (_context_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_RelatedManager, PyObjectSharedLocalVariable &python_closure_rel_field );


// This structure is for attachment as self of function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_RelatedManager;
    PyObjectClosureVariable python_closure_rel_field;
};

static void _context_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (_context_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_ManyRelatedManager );


// This structure is for attachment as self of function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_ManyRelatedManager;
};

static void _context_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = (_context_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_rel_field );


// This structure is for attachment as self of function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_rel_field;
};

static void _context_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (_context_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_ManyRelatedManager );


// This structure is for attachment as self of function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_ManyRelatedManager;
};

static void _context_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = (_context_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_RelatedManager, PyObjectSharedLocalVariable &python_closure_rel_field );


// This structure is for attachment as self of function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_RelatedManager;
    PyObjectClosureVariable python_closure_rel_field;
};

static void _context_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (_context_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_RelatedManager, PyObjectSharedLocalVariable &python_closure_rel_field );


// This structure is for attachment as self of function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_RelatedManager;
    PyObjectClosureVariable python_closure_rel_field;
};

static void _context_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (_context_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_rel_field );


// This structure is for attachment as self of function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_rel_field;
};

static void _context_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (_context_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_rel_field );


// This structure is for attachment as self of function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_rel_field;
};

static void _context_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (_context_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_ManyRelatedManager );


// This structure is for attachment as self of function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_ManyRelatedManager;
};

static void _context_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = (_context_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_ManyRelatedManager );


// This structure is for attachment as self of function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_ManyRelatedManager;
};

static void _context_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = (_context_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_get_m2m_rel );


// This structure is for attachment as self of lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_get_m2m_rel;
};

static void _context_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_t *_python_context = (_context_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  );


static PyObject *MAKE_FUNCTION_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_get_m2m_reverse_rel );


// This structure is for attachment as self of lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_get_m2m_reverse_rel;
};

static void _context_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_t *_python_context = (_context_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_fk );


// This structure is for attachment as self of lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_fk;
};

static void _context_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = (_context_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_fk );


// This structure is for attachment as self of lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related.
// It is allocated at the time the function object is created.
struct _context_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_fk;
};

static void _context_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = (_context_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *)context_voidptr;



    delete _python_context;
}


// The module function definitions.
static PyObject *impl_function_1_add_lazy_relation_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_cls, PyObject *_python_par_field, PyObject *_python_par_relation, PyObject *_python_par_operation )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );
    PyObjectLocalParameterVariableNoDel _python_var_field( _python_str_plain_field, _python_par_field );
    PyObjectLocalParameterVariableNoDel _python_var_relation( _python_str_plain_relation, _python_par_relation );
    PyObjectLocalParameterVariableNoDel _python_var_operation( _python_str_plain_operation, _python_par_operation );
    PyObjectLocalVariable _python_var_app_label( _python_str_plain_app_label );
    PyObjectLocalVariable _python_var_model_name( _python_str_plain_model_name );
    PyObjectLocalVariable _python_var_model( _python_str_plain_model );
    PyObjectLocalVariable _python_var_key( _python_str_plain_key );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );

    // Actual function code.
    static PyFrameObject *frame_function_1_add_lazy_relation_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1_add_lazy_relation_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1_add_lazy_relation_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_add_lazy_relation_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1_add_lazy_relation_of_module_django__db__models__fields__related );
        }

        frame_function_1_add_lazy_relation_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_c3a2dbc6975ec3333c2eaa6929091771, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1_add_lazy_relation_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1_add_lazy_relation_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 50 );
        {
            PyObjectTempKeeper0 cmp3;
            if ( ( cmp3.assign( _python_var_relation.asObject() ), RICH_COMPARE_BOOL_EQ( cmp3.asObject0(), _mvar_django__db__models__fields__related_RECURSIVE_RELATIONSHIP_CONSTANT.asObject0() ) ) )
        {
            frame_guard.setLineNumber( 51 );
            _python_var_app_label.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_app_label ) );
            frame_guard.setLineNumber( 52 );
            _python_var_model_name.assign1( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain___name__ ) );
        }
        else
        {
            frame_guard.setLineNumber( 57 );
            {
                PyObjectTempKeeper0 isinstance1;
                if ( ( isinstance1.assign( _python_var_relation.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) )
            {
                frame_guard.setLineNumber( 58 );
                try
                {
                    {
                        frame_guard.setLineNumber( 59 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_relation.asObject(), _python_str_plain_split ) ).asObject(), _python_str_dot ) ).asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_app_label.assign0( _python_tmp_element_1.asObject() );
                        _python_var_model_name.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( PyExc_ValueError ) )
                    {
                        frame_guard.detachFrame();
                        frame_guard.setLineNumber( 62 );
                        _python_var_app_label.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_app_label ) );
                        frame_guard.setLineNumber( 63 );
                        _python_var_model_name.assign0( _python_var_relation.asObject() );
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }
            }
            else
            {
                frame_guard.setLineNumber( 66 );
                _python_var_app_label.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_relation.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_app_label ) );
                frame_guard.setLineNumber( 67 );
                _python_var_model_name.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_relation.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) );
            }
            }
        }
        }
        frame_guard.setLineNumber( 73 );
        {
            PyObjectTempKeeper0 call7;
            PyObjectTempKeeper0 make_tuple5;
            _python_var_model.assign1( ( call7.assign( _mvar_django__db__models__fields__related_get_model.asObject0() ), CALL_FUNCTION( call7.asObject0(), PyObjectTemporary( ( make_tuple5.assign( _python_var_app_label.asObject() ), MAKE_TUPLE2( make_tuple5.asObject0(), _python_var_model_name.asObject() ) ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_efd1f8e1afb2a58ff97c10d5c64fa9af ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 75 );
        if ( CHECK_IF_TRUE( _python_var_model.asObject() ) )
        {
            frame_guard.setLineNumber( 76 );
            {
                PyObjectTempKeeper0 call10;
                PyObjectTempKeeper0 call11;
                PyObjectTempKeeper0 call12;
                DECREASE_REFCOUNT( ( call10.assign( _python_var_operation.asObject() ), call11.assign( _python_var_field.asObject() ), call12.assign( _python_var_model.asObject() ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), call11.asObject0(), call12.asObject0(), _python_var_cls.asObject() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 78 );
            {
                PyObjectTempKeeper0 make_tuple14;
                _python_var_key.assign1( ( make_tuple14.assign( _python_var_app_label.asObject() ), MAKE_TUPLE2( make_tuple14.asObject0(), _python_var_model_name.asObject() ) ) );
            }
            frame_guard.setLineNumber( 79 );
            {
                PyObjectTempKeeper0 make_tuple16;
                PyObjectTempKeeper0 make_tuple17;
                _python_var_value.assign1( ( make_tuple16.assign( _python_var_cls.asObject() ), make_tuple17.assign( _python_var_field.asObject() ), MAKE_TUPLE3( make_tuple16.asObject0(), make_tuple17.asObject0(), _python_var_operation.asObject() ) ) );
            }
            frame_guard.setLineNumber( 80 );
            {
                PyObjectTempKeeper1 call19;
                PyObjectTempKeeper1 call22;
                DECREASE_REFCOUNT( ( call22.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call19.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_pending_lookups.asObject0(), _python_str_plain_setdefault ) ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), _python_var_key.asObject(), PyObjectTemporary( PyList_New( 0 ) ).asObject() ) ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call22.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_operation.updateLocalsDict( _python_var_relation.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_cls.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_key.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_model_name.updateLocalsDict( _python_var_app_label.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_add_lazy_relation_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1_add_lazy_relation_of_module_django__db__models__fields__related );
           frame_function_1_add_lazy_relation_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1_add_lazy_relation_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_cls = NULL;
    PyObject *_python_par_field = NULL;
    PyObject *_python_par_relation = NULL;
    PyObject *_python_par_operation = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add_lazy_relation() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "add_lazy_relation() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field == key )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "add_lazy_relation() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_relation == key )
            {
                if (unlikely( _python_par_relation ))
                {
                    PyErr_Format( PyExc_TypeError, "add_lazy_relation() got multiple values for keyword argument 'relation'" );
                    goto error_exit;
                }

                _python_par_relation = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_operation == key )
            {
                if (unlikely( _python_par_operation ))
                {
                    PyErr_Format( PyExc_TypeError, "add_lazy_relation() got multiple values for keyword argument 'operation'" );
                    goto error_exit;
                }

                _python_par_operation = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "add_lazy_relation() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field, key ) )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "add_lazy_relation() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_relation, key ) )
            {
                if (unlikely( _python_par_relation ))
                {
                    PyErr_Format( PyExc_TypeError, "add_lazy_relation() got multiple values for keyword argument 'relation'" );
                    goto error_exit;
                }

                _python_par_relation = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_operation, key ) )
            {
                if (unlikely( _python_par_operation ))
                {
                    PyErr_Format( PyExc_TypeError, "add_lazy_relation() got multiple values for keyword argument 'operation'" );
                    goto error_exit;
                }

                _python_par_operation = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add_lazy_relation() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_lazy_relation() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "add_lazy_relation() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "add_lazy_relation() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "add_lazy_relation() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "add_lazy_relation() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_lazy_relation() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "add_lazy_relation() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "add_lazy_relation() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add_lazy_relation() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add_lazy_relation() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "add_lazy_relation() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "add_lazy_relation() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_lazy_relation() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_lazy_relation() got multiple values for keyword argument 'field'" );
             goto error_exit;
         }

        _python_par_field = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_relation != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_lazy_relation() got multiple values for keyword argument 'relation'" );
             goto error_exit;
         }

        _python_par_relation = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_operation != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add_lazy_relation() got multiple values for keyword argument 'operation'" );
             goto error_exit;
         }

        _python_par_operation = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_1_add_lazy_relation_of_module_django__db__models__fields__related( self, _python_par_cls, _python_par_field, _python_par_relation, _python_par_operation );

error_exit:;

    Py_XDECREF( _python_par_cls );
    Py_XDECREF( _python_par_field );
    Py_XDECREF( _python_par_relation );
    Py_XDECREF( _python_par_operation );

    return NULL;
}

static PyObject *dparse_function_1_add_lazy_relation_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1_add_lazy_relation_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_add_lazy_relation_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_do_pending_lookups_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_sender, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_sender( _python_str_plain_sender, _python_par_sender );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_key( _python_str_plain_key );
    PyObjectLocalVariable _python_var_cls( _python_str_plain_cls );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_operation( _python_str_plain_operation );

    // Actual function code.
    static PyFrameObject *frame_function_2_do_pending_lookups_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_2_do_pending_lookups_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_2_do_pending_lookups_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_do_pending_lookups_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_2_do_pending_lookups_of_module_django__db__models__fields__related );
        }

        frame_function_2_do_pending_lookups_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_ba13a8aad5dbb25e08e1152bf7a22edc, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_2_do_pending_lookups_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_2_do_pending_lookups_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 87 );
        {
            PyObjectTempKeeper1 make_tuple1;
            _python_var_key.assign1( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_sender.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_app_label ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_sender.asObject(), _python_str_plain___name__ ) ).asObject() ) ) );
        }
        {
            frame_guard.setLineNumber( 88 );
            PyObject *_tmp_python_tmp_for_iterator;
            {
                PyObjectTempKeeper1 call3;
                _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_pending_lookups.asObject0(), _python_str_plain_pop ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_key.asObject(), PyObjectTemporary( PyList_New( 0 ) ).asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 88 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 88 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 3 );
                        _python_var_cls.assign0( _python_tmp_element_1.asObject() );
                        _python_var_field.assign0( _python_tmp_element_2.asObject() );
                        _python_var_operation.assign0( _python_tmp_element_3.asObject() );
                    }
                }
                frame_guard.setLineNumber( 89 );
                {
                    PyObjectTempKeeper0 call6;
                    PyObjectTempKeeper0 call7;
                    PyObjectTempKeeper0 call8;
                    DECREASE_REFCOUNT( ( call6.assign( _python_var_operation.asObject() ), call7.assign( _python_var_field.asObject() ), call8.assign( _python_var_sender.asObject() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), call7.asObject0(), call8.asObject0(), _python_var_cls.asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_sender.updateLocalsDict( _python_var_operation.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_cls.updateLocalsDict( _python_var_key.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_do_pending_lookups_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_2_do_pending_lookups_of_module_django__db__models__fields__related );
           frame_function_2_do_pending_lookups_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_2_do_pending_lookups_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_sender = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "do_pending_lookups() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "do_pending_lookups() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "do_pending_lookups() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument sender was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_sender );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_sender == NULL );

            _python_par_sender = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_sender );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "do_pending_lookups() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "do_pending_lookups() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "do_pending_lookups() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "do_pending_lookups() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "do_pending_lookups() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "do_pending_lookups() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "do_pending_lookups() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "do_pending_lookups() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "do_pending_lookups() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "do_pending_lookups() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "do_pending_lookups() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "do_pending_lookups() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_sender != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "do_pending_lookups() got multiple values for keyword argument 'sender'" );
             goto error_exit;
         }

        _python_par_sender = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_do_pending_lookups_of_module_django__db__models__fields__related( self, _python_par_sender, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_sender );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_2_do_pending_lookups_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_do_pending_lookups_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_2_do_pending_lookups_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_3_RelatedField_of_module_django__db__models__fields__related(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_db_type( _python_str_plain_db_type );
    PyObjectLocalVariable _python_var_contribute_to_class( _python_str_plain_contribute_to_class );
    PyObjectLocalVariable _python_var_set_attributes_from_rel( _python_str_plain_set_attributes_from_rel );
    PyObjectLocalVariable _python_var_do_related_class( _python_str_plain_do_related_class );
    PyObjectLocalVariable _python_var_related_query_name( _python_str_plain_related_query_name );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    _python_var_db_type.assign1( MAKE_FUNCTION_function_1_db_type_of_class_3_RelatedField_of_module_django__db__models__fields__related(  ) );
    _python_var_contribute_to_class.assign1( MAKE_FUNCTION_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related(  ) );
    _python_var_set_attributes_from_rel.assign1( MAKE_FUNCTION_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related(  ) );
    _python_var_do_related_class.assign1( MAKE_FUNCTION_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related(  ) );
    _python_var_related_query_name.assign1( MAKE_FUNCTION_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related(  ) );
    return _python_var_related_query_name.updateLocalsDict( _python_var_do_related_class.updateLocalsDict( _python_var_set_attributes_from_rel.updateLocalsDict( _python_var_contribute_to_class.updateLocalsDict( _python_var_db_type.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );
}


static PyObject *impl_function_1_db_type_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_connection )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1_db_type_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_connection = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "db_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "db_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "db_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "db_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "db_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "db_type() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "db_type() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "db_type() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "db_type() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "db_type() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "db_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "db_type() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "db_type() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "db_type() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_db_type_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_connection );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_connection );

    return NULL;
}

static PyObject *dparse_function_1_db_type_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_db_type_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_db_type_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_cls, PyObject *_python_par_name, PyObject *_python_par_virtual_only )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_virtual_only( _python_str_plain_virtual_only, _python_par_virtual_only );
    PyObjectLocalVariable _python_var_sup( _python_str_plain_sup );
    PyObjectLocalVariable _python_var_related_name( _python_str_plain_related_name );
    PyObjectLocalVariable _python_var_other( _python_str_plain_other );
    PyObjectLocalVariable _python_var_resolve_related_class( _python_str_plain_resolve_related_class );

    // Actual function code.
    static PyFrameObject *frame_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related );
        }

        frame_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_bc5b0aeaebfc7156df826839387a6c62, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 102 );
        {
            PyObjectTempKeeper0 super1;
            _python_var_sup.assign1( ( super1.assign( _mvar_django__db__models__fields__related_RelatedField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) );
        }
        frame_guard.setLineNumber( 105 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_opts );
        }
        frame_guard.setLineNumber( 107 );
        if ( HAS_ATTRIBUTE( _python_var_sup.asObject(), _python_str_plain_contribute_to_class ) )
        {
            frame_guard.setLineNumber( 108 );
            {
                PyObjectTempKeeper1 call5;
                PyObjectTempKeeper1 call6;
                PyObjectTempKeeper0 make_tuple3;
                DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_sup.asObject(), _python_str_plain_contribute_to_class ) ), call6.assign( ( make_tuple3.assign( _python_var_cls.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), _python_var_name.asObject() ) ) ), CALL_FUNCTION( call5.asObject0(), call6.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_virtual_only.asObject(), _python_str_plain_virtual_only ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 110 );
        if ( ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_abstract ) ).asObject() ) )) && CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_related_name ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 111 );
            {
                PyObjectTempKeeper1 make_dict8;
                PyObjectTempKeeper1 op12;
                _python_var_related_name.assign1( ( op12.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_related_name ) ), BINARY_OPERATION_REMAINDER( op12.asObject0(), PyObjectTemporary( ( make_dict8.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain___name__ ) ).asObject(), _python_str_plain_lower ) ).asObject() ) ), MAKE_DICT2( make_dict8.asObject0(), _python_str_plain_class, PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_app_label ) ).asObject(), _python_str_plain_lower ) ).asObject() ) ).asObject(), _python_str_plain_app_label ) ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 115 );
            {
                    PyObject *tmp_identifier = _python_var_related_name.asObject();
                    SET_ATTRIBUTE( tmp_identifier, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_related_name );
            }
        }
        frame_guard.setLineNumber( 116 );
        _python_var_other.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) );
        frame_guard.setLineNumber( 117 );
        {
            PyObjectTempKeeper0 isinstance22;
            if ( ( ( isinstance22.assign( _python_var_other.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance22.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) || ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_other.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk ) ).asObject() == Py_None ) ) )
        {
            _python_var_resolve_related_class.assign1( MAKE_FUNCTION_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related(  ) );
            frame_guard.setLineNumber( 121 );
            {
                PyObjectTempKeeper0 call14;
                PyObjectTempKeeper0 call15;
                PyObjectTempKeeper0 call16;
                PyObjectTempKeeper0 call17;
                DECREASE_REFCOUNT( ( call14.assign( _mvar_django__db__models__fields__related_add_lazy_relation.asObject0() ), call15.assign( _python_var_cls.asObject() ), call16.assign( _python_var_self.asObject() ), call17.assign( _python_var_other.asObject() ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), call15.asObject0(), call16.asObject0(), call17.asObject0(), _python_var_resolve_related_class.asObject() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 123 );
            {
                PyObjectTempKeeper1 call19;
                PyObjectTempKeeper0 call20;
                DECREASE_REFCOUNT( ( call19.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_do_related_class ) ), call20.assign( _python_var_other.asObject() ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), call20.asObject0(), _python_var_cls.asObject() ) ) );
            }
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_virtual_only.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_cls.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_resolve_related_class.updateLocalsDict( _python_var_other.updateLocalsDict( _python_var_related_name.updateLocalsDict( _python_var_sup.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related );
           frame_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_cls = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_virtual_only = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_virtual_only == key )
            {
                if (unlikely( _python_par_virtual_only ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'virtual_only'" );
                    goto error_exit;
                }

                _python_par_virtual_only = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_virtual_only, key ) )
            {
                if (unlikely( _python_par_virtual_only ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'virtual_only'" );
                    goto error_exit;
                }

                _python_par_virtual_only = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "contribute_to_class() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_virtual_only != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'virtual_only'" );
             goto error_exit;
         }

        _python_par_virtual_only = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_virtual_only == NULL )
    {
        _python_par_virtual_only = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_virtual_only );
    }


    return impl_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_cls, _python_par_name, _python_par_virtual_only );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_cls );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_virtual_only );

    return NULL;
}

static PyObject *dparse_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_field, PyObject *_python_par_model, PyObject *_python_par_cls )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_field( _python_str_plain_field, _python_par_field );
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );

    // Actual function code.
    static PyFrameObject *frame_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related );
        }

        frame_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_9ba540e9f4a19c064ad24d2178d4810d, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 119 );
        {
                PyObject *tmp_identifier = _python_var_model.asObject();
                SET_ATTRIBUTE( tmp_identifier, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to );
        }
        frame_guard.setLineNumber( 120 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_do_related_class ) ), call2.assign( _python_var_model.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_cls.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_cls.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_field.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related );
           frame_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_field = NULL;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_cls = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "resolve_related_class() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_field == key )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_related_class() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_related_class() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_related_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field, key ) )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_related_class() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_related_class() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_related_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "resolve_related_class() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "resolve_related_class() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "resolve_related_class() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "resolve_related_class() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "resolve_related_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "resolve_related_class() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "resolve_related_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "resolve_related_class() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "resolve_related_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "resolve_related_class() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "resolve_related_class() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "resolve_related_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "resolve_related_class() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve_related_class() got multiple values for keyword argument 'field'" );
             goto error_exit;
         }

        _python_par_field = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve_related_class() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve_related_class() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, _python_par_field, _python_par_model, _python_par_cls );

error_exit:;

    Py_XDECREF( _python_par_field );
    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_cls );

    return NULL;
}

static PyObject *dparse_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related );
        }

        frame_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_4c143e6082456ae695f0b64a6e74ac9f, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 126 );
        {
            PyObjectTempKeeper1 keeper_0;
            PyObjectTempKeeper1 op1;
            {
                PyObjectTemporary tmp_identifier( ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ) ) ? keeper_0.asObject() : ( op1.assign( BINARY_OPERATION_ADD( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_model_name ) ).asObject(), _python_str_plain__ ) ), BINARY_OPERATION_ADD( op1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk ) ).asObject(), _python_str_plain_name ) ).asObject() ) ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_name );
        }
        }
        frame_guard.setLineNumber( 127 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_verbose_name ) ).asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 128 );
            {
                    PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_verbose_name ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_verbose_name );
            }
        }
        frame_guard.setLineNumber( 129 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_set_field_name ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related );
           frame_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "set_attributes_from_rel() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_other, PyObject *_python_par_cls )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_other( _python_str_plain_other, _python_par_other );
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );

    // Actual function code.
    static PyFrameObject *frame_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related );
        }

        frame_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_0e9a372826592849853aab29adc747a4, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 132 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_set_attributes_from_rel ) ).asObject() ) );
        frame_guard.setLineNumber( 133 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            PyObjectTempKeeper0 call3;
            {
                PyObjectTemporary tmp_identifier( ( call1.assign( _mvar_django__db__models__fields__related_RelatedObject.asObject0() ), call2.assign( _python_var_other.asObject() ), call3.assign( _python_var_cls.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), _python_var_self.asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_related );
        }
        }
        frame_guard.setLineNumber( 134 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_abstract ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 135 );
            {
                PyObjectTempKeeper1 call5;
                PyObjectTempKeeper0 call6;
                DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_contribute_to_related_class ) ), call6.assign( _python_var_other.asObject() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), call6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject() ) ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_cls.updateLocalsDict( _python_var_other.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related );
           frame_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_other = NULL;
    PyObject *_python_par_cls = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "do_related_class() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "do_related_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_other == key )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "do_related_class() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "do_related_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "do_related_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_other, key ) )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "do_related_class() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "do_related_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "do_related_class() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "do_related_class() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "do_related_class() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "do_related_class() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "do_related_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "do_related_class() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "do_related_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "do_related_class() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "do_related_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "do_related_class() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "do_related_class() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "do_related_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "do_related_class() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "do_related_class() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_other != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "do_related_class() got multiple values for keyword argument 'other'" );
             goto error_exit;
         }

        _python_par_other = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "do_related_class() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_other, _python_par_cls );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_other );
    Py_XDECREF( _python_par_cls );

    return NULL;
}

static PyObject *dparse_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related );
        }

        frame_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_f5ce7a5ec9a158a5c33edb9a96940fcd, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 142 );
        {
            PyObjectTempKeeper1 keeper_0;
            return ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_related_name ) ) ) ? keeper_0.asObject() : LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_opts ) ).asObject(), _python_str_plain_model_name ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related );
           frame_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "related_query_name() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "related_query_name() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "related_query_name() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "related_query_name() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "related_query_name() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "related_query_name() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "related_query_name() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "related_query_name() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "related_query_name() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "related_query_name() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "related_query_name() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "related_query_name() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "related_query_name() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "related_query_name() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "related_query_name() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "related_query_name() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "related_query_name() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_4_RenameRelatedObjectDescriptorMethods_of_module_django__db__models__fields__related(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_renamed_methods( _python_str_plain_renamed_methods );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    static PyFrameObject *frame_class_4_RenameRelatedObjectDescriptorMethods_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_class_4_RenameRelatedObjectDescriptorMethods_of_module_django__db__models__fields__related ) )
    {
        if ( frame_class_4_RenameRelatedObjectDescriptorMethods_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_4_RenameRelatedObjectDescriptorMethods_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_class_4_RenameRelatedObjectDescriptorMethods_of_module_django__db__models__fields__related );
        }

        frame_class_4_RenameRelatedObjectDescriptorMethods_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_e675b624b54cb2655f3c8a5fa60b2983, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_class_4_RenameRelatedObjectDescriptorMethods_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_class_4_RenameRelatedObjectDescriptorMethods_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 146 );
        {
            PyObjectTempKeeper1 make_tuple1;
            _python_var_renamed_methods.assign1( ( make_tuple1.assign( MAKE_TUPLE3( _python_str_plain_get_query_set, _python_str_plain_get_queryset, _mvar_django__db__models__fields__related_PendingDeprecationWarning.asObject0() ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( MAKE_TUPLE3( _python_str_plain_get_prefetch_query_set, _python_str_plain_get_prefetch_queryset, _mvar_django__db__models__fields__related_PendingDeprecationWarning.asObject0() ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_renamed_methods.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_class_4_RenameRelatedObjectDescriptorMethods_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_class_4_RenameRelatedObjectDescriptorMethods_of_module_django__db__models__fields__related );
           frame_class_4_RenameRelatedObjectDescriptorMethods_of_module_django__db__models__fields__related = NULL;
        }

        throw;
    }
    return _python_var_renamed_methods.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );
}


NUITKA_LOCAL_MODULE PyObject *impl_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_is_cached( _python_str_plain_is_cached );
    PyObjectLocalVariable _python_var_get_queryset( _python_str_plain_get_queryset );
    PyObjectLocalVariable _python_var_get_prefetch_queryset( _python_str_plain_get_prefetch_queryset );
    PyObjectLocalVariable _python_var___get__( _python_str_plain___get__ );
    PyObjectLocalVariable _python_var___set__( _python_str_plain___set__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  ) );
    _python_var_is_cached.assign1( MAKE_FUNCTION_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  ) );
    _python_var_get_queryset.assign1( MAKE_FUNCTION_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  ) );
    _python_var_get_prefetch_queryset.assign1( MAKE_FUNCTION_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  ) );
    _python_var___get__.assign1( MAKE_FUNCTION_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  ) );
    _python_var___set__.assign1( MAKE_FUNCTION_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  ) );
    return _python_var___set__.updateLocalsDict( _python_var___get__.updateLocalsDict( _python_var_get_prefetch_queryset.updateLocalsDict( _python_var_get_queryset.updateLocalsDict( _python_var_is_cached.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_related )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_related( _python_str_plain_related, _python_par_related );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_64137537a7a0647acc0ef6c26cd56e96, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 159 );
        {
                PyObject *tmp_identifier = _python_var_related.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_related );
        }
        frame_guard.setLineNumber( 160 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_related.asObject(), _python_str_plain_get_cache_name ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_cache_name );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_related.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
           frame_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_related = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_related == key )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_related, key ) )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_related != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related'" );
             goto error_exit;
         }

        _python_par_related = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_related );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_related );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );

    // Actual function code.
    static PyFrameObject *frame_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_d28d5ae34d13fda664469a4ea2a69fff, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 163 );
        {
            PyObjectTempKeeper0 hasattr1;
            return INCREASE_REFCOUNT( BOOL_FROM( ( hasattr1.assign( _python_var_instance.asObject() ), HAS_ATTRIBUTE( hasattr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cache_name ) ).asObject() ) ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
           frame_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "is_cached() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "is_cached() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "is_cached() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "is_cached() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "is_cached() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "is_cached() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_cached() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "is_cached() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "is_cached() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_cached() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "is_cached() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_cached() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "is_cached() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_cached() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "is_cached() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "is_cached() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "is_cached() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "is_cached() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "is_cached() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "is_cached() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );

    return NULL;
}

static PyObject *dparse_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_db_hints )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_db_hints( _python_str_plain_db_hints, _python_par_db_hints );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );

    // Actual function code.
    static PyFrameObject *frame_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_16beb6b8ed16da453e0464b2a8319278, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 166 );
        {
            PyObjectTempKeeper1 call_tmp1;
            PyObjectTempKeeper1 call_tmp2;
            _python_var_db.assign1( ( call_tmp1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_read ) ), call_tmp2.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_model ) ).asObject() ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp1.asObject(), call_tmp2.asObject(), _python_var_db_hints.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 167 );
        {
            PyObjectTempKeeper1 call4;
            return ( call4.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__base_manager ) ).asObject(), _python_str_plain_using ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_db.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_db_hints.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_db.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
           frame_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_db_hints = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_db_hints = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_db_hints = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "get_queryset() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_db_hints, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_db_hints = (PyObject *)split_copy;
        }
        else
        {
            _python_par_db_hints = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "get_queryset() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_db_hints, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_db_hints = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_db_hints, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_db_hints, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_queryset() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_queryset() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_db_hints );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_db_hints );

    return NULL;
}

static PyObject *dparse_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instances )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instances( _python_str_plain_instances, _python_par_instances );
    PyObjectLocalVariable _python_var_rel_obj_attr( _python_str_plain_rel_obj_attr );
    PyObjectSharedLocalVariable _python_var_instance_attr( _python_str_plain_instance_attr );
    PyObjectLocalVariable _python_var_instances_dict( _python_str_plain_instances_dict );
    PyObjectLocalVariable _python_var_query( _python_str_plain_query );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );
    PyObjectLocalVariable _python_var_rel_obj_cache_name( _python_str_plain_rel_obj_cache_name );
    PyObjectLocalVariable _python_var_rel_obj( _python_str_plain_rel_obj );
    PyObjectLocalVariable _python_var_instance( _python_str_plain_instance );

    // Actual function code.
    static PyFrameObject *frame_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_0e5350cfbd538e0fa91c20eb9baa856c, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 170 );
        {
            PyObjectTempKeeper0 call1;
            _python_var_rel_obj_attr.assign1( ( call1.assign( _mvar_django__db__models__fields__related_attrgetter.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_attname ) ).asObject() ) ) );
        }
        _python_var_instance_attr.assign1( MAKE_FUNCTION_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  ) );
        frame_guard.setLineNumber( 172 );
        _python_var_instances_dict.assign1( TO_DICT( PyObjectTemporary( impl_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( MAKE_ITERATOR( _python_var_instances.asObject() ), _python_var_instance_attr ) ).asObject(), NULL ) );
        frame_guard.setLineNumber( 173 );
        {
            PyObjectTempKeeper0 make_dict3;
            _python_var_query.assign1( ( make_dict3.assign( _python_var_instances.asObject() ), MAKE_DICT1( make_dict3.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_38b85e9cb3ddf8db51dfdd4b8d89df1e, PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_name ) ).asObject() ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 174 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper1 call_tmp8;
            _python_var_qs.assign1( ( call_tmp8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_queryset ) ), CALL_FUNCTION( call5.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_instances.asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain_instance ) ).asObject() ) ) ).asObject(), _python_str_plain_filter ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp8.asObject(), _python_var_query.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 177 );
        _python_var_rel_obj_cache_name.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_get_cache_name ) ).asObject() ) );
        {
            frame_guard.setLineNumber( 178 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_qs.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 178 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_rel_obj.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 179 );
                {
                    PyObjectTempKeeper0 call10;
                    PyObjectTempKeeper0 subscr12;
                    _python_var_instance.assign1( ( subscr12.assign( _python_var_instances_dict.asObject() ), LOOKUP_SUBSCRIPT( subscr12.asObject0(), PyObjectTemporary( ( call10.assign( _python_var_rel_obj_attr.asObject() ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), _python_var_rel_obj.asObject() ) ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 180 );
                {
                    PyObjectTempKeeper0 setattr14;
                    PyObjectTempKeeper0 setattr15;
                    ( ( setattr14.assign( _python_var_rel_obj.asObject() ), setattr15.assign( _python_var_rel_obj_cache_name.asObject() ), BUILTIN_SETATTR( setattr14.asObject0(), setattr15.asObject0(), _python_var_instance.asObject() ) ), Py_None );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 181 );
        {
            PyObjectTempKeeper0 make_tuple17;
            PyObjectTempKeeper0 make_tuple18;
            PyObjectTempKeeper0 make_tuple19;
            return ( make_tuple17.assign( _python_var_qs.asObject() ), make_tuple18.assign( _python_var_rel_obj_attr.asObject() ), make_tuple19.assign( _python_var_instance_attr.asObject() ), MAKE_TUPLE5( make_tuple17.asObject0(), make_tuple18.asObject0(), make_tuple19.asObject0(), Py_True, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cache_name ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_instances.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_rel_obj.updateLocalsDict( _python_var_rel_obj_cache_name.updateLocalsDict( _python_var_qs.updateLocalsDict( _python_var_query.updateLocalsDict( _python_var_instances_dict.updateLocalsDict( _python_var_instance_attr.updateLocalsDict( _python_var_rel_obj_attr.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
           frame_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instances = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instances == key )
            {
                if (unlikely( _python_par_instances ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'instances'" );
                    goto error_exit;
                }

                _python_par_instances = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instances, key ) )
            {
                if (unlikely( _python_par_instances ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'instances'" );
                    goto error_exit;
                }

                _python_par_instances = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prefetch_queryset() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instances != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'instances'" );
             goto error_exit;
         }

        _python_par_instances = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instances );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instances );

    return NULL;
}

static PyObject *dparse_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_obj( _python_str_plain_obj, _python_par_obj );

    // Actual function code.
    static PyFrameObject *frame_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
        }

        frame_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_a0f34d4020f97e5efaa5c5013ca6b3ab, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 171 );
        return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain__get_pk_val ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_obj.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
           frame_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_obj = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_obj == key )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_obj, key ) )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "<lambda>() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "<lambda>() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'obj'" );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectClosureVariable python_closure_instance_attr;
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_inst;
};

static void _context_generator_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_generator_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t *_python_context = (struct _context_generator_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t *_python_context = (_context_generator_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_inst.setVariableName( _python_str_plain_inst );

        // Actual function code.
        static PyFrameObject *frame_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) )
        {
            if ( frame_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related" );
#endif
                Py_DECREF( frame_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
            }

            frame_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_d5035276cd99e58defcda4b54e4068ce, _module_django__db__models__fields__related );
        }

        Py_INCREF( frame_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
        generator->m_frame = frame_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 172 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 172 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_context->python_var_inst.assign0( _python_tmp_iter_value.asObject() );
                        {
                            PyObjectTempKeeper0 call1;
                            PyObjectTempKeeper1 make_tuple3;
                            YIELD_VALUE( generator, ( make_tuple3.assign( ( call1.assign( _python_context->python_closure_instance_attr.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_context->python_var_inst.asObject() ) ) ), MAKE_TUPLE2( make_tuple3.asObject0(), _python_context->python_var_inst.asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_instance_attr )
{
    // Create context if any
    struct _context_generator_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t *_python_context = new _context_generator_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t;
    _python_context->python_closure_instance_attr.shareWith( python_closure_instance_attr );

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_context,
            _python_str_angle_genexpr,
            _codeobj_2c6391c04d72aae76dae5b7a8bfc893e,
            _python_context,
            _context_generator_genexpr_2_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}


static PyObject *impl_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance, PyObject *_python_par_instance_type )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_instance_type( _python_str_plain_instance_type, _python_par_instance_type );
    PyObjectLocalVariable _python_var_rel_obj( _python_str_plain_rel_obj );
    PyObjectLocalVariable _python_var_related_pk( _python_str_plain_related_pk );
    PyObjectLocalVariable _python_var_params( _python_str_plain_params );
    PyObjectLocalVariable _python_var_lh_field( _python_str_plain_lh_field );
    PyObjectLocalVariable _python_var_rh_field( _python_str_plain_rh_field );

    // Actual function code.
    static PyFrameObject *frame_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_826b83c79bcf6360945c4fc14709ded0, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 184 );
        if ( ( _python_var_instance.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 185 );
            return _python_var_self.asObject1();
        }
        frame_guard.setLineNumber( 186 );
        try
        {
            frame_guard.setLineNumber( 187 );
            {
                PyObjectTempKeeper0 getattr17;
                _python_var_rel_obj.assign1( ( getattr17.assign( _python_var_instance.asObject() ), BUILTIN_GETATTR( getattr17.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cache_name ) ).asObject(), NULL ) ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_AttributeError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 189 );
                _python_var_related_pk.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain__get_pk_val ) ).asObject() ) );
                frame_guard.setLineNumber( 190 );
                if ( ( _python_var_related_pk.asObject() == Py_None ) )
                {
                    _python_var_rel_obj.assign0( Py_None );
                }
                else
                {
                    _python_var_params.assign1( PyDict_New() );
                    {
                        frame_guard.setLineNumber( 194 );
                        PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_related_fields ) ).asObject() ) );
                        while( true )
                        {
                            {
                                frame_guard.setLineNumber( 194 );
                                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                if ( _tmp_unpack_1 == NULL )
                                {
                                    break;
                                }
                                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                                {
                                    frame_guard.setLineNumber( 194 );
                                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                    _python_var_lh_field.assign0( _python_tmp_element_1.asObject() );
                                    _python_var_rh_field.assign0( _python_tmp_element_2.asObject() );
                                }
                            }
                            frame_guard.setLineNumber( 195 );
                            {
                                PyObjectTempKeeper0 getattr3;
                                PyObjectTempKeeper1 make_tuple1;
                                {
                                    PyObjectTemporary tmp_identifier( ( getattr3.assign( _python_var_instance.asObject() ), BUILTIN_GETATTR( getattr3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rh_field.asObject(), _python_str_plain_attname ) ).asObject(), NULL ) ) );
                                    PyObject *tmp_subscribed = _python_var_params.asObject();
                                    SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_aa582e0265b239962ed465f876e27b22, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_name ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rh_field.asObject(), _python_str_plain_name ) ).asObject() ) ) ).asObject() ) ).asObject() );
                            }
                            }

                           CONSIDER_THREADING();
                        }
                    }
                    {
                        PyObject *_python_tmp_unhandled_indicator = Py_True;
                        frame_guard.setLineNumber( 196 );
                        try
                        {
                            frame_guard.setLineNumber( 197 );
                            {
                                PyObjectTempKeeper1 call6;
                                PyObjectTempKeeper1 call_tmp9;
                                _python_var_rel_obj.assign1( ( call_tmp9.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_queryset ) ), CALL_FUNCTION( call6.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_instance.asObject(), _python_str_plain_instance ) ).asObject() ) ) ).asObject(), _python_str_plain_get ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp9.asObject(), _python_var_params.asObject1() ) ) );
                            }
                        }
                        catch ( PythonException &_exception )
                        {
                            if ( !_exception.hasTraceback() )
                            {
                                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                            }
                            else
                            {
                                _exception.addTraceback( frame_guard.getFrame0() );
                            }

                            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                            _exception.toExceptionHandler();

                            if ( _exception.matches( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain_DoesNotExist ) ).asObject() ) )
                            {
                                frame_guard.detachFrame();
                                _python_tmp_unhandled_indicator = Py_False;
                                _python_var_rel_obj.assign0( Py_None );
                            }
                            else
                            {
                                PyTracebackObject *tb = _exception.getTraceback();
                                frame_guard.setLineNumber( tb->tb_lineno );
                                _exception.setTraceback( tb->tb_next );
                                tb->tb_next = NULL;

                                throw;
                            }
                        }
                        if ( ( _python_tmp_unhandled_indicator == Py_True ) )
                        {
                            frame_guard.setLineNumber( 201 );
                            {
                                PyObjectTempKeeper0 setattr11;
                                PyObjectTempKeeper1 setattr12;
                                ( ( setattr11.assign( _python_var_rel_obj.asObject() ), setattr12.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_get_cache_name ) ).asObject() ) ), BUILTIN_SETATTR( setattr11.asObject0(), setattr12.asObject0(), _python_var_instance.asObject() ) ), Py_None );
                            }
                        }
                    }
                }
                frame_guard.setLineNumber( 202 );
                {
                    PyObjectTempKeeper0 setattr14;
                    PyObjectTempKeeper1 setattr15;
                    ( ( setattr14.assign( _python_var_instance.asObject() ), setattr15.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cache_name ) ), BUILTIN_SETATTR( setattr14.asObject0(), setattr15.asObject0(), _python_var_rel_obj.asObject() ) ), Py_None );
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 203 );
        if ( ( _python_var_rel_obj.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 204 );
            {
                PyObjectTempKeeper1 call22;
                PyObjectTempKeeper1 make_tuple20;
                {
                    PyObjectTemporary tmp_exception_type( ( call22.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain_DoesNotExist ) ), CALL_FUNCTION_WITH_ARGS( call22.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_6c9023190df4c04182b415fc05b60d21, PyObjectTemporary( ( make_tuple20.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___name__ ) ), MAKE_TUPLE2( make_tuple20.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_get_accessor_name ) ).asObject() ) ).asObject() ) ) ).asObject() ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        else
        {
            frame_guard.setLineNumber( 208 );
            return _python_var_rel_obj.asObject1();
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_instance_type.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_rh_field.updateLocalsDict( _python_var_lh_field.updateLocalsDict( _python_var_params.updateLocalsDict( _python_var_related_pk.updateLocalsDict( _python_var_rel_obj.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
           frame_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_instance_type = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__get__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance_type == key )
            {
                if (unlikely( _python_par_instance_type ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance_type'" );
                    goto error_exit;
                }

                _python_par_instance_type = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance_type, key ) )
            {
                if (unlikely( _python_par_instance_type ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance_type'" );
                    goto error_exit;
                }

                _python_par_instance_type = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__get__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__get__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__get__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_instance_type != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance_type'" );
             goto error_exit;
         }

        _python_par_instance_type = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_instance_type == NULL )
    {
        _python_par_instance_type = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_instance_type );
    }


    return impl_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance, _python_par_instance_type );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_instance_type );

    return NULL;
}

static PyObject *dparse_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_related_pk( _python_str_plain_related_pk );
    PyObjectLocalVariable _python_var_index( _python_str_plain_index );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );

    // Actual function code.
    static PyFrameObject *frame_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_04c25a7a25a7c648761f4e2bbb67b45a, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 217 );
        if ( ( ( _python_var_value.asObject() == Py_None ) && RICH_COMPARE_BOOL_EQ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_null ) ).asObject(), Py_False ) ) )
        {
            frame_guard.setLineNumber( 218 );
            {
                PyObjectTempKeeper1 make_tuple1;
                {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_a2690dc3d88777a3de2c0fa4c2009f33, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_get_accessor_name ) ).asObject() ) ).asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        else
        {
            frame_guard.setLineNumber( 220 );
            {
                PyObjectTempKeeper0 isinstance16;
                if ( ( ( _python_var_value.asObject() != Py_None ) && (!( ( isinstance16.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance16.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_model ) ).asObject() ) ) )) ) )
            {
                frame_guard.setLineNumber( 221 );
                {
                    PyObjectTempKeeper0 make_tuple3;
                    PyObjectTempKeeper1 make_tuple4;
                    PyObjectTempKeeper1 make_tuple5;
                    {
                        PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_6eece6596bf6a1db5c4cab6a4e563c97, PyObjectTemporary( ( make_tuple3.assign( _python_var_value.asObject() ), make_tuple4.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ), make_tuple5.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_get_accessor_name ) ).asObject() ) ), MAKE_TUPLE4( make_tuple3.asObject0(), make_tuple4.asObject0(), make_tuple5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_opts ) ).asObject(), _python_str_plain_object_name ) ).asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                frame_guard.setLineNumber( 224 );
                if ( ( _python_var_value.asObject() != Py_None ) )
                {
                    frame_guard.setLineNumber( 225 );
                    if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db ) ).asObject() == Py_None ) )
                    {
                        frame_guard.setLineNumber( 226 );
                        {
                            PyObjectTempKeeper1 call7;
                            PyObjectTempKeeper1 call8;
                            {
                                PyObjectTemporary tmp_identifier( ( call7.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_write ) ), call8.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain___class__ ) ).asObject() ) ), CALL_FUNCTION( call7.asObject0(), call8.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_value.asObject(), _python_str_plain_instance ) ).asObject() ) ) );
                                SET_ATTRIBUTE( tmp_identifier.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db );
                        }
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 227 );
                        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db ) ).asObject() == Py_None ) )
                        {
                            frame_guard.setLineNumber( 228 );
                            {
                                PyObjectTempKeeper1 call10;
                                PyObjectTempKeeper1 call11;
                                {
                                    PyObjectTemporary tmp_identifier( ( call10.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_write ) ), call11.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain___class__ ) ).asObject() ) ), CALL_FUNCTION( call10.asObject0(), call11.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_instance.asObject(), _python_str_plain_instance ) ).asObject() ) ) );
                                    SET_ATTRIBUTE( tmp_identifier.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db );
                            }
                            }
                        }
                        else
                        {
                            frame_guard.setLineNumber( 229 );
                            if ( ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db ) ).asObject() != Py_None ) && ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db ) ).asObject() != Py_None ) ) )
                            {
                                frame_guard.setLineNumber( 230 );
                                {
                                    PyObjectTempKeeper1 call13;
                                    PyObjectTempKeeper0 call14;
                                    if ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( call13.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_allow_relation ) ), call14.assign( _python_var_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), call14.asObject0(), _python_var_instance.asObject() ) ) ).asObject() ) )) )
                                {
                                    frame_guard.setLineNumber( 231 );
                                    {
                                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_b77025e8dfff60c98be596762b17bcf1, _python_var_value.asObject() ) ).asObject() ) ).asObject() ) );
                                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                                    }
                                }
                                }
                            }
                        }
                    }
                }
            }
            }
        }
        frame_guard.setLineNumber( 233 );
        _python_var_related_pk.assign1( TO_TUPLE( PyObjectTemporary( impl_listcontr_1_of_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_foreign_related_fields ) ).asObject() ), _python_var_field, _python_var_instance ) ).asObject() ) );
        frame_guard.setLineNumber( 234 );
        if ( SEQUENCE_CONTAINS_BOOL( Py_None, _python_var_related_pk.asObject() ) )
        {
            frame_guard.setLineNumber( 235 );
            {
                PyObjectTempKeeper0 make_tuple18;
                {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_90a125b0cb7ef075b9c73ea2f10313a9, PyObjectTemporary( ( make_tuple18.assign( _python_var_value.asObject() ), MAKE_TUPLE2( make_tuple18.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ).asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        {
            frame_guard.setLineNumber( 239 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_local_related_fields ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 239 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 239 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_index.assign0( _python_tmp_element_1.asObject() );
                        _python_var_field.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 240 );
                {
                    PyObjectTempKeeper0 setattr22;
                    PyObjectTempKeeper1 setattr23;
                    PyObjectTempKeeper0 subscr20;
                    ( ( setattr22.assign( _python_var_value.asObject() ), setattr23.assign( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_attname ) ), BUILTIN_SETATTR( setattr22.asObject0(), setattr23.asObject0(), PyObjectTemporary( ( subscr20.assign( _python_var_related_pk.asObject() ), LOOKUP_SUBSCRIPT( subscr20.asObject0(), _python_var_index.asObject() ) ) ).asObject() ) ), Py_None );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 245 );
        {
            PyObjectTempKeeper0 setattr25;
            PyObjectTempKeeper1 setattr26;
            ( ( setattr25.assign( _python_var_instance.asObject() ), setattr26.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cache_name ) ), BUILTIN_SETATTR( setattr25.asObject0(), setattr26.asObject0(), _python_var_value.asObject() ) ), Py_None );
        }
        frame_guard.setLineNumber( 246 );
        {
            PyObjectTempKeeper0 setattr28;
            PyObjectTempKeeper1 setattr29;
            ( ( setattr28.assign( _python_var_value.asObject() ), setattr29.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_get_cache_name ) ).asObject() ) ), BUILTIN_SETATTR( setattr28.asObject0(), setattr29.asObject0(), _python_var_instance.asObject() ) ), Py_None );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_index.updateLocalsDict( _python_var_related_pk.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
           frame_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__set__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__set__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__set__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__set__() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_field,PyObjectLocalParameterVariableNoDel &python_closure_instance )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 233 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 233 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_field.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 getattr1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( getattr1.assign( python_closure_instance.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_field.asObject(), _python_str_plain_attname ) ).asObject(), NULL ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_is_cached( _python_str_plain_is_cached );
    PyObjectLocalVariable _python_var_get_queryset( _python_str_plain_get_queryset );
    PyObjectLocalVariable _python_var_get_prefetch_queryset( _python_str_plain_get_prefetch_queryset );
    PyObjectLocalVariable _python_var___get__( _python_str_plain___get__ );
    PyObjectLocalVariable _python_var___set__( _python_str_plain___set__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  ) );
    _python_var_is_cached.assign1( MAKE_FUNCTION_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  ) );
    _python_var_get_queryset.assign1( MAKE_FUNCTION_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  ) );
    _python_var_get_prefetch_queryset.assign1( MAKE_FUNCTION_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  ) );
    _python_var___get__.assign1( MAKE_FUNCTION_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  ) );
    _python_var___set__.assign1( MAKE_FUNCTION_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  ) );
    return _python_var___set__.updateLocalsDict( _python_var___get__.updateLocalsDict( _python_var_get_prefetch_queryset.updateLocalsDict( _python_var_get_queryset.updateLocalsDict( _python_var_is_cached.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field_with_rel )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field_with_rel( _python_str_plain_field_with_rel, _python_par_field_with_rel );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_aac847b14d1fc54ba861d0e19c5f754b, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 256 );
        {
                PyObject *tmp_identifier = _python_var_field_with_rel.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_field );
        }
        frame_guard.setLineNumber( 257 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_get_cache_name ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_cache_name );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_field_with_rel.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
           frame_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field_with_rel = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field_with_rel == key )
            {
                if (unlikely( _python_par_field_with_rel ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field_with_rel'" );
                    goto error_exit;
                }

                _python_par_field_with_rel = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field_with_rel, key ) )
            {
                if (unlikely( _python_par_field_with_rel ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field_with_rel'" );
                    goto error_exit;
                }

                _python_par_field_with_rel = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_field_with_rel != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field_with_rel'" );
             goto error_exit;
         }

        _python_par_field_with_rel = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_field_with_rel );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field_with_rel );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );

    // Actual function code.
    static PyFrameObject *frame_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_b549b315fff229a29ff20b65f5774428, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 260 );
        {
            PyObjectTempKeeper0 hasattr1;
            return INCREASE_REFCOUNT( BOOL_FROM( ( hasattr1.assign( _python_var_instance.asObject() ), HAS_ATTRIBUTE( hasattr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cache_name ) ).asObject() ) ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
           frame_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "is_cached() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "is_cached() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "is_cached() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "is_cached() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "is_cached() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "is_cached() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_cached() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "is_cached() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "is_cached() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_cached() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "is_cached() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_cached() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "is_cached() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_cached() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "is_cached() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "is_cached() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "is_cached() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "is_cached() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "is_cached() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "is_cached() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );

    return NULL;
}

static PyObject *dparse_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_db_hints )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_db_hints( _python_str_plain_db_hints, _python_par_db_hints );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );
    PyObjectLocalVariable _python_var_rel_mgr( _python_str_plain_rel_mgr );

    // Actual function code.
    static PyFrameObject *frame_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_95d09e31206407c206d9e3f401deaa5b, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 263 );
        {
            PyObjectTempKeeper1 call_tmp1;
            PyObjectTempKeeper1 call_tmp2;
            _python_var_db.assign1( ( call_tmp1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_read ) ), call_tmp2.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject() ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp1.asObject(), call_tmp2.asObject(), _python_var_db_hints.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 264 );
        _python_var_rel_mgr.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__default_manager ) );
        frame_guard.setLineNumber( 267 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( BUILTIN_GETATTR( _python_var_rel_mgr.asObject(), _python_str_plain_use_for_related_fields, Py_False ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 268 );
            {
                PyObjectTempKeeper1 call4;
                return ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_rel_mgr.asObject(), _python_str_plain_using ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_db.asObject() ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 270 );
            {
                PyObjectTempKeeper0 call6;
                PyObjectTempKeeper1 call8;
                return ( call8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call6.assign( _mvar_django__db__models__fields__related_QuerySet.asObject0() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject() ) ) ).asObject(), _python_str_plain_using ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_db.asObject() ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_db_hints.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_rel_mgr.updateLocalsDict( _python_var_db.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
           frame_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_db_hints = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_db_hints = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_db_hints = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "get_queryset() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_db_hints, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_db_hints = (PyObject *)split_copy;
        }
        else
        {
            _python_par_db_hints = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "get_queryset() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_db_hints, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_db_hints = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_db_hints, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_db_hints, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_queryset() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_queryset() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_db_hints );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_db_hints );

    return NULL;
}

static PyObject *dparse_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instances )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instances( _python_str_plain_instances, _python_par_instances );
    PyObjectLocalVariable _python_var_rel_obj_attr( _python_str_plain_rel_obj_attr );
    PyObjectSharedLocalVariable _python_var_instance_attr( _python_str_plain_instance_attr );
    PyObjectLocalVariable _python_var_instances_dict( _python_str_plain_instances_dict );
    PyObjectLocalVariable _python_var_query( _python_str_plain_query );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );
    PyObjectLocalVariable _python_var_rel_obj_cache_name( _python_str_plain_rel_obj_cache_name );
    PyObjectLocalVariable _python_var_rel_obj( _python_str_plain_rel_obj );
    PyObjectLocalVariable _python_var_instance( _python_str_plain_instance );

    // Actual function code.
    static PyFrameObject *frame_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_6b8e4b71780de64a63a8775a43723386, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 273 );
        _python_var_rel_obj_attr.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_get_foreign_related_value ) );
        frame_guard.setLineNumber( 274 );
        _python_var_instance_attr.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_get_local_related_value ) );
        frame_guard.setLineNumber( 275 );
        _python_var_instances_dict.assign1( TO_DICT( PyObjectTemporary( impl_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( MAKE_ITERATOR( _python_var_instances.asObject() ), _python_var_instance_attr ) ).asObject(), NULL ) );
        frame_guard.setLineNumber( 276 );
        {
            PyObjectTempKeeper0 make_dict1;
            _python_var_query.assign1( ( make_dict1.assign( _python_var_instances.asObject() ), MAKE_DICT1( make_dict1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_38b85e9cb3ddf8db51dfdd4b8d89df1e, PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_related_query_name ) ).asObject() ) ).asObject() ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 277 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 call_tmp6;
            _python_var_qs.assign1( ( call_tmp6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_queryset ) ), CALL_FUNCTION( call3.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_instances.asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain_instance ) ).asObject() ) ) ).asObject(), _python_str_plain_filter ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp6.asObject(), _python_var_query.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 280 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_multiple ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 281 );
            _python_var_rel_obj_cache_name.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_get_cache_name ) ).asObject() ) );
            {
                frame_guard.setLineNumber( 282 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_qs.asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 282 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_var_rel_obj.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 283 );
                    {
                        PyObjectTempKeeper0 call8;
                        PyObjectTempKeeper0 subscr10;
                        _python_var_instance.assign1( ( subscr10.assign( _python_var_instances_dict.asObject() ), LOOKUP_SUBSCRIPT( subscr10.asObject0(), PyObjectTemporary( ( call8.assign( _python_var_rel_obj_attr.asObject() ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_rel_obj.asObject() ) ) ).asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 284 );
                    {
                        PyObjectTempKeeper0 setattr12;
                        PyObjectTempKeeper0 setattr13;
                        ( ( setattr12.assign( _python_var_rel_obj.asObject() ), setattr13.assign( _python_var_rel_obj_cache_name.asObject() ), BUILTIN_SETATTR( setattr12.asObject0(), setattr13.asObject0(), _python_var_instance.asObject() ) ), Py_None );
                    }

                   CONSIDER_THREADING();
                }
            }
        }
        frame_guard.setLineNumber( 285 );
        {
            PyObjectTempKeeper0 make_tuple15;
            PyObjectTempKeeper0 make_tuple16;
            PyObjectTempKeeper0 make_tuple17;
            return ( make_tuple15.assign( _python_var_qs.asObject() ), make_tuple16.assign( _python_var_rel_obj_attr.asObject() ), make_tuple17.assign( _python_var_instance_attr.asObject() ), MAKE_TUPLE5( make_tuple15.asObject0(), make_tuple16.asObject0(), make_tuple17.asObject0(), Py_True, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cache_name ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_instances.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_rel_obj.updateLocalsDict( _python_var_rel_obj_cache_name.updateLocalsDict( _python_var_qs.updateLocalsDict( _python_var_query.updateLocalsDict( _python_var_instances_dict.updateLocalsDict( _python_var_instance_attr.updateLocalsDict( _python_var_rel_obj_attr.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
           frame_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instances = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instances == key )
            {
                if (unlikely( _python_par_instances ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'instances'" );
                    goto error_exit;
                }

                _python_par_instances = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instances, key ) )
            {
                if (unlikely( _python_par_instances ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'instances'" );
                    goto error_exit;
                }

                _python_par_instances = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prefetch_queryset() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instances != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'instances'" );
             goto error_exit;
         }

        _python_par_instances = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instances );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instances );

    return NULL;
}

static PyObject *dparse_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectClosureVariable python_closure_instance_attr;
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_inst;
};

static void _context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t *_python_context = (struct _context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t *_python_context = (_context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_inst.setVariableName( _python_str_plain_inst );

        // Actual function code.
        static PyFrameObject *frame_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) )
        {
            if ( frame_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related" );
#endif
                Py_DECREF( frame_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
            }

            frame_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_fb1b3f6c33460d2c697e544f1bf3fd50, _module_django__db__models__fields__related );
        }

        Py_INCREF( frame_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
        generator->m_frame = frame_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 275 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 275 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_context->python_var_inst.assign0( _python_tmp_iter_value.asObject() );
                        {
                            PyObjectTempKeeper0 call1;
                            PyObjectTempKeeper1 make_tuple3;
                            YIELD_VALUE( generator, ( make_tuple3.assign( ( call1.assign( _python_context->python_closure_instance_attr.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_context->python_var_inst.asObject() ) ) ), MAKE_TUPLE2( make_tuple3.asObject0(), _python_context->python_var_inst.asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_instance_attr )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t *_python_context = new _context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t;
    _python_context->python_closure_instance_attr.shareWith( python_closure_instance_attr );

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_context,
            _python_str_angle_genexpr,
            _codeobj_f9975e1a587544de97391c49db9ec620,
            _python_context,
            _context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}


static PyObject *impl_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance, PyObject *_python_par_instance_type )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectSharedLocalVariable _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_instance_type( _python_str_plain_instance_type, _python_par_instance_type );
    PyObjectLocalVariable _python_var_rel_obj( _python_str_plain_rel_obj );
    PyObjectLocalVariable _python_var_val( _python_str_plain_val );
    PyObjectLocalVariable _python_var_params( _python_str_plain_params );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );

    // Actual function code.
    static PyFrameObject *frame_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_bc20b1a5a572e80559fb184efea8fa29, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 288 );
        if ( ( _python_var_instance.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 289 );
            return _python_var_self.asObject1();
        }
        frame_guard.setLineNumber( 290 );
        try
        {
            frame_guard.setLineNumber( 291 );
            {
                PyObjectTempKeeper0 getattr18;
                _python_var_rel_obj.assign1( ( getattr18.assign( _python_var_instance.asObject() ), BUILTIN_GETATTR( getattr18.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cache_name ) ).asObject(), NULL ) ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_AttributeError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 293 );
                {
                    PyObjectTempKeeper1 call1;
                    _python_var_val.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_get_local_related_value ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_instance.asObject() ) ) );
                }
                frame_guard.setLineNumber( 294 );
                if ( SEQUENCE_CONTAINS_BOOL( Py_None, _python_var_val.asObject() ) )
                {
                    _python_var_rel_obj.assign0( Py_None );
                }
                else
                {
                    frame_guard.setLineNumber( 297 );
                    _python_var_params.assign1( TO_DICT( PyObjectTemporary( impl_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_related_fields ) ).asObject() ), _python_var_instance ) ).asObject(), NULL ) );
                    frame_guard.setLineNumber( 300 );
                    {
                        PyObjectTempKeeper1 call3;
                        PyObjectTempKeeper1 call5;
                        DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_params.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_get_extra_descriptor_filter ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_instance.asObject() ) ) ).asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 301 );
                    {
                        PyObjectTempKeeper1 call7;
                        _python_var_qs.assign1( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_queryset ) ), CALL_FUNCTION( call7.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_instance.asObject(), _python_str_plain_instance ) ).asObject() ) ) );
                    }
                    frame_guard.setLineNumber( 303 );
                    {
                        PyObjectTempKeeper1 call_tmp10;
                        _python_var_rel_obj.assign1( ( call_tmp10.assign( LOOKUP_ATTRIBUTE( _python_var_qs.asObject(), _python_str_plain_get ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp10.asObject(), _python_var_params.asObject1() ) ) );
                    }
                    frame_guard.setLineNumber( 304 );
                    if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_multiple ) ).asObject() ) )) )
                    {
                        frame_guard.setLineNumber( 305 );
                        {
                            PyObjectTempKeeper0 setattr12;
                            PyObjectTempKeeper1 setattr13;
                            ( ( setattr12.assign( _python_var_rel_obj.asObject() ), setattr13.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_get_cache_name ) ).asObject() ) ), BUILTIN_SETATTR( setattr12.asObject0(), setattr13.asObject0(), _python_var_instance.asObject() ) ), Py_None );
                        }
                    }
                }
                frame_guard.setLineNumber( 306 );
                {
                    PyObjectTempKeeper0 setattr15;
                    PyObjectTempKeeper1 setattr16;
                    ( ( setattr15.assign( _python_var_instance.asObject() ), setattr16.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cache_name ) ), BUILTIN_SETATTR( setattr15.asObject0(), setattr16.asObject0(), _python_var_rel_obj.asObject() ) ), Py_None );
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 307 );
        if ( ( ( _python_var_rel_obj.asObject() == Py_None ) && (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_null ) ).asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 308 );
            {
                PyObjectTempKeeper1 call23;
                PyObjectTempKeeper1 make_tuple21;
                {
                    PyObjectTemporary tmp_exception_type( ( call23.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain_DoesNotExist ) ), CALL_FUNCTION_WITH_ARGS( call23.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_6c9023190df4c04182b415fc05b60d21, PyObjectTemporary( ( make_tuple21.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain___name__ ) ), MAKE_TUPLE2( make_tuple21.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_name ) ).asObject() ) ) ).asObject() ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        else
        {
            frame_guard.setLineNumber( 311 );
            return _python_var_rel_obj.asObject1();
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_instance_type.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_qs.updateLocalsDict( _python_var_params.updateLocalsDict( _python_var_val.updateLocalsDict( _python_var_rel_obj.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
           frame_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_instance_type = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__get__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance_type == key )
            {
                if (unlikely( _python_par_instance_type ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance_type'" );
                    goto error_exit;
                }

                _python_par_instance_type = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance_type, key ) )
            {
                if (unlikely( _python_par_instance_type ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance_type'" );
                    goto error_exit;
                }

                _python_par_instance_type = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__get__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__get__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__get__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_instance_type != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance_type'" );
             goto error_exit;
         }

        _python_par_instance_type = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_instance_type == NULL )
    {
        _python_par_instance_type = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_instance_type );
    }


    return impl_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance, _python_par_instance_type );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_instance_type );

    return NULL;
}

static PyObject *dparse_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectClosureVariable python_closure_instance;
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_lh_field;
    PyObjectLocalVariable python_var_rh_field;
};

static void _context_generator_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t *_python_context = (struct _context_generator_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t *_python_context = (_context_generator_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_lh_field.setVariableName( _python_str_plain_lh_field );
        _python_context->python_var_rh_field.setVariableName( _python_str_plain_rh_field );

        // Actual function code.
        static PyFrameObject *frame_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) )
        {
            if ( frame_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related" );
#endif
                Py_DECREF( frame_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
            }

            frame_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_f08e772de926c2c136b6fa73143f43f6, _module_django__db__models__fields__related );
        }

        Py_INCREF( frame_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
        generator->m_frame = frame_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 298 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 298 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        {
                            frame_guard.setLineNumber( 298 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_context->python_var_lh_field.assign0( _python_tmp_element_1.asObject() );
                            _python_context->python_var_rh_field.assign0( _python_tmp_element_2.asObject() );
                        }
                        {
                            PyObjectTempKeeper0 getattr1;
                            PyObjectTempKeeper1 make_tuple4;
                            YIELD_VALUE( generator, ( make_tuple4.assign( LOOKUP_ATTRIBUTE( _python_context->python_var_rh_field.asObject(), _python_str_plain_attname ) ), MAKE_TUPLE2( make_tuple4.asObject0(), PyObjectTemporary( ( getattr1.assign( _python_context->python_closure_instance.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_lh_field.asObject(), _python_str_plain_attname ) ).asObject(), NULL ) ) ).asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_instance )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t *_python_context = new _context_generator_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_t;
    _python_context->python_closure_instance.shareWith( python_closure_instance );

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_context,
            _python_str_angle_genexpr,
            _codeobj_48d41512aa2ce9d2007664e3604b04b1,
            _python_context,
            _context_generator_genexpr_1_of_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}


static PyObject *impl_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_related( _python_str_plain_related );
    PyObjectLocalVariable _python_var_lh_field( _python_str_plain_lh_field );
    PyObjectLocalVariable _python_var_rh_field( _python_str_plain_rh_field );

    // Actual function code.
    static PyFrameObject *frame_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_e0d3522756e588f9a102c7f7d600f9ca, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 316 );
        if ( ( ( _python_var_value.asObject() == Py_None ) && RICH_COMPARE_BOOL_EQ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_null ) ).asObject(), Py_False ) ) )
        {
            frame_guard.setLineNumber( 317 );
            {
                PyObjectTempKeeper1 make_tuple1;
                {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_a2690dc3d88777a3de2c0fa4c2009f33, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_name ) ).asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        else
        {
            frame_guard.setLineNumber( 319 );
            {
                PyObjectTempKeeper0 isinstance16;
                if ( ( ( _python_var_value.asObject() != Py_None ) && (!( ( isinstance16.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance16.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject() ) ) )) ) )
            {
                frame_guard.setLineNumber( 320 );
                {
                    PyObjectTempKeeper0 make_tuple3;
                    PyObjectTempKeeper1 make_tuple4;
                    PyObjectTempKeeper1 make_tuple5;
                    {
                        PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_6eece6596bf6a1db5c4cab6a4e563c97, PyObjectTemporary( ( make_tuple3.assign( _python_var_value.asObject() ), make_tuple4.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ), make_tuple5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_name ) ), MAKE_TUPLE4( make_tuple3.asObject0(), make_tuple4.asObject0(), make_tuple5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ).asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                frame_guard.setLineNumber( 323 );
                if ( ( _python_var_value.asObject() != Py_None ) )
                {
                    frame_guard.setLineNumber( 324 );
                    if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db ) ).asObject() == Py_None ) )
                    {
                        frame_guard.setLineNumber( 325 );
                        {
                            PyObjectTempKeeper1 call7;
                            PyObjectTempKeeper1 call8;
                            {
                                PyObjectTemporary tmp_identifier( ( call7.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_write ) ), call8.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain___class__ ) ).asObject() ) ), CALL_FUNCTION( call7.asObject0(), call8.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_value.asObject(), _python_str_plain_instance ) ).asObject() ) ) );
                                SET_ATTRIBUTE( tmp_identifier.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db );
                        }
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 326 );
                        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db ) ).asObject() == Py_None ) )
                        {
                            frame_guard.setLineNumber( 327 );
                            {
                                PyObjectTempKeeper1 call10;
                                PyObjectTempKeeper1 call11;
                                {
                                    PyObjectTemporary tmp_identifier( ( call10.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_write ) ), call11.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain___class__ ) ).asObject() ) ), CALL_FUNCTION( call10.asObject0(), call11.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_instance.asObject(), _python_str_plain_instance ) ).asObject() ) ) );
                                    SET_ATTRIBUTE( tmp_identifier.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db );
                            }
                            }
                        }
                        else
                        {
                            frame_guard.setLineNumber( 328 );
                            if ( ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db ) ).asObject() != Py_None ) && ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db ) ).asObject() != Py_None ) ) )
                            {
                                frame_guard.setLineNumber( 329 );
                                {
                                    PyObjectTempKeeper1 call13;
                                    PyObjectTempKeeper0 call14;
                                    if ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( call13.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_allow_relation ) ), call14.assign( _python_var_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), call14.asObject0(), _python_var_instance.asObject() ) ) ).asObject() ) )) )
                                {
                                    frame_guard.setLineNumber( 330 );
                                    {
                                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_b77025e8dfff60c98be596762b17bcf1, _python_var_value.asObject() ) ).asObject() ) ).asObject() ) );
                                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                                    }
                                }
                                }
                            }
                        }
                    }
                }
            }
            }
        }
        frame_guard.setLineNumber( 336 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 343 );
            {
                PyObjectTempKeeper0 getattr18;
                _python_var_related.assign1( ( getattr18.assign( _python_var_instance.asObject() ), BUILTIN_GETATTR( getattr18.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cache_name ) ).asObject(), Py_None ) ) );
            }
            frame_guard.setLineNumber( 348 );
            if ( ( _python_var_related.asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 349 );
                {
                    PyObjectTempKeeper0 setattr21;
                    ( ( setattr21.assign( _python_var_related.asObject() ), BUILTIN_SETATTR( setattr21.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_get_cache_name ) ).asObject() ) ).asObject(), Py_None ) ), Py_None );
                }
            }
        }
        {
            frame_guard.setLineNumber( 352 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_related_fields ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 352 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 352 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_lh_field.assign0( _python_tmp_element_1.asObject() );
                        _python_var_rh_field.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 353 );
                try
                {
                    frame_guard.setLineNumber( 354 );
                    {
                        PyObjectTempKeeper0 getattr27;
                        PyObjectTempKeeper0 setattr30;
                        PyObjectTempKeeper1 setattr31;
                        ( ( setattr30.assign( _python_var_instance.asObject() ), setattr31.assign( LOOKUP_ATTRIBUTE( _python_var_lh_field.asObject(), _python_str_plain_attname ) ), BUILTIN_SETATTR( setattr30.asObject0(), setattr31.asObject0(), PyObjectTemporary( ( getattr27.assign( _python_var_value.asObject() ), BUILTIN_GETATTR( getattr27.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rh_field.asObject(), _python_str_plain_attname ) ).asObject(), NULL ) ) ).asObject() ) ), Py_None );
                    }
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( PyExc_AttributeError ) )
                    {
                        frame_guard.detachFrame();
                        frame_guard.setLineNumber( 356 );
                        {
                            PyObjectTempKeeper0 setattr24;
                            ( ( setattr24.assign( _python_var_instance.asObject() ), BUILTIN_SETATTR( setattr24.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_lh_field.asObject(), _python_str_plain_attname ) ).asObject(), Py_None ) ), Py_None );
                        }
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 361 );
        {
            PyObjectTempKeeper0 setattr33;
            PyObjectTempKeeper1 setattr34;
            ( ( setattr33.assign( _python_var_instance.asObject() ), setattr34.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_cache_name ) ), BUILTIN_SETATTR( setattr33.asObject0(), setattr34.asObject0(), _python_var_value.asObject() ) ), Py_None );
        }
        frame_guard.setLineNumber( 362 );
        if ( ( ( _python_var_value.asObject() != Py_None ) && (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_multiple ) ).asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 363 );
            {
                PyObjectTempKeeper0 setattr36;
                PyObjectTempKeeper1 setattr37;
                ( ( setattr36.assign( _python_var_value.asObject() ), setattr37.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_get_cache_name ) ).asObject() ) ), BUILTIN_SETATTR( setattr36.asObject0(), setattr37.asObject0(), _python_var_instance.asObject() ) ), Py_None );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_rh_field.updateLocalsDict( _python_var_lh_field.updateLocalsDict( _python_var_related.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related );
           frame_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__set__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__set__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__set__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__set__() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___get__( _python_str_plain___get__ );
    PyObjectLocalVariable _python_var___set__( _python_str_plain___set__ );
    PyObjectLocalVariable _python_var_related_manager_cls( _python_str_plain_related_manager_cls );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  ) );
    _python_var___get__.assign1( MAKE_FUNCTION_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  ) );
    _python_var___set__.assign1( MAKE_FUNCTION_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  ) );
    static PyFrameObject *frame_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_185778fbc300da4de3892b4d3518a4ac, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 389 );
        _python_var_related_manager_cls.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__related_cached_property.asObject0(), PyObjectTemporary( MAKE_FUNCTION_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_related_manager_cls.updateLocalsDict( _python_var___set__.updateLocalsDict( _python_var___get__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        throw;
    }
    return _python_var_related_manager_cls.updateLocalsDict( _python_var___set__.updateLocalsDict( _python_var___get__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_related )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_related( _python_str_plain_related, _python_par_related );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_14db334eeac86273c34937b3e452d90c, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 373 );
        {
                PyObject *tmp_identifier = _python_var_related.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_related );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_related.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_related = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_related == key )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_related, key ) )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_related != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related'" );
             goto error_exit;
         }

        _python_par_related = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_related );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_related );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance, PyObject *_python_par_instance_type )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_instance_type( _python_str_plain_instance_type, _python_par_instance_type );

    // Actual function code.
    static PyFrameObject *frame_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_15c6fb5fbd26db5b6787bbd6de704f70, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 376 );
        if ( ( _python_var_instance.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 377 );
            return _python_var_self.asObject1();
        }
        frame_guard.setLineNumber( 379 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_manager_cls ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_instance.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_instance_type.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_instance_type = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__get__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance_type == key )
            {
                if (unlikely( _python_par_instance_type ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance_type'" );
                    goto error_exit;
                }

                _python_par_instance_type = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance_type, key ) )
            {
                if (unlikely( _python_par_instance_type ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance_type'" );
                    goto error_exit;
                }

                _python_par_instance_type = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__get__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__get__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__get__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_instance_type != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance_type'" );
             goto error_exit;
         }

        _python_par_instance_type = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_instance_type == NULL )
    {
        _python_par_instance_type = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_instance_type );
    }


    return impl_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance, _python_par_instance_type );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_instance_type );

    return NULL;
}

static PyObject *dparse_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_manager( _python_str_plain_manager );

    // Actual function code.
    static PyFrameObject *frame_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_bf8d236350922751c13bc7cd262a0d5b, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 382 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_manager.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___get__ ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_instance.asObject() ) ) );
        }
        frame_guard.setLineNumber( 385 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_null ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 386 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_manager.asObject(), _python_str_plain_clear ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 387 );
        {
            PyObjectTempKeeper1 call_tmp3;
            DECREASE_REFCOUNT( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( _python_var_manager.asObject(), _python_str_plain_add ) ), impl_function_7_complex_call_helper_star_list_of_module___internal__( call_tmp3.asObject(), _python_var_value.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_manager.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__set__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__set__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__set__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__set__() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_superclass( _python_str_plain_superclass );
    PyObjectSharedLocalVariable _python_var_rel_field( _python_str_plain_rel_field );
    PyObjectSharedLocalVariable _python_var_rel_model( _python_str_plain_rel_model );
    PyObjectSharedLocalVariable _python_var_RelatedManager( _python_str_plain_RelatedManager );

    // Actual function code.
    static PyFrameObject *frame_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_a5ea7752676b2913f5ae854be69ba24c, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 393 );
        _python_var_superclass.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__default_manager ) ).asObject(), _python_str_plain___class__ ) );
        frame_guard.setLineNumber( 394 );
        _python_var_rel_field.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) );
        frame_guard.setLineNumber( 395 );
        _python_var_rel_model.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_model ) );
        {
            frame_guard.setLineNumber( 397 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _python_var_superclass.asObject() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( _python_var_RelatedManager, _python_var_rel_field, _python_var_rel_model ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 call3;
                _tmp_python_tmp_class = ( call1.assign( _python_tmp_metaclass.asObject() ), call3.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_str_plain_RelatedManager, call3.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            _python_var_RelatedManager.assign0( _python_tmp_class.asObject() );
        }
        frame_guard.setLineNumber( 472 );
        return _python_var_RelatedManager.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_RelatedManager.updateLocalsDict( _python_var_rel_model.updateLocalsDict( _python_var_rel_field.updateLocalsDict( _python_var_superclass.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "related_manager_cls() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "related_manager_cls() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "related_manager_cls() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "related_manager_cls() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "related_manager_cls() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "related_manager_cls() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_RelatedManager,PyObjectSharedLocalVariable &python_closure_rel_field,PyObjectSharedLocalVariable &python_closure_rel_model )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_get_queryset( _python_str_plain_get_queryset );
    PyObjectLocalVariable _python_var_get_prefetch_queryset( _python_str_plain_get_prefetch_queryset );
    PyObjectLocalVariable _python_var_add( _python_str_plain_add );
    PyObjectLocalVariable _python_var_create( _python_str_plain_create );
    PyObjectLocalVariable _python_var_get_or_create( _python_str_plain_get_or_create );
    PyObjectLocalVariable _python_var_remove( _python_str_plain_remove );
    PyObjectLocalVariable _python_var_clear( _python_str_plain_clear );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( python_closure_RelatedManager, python_closure_rel_field, python_closure_rel_model ) );
    _python_var_get_queryset.assign1( MAKE_FUNCTION_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( python_closure_RelatedManager, python_closure_rel_field ) );
    _python_var_get_prefetch_queryset.assign1( MAKE_FUNCTION_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( python_closure_RelatedManager, python_closure_rel_field ) );
    _python_var_add.assign1( MAKE_FUNCTION_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( python_closure_rel_field ) );
    static PyFrameObject *frame_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_d975866025e13aadb1c16ba67d24bab9, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 439 );
        SET_ATTRIBUTE( Py_True, _python_var_add.asObject(), _python_str_plain_alters_data );
        _python_var_create.assign1( MAKE_FUNCTION_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( python_closure_RelatedManager, python_closure_rel_field ) );
        frame_guard.setLineNumber( 445 );
        SET_ATTRIBUTE( Py_True, _python_var_create.asObject(), _python_str_plain_alters_data );
        _python_var_get_or_create.assign1( MAKE_FUNCTION_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( python_closure_RelatedManager, python_closure_rel_field ) );
        frame_guard.setLineNumber( 453 );
        SET_ATTRIBUTE( Py_True, _python_var_get_or_create.asObject(), _python_str_plain_alters_data );
        frame_guard.setLineNumber( 456 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_rel_field.asObject(), _python_str_plain_null ) ).asObject() ) )
        {
            _python_var_remove.assign1( MAKE_FUNCTION_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( python_closure_rel_field ) );
            frame_guard.setLineNumber( 466 );
            SET_ATTRIBUTE( Py_True, _python_var_remove.asObject(), _python_str_plain_alters_data );
            _python_var_clear.assign1( MAKE_FUNCTION_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( python_closure_rel_field ) );
            frame_guard.setLineNumber( 470 );
            SET_ATTRIBUTE( Py_True, _python_var_clear.asObject(), _python_str_plain_alters_data );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_clear.updateLocalsDict( _python_var_remove.updateLocalsDict( _python_var_get_or_create.updateLocalsDict( _python_var_create.updateLocalsDict( _python_var_add.updateLocalsDict( _python_var_get_prefetch_queryset.updateLocalsDict( _python_var_get_queryset.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        throw;
    }
    return _python_var_clear.updateLocalsDict( _python_var_remove.updateLocalsDict( _python_var_get_or_create.updateLocalsDict( _python_var_create.updateLocalsDict( _python_var_add.updateLocalsDict( _python_var_get_prefetch_queryset.updateLocalsDict( _python_var_get_queryset.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance )
{
    // The context of the function.
    struct _context_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (struct _context_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_6ee15c6520caa5debc1a9daee81e6a31, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 399 );
        {
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _python_context->python_closure_RelatedManager.asObject() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 400 );
        {
                PyObject *tmp_identifier = _python_var_instance.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_instance );
        }
        frame_guard.setLineNumber( 401 );
        {
            PyObjectTempKeeper0 make_dict3;
            {
                PyObjectTemporary tmp_identifier( ( make_dict3.assign( _python_var_instance.asObject() ), MAKE_DICT1( make_dict3.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_7204e91cb2282091548313740b2aae07, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_closure_rel_field.asObject(), _python_str_plain_name ) ).asObject() ) ).asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_core_filters );
        }
        }
        frame_guard.setLineNumber( 402 );
        {
                PyObject *tmp_identifier = _python_context->python_closure_rel_model.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_model );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( _python_context->python_closure_rel_model.updateLocalsDict( _python_context->python_closure_rel_field.updateLocalsDict( _python_context->python_closure_RelatedManager.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // The context of the function.
    struct _context_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (struct _context_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );
    PyObjectLocalVariable _python_var_empty_strings_as_null( _python_str_plain_empty_strings_as_null );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_val( _python_str_plain_val );

    // Actual function code.
    static PyFrameObject *frame_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_8b278fa88effb4373d6b32fbfdd5ddc5, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 405 );
        try
        {
            frame_guard.setLineNumber( 406 );
            {
                PyObjectTempKeeper1 subscr19;
                return ( subscr19.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain__prefetched_objects_cache ) ), LOOKUP_SUBSCRIPT( subscr19.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_closure_rel_field.asObject(), _python_str_plain_related_query_name ) ).asObject() ) ).asObject() ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_AttributeError ) || _exception.matches( PyExc_KeyError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 408 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper1 call2;
                    PyObjectTempKeeper1 keeper_0;
                    _python_var_db.assign1( ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__db ) ) ) ? keeper_0.asObject() : ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_read ) ), call2.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_instance ) ).asObject() ) ) ) );
                }
                frame_guard.setLineNumber( 409 );
                {
                    PyObjectTempKeeper1 call6;
                    PyObjectTempKeeper1 call_tmp8;
                    PyObjectTempKeeper0 super4;
                    _python_var_qs.assign1( ( call_tmp8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super4.assign( _python_context->python_closure_RelatedManager.asObject() ), BUILTIN_SUPER( super4.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_get_queryset ) ).asObject() ) ).asObject(), _python_str_plain_using ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_db.asObject() ) ) ).asObject(), _python_str_plain_filter ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp8.asObject(), LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_core_filters ) ) ) );
                }
                frame_guard.setLineNumber( 410 );
                {
                    PyObjectTempKeeper0 subscr10;
                    _python_var_empty_strings_as_null.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr10.assign( _mvar_django__db__models__fields__related_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr10.asObject0(), _python_var_db.asObject() ) ) ).asObject(), _python_str_plain_features ) ).asObject(), _python_str_plain_interprets_empty_strings_as_nulls ) );
                }
                {
                    frame_guard.setLineNumber( 411 );
                    PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_closure_rel_field.asObject(), _python_str_plain_foreign_related_fields ) ).asObject() ) );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 411 );
                            PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_1 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                            _python_var_field.assign0( _python_tmp_iter_value.asObject() );
                        }
                        frame_guard.setLineNumber( 412 );
                        {
                            PyObjectTempKeeper1 getattr12;
                            _python_var_val.assign1( ( getattr12.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ), BUILTIN_GETATTR( getattr12.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_attname ) ).asObject(), NULL ) ) );
                        }
                        frame_guard.setLineNumber( 413 );
                        if ( ( ( _python_var_val.asObject() == Py_None ) || ( RICH_COMPARE_BOOL_EQ( _python_var_val.asObject(), _python_str_empty ) && CHECK_IF_TRUE( _python_var_empty_strings_as_null.asObject() ) ) ) )
                        {
                            frame_guard.setLineNumber( 414 );
                            return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_qs.asObject(), _python_str_plain_none ) ).asObject() );
                        }

                       CONSIDER_THREADING();
                    }
                }
                frame_guard.setLineNumber( 415 );
                {
                    PyObjectTempKeeper1 make_dict15;
                    PyObjectTempKeeper1 make_dict17;
                    {
                        PyObjectTemporary tmp_identifier( ( make_dict17.assign( ( make_dict15.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ), MAKE_DICT1( make_dict15.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_pk ) ).asObject() ) ) ), MAKE_DICT1( make_dict17.asObject0(), _python_context->python_closure_rel_field.asObject() ) ) );
                        SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_qs.asObject(), _python_str_plain__known_related_objects );
                }
                }
                frame_guard.setLineNumber( 416 );
                return _python_var_qs.asObject1();
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_context->python_closure_RelatedManager.updateLocalsDict( _python_context->python_closure_rel_field.updateLocalsDict( _python_var_val.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_empty_strings_as_null.updateLocalsDict( _python_var_qs.updateLocalsDict( _python_var_db.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_queryset() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_queryset() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_queryset() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instances )
{
    // The context of the function.
    struct _context_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (struct _context_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instances( _python_str_plain_instances, _python_par_instances );
    PyObjectLocalVariable _python_var_rel_obj_attr( _python_str_plain_rel_obj_attr );
    PyObjectSharedLocalVariable _python_var_instance_attr( _python_str_plain_instance_attr );
    PyObjectLocalVariable _python_var_instances_dict( _python_str_plain_instances_dict );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );
    PyObjectLocalVariable _python_var_query( _python_str_plain_query );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );
    PyObjectLocalVariable _python_var_rel_obj( _python_str_plain_rel_obj );
    PyObjectLocalVariable _python_var_instance( _python_str_plain_instance );
    PyObjectLocalVariable _python_var_cache_name( _python_str_plain_cache_name );

    // Actual function code.
    static PyFrameObject *frame_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_d2ef755b7b61bcc647cc45d70fb1ae72, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 419 );
        _python_var_rel_obj_attr.assign1( LOOKUP_ATTRIBUTE( _python_context->python_closure_rel_field.asObject(), _python_str_plain_get_local_related_value ) );
        frame_guard.setLineNumber( 420 );
        _python_var_instance_attr.assign1( LOOKUP_ATTRIBUTE( _python_context->python_closure_rel_field.asObject(), _python_str_plain_get_foreign_related_value ) );
        frame_guard.setLineNumber( 421 );
        _python_var_instances_dict.assign1( TO_DICT( PyObjectTemporary( impl_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( MAKE_ITERATOR( _python_var_instances.asObject() ), _python_var_instance_attr ) ).asObject(), NULL ) );
        frame_guard.setLineNumber( 422 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call2;
            PyObjectTempKeeper1 keeper_0;
            _python_var_db.assign1( ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__db ) ) ) ? keeper_0.asObject() : ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_read ) ), call2.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_instances.asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain_instance ) ).asObject() ) ) ) );
        }
        frame_guard.setLineNumber( 423 );
        {
            PyObjectTempKeeper0 make_dict4;
            _python_var_query.assign1( ( make_dict4.assign( _python_var_instances.asObject() ), MAKE_DICT1( make_dict4.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_38b85e9cb3ddf8db51dfdd4b8d89df1e, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_closure_rel_field.asObject(), _python_str_plain_name ) ).asObject() ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 424 );
        {
            PyObjectTempKeeper1 call8;
            PyObjectTempKeeper1 call_tmp10;
            PyObjectTempKeeper0 super6;
            _python_var_qs.assign1( ( call_tmp10.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super6.assign( _python_context->python_closure_RelatedManager.asObject() ), BUILTIN_SUPER( super6.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_get_queryset ) ).asObject() ) ).asObject(), _python_str_plain_using ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_db.asObject() ) ) ).asObject(), _python_str_plain_filter ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp10.asObject(), _python_var_query.asObject1() ) ) );
        }
        {
            frame_guard.setLineNumber( 427 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_qs.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 427 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_rel_obj.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 428 );
                {
                    PyObjectTempKeeper0 call12;
                    PyObjectTempKeeper0 subscr14;
                    _python_var_instance.assign1( ( subscr14.assign( _python_var_instances_dict.asObject() ), LOOKUP_SUBSCRIPT( subscr14.asObject0(), PyObjectTemporary( ( call12.assign( _python_var_rel_obj_attr.asObject() ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), _python_var_rel_obj.asObject() ) ) ).asObject() ) ) );
                }
                frame_guard.setLineNumber( 429 );
                {
                    PyObjectTempKeeper0 setattr16;
                    PyObjectTempKeeper1 setattr17;
                    ( ( setattr16.assign( _python_var_rel_obj.asObject() ), setattr17.assign( LOOKUP_ATTRIBUTE( _python_context->python_closure_rel_field.asObject(), _python_str_plain_name ) ), BUILTIN_SETATTR( setattr16.asObject0(), setattr17.asObject0(), _python_var_instance.asObject() ) ), Py_None );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 430 );
        _python_var_cache_name.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_closure_rel_field.asObject(), _python_str_plain_related_query_name ) ).asObject() ) );
        frame_guard.setLineNumber( 431 );
        {
            PyObjectTempKeeper0 make_tuple19;
            PyObjectTempKeeper0 make_tuple20;
            PyObjectTempKeeper0 make_tuple21;
            return ( make_tuple19.assign( _python_var_qs.asObject() ), make_tuple20.assign( _python_var_rel_obj_attr.asObject() ), make_tuple21.assign( _python_var_instance_attr.asObject() ), MAKE_TUPLE5( make_tuple19.asObject0(), make_tuple20.asObject0(), make_tuple21.asObject0(), Py_False, _python_var_cache_name.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_instances.updateLocalsDict( _python_var_self.updateLocalsDict( _python_context->python_closure_RelatedManager.updateLocalsDict( _python_context->python_closure_rel_field.updateLocalsDict( _python_var_cache_name.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_rel_obj.updateLocalsDict( _python_var_qs.updateLocalsDict( _python_var_query.updateLocalsDict( _python_var_db.updateLocalsDict( _python_var_instances_dict.updateLocalsDict( _python_var_instance_attr.updateLocalsDict( _python_var_rel_obj_attr.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instances = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instances == key )
            {
                if (unlikely( _python_par_instances ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'instances'" );
                    goto error_exit;
                }

                _python_par_instances = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instances, key ) )
            {
                if (unlikely( _python_par_instances ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'instances'" );
                    goto error_exit;
                }

                _python_par_instances = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prefetch_queryset() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instances != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'instances'" );
             goto error_exit;
         }

        _python_par_instances = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instances );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instances );

    return NULL;
}

static PyObject *dparse_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectClosureVariable python_closure_instance_attr;
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_inst;
};

static void _context_generator_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (struct _context_generator_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (_context_generator_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_inst.setVariableName( _python_str_plain_inst );

        // Actual function code.
        static PyFrameObject *frame_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
        {
            if ( frame_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
                Py_DECREF( frame_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
            }

            frame_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_794547490df038eac3607aac26096937, _module_django__db__models__fields__related );
        }

        Py_INCREF( frame_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        generator->m_frame = frame_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 421 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 421 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_context->python_var_inst.assign0( _python_tmp_iter_value.asObject() );
                        {
                            PyObjectTempKeeper0 call1;
                            PyObjectTempKeeper1 make_tuple3;
                            YIELD_VALUE( generator, ( make_tuple3.assign( ( call1.assign( _python_context->python_closure_instance_attr.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_context->python_var_inst.asObject() ) ) ), MAKE_TUPLE2( make_tuple3.asObject0(), _python_context->python_var_inst.asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_instance_attr )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = new _context_generator_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t;
    _python_context->python_closure_instance_attr.shareWith( python_closure_instance_attr );

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_context,
            _python_str_angle_genexpr,
            _codeobj_85ff78b62443e66efa8bccc691aee47b,
            _python_context,
            _context_generator_genexpr_1_of_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}


static PyObject *impl_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_objs )
{
    // The context of the function.
    struct _context_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (struct _context_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_objs( _python_str_plain_objs, _python_par_objs );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_3b246849b82d09e0ad58c942ba86b684, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 434 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_objs.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 434 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_obj.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 435 );
                {
                    PyObjectTempKeeper0 isinstance3;
                    if ( (!( ( isinstance3.assign( _python_var_obj.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject() ) ) )) )
                {
                    frame_guard.setLineNumber( 436 );
                    {
                        PyObjectTempKeeper1 make_tuple1;
                        {
                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_TypeError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_ff9604e91c4bdf3c6ade433a775a0148, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_obj.asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
                }
                frame_guard.setLineNumber( 437 );
                {
                    PyObjectTempKeeper0 setattr5;
                    PyObjectTempKeeper1 setattr6;
                    ( ( setattr5.assign( _python_var_obj.asObject() ), setattr6.assign( LOOKUP_ATTRIBUTE( _python_context->python_closure_rel_field.asObject(), _python_str_plain_name ) ), BUILTIN_SETATTR( setattr5.asObject0(), setattr6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject() ) ), Py_None );
                }
                frame_guard.setLineNumber( 438 );
                DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_save ) ).asObject() ) );

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_objs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_context->python_closure_rel_field.updateLocalsDict( _python_var_obj.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_objs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "add() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_objs = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_objs, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_objs = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_objs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_objs );

    return NULL;
}

static PyObject *dparse_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // The context of the function.
    struct _context_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (struct _context_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );

    // Actual function code.
    static PyFrameObject *frame_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_5ce791380cf003f4f0d95ba322192e86, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 442 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) );
                PyObject *tmp_subscribed = _python_var_kwargs.asObject();
                SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_closure_rel_field.asObject(), _python_str_plain_name ) ).asObject() );
        }
        frame_guard.setLineNumber( 443 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call2;
            _python_var_db.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_write ) ), call2.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_instance ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 444 );
        {
            PyObjectTempKeeper1 call4;
            PyObjectTempKeeper1 call_tmp8;
            PyObjectTempKeeper0 super6;
            return ( call_tmp8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super6.assign( _python_context->python_closure_RelatedManager.asObject() ), BUILTIN_SUPER( super6.asObject0(), PyObjectTemporary( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db_manager ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_db.asObject() ) ) ).asObject() ) ) ).asObject(), _python_str_plain_create ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp8.asObject(), _python_var_kwargs.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_context->python_closure_RelatedManager.updateLocalsDict( _python_context->python_closure_rel_field.updateLocalsDict( _python_var_db.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "create() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "create() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "create() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "create() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "create() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "create() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "create() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "create() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "create() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "create() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "create() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "create() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "create() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "create() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "create() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "create() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // The context of the function.
    struct _context_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (struct _context_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );

    // Actual function code.
    static PyFrameObject *frame_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_2fb93090ecdb5ac0db42a220824e25bf, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 450 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) );
                PyObject *tmp_subscribed = _python_var_kwargs.asObject();
                SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_closure_rel_field.asObject(), _python_str_plain_name ) ).asObject() );
        }
        frame_guard.setLineNumber( 451 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call2;
            _python_var_db.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_write ) ), call2.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_instance ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 452 );
        {
            PyObjectTempKeeper1 call4;
            PyObjectTempKeeper1 call_tmp8;
            PyObjectTempKeeper0 super6;
            return ( call_tmp8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super6.assign( _python_context->python_closure_RelatedManager.asObject() ), BUILTIN_SUPER( super6.asObject0(), PyObjectTemporary( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db_manager ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_db.asObject() ) ) ).asObject() ) ) ).asObject(), _python_str_plain_get_or_create ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp8.asObject(), _python_var_kwargs.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_context->python_closure_RelatedManager.updateLocalsDict( _python_context->python_closure_rel_field.updateLocalsDict( _python_var_db.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "get_or_create() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "get_or_create() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "get_or_create() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_or_create() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_or_create() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_or_create() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_or_create() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_or_create() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_or_create() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_objs )
{
    // The context of the function.
    struct _context_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (struct _context_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_objs( _python_str_plain_objs, _python_par_objs );
    PyObjectLocalVariable _python_var_val( _python_str_plain_val );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_36c27b941084ad327a58ce664db80956, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 458 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_val.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_context->python_closure_rel_field.asObject(), _python_str_plain_get_foreign_related_value ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject() ) ) );
        }
        {
            frame_guard.setLineNumber( 459 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_objs.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 459 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_obj.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 461 );
                {
                    PyObjectTempKeeper1 call10;
                    PyObjectTempKeeper1 cmp12;
                    if ( ( cmp12.assign( ( call10.assign( LOOKUP_ATTRIBUTE( _python_context->python_closure_rel_field.asObject(), _python_str_plain_get_local_related_value ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), _python_var_obj.asObject() ) ) ), RICH_COMPARE_BOOL_EQ( cmp12.asObject0(), _python_var_val.asObject() ) ) )
                {
                    frame_guard.setLineNumber( 462 );
                    {
                        PyObjectTempKeeper0 setattr3;
                        ( ( setattr3.assign( _python_var_obj.asObject() ), BUILTIN_SETATTR( setattr3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_closure_rel_field.asObject(), _python_str_plain_name ) ).asObject(), Py_None ) ), Py_None );
                    }
                    frame_guard.setLineNumber( 463 );
                    DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_save ) ).asObject() ) );
                }
                else
                {
                    frame_guard.setLineNumber( 465 );
                    {
                        PyObjectTempKeeper1 call8;
                        PyObjectTempKeeper0 make_tuple6;
                        {
                            PyObjectTemporary tmp_exception_type( ( call8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_closure_rel_field.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain_DoesNotExist ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_0c55b1e5125282b862b496d49c337af3, PyObjectTemporary( ( make_tuple6.assign( _python_var_obj.asObject() ), MAKE_TUPLE2( make_tuple6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject() ) ) ).asObject() ) ).asObject() ) ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_objs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_context->python_closure_rel_field.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_val.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_objs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "remove() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "remove() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "remove() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "remove() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "remove() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "remove() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "remove() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "remove() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_objs = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_objs, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_objs = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_objs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_objs );

    return NULL;
}

static PyObject *dparse_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // The context of the function.
    struct _context_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = (struct _context_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_02f7367a50cc860b37bd851714ee471d, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 469 );
        {
            PyObjectTempKeeper1 call_tmp1;
            DECREASE_REFCOUNT( ( call_tmp1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_update ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp1.asObject(), MAKE_DICT1( Py_None, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_closure_rel_field.asObject(), _python_str_plain_name ) ).asObject() ) ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_context->python_closure_rel_field.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clear() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clear() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clear() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clear() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clear() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clear() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clear() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clear() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "clear() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clear() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clear() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_superclass, PyObject *_python_par_rel )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_superclass( _python_str_plain_superclass, _python_par_superclass );
    PyObjectLocalParameterVariableNoDel _python_var_rel( _python_str_plain_rel, _python_par_rel );
    PyObjectSharedLocalVariable _python_var_ManyRelatedManager( _python_str_plain_ManyRelatedManager );

    // Actual function code.
    static PyFrameObject *frame_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        }

        frame_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_c0cddba87982c46033093486e4af38d9, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 478 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _python_var_superclass.asObject() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( _python_var_ManyRelatedManager, _python_var_rel ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 call3;
                _tmp_python_tmp_class = ( call1.assign( _python_tmp_metaclass.asObject() ), call3.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_str_plain_ManyRelatedManager, call3.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            _python_var_ManyRelatedManager.assign0( _python_tmp_class.asObject() );
        }
        frame_guard.setLineNumber( 719 );
        return _python_var_ManyRelatedManager.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_rel.updateLocalsDict( _python_var_superclass.updateLocalsDict( _python_var_ManyRelatedManager.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
           frame_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_superclass = NULL;
    PyObject *_python_par_rel = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "create_many_related_manager() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_superclass == key )
            {
                if (unlikely( _python_par_superclass ))
                {
                    PyErr_Format( PyExc_TypeError, "create_many_related_manager() got multiple values for keyword argument 'superclass'" );
                    goto error_exit;
                }

                _python_par_superclass = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_rel == key )
            {
                if (unlikely( _python_par_rel ))
                {
                    PyErr_Format( PyExc_TypeError, "create_many_related_manager() got multiple values for keyword argument 'rel'" );
                    goto error_exit;
                }

                _python_par_rel = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_superclass, key ) )
            {
                if (unlikely( _python_par_superclass ))
                {
                    PyErr_Format( PyExc_TypeError, "create_many_related_manager() got multiple values for keyword argument 'superclass'" );
                    goto error_exit;
                }

                _python_par_superclass = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_rel, key ) )
            {
                if (unlikely( _python_par_rel ))
                {
                    PyErr_Format( PyExc_TypeError, "create_many_related_manager() got multiple values for keyword argument 'rel'" );
                    goto error_exit;
                }

                _python_par_rel = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "create_many_related_manager() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "create_many_related_manager() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "create_many_related_manager() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "create_many_related_manager() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "create_many_related_manager() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "create_many_related_manager() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "create_many_related_manager() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "create_many_related_manager() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "create_many_related_manager() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "create_many_related_manager() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "create_many_related_manager() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "create_many_related_manager() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "create_many_related_manager() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_superclass != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "create_many_related_manager() got multiple values for keyword argument 'superclass'" );
             goto error_exit;
         }

        _python_par_superclass = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_rel != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "create_many_related_manager() got multiple values for keyword argument 'rel'" );
             goto error_exit;
         }

        _python_par_rel = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, _python_par_superclass, _python_par_rel );

error_exit:;

    Py_XDECREF( _python_par_superclass );
    Py_XDECREF( _python_par_rel );

    return NULL;
}

static PyObject *dparse_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_ManyRelatedManager,PyObjectLocalParameterVariableNoDel &python_closure_rel )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var__get_fk_val( _python_str_plain__get_fk_val );
    PyObjectLocalVariable _python_var_get_queryset( _python_str_plain_get_queryset );
    PyObjectLocalVariable _python_var_get_prefetch_queryset( _python_str_plain_get_prefetch_queryset );
    PyObjectLocalVariable _python_var_add( _python_str_plain_add );
    PyObjectLocalVariable _python_var_remove( _python_str_plain_remove );
    PyObjectLocalVariable _python_var_clear( _python_str_plain_clear );
    PyObjectLocalVariable _python_var_create( _python_str_plain_create );
    PyObjectLocalVariable _python_var_get_or_create( _python_str_plain_get_or_create );
    PyObjectLocalVariable _python_var__add_items( _python_str_plain__add_items );
    PyObjectLocalVariable _python_var__remove_items( _python_str_plain__remove_items );
    PyObjectLocalVariable _python_var__clear_items( _python_str_plain__clear_items );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( python_closure_ManyRelatedManager ) );
    _python_var__get_fk_val.assign1( MAKE_FUNCTION_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  ) );
    _python_var_get_queryset.assign1( MAKE_FUNCTION_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( python_closure_ManyRelatedManager ) );
    _python_var_get_prefetch_queryset.assign1( MAKE_FUNCTION_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( python_closure_ManyRelatedManager ) );
    static PyFrameObject *frame_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
    {
        if ( frame_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        }

        frame_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_5aa494f016b487ea80aa9d466dca2851, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 564 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_rel.asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_auto_created ) ).asObject() ) )
        {
            _python_var_add.assign1( MAKE_FUNCTION_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  ) );
            frame_guard.setLineNumber( 571 );
            SET_ATTRIBUTE( Py_True, _python_var_add.asObject(), _python_str_plain_alters_data );
            _python_var_remove.assign1( MAKE_FUNCTION_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  ) );
            frame_guard.setLineNumber( 579 );
            SET_ATTRIBUTE( Py_True, _python_var_remove.asObject(), _python_str_plain_alters_data );
        }
        _python_var_clear.assign1( MAKE_FUNCTION_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  ) );
        frame_guard.setLineNumber( 587 );
        SET_ATTRIBUTE( Py_True, _python_var_clear.asObject(), _python_str_plain_alters_data );
        _python_var_create.assign1( MAKE_FUNCTION_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( python_closure_ManyRelatedManager ) );
        frame_guard.setLineNumber( 599 );
        SET_ATTRIBUTE( Py_True, _python_var_create.asObject(), _python_str_plain_alters_data );
        _python_var_get_or_create.assign1( MAKE_FUNCTION_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( python_closure_ManyRelatedManager ) );
        frame_guard.setLineNumber( 610 );
        SET_ATTRIBUTE( Py_True, _python_var_get_or_create.asObject(), _python_str_plain_alters_data );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var__clear_items.updateLocalsDict( _python_var__remove_items.updateLocalsDict( _python_var__add_items.updateLocalsDict( _python_var_get_or_create.updateLocalsDict( _python_var_create.updateLocalsDict( _python_var_clear.updateLocalsDict( _python_var_remove.updateLocalsDict( _python_var_add.updateLocalsDict( _python_var_get_prefetch_queryset.updateLocalsDict( _python_var_get_queryset.updateLocalsDict( _python_var__get_fk_val.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
           frame_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;
        }

        throw;
    }
    _python_var__add_items.assign1( MAKE_FUNCTION_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  ) );
    _python_var__remove_items.assign1( MAKE_FUNCTION_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  ) );
    _python_var__clear_items.assign1( MAKE_FUNCTION_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  ) );
    return _python_var__clear_items.updateLocalsDict( _python_var__remove_items.updateLocalsDict( _python_var__add_items.updateLocalsDict( _python_var_get_or_create.updateLocalsDict( _python_var_create.updateLocalsDict( _python_var_clear.updateLocalsDict( _python_var_remove.updateLocalsDict( _python_var_add.updateLocalsDict( _python_var_get_prefetch_queryset.updateLocalsDict( _python_var_get_queryset.updateLocalsDict( _python_var__get_fk_val.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_model, PyObject *_python_par_query_field_name, PyObject *_python_par_instance, PyObject *_python_par_symmetrical, PyObject *_python_par_source_field_name, PyObject *_python_par_target_field_name, PyObject *_python_par_reverse, PyObject *_python_par_through, PyObject *_python_par_prefetch_cache_name )
{
    // The context of the function.
    struct _context_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = (struct _context_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_query_field_name( _python_str_plain_query_field_name, _python_par_query_field_name );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_symmetrical( _python_str_plain_symmetrical, _python_par_symmetrical );
    PyObjectLocalParameterVariableNoDel _python_var_source_field_name( _python_str_plain_source_field_name, _python_par_source_field_name );
    PyObjectLocalParameterVariableNoDel _python_var_target_field_name( _python_str_plain_target_field_name, _python_par_target_field_name );
    PyObjectLocalParameterVariableNoDel _python_var_reverse( _python_str_plain_reverse, _python_par_reverse );
    PyObjectLocalParameterVariableNoDel _python_var_through( _python_str_plain_through, _python_par_through );
    PyObjectLocalParameterVariableNoDel _python_var_prefetch_cache_name( _python_str_plain_prefetch_cache_name, _python_par_prefetch_cache_name );
    PyObjectLocalVariable _python_var_source_field( _python_str_plain_source_field );
    PyObjectLocalVariable _python_var_source_related_fields( _python_str_plain_source_related_fields );
    PyObjectLocalVariable _python_var_lh_field( _python_str_plain_lh_field );
    PyObjectLocalVariable _python_var_rh_field( _python_str_plain_rh_field );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        }

        frame_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_194fbca438c9f37d6d72fe6ab84afb77, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 482 );
        {
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _python_context->python_closure_ManyRelatedManager.asObject() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 483 );
        {
                PyObject *tmp_identifier = _python_var_model.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_model );
        }
        frame_guard.setLineNumber( 484 );
        {
                PyObject *tmp_identifier = _python_var_query_field_name.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_query_field_name );
        }
        frame_guard.setLineNumber( 486 );
        {
            PyObjectTempKeeper1 call3;
            _python_var_source_field.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_through.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_field ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_source_field_name.asObject() ) ) );
        }
        frame_guard.setLineNumber( 487 );
        _python_var_source_related_fields.assign1( LOOKUP_ATTRIBUTE( _python_var_source_field.asObject(), _python_str_plain_related_fields ) );
        frame_guard.setLineNumber( 489 );
        SET_ATTRIBUTE( PyObjectTemporary( PyDict_New() ).asObject(), _python_var_self.asObject(), _python_str_plain_core_filters );
        {
            frame_guard.setLineNumber( 490 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_source_related_fields.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 490 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 490 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_lh_field.assign0( _python_tmp_element_1.asObject() );
                        _python_var_rh_field.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 491 );
                {
                    PyObjectTempKeeper0 getattr7;
                    PyObjectTempKeeper0 make_tuple5;
                    {
                        PyObjectTemporary tmp_identifier( ( getattr7.assign( _python_var_instance.asObject() ), BUILTIN_GETATTR( getattr7.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rh_field.asObject(), _python_str_plain_attname ) ).asObject(), NULL ) ) );
                        PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_core_filters ) );
                        SET_SUBSCRIPT( tmp_identifier.asObject(), tmp_subscribed.asObject(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_aa582e0265b239962ed465f876e27b22, PyObjectTemporary( ( make_tuple5.assign( _python_var_query_field_name.asObject() ), MAKE_TUPLE2( make_tuple5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rh_field.asObject(), _python_str_plain_name ) ).asObject() ) ) ).asObject() ) ).asObject() );
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 493 );
        {
                PyObject *tmp_identifier = _python_var_instance.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_instance );
        }
        frame_guard.setLineNumber( 494 );
        {
                PyObject *tmp_identifier = _python_var_symmetrical.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_symmetrical );
        }
        frame_guard.setLineNumber( 495 );
        {
                PyObject *tmp_identifier = _python_var_source_field.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_source_field );
        }
        frame_guard.setLineNumber( 496 );
        {
                PyObject *tmp_identifier = _python_var_source_field_name.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_source_field_name );
        }
        frame_guard.setLineNumber( 497 );
        {
                PyObject *tmp_identifier = _python_var_target_field_name.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_target_field_name );
        }
        frame_guard.setLineNumber( 498 );
        {
                PyObject *tmp_identifier = _python_var_reverse.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_reverse );
        }
        frame_guard.setLineNumber( 499 );
        {
                PyObject *tmp_identifier = _python_var_through.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_through );
        }
        frame_guard.setLineNumber( 500 );
        {
                PyObject *tmp_identifier = _python_var_prefetch_cache_name.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_prefetch_cache_name );
        }
        frame_guard.setLineNumber( 501 );
        {
            PyObjectTempKeeper1 call10;
            {
                PyObjectTemporary tmp_identifier( ( call10.assign( LOOKUP_ATTRIBUTE( _python_var_source_field.asObject(), _python_str_plain_get_foreign_related_value ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), _python_var_instance.asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_related_val );
        }
        }
        frame_guard.setLineNumber( 503 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_val ) ).asObject(), _python_int_0, 0 ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain__fk_val );
        }
        frame_guard.setLineNumber( 504 );
        if ( SEQUENCE_CONTAINS_BOOL( Py_None, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_val ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 505 );
            {
                PyObjectTempKeeper0 make_tuple12;
                {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_aaa95e4ccb41a7abc3df1c0b70d8beb7, PyObjectTemporary( ( make_tuple12.assign( _python_var_instance.asObject() ), MAKE_TUPLE2( make_tuple12.asObject0(), _python_var_source_field_name.asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 511 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain_pk ) ).asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 512 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_127d174c1721d98d8d5ccfc2c2b30eb7, PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___name__ ) ).asObject() ) ).asObject() ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_prefetch_cache_name.updateLocalsDict( _python_var_through.updateLocalsDict( _python_var_reverse.updateLocalsDict( _python_var_target_field_name.updateLocalsDict( _python_var_source_field_name.updateLocalsDict( _python_var_symmetrical.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_query_field_name.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_self.updateLocalsDict( _python_context->python_closure_ManyRelatedManager.updateLocalsDict( _python_var_rh_field.updateLocalsDict( _python_var_lh_field.updateLocalsDict( _python_var_source_related_fields.updateLocalsDict( _python_var_source_field.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
           frame_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_query_field_name = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_symmetrical = NULL;
    PyObject *_python_par_source_field_name = NULL;
    PyObject *_python_par_target_field_name = NULL;
    PyObject *_python_par_reverse = NULL;
    PyObject *_python_par_through = NULL;
    PyObject *_python_par_prefetch_cache_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_query_field_name == key )
            {
                if (unlikely( _python_par_query_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'query_field_name'" );
                    goto error_exit;
                }

                _python_par_query_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_symmetrical == key )
            {
                if (unlikely( _python_par_symmetrical ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'symmetrical'" );
                    goto error_exit;
                }

                _python_par_symmetrical = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_source_field_name == key )
            {
                if (unlikely( _python_par_source_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'source_field_name'" );
                    goto error_exit;
                }

                _python_par_source_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_target_field_name == key )
            {
                if (unlikely( _python_par_target_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'target_field_name'" );
                    goto error_exit;
                }

                _python_par_target_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_reverse == key )
            {
                if (unlikely( _python_par_reverse ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'reverse'" );
                    goto error_exit;
                }

                _python_par_reverse = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_through == key )
            {
                if (unlikely( _python_par_through ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'through'" );
                    goto error_exit;
                }

                _python_par_through = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_prefetch_cache_name == key )
            {
                if (unlikely( _python_par_prefetch_cache_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'prefetch_cache_name'" );
                    goto error_exit;
                }

                _python_par_prefetch_cache_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_query_field_name, key ) )
            {
                if (unlikely( _python_par_query_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'query_field_name'" );
                    goto error_exit;
                }

                _python_par_query_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_symmetrical, key ) )
            {
                if (unlikely( _python_par_symmetrical ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'symmetrical'" );
                    goto error_exit;
                }

                _python_par_symmetrical = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_source_field_name, key ) )
            {
                if (unlikely( _python_par_source_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'source_field_name'" );
                    goto error_exit;
                }

                _python_par_source_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_target_field_name, key ) )
            {
                if (unlikely( _python_par_target_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'target_field_name'" );
                    goto error_exit;
                }

                _python_par_target_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_reverse, key ) )
            {
                if (unlikely( _python_par_reverse ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'reverse'" );
                    goto error_exit;
                }

                _python_par_reverse = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_through, key ) )
            {
                if (unlikely( _python_par_through ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'through'" );
                    goto error_exit;
                }

                _python_par_through = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_prefetch_cache_name, key ) )
            {
                if (unlikely( _python_par_prefetch_cache_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'prefetch_cache_name'" );
                    goto error_exit;
                }

                _python_par_prefetch_cache_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 10 ))
    {
        if ( 10 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 10, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 10 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 10, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 10, args_given + kw_only_found );
            }
#else
            if ( 10 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 10, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 10, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 10 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 10, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 10 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 10 ? args_given : 10;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_query_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'query_field_name'" );
             goto error_exit;
         }

        _python_par_query_field_name = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_symmetrical != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'symmetrical'" );
             goto error_exit;
         }

        _python_par_symmetrical = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_source_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'source_field_name'" );
             goto error_exit;
         }

        _python_par_source_field_name = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_target_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'target_field_name'" );
             goto error_exit;
         }

        _python_par_target_field_name = INCREASE_REFCOUNT( args[ 6 ] );
    }
    if (likely( 7 < args_usable_count ))
    {
         if (unlikely( _python_par_reverse != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'reverse'" );
             goto error_exit;
         }

        _python_par_reverse = INCREASE_REFCOUNT( args[ 7 ] );
    }
    if (likely( 8 < args_usable_count ))
    {
         if (unlikely( _python_par_through != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'through'" );
             goto error_exit;
         }

        _python_par_through = INCREASE_REFCOUNT( args[ 8 ] );
    }
    if (likely( 9 < args_usable_count ))
    {
         if (unlikely( _python_par_prefetch_cache_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'prefetch_cache_name'" );
             goto error_exit;
         }

        _python_par_prefetch_cache_name = INCREASE_REFCOUNT( args[ 9 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_model == NULL )
    {
        _python_par_model = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_model );
    }
    if ( _python_par_query_field_name == NULL )
    {
        _python_par_query_field_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_query_field_name );
    }
    if ( _python_par_instance == NULL )
    {
        _python_par_instance = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_instance );
    }
    if ( _python_par_symmetrical == NULL )
    {
        _python_par_symmetrical = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_symmetrical );
    }
    if ( _python_par_source_field_name == NULL )
    {
        _python_par_source_field_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_source_field_name );
    }
    if ( _python_par_target_field_name == NULL )
    {
        _python_par_target_field_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 5 ) );
        assertObject( _python_par_target_field_name );
    }
    if ( _python_par_reverse == NULL )
    {
        _python_par_reverse = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 6 ) );
        assertObject( _python_par_reverse );
    }
    if ( _python_par_through == NULL )
    {
        _python_par_through = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 7 ) );
        assertObject( _python_par_through );
    }
    if ( _python_par_prefetch_cache_name == NULL )
    {
        _python_par_prefetch_cache_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 8 ) );
        assertObject( _python_par_prefetch_cache_name );
    }


    return impl_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_model, _python_par_query_field_name, _python_par_instance, _python_par_symmetrical, _python_par_source_field_name, _python_par_target_field_name, _python_par_reverse, _python_par_through, _python_par_prefetch_cache_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_query_field_name );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_symmetrical );
    Py_XDECREF( _python_par_source_field_name );
    Py_XDECREF( _python_par_target_field_name );
    Py_XDECREF( _python_par_reverse );
    Py_XDECREF( _python_par_through );
    Py_XDECREF( _python_par_prefetch_cache_name );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 10)
    {
        return impl_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ), INCREASE_REFCOUNT( args[ 8 ] ), INCREASE_REFCOUNT( args[ 9 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_obj, PyObject *_python_par_field_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_obj( _python_str_plain_obj, _python_par_obj );
    PyObjectLocalParameterVariableNoDel _python_var_field_name( _python_str_plain_field_name, _python_par_field_name );
    PyObjectLocalVariable _python_var_fk( _python_str_plain_fk );
    PyObjectLocalVariable _python_var_attname( _python_str_plain_attname );

    // Actual function code.
    static PyFrameObject *frame_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        }

        frame_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_cef46977aa250b0edf04cedab41c8744, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 522 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_fk.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_field ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_field_name.asObject() ) ) );
        }
        frame_guard.setLineNumber( 523 );
        {
            PyObjectTempKeeper1 cmp9;
            if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_fk.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_field_name ) ).asObject() ) && ( cmp9.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_fk.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_field_name ) ), RICH_COMPARE_BOOL_NE( cmp9.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_fk.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk ) ).asObject(), _python_str_plain_attname ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 524 );
            _python_var_attname.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_fk.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_get_related_field ) ).asObject() ) ).asObject(), _python_str_plain_get_attname ) ).asObject() ) );
            frame_guard.setLineNumber( 525 );
            {
                PyObjectTempKeeper1 call6;
                PyObjectTempKeeper0 getattr3;
                return ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_fk.asObject(), _python_str_plain_get_prep_lookup ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_str_plain_exact, PyObjectTemporary( ( getattr3.assign( _python_var_obj.asObject() ), BUILTIN_GETATTR( getattr3.asObject0(), _python_var_attname.asObject(), NULL ) ) ).asObject() ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 527 );
            return LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_pk );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_field_name.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_attname.updateLocalsDict( _python_var_fk.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
           frame_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_obj = NULL;
    PyObject *_python_par_field_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_fk_val() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_fk_val() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_obj == key )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_fk_val() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field_name == key )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_fk_val() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_fk_val() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_obj, key ) )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_fk_val() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field_name, key ) )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_fk_val() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_fk_val() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_fk_val() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_get_fk_val() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_get_fk_val() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_fk_val() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_get_fk_val() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_fk_val() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_get_fk_val() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_fk_val() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_get_fk_val() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_get_fk_val() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "_get_fk_val() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_get_fk_val() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_fk_val() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_fk_val() got multiple values for keyword argument 'obj'" );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_fk_val() got multiple values for keyword argument 'field_name'" );
             goto error_exit;
         }

        _python_par_field_name = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_obj, _python_par_field_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_obj );
    Py_XDECREF( _python_par_field_name );

    return NULL;
}

static PyObject *dparse_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // The context of the function.
    struct _context_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = (struct _context_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );

    // Actual function code.
    static PyFrameObject *frame_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        }

        frame_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_6b2fc2f17f340f69ea98b4dff3edbf0d, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 530 );
        try
        {
            frame_guard.setLineNumber( 531 );
            {
                PyObjectTempKeeper1 subscr10;
                return ( subscr10.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain__prefetched_objects_cache ) ), LOOKUP_SUBSCRIPT( subscr10.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_prefetch_cache_name ) ).asObject() ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_AttributeError ) || _exception.matches( PyExc_KeyError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 533 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper1 call2;
                    PyObjectTempKeeper1 keeper_0;
                    _python_var_db.assign1( ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__db ) ) ) ? keeper_0.asObject() : ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_read ) ), call2.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain___class__ ) ).asObject() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_instance ) ).asObject() ) ) ) );
                }
                frame_guard.setLineNumber( 534 );
                {
                    PyObjectTempKeeper1 call6;
                    PyObjectTempKeeper1 call_tmp8;
                    PyObjectTempKeeper0 super4;
                    return ( call_tmp8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super4.assign( _python_context->python_closure_ManyRelatedManager.asObject() ), BUILTIN_SUPER( super4.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_get_queryset ) ).asObject() ) ).asObject(), _python_str_plain_using ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_db.asObject() ) ) ).asObject(), _python_str_plain__next_is_sticky ) ).asObject() ) ).asObject(), _python_str_plain_filter ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp8.asObject(), LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_core_filters ) ) );
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_context->python_closure_ManyRelatedManager.updateLocalsDict( _python_var_db.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
           frame_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_queryset() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_queryset() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_queryset() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_queryset() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instances )
{
    // The context of the function.
    struct _context_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = (struct _context_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instances( _python_str_plain_instances, _python_par_instances );
    PyObjectLocalVariable _python_var_instance( _python_str_plain_instance );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );
    PyObjectLocalVariable _python_var_query( _python_str_plain_query );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );
    PyObjectSharedLocalVariable _python_var_fk( _python_str_plain_fk );
    PyObjectSharedLocalVariable _python_var_join_table( _python_str_plain_join_table );
    PyObjectLocalVariable _python_var_connection( _python_str_plain_connection );
    PyObjectSharedLocalVariable _python_var_qn( _python_str_plain_qn );

    // Actual function code.
    static PyFrameObject *frame_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        }

        frame_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_ec7a67018d241b0e67e9dcd266573da2, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 537 );
        _python_var_instance.assign1( LOOKUP_SUBSCRIPT_CONST( _python_var_instances.asObject(), _python_int_0, 0 ) );
        frame_guard.setLineNumber( 538 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call2;
            PyObjectTempKeeper1 keeper_0;
            _python_var_db.assign1( ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__db ) ) ) ? keeper_0.asObject() : ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_read ) ), call2.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_instance.asObject(), _python_str_plain___class__ ) ).asObject() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_instance.asObject(), _python_str_plain_instance ) ).asObject() ) ) ) );
        }
        frame_guard.setLineNumber( 539 );
        {
            PyObjectTempKeeper0 make_dict4;
            _python_var_query.assign1( ( make_dict4.assign( _python_var_instances.asObject() ), MAKE_DICT1( make_dict4.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_38b85e9cb3ddf8db51dfdd4b8d89df1e, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_query_field_name ) ).asObject() ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 540 );
        {
            PyObjectTempKeeper1 call8;
            PyObjectTempKeeper1 call_tmp10;
            PyObjectTempKeeper0 super6;
            _python_var_qs.assign1( ( call_tmp10.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super6.assign( _python_context->python_closure_ManyRelatedManager.asObject() ), BUILTIN_SUPER( super6.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_get_queryset ) ).asObject() ) ).asObject(), _python_str_plain_using ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_db.asObject() ) ) ).asObject(), _python_str_plain__next_is_sticky ) ).asObject() ) ).asObject(), _python_str_plain_filter ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp10.asObject(), _python_var_query.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 549 );
        {
            PyObjectTempKeeper1 call12;
            _python_var_fk.assign1( ( call12.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_field ) ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_source_field_name ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 550 );
        _python_var_join_table.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_db_table ) );
        frame_guard.setLineNumber( 551 );
        {
            PyObjectTempKeeper0 subscr14;
            _python_var_connection.assign1( ( subscr14.assign( _mvar_django__db__models__fields__related_connections.asObject0() ), LOOKUP_SUBSCRIPT( subscr14.asObject0(), _python_var_db.asObject() ) ) );
        }
        frame_guard.setLineNumber( 552 );
        _python_var_qn.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_quote_name ) );
        frame_guard.setLineNumber( 553 );
        {
            PyObjectTempKeeper1 call16;
            _python_var_qs.assign1( ( call16.assign( LOOKUP_ATTRIBUTE( _python_var_qs.asObject(), _python_str_plain_extra ) ), CALL_FUNCTION( call16.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( TO_DICT( PyObjectTemporary( impl_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_fk.asObject(), _python_str_plain_local_related_fields ) ).asObject() ), _python_var_join_table, _python_var_qn ) ).asObject(), NULL ) ).asObject(), _python_str_plain_select ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 556 );
        {
            PyObjectTempKeeper0 make_tuple19;
            return ( make_tuple19.assign( _python_var_qs.asObject() ), MAKE_TUPLE5( make_tuple19.asObject0(), PyObjectTemporary( MAKE_FUNCTION_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( _python_var_fk ) ).asObject(), PyObjectTemporary( MAKE_FUNCTION_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( _python_var_fk ) ).asObject(), Py_False, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_prefetch_cache_name ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_instances.updateLocalsDict( _python_var_self.updateLocalsDict( _python_context->python_closure_ManyRelatedManager.updateLocalsDict( _python_var_qn.updateLocalsDict( _python_var_connection.updateLocalsDict( _python_var_join_table.updateLocalsDict( _python_var_fk.updateLocalsDict( _python_var_qs.updateLocalsDict( _python_var_query.updateLocalsDict( _python_var_db.updateLocalsDict( _python_var_instance.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
           frame_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instances = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instances == key )
            {
                if (unlikely( _python_par_instances ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'instances'" );
                    goto error_exit;
                }

                _python_par_instances = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instances, key ) )
            {
                if (unlikely( _python_par_instances ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'instances'" );
                    goto error_exit;
                }

                _python_par_instances = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prefetch_queryset() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instances != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prefetch_queryset() got multiple values for keyword argument 'instances'" );
             goto error_exit;
         }

        _python_par_instances = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instances );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instances );

    return NULL;
}

static PyObject *dparse_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectClosureVariable python_closure_join_table;
    PyObjectClosureVariable python_closure_qn;
    PyObjectLocalParameterVariableNoDel python_var___iterator;
    PyObjectLocalVariable python_var_f;
};

static void _context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = (struct _context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_context( Nuitka_GeneratorObject *generator )
{
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = (_context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *)generator->m_context;


        // Local variable inits
        _python_context->python_var_f.setVariableName( _python_str_plain_f );

        // Actual function code.
        static PyFrameObject *frame_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
        {
            if ( frame_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
                Py_DECREF( frame_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
            }

            frame_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_23fbc9c35ac37e67edef59ee079de03e, _module_django__db__models__fields__related );
        }

        Py_INCREF( frame_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        generator->m_frame = frame_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            {
                {
                    frame_guard.setLineNumber( 554 );
                    PyObject *_python_tmp_contraction_iter = _python_context->python_var___iterator.asObject();
                    while( true )
                    {
                        frame_guard.setLineNumber( 554 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_context->python_var_f.assign0( _python_tmp_iter_value.asObject() );
                        {
                            PyObjectTempKeeper0 call1;
                            PyObjectTempKeeper0 call3;
                            PyObjectTempKeeper1 make_tuple5;
                            PyObjectTempKeeper1 make_tuple7;
                            YIELD_VALUE( generator, ( make_tuple7.assign( BINARY_OPERATION_REMAINDER( _python_str_digest_34907228ebdb798a93ca1c419a90d6ea, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_f.asObject(), _python_str_plain_attname ) ).asObject() ) ), MAKE_TUPLE2( make_tuple7.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_fffb2b4b5e45eb8109d63f2497fbdbc1, PyObjectTemporary( ( make_tuple5.assign( ( call1.assign( _python_context->python_closure_qn.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_context->python_closure_join_table.asObject() ) ) ), MAKE_TUPLE2( make_tuple5.asObject0(), PyObjectTemporary( ( call3.assign( _python_context->python_closure_qn.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_var_f.asObject(), _python_str_plain_column ) ).asObject() ) ) ).asObject() ) ) ).asObject() ) ).asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                }
            }

            PyErr_SetNone( PyExc_StopIteration );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &python_closure_join_table, PyObjectSharedLocalVariable &python_closure_qn )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = new _context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t;
    _python_context->python_closure_join_table.shareWith( python_closure_join_table );
    _python_context->python_closure_qn.shareWith( python_closure_qn );

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_context,
            _python_str_angle_genexpr,
            _codeobj_d6ab195284227615295f7c74daac0c31,
            _python_context,
            _context_generator_genexpr_1_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->python_var___iterator.setVariableNameAndValue( _python_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}


static PyObject *impl_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_result )
{
    // The context of the function.
    struct _context_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = (struct _context_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_result( _python_str_plain_result, _python_par_result );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );

    // Actual function code.
    static PyFrameObject *frame_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
    {
        if ( frame_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        }

        frame_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_896cd3160fd989798af653fe16c9f4fa, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 557 );
        return TO_TUPLE( PyObjectTemporary( impl_listcontr_1_of_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_closure_fk.asObject(), _python_str_plain_local_related_fields ) ).asObject() ), _python_var_f, _python_var_result ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_result.updateLocalsDict( _python_context->python_closure_fk.updateLocalsDict( _python_var_f.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
           frame_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_result = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_result == key )
            {
                if (unlikely( _python_par_result ))
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'result'" );
                    goto error_exit;
                }

                _python_par_result = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_result, key ) )
            {
                if (unlikely( _python_par_result ))
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'result'" );
                    goto error_exit;
                }

                _python_par_result = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "<lambda>() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "<lambda>() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_result != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'result'" );
             goto error_exit;
         }

        _python_par_result = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, _python_par_result );

error_exit:;

    Py_XDECREF( _python_par_result );

    return NULL;
}

static PyObject *dparse_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_f,PyObjectLocalParameterVariableNoDel &python_closure_result )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 557 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 557 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_f.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 getattr1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( getattr1.assign( python_closure_result.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_34907228ebdb798a93ca1c419a90d6ea, PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_f.asObject(), _python_str_plain_attname ) ).asObject() ) ).asObject(), NULL ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_inst )
{
    // The context of the function.
    struct _context_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = (struct _context_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_inst( _python_str_plain_inst, _python_par_inst );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );

    // Actual function code.
    static PyFrameObject *frame_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
    {
        if ( frame_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        }

        frame_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_527108c14224893838e7431e73b2ac85, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 558 );
        return TO_TUPLE( PyObjectTemporary( impl_listcontr_1_of_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_closure_fk.asObject(), _python_str_plain_foreign_related_fields ) ).asObject() ), _python_var_f, _python_var_inst ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_inst.updateLocalsDict( _python_context->python_closure_fk.updateLocalsDict( _python_var_f.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
           frame_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_inst = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_inst == key )
            {
                if (unlikely( _python_par_inst ))
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'inst'" );
                    goto error_exit;
                }

                _python_par_inst = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_inst, key ) )
            {
                if (unlikely( _python_par_inst ))
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'inst'" );
                    goto error_exit;
                }

                _python_par_inst = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "<lambda>() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "<lambda>() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_inst != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'inst'" );
             goto error_exit;
         }

        _python_par_inst = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, _python_par_inst );

error_exit:;

    Py_XDECREF( _python_par_inst );

    return NULL;
}

static PyObject *dparse_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_f,PyObjectLocalParameterVariableNoDel &python_closure_inst )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 558 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 558 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_f.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 getattr1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( getattr1.assign( python_closure_inst.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_f.asObject(), _python_str_plain_attname ) ).asObject(), NULL ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_objs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_objs( _python_str_plain_objs, _python_par_objs );

    // Actual function code.
    static PyFrameObject *frame_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        }

        frame_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_819f81e2496b2c73c8ab43527194b77e, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 566 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper1 call_tmp4;
            PyObjectTempKeeper1 make_tuple1;
            DECREASE_REFCOUNT( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__add_items ) ), call_tmp4.assign( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_source_field_name ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_target_field_name ) ).asObject() ) ) ), impl_function_5_complex_call_helper_pos_star_list_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_objs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 569 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_symmetrical ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 570 );
            {
                PyObjectTempKeeper1 call_tmp8;
                PyObjectTempKeeper1 call_tmp9;
                PyObjectTempKeeper1 make_tuple6;
                DECREASE_REFCOUNT( ( call_tmp8.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__add_items ) ), call_tmp9.assign( ( make_tuple6.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_target_field_name ) ), MAKE_TUPLE2( make_tuple6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_source_field_name ) ).asObject() ) ) ), impl_function_5_complex_call_helper_pos_star_list_of_module___internal__( call_tmp8.asObject(), call_tmp9.asObject(), _python_var_objs.asObject1() ) ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_objs.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
           frame_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_objs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "add() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "add() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "add() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "add() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "add() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "add() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "add() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_objs = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_objs, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_objs = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_objs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_objs );

    return NULL;
}

static PyObject *dparse_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_objs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_objs( _python_str_plain_objs, _python_par_objs );

    // Actual function code.
    static PyFrameObject *frame_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        }

        frame_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_97c5a40392872e12d420c1c983326d0a, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 574 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper1 call_tmp4;
            PyObjectTempKeeper1 make_tuple1;
            DECREASE_REFCOUNT( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__remove_items ) ), call_tmp4.assign( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_source_field_name ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_target_field_name ) ).asObject() ) ) ), impl_function_5_complex_call_helper_pos_star_list_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_objs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 577 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_symmetrical ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 578 );
            {
                PyObjectTempKeeper1 call_tmp8;
                PyObjectTempKeeper1 call_tmp9;
                PyObjectTempKeeper1 make_tuple6;
                DECREASE_REFCOUNT( ( call_tmp8.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__remove_items ) ), call_tmp9.assign( ( make_tuple6.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_target_field_name ) ), MAKE_TUPLE2( make_tuple6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_source_field_name ) ).asObject() ) ) ), impl_function_5_complex_call_helper_pos_star_list_of_module___internal__( call_tmp8.asObject(), call_tmp9.asObject(), _python_var_objs.asObject1() ) ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_objs.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
           frame_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_objs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "remove() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "remove() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "remove() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "remove() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "remove() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "remove() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "remove() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "remove() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_objs = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_objs, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_objs = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_objs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_objs );

    return NULL;
}

static PyObject *dparse_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        }

        frame_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_d3a9811d01a03df6eec8eeb0075758a5, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 582 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clear_items ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_source_field_name ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 585 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_symmetrical ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 586 );
            {
                PyObjectTempKeeper1 call3;
                DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__clear_items ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_target_field_name ) ).asObject() ) ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
           frame_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clear() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clear() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clear() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clear() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clear() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clear() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clear() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "clear() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clear() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clear() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clear() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "clear() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clear() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clear() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // The context of the function.
    struct _context_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = (struct _context_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );
    PyObjectLocalVariable _python_var_new_obj( _python_str_plain_new_obj );

    // Actual function code.
    static PyFrameObject *frame_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        }

        frame_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_42273badce720345eb5152e45de56798, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 592 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_auto_created ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 593 );
            _python_var_opts.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__meta ) );
            frame_guard.setLineNumber( 594 );
            {
                PyObjectTempKeeper1 make_tuple1;
                {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AttributeError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_29090d3497da3430da2392d20fd0bcfa, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_app_label ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_object_name ) ).asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 595 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 call4;
            _python_var_db.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_write ) ), call4.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain___class__ ) ).asObject() ) ), CALL_FUNCTION( call3.asObject0(), call4.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_instance ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 596 );
        {
            PyObjectTempKeeper1 call6;
            PyObjectTempKeeper1 call_tmp10;
            PyObjectTempKeeper0 super8;
            _python_var_new_obj.assign1( ( call_tmp10.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super8.assign( _python_context->python_closure_ManyRelatedManager.asObject() ), BUILTIN_SUPER( super8.asObject0(), PyObjectTemporary( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db_manager ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_db.asObject() ) ) ).asObject() ) ) ).asObject(), _python_str_plain_create ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp10.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 597 );
        {
            PyObjectTempKeeper1 call12;
            DECREASE_REFCOUNT( ( call12.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), _python_var_new_obj.asObject() ) ) );
        }
        frame_guard.setLineNumber( 598 );
        return _python_var_new_obj.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_context->python_closure_ManyRelatedManager.updateLocalsDict( _python_var_new_obj.updateLocalsDict( _python_var_db.updateLocalsDict( _python_var_opts.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
           frame_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "create() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "create() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "create() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "create() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "create() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "create() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "create() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "create() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "create() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "create() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "create() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "create() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "create() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "create() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "create() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "create() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // The context of the function.
    struct _context_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = (struct _context_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );
    PyObjectLocalVariable _python_var_created( _python_str_plain_created );

    // Actual function code.
    static PyFrameObject *frame_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        }

        frame_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_b069e9a410d20ed55f4799ddb13cd55d, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 602 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call2;
            _python_var_db.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_write ) ), call2.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain___class__ ) ).asObject() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_instance ) ).asObject() ) ) );
        }
        {
            frame_guard.setLineNumber( 603 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper1 call4;
                PyObjectTempKeeper1 call_tmp8;
                PyObjectTempKeeper0 super6;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call_tmp8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super6.assign( _python_context->python_closure_ManyRelatedManager.asObject() ), BUILTIN_SUPER( super6.asObject0(), PyObjectTemporary( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db_manager ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_db.asObject() ) ) ).asObject() ) ) ).asObject(), _python_str_plain_get_or_create ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp8.asObject(), _python_var_kwargs.asObject1() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            _python_var_obj.assign0( _python_tmp_element_1.asObject() );
            _python_var_created.assign0( _python_tmp_element_2.asObject() );
        }
        frame_guard.setLineNumber( 607 );
        if ( CHECK_IF_TRUE( _python_var_created.asObject() ) )
        {
            frame_guard.setLineNumber( 608 );
            {
                PyObjectTempKeeper1 call10;
                DECREASE_REFCOUNT( ( call10.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), _python_var_obj.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 609 );
        {
            PyObjectTempKeeper0 make_tuple12;
            return ( make_tuple12.assign( _python_var_obj.asObject() ), MAKE_TUPLE2( make_tuple12.asObject0(), _python_var_created.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_context->python_closure_ManyRelatedManager.updateLocalsDict( _python_var_created.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_db.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
           frame_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "get_or_create() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "get_or_create() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "get_or_create() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_or_create() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_or_create() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_or_create() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_or_create() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_or_create() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_or_create() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_or_create() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_source_field_name, PyObject *_python_par_target_field_name, PyObject *_python_par_objs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_source_field_name( _python_str_plain_source_field_name, _python_par_source_field_name );
    PyObjectLocalParameterVariableNoDel _python_var_target_field_name( _python_str_plain_target_field_name, _python_par_target_field_name );
    PyObjectLocalParameterVariableNoDel _python_var_objs( _python_str_plain_objs, _python_par_objs );
    PyObjectLocalVariable _python_var_Model( _python_str_plain_Model );
    PyObjectLocalVariable _python_var_new_ids( _python_str_plain_new_ids );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );
    PyObjectLocalVariable _python_var_fk_val( _python_str_plain_fk_val );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );
    PyObjectLocalVariable _python_var_vals( _python_str_plain_vals );
    PyObjectLocalVariable _python_var_obj_id( _python_str_plain_obj_id );

    // Actual function code.
    static PyFrameObject *frame_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        }

        frame_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_71b2b325878e9b3727f94e321eaa77c5, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 618 );
        _python_var_Model.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_cb8fece6bec5decd96c3feee6d1288d4, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, PyObjectTemporary( _python_var_objs.updateLocalsDict( _python_var_target_field_name.updateLocalsDict( _python_var_source_field_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_obj_id.updateLocalsDict( _python_var_vals.updateLocalsDict( _python_var_db.updateLocalsDict( _python_var_fk_val.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_new_ids.updateLocalsDict( _python_var_Model.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ).asObject(), _python_list_str_plain_Model_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_Model ) );
        frame_guard.setLineNumber( 619 );
        if ( CHECK_IF_TRUE( _python_var_objs.asObject() ) )
        {
            frame_guard.setLineNumber( 620 );
            _python_var_new_ids.assign1( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) );
            {
                frame_guard.setLineNumber( 621 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_objs.asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 621 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_var_obj.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 622 );
                    {
                        PyObjectTempKeeper0 isinstance23;
                        if ( ( isinstance23.assign( _python_var_obj.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance23.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject() ) ) )
                    {
                        frame_guard.setLineNumber( 623 );
                        {
                            PyObjectTempKeeper1 call4;
                            PyObjectTempKeeper0 call5;
                            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( call4.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_allow_relation ) ), call5.assign( _python_var_obj.asObject() ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), call5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject() ) ) ).asObject() ) )) )
                        {
                            frame_guard.setLineNumber( 624 );
                            {
                                PyObjectTempKeeper0 make_tuple1;
                                PyObjectTempKeeper1 make_tuple2;
                                {
                                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_5afc56f837df8ad88bfd8ecb6bc63ae1, PyObjectTemporary( ( make_tuple1.assign( _python_var_obj.asObject() ), make_tuple2.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db ) ), MAKE_TUPLE3( make_tuple1.asObject0(), make_tuple2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain__state ) ).asObject(), _python_str_plain_db ) ).asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                            }
                            }
                        }
                        }
                        frame_guard.setLineNumber( 626 );
                        {
                            PyObjectTempKeeper1 call7;
                            PyObjectTempKeeper0 call8;
                            _python_var_fk_val.assign1( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_fk_val ) ), call8.assign( _python_var_obj.asObject() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), call8.asObject0(), _python_var_target_field_name.asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 627 );
                        if ( ( _python_var_fk_val.asObject() == Py_None ) )
                        {
                            frame_guard.setLineNumber( 628 );
                            {
                                PyObjectTempKeeper0 make_tuple10;
                                {
                                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_f4be29cf95b1d6efb3d3cbb5a748d1be, PyObjectTemporary( ( make_tuple10.assign( _python_var_obj.asObject() ), MAKE_TUPLE2( make_tuple10.asObject0(), _python_var_target_field_name.asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                            }
                            }
                        }
                        frame_guard.setLineNumber( 630 );
                        {
                            PyObjectTempKeeper1 call12;
                            PyObjectTempKeeper0 call13;
                            PyObjectTempKeeper1 call15;
                            DECREASE_REFCOUNT( ( call15.assign( LOOKUP_ATTRIBUTE( _python_var_new_ids.asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), PyObjectTemporary( ( call12.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_fk_val ) ), call13.assign( _python_var_obj.asObject() ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), call13.asObject0(), _python_var_target_field_name.asObject() ) ) ).asObject() ) ) );
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 631 );
                        {
                            PyObjectTempKeeper0 isinstance21;
                            if ( ( isinstance21.assign( _python_var_obj.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance21.asObject0(), _python_var_Model.asObject() ) ) )
                        {
                            frame_guard.setLineNumber( 632 );
                            {
                                PyObjectTempKeeper1 make_tuple17;
                                {
                                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_TypeError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_ff9604e91c4bdf3c6ade433a775a0148, PyObjectTemporary( ( make_tuple17.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ), MAKE_TUPLE2( make_tuple17.asObject0(), _python_var_obj.asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                            }
                            }
                        }
                        else
                        {
                            frame_guard.setLineNumber( 634 );
                            {
                                PyObjectTempKeeper1 call19;
                                DECREASE_REFCOUNT( ( call19.assign( LOOKUP_ATTRIBUTE( _python_var_new_ids.asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), _python_var_obj.asObject() ) ) );
                            }
                        }
                        }
                    }
                    }

                   CONSIDER_THREADING();
                }
            }
            frame_guard.setLineNumber( 635 );
            {
                PyObjectTempKeeper1 call25;
                PyObjectTempKeeper1 call26;
                _python_var_db.assign1( ( call25.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_write ) ), call26.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ).asObject() ) ), CALL_FUNCTION( call25.asObject0(), call26.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_instance ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 636 );
            {
                PyObjectTempKeeper1 call28;
                PyObjectTempKeeper1 call30;
                _python_var_vals.assign1( ( call30.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call28.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__default_manager ) ).asObject(), _python_str_plain_using ) ), CALL_FUNCTION_WITH_ARGS( call28.asObject0(), _python_var_db.asObject() ) ) ).asObject(), _python_str_plain_values_list ) ), CALL_FUNCTION( call30.asObject0(), PyObjectTemporary( MAKE_TUPLE1( _python_var_target_field_name.asObject() ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_614abec2e7254e6d7f5f48fb49c18498 ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 637 );
            {
                PyObjectTempKeeper1 call_tmp37;
                PyObjectTempKeeper1 make_dict33;
                PyObjectTempKeeper0 make_dict34;
                PyObjectTempKeeper0 make_dict35;
                _python_var_vals.assign1( ( call_tmp37.assign( LOOKUP_ATTRIBUTE( _python_var_vals.asObject(), _python_str_plain_filter ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp37.asObject(), ( make_dict33.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__fk_val ) ), make_dict34.assign( _python_var_source_field_name.asObject() ), make_dict35.assign( _python_var_new_ids.asObject() ), MAKE_DICT2( make_dict33.asObject0(), make_dict34.asObject0(), make_dict35.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_38b85e9cb3ddf8db51dfdd4b8d89df1e, _python_var_target_field_name.asObject() ) ).asObject() ) ) ) ) );
            }
            frame_guard.setLineNumber( 641 );
            {
                PyObjectTempKeeper0 op39;
                _python_var_new_ids.assign1( ( op39.assign( _python_var_new_ids.asObject() ), BINARY_OPERATION_SUB( op39.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), _python_var_vals.asObject() ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 643 );
            {
                PyObjectTempKeeper0 cmp58;
                if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_reverse ) ).asObject() ) || ( cmp58.assign( _python_var_source_field_name.asObject() ), RICH_COMPARE_BOOL_EQ( cmp58.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_source_field_name ) ).asObject() ) ) ) )
            {
                frame_guard.setLineNumber( 646 );
                {
                    PyObjectTempKeeper1 call55;
                    PyObjectTempKeeper1 make_dict41;
                    PyObjectTempKeeper1 make_dict45;
                    PyObjectTempKeeper1 make_dict47;
                    PyObjectTempKeeper1 make_dict49;
                    PyObjectTempKeeper0 make_dict51;
                    DECREASE_REFCOUNT( ( call55.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_signals.asObject0(), _python_str_plain_m2m_changed ) ).asObject(), _python_str_plain_send ) ), CALL_FUNCTION( call55.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict41.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ), make_dict45.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ), make_dict47.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_reverse ) ), make_dict49.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ), make_dict51.assign( _python_var_new_ids.asObject() ), MAKE_DICT7( make_dict41.asObject0(), _python_str_plain_sender, _python_str_plain_pre_add, _python_str_plain_action, make_dict45.asObject0(), _python_str_plain_instance, make_dict47.asObject0(), _python_str_plain_reverse, make_dict49.asObject0(), _python_str_plain_model, make_dict51.asObject0(), _python_str_plain_pk_set, _python_var_db.asObject(), _python_str_plain_using ) ) ).asObject() ) ) );
                }
            }
            }
            frame_guard.setLineNumber( 650 );
            {
                PyObjectTempKeeper1 call60;
                PyObjectTempKeeper1 call62;
                DECREASE_REFCOUNT( ( call62.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call60.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__default_manager ) ).asObject(), _python_str_plain_using ) ), CALL_FUNCTION_WITH_ARGS( call60.asObject0(), _python_var_db.asObject() ) ) ).asObject(), _python_str_plain_bulk_create ) ), CALL_FUNCTION_WITH_ARGS( call62.asObject0(), PyObjectTemporary( impl_listcontr_1_of_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( MAKE_ITERATOR( _python_var_new_ids.asObject() ), _python_var_obj_id, _python_var_self, _python_var_source_field_name, _python_var_target_field_name ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 658 );
            {
                PyObjectTempKeeper0 cmp81;
                if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_reverse ) ).asObject() ) || ( cmp81.assign( _python_var_source_field_name.asObject() ), RICH_COMPARE_BOOL_EQ( cmp81.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_source_field_name ) ).asObject() ) ) ) )
            {
                frame_guard.setLineNumber( 661 );
                {
                    PyObjectTempKeeper1 call78;
                    PyObjectTempKeeper1 make_dict64;
                    PyObjectTempKeeper1 make_dict68;
                    PyObjectTempKeeper1 make_dict70;
                    PyObjectTempKeeper1 make_dict72;
                    PyObjectTempKeeper0 make_dict74;
                    DECREASE_REFCOUNT( ( call78.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_signals.asObject0(), _python_str_plain_m2m_changed ) ).asObject(), _python_str_plain_send ) ), CALL_FUNCTION( call78.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict64.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ), make_dict68.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ), make_dict70.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_reverse ) ), make_dict72.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ), make_dict74.assign( _python_var_new_ids.asObject() ), MAKE_DICT7( make_dict64.asObject0(), _python_str_plain_sender, _python_str_plain_post_add, _python_str_plain_action, make_dict68.asObject0(), _python_str_plain_instance, make_dict70.asObject0(), _python_str_plain_reverse, make_dict72.asObject0(), _python_str_plain_model, make_dict74.asObject0(), _python_str_plain_pk_set, _python_var_db.asObject(), _python_str_plain_using ) ) ).asObject() ) ) );
                }
            }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_objs.updateLocalsDict( _python_var_target_field_name.updateLocalsDict( _python_var_source_field_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_obj_id.updateLocalsDict( _python_var_vals.updateLocalsDict( _python_var_db.updateLocalsDict( _python_var_fk_val.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_new_ids.updateLocalsDict( _python_var_Model.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
           frame_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_source_field_name = NULL;
    PyObject *_python_par_target_field_name = NULL;
    PyObject *_python_par_objs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_add_items() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_add_items() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_source_field_name == key )
            {
                if (unlikely( _python_par_source_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_add_items() got multiple values for keyword argument 'source_field_name'" );
                    goto error_exit;
                }

                _python_par_source_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_target_field_name == key )
            {
                if (unlikely( _python_par_target_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_add_items() got multiple values for keyword argument 'target_field_name'" );
                    goto error_exit;
                }

                _python_par_target_field_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_add_items() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_source_field_name, key ) )
            {
                if (unlikely( _python_par_source_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_add_items() got multiple values for keyword argument 'source_field_name'" );
                    goto error_exit;
                }

                _python_par_source_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_target_field_name, key ) )
            {
                if (unlikely( _python_par_target_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_add_items() got multiple values for keyword argument 'target_field_name'" );
                    goto error_exit;
                }

                _python_par_target_field_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_add_items() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_add_items() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_add_items() takes at least %d non-keyword arguments (%zd given)", 3, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "_add_items() takes at least %d arguments (%zd given)", 3, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_add_items() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_source_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_add_items() got multiple values for keyword argument 'source_field_name'" );
             goto error_exit;
         }

        _python_par_source_field_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_target_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_add_items() got multiple values for keyword argument 'target_field_name'" );
             goto error_exit;
         }

        _python_par_target_field_name = INCREASE_REFCOUNT( args[ 2 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 3 )
    {
        _python_par_objs = PyTuple_New( args_size - 3 );

        for( Py_ssize_t i = 0; i < args_size - 3; i++ )
        {
           PyTuple_SET_ITEM( _python_par_objs, i, INCREASE_REFCOUNT( args[3+i] ) );
        }
    }
    else
    {
        _python_par_objs = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_source_field_name, _python_par_target_field_name, _python_par_objs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_source_field_name );
    Py_XDECREF( _python_par_target_field_name );
    Py_XDECREF( _python_par_objs );

    return NULL;
}

static PyObject *dparse_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), MAKE_TUPLE( &args[ 3 ], size > 3 ? size-3 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_obj_id,PyObjectLocalParameterVariableNoDel &python_closure_self,PyObjectLocalParameterVariableNoDel &python_closure_source_field_name,PyObjectLocalParameterVariableNoDel &python_closure_target_field_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 651 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 651 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_obj_id.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper1 call_tmp5;
                    PyObjectTempKeeper1 make_dict1;
                    PyObjectTempKeeper1 make_dict2;
                    PyObjectTempKeeper0 make_dict3;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call_tmp5.assign( LOOKUP_ATTRIBUTE( python_closure_self.asObject(), _python_str_plain_through ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp5.asObject(), ( make_dict1.assign( LOOKUP_ATTRIBUTE( python_closure_self.asObject(), _python_str_plain__fk_val ) ), make_dict2.assign( BINARY_OPERATION_REMAINDER( _python_str_digest_81acbcb7731349929ebc72695ced4b37, python_closure_source_field_name.asObject() ) ), make_dict3.assign( python_closure_obj_id.asObject() ), MAKE_DICT2( make_dict1.asObject0(), make_dict2.asObject0(), make_dict3.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_81acbcb7731349929ebc72695ced4b37, python_closure_target_field_name.asObject() ) ).asObject() ) ) ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_source_field_name, PyObject *_python_par_target_field_name, PyObject *_python_par_objs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_source_field_name( _python_str_plain_source_field_name, _python_par_source_field_name );
    PyObjectLocalParameterVariableNoDel _python_var_target_field_name( _python_str_plain_target_field_name, _python_par_target_field_name );
    PyObjectLocalParameterVariableNoDel _python_var_objs( _python_str_plain_objs, _python_par_objs );
    PyObjectLocalVariable _python_var_old_ids( _python_str_plain_old_ids );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );

    // Actual function code.
    static PyFrameObject *frame_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        }

        frame_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_6f8146b5f2ccefd2b92bcd87f521eb29, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 671 );
        if ( CHECK_IF_TRUE( _python_var_objs.asObject() ) )
        {
            frame_guard.setLineNumber( 673 );
            _python_var_old_ids.assign1( CALL_FUNCTION_NO_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ) ) );
            {
                frame_guard.setLineNumber( 674 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_objs.asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 674 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_var_obj.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 675 );
                    {
                        PyObjectTempKeeper0 isinstance8;
                        if ( ( isinstance8.assign( _python_var_obj.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance8.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject() ) ) )
                    {
                        frame_guard.setLineNumber( 676 );
                        {
                            PyObjectTempKeeper1 call1;
                            PyObjectTempKeeper0 call2;
                            PyObjectTempKeeper1 call4;
                            DECREASE_REFCOUNT( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_old_ids.asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_fk_val ) ), call2.assign( _python_var_obj.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_target_field_name.asObject() ) ) ).asObject() ) ) );
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 678 );
                        {
                            PyObjectTempKeeper1 call6;
                            DECREASE_REFCOUNT( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_old_ids.asObject(), _python_str_plain_add ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_obj.asObject() ) ) );
                        }
                    }
                    }

                   CONSIDER_THREADING();
                }
            }
            frame_guard.setLineNumber( 680 );
            {
                PyObjectTempKeeper1 call10;
                PyObjectTempKeeper1 call11;
                _python_var_db.assign1( ( call10.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_write ) ), call11.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ).asObject() ) ), CALL_FUNCTION( call10.asObject0(), call11.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_instance ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 682 );
            {
                PyObjectTempKeeper0 cmp30;
                if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_reverse ) ).asObject() ) || ( cmp30.assign( _python_var_source_field_name.asObject() ), RICH_COMPARE_BOOL_EQ( cmp30.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_source_field_name ) ).asObject() ) ) ) )
            {
                frame_guard.setLineNumber( 685 );
                {
                    PyObjectTempKeeper1 call27;
                    PyObjectTempKeeper1 make_dict13;
                    PyObjectTempKeeper1 make_dict17;
                    PyObjectTempKeeper1 make_dict19;
                    PyObjectTempKeeper1 make_dict21;
                    PyObjectTempKeeper0 make_dict23;
                    DECREASE_REFCOUNT( ( call27.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_signals.asObject0(), _python_str_plain_m2m_changed ) ).asObject(), _python_str_plain_send ) ), CALL_FUNCTION( call27.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict13.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ), make_dict17.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ), make_dict19.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_reverse ) ), make_dict21.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ), make_dict23.assign( _python_var_old_ids.asObject() ), MAKE_DICT7( make_dict13.asObject0(), _python_str_plain_sender, _python_str_plain_pre_remove, _python_str_plain_action, make_dict17.asObject0(), _python_str_plain_instance, make_dict19.asObject0(), _python_str_plain_reverse, make_dict21.asObject0(), _python_str_plain_model, make_dict23.asObject0(), _python_str_plain_pk_set, _python_var_db.asObject(), _python_str_plain_using ) ) ).asObject() ) ) );
                }
            }
            }
            frame_guard.setLineNumber( 689 );
            {
                PyObjectTempKeeper1 call32;
                PyObjectTempKeeper1 call_tmp38;
                PyObjectTempKeeper1 make_dict34;
                PyObjectTempKeeper0 make_dict35;
                PyObjectTempKeeper0 make_dict36;
                DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call_tmp38.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call32.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__default_manager ) ).asObject(), _python_str_plain_using ) ), CALL_FUNCTION_WITH_ARGS( call32.asObject0(), _python_var_db.asObject() ) ) ).asObject(), _python_str_plain_filter ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp38.asObject(), ( make_dict34.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__fk_val ) ), make_dict35.assign( _python_var_source_field_name.asObject() ), make_dict36.assign( _python_var_old_ids.asObject() ), MAKE_DICT2( make_dict34.asObject0(), make_dict35.asObject0(), make_dict36.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_38b85e9cb3ddf8db51dfdd4b8d89df1e, _python_var_target_field_name.asObject() ) ).asObject() ) ) ) ) ).asObject(), _python_str_plain_delete ) ).asObject() ) );
            }
            frame_guard.setLineNumber( 693 );
            {
                PyObjectTempKeeper0 cmp57;
                if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_reverse ) ).asObject() ) || ( cmp57.assign( _python_var_source_field_name.asObject() ), RICH_COMPARE_BOOL_EQ( cmp57.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_source_field_name ) ).asObject() ) ) ) )
            {
                frame_guard.setLineNumber( 696 );
                {
                    PyObjectTempKeeper1 call54;
                    PyObjectTempKeeper1 make_dict40;
                    PyObjectTempKeeper1 make_dict44;
                    PyObjectTempKeeper1 make_dict46;
                    PyObjectTempKeeper1 make_dict48;
                    PyObjectTempKeeper0 make_dict50;
                    DECREASE_REFCOUNT( ( call54.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_signals.asObject0(), _python_str_plain_m2m_changed ) ).asObject(), _python_str_plain_send ) ), CALL_FUNCTION( call54.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict40.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ), make_dict44.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ), make_dict46.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_reverse ) ), make_dict48.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ), make_dict50.assign( _python_var_old_ids.asObject() ), MAKE_DICT7( make_dict40.asObject0(), _python_str_plain_sender, _python_str_plain_post_remove, _python_str_plain_action, make_dict44.asObject0(), _python_str_plain_instance, make_dict46.asObject0(), _python_str_plain_reverse, make_dict48.asObject0(), _python_str_plain_model, make_dict50.asObject0(), _python_str_plain_pk_set, _python_var_db.asObject(), _python_str_plain_using ) ) ).asObject() ) ) );
                }
            }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_objs.updateLocalsDict( _python_var_target_field_name.updateLocalsDict( _python_var_source_field_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_db.updateLocalsDict( _python_var_obj.updateLocalsDict( _python_var_old_ids.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
           frame_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_source_field_name = NULL;
    PyObject *_python_par_target_field_name = NULL;
    PyObject *_python_par_objs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_remove_items() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_remove_items() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_source_field_name == key )
            {
                if (unlikely( _python_par_source_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_remove_items() got multiple values for keyword argument 'source_field_name'" );
                    goto error_exit;
                }

                _python_par_source_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_target_field_name == key )
            {
                if (unlikely( _python_par_target_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_remove_items() got multiple values for keyword argument 'target_field_name'" );
                    goto error_exit;
                }

                _python_par_target_field_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_remove_items() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_source_field_name, key ) )
            {
                if (unlikely( _python_par_source_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_remove_items() got multiple values for keyword argument 'source_field_name'" );
                    goto error_exit;
                }

                _python_par_source_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_target_field_name, key ) )
            {
                if (unlikely( _python_par_target_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_remove_items() got multiple values for keyword argument 'target_field_name'" );
                    goto error_exit;
                }

                _python_par_target_field_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_remove_items() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_remove_items() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_remove_items() takes at least %d non-keyword arguments (%zd given)", 3, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "_remove_items() takes at least %d arguments (%zd given)", 3, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_remove_items() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_source_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_remove_items() got multiple values for keyword argument 'source_field_name'" );
             goto error_exit;
         }

        _python_par_source_field_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_target_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_remove_items() got multiple values for keyword argument 'target_field_name'" );
             goto error_exit;
         }

        _python_par_target_field_name = INCREASE_REFCOUNT( args[ 2 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 3 )
    {
        _python_par_objs = PyTuple_New( args_size - 3 );

        for( Py_ssize_t i = 0; i < args_size - 3; i++ )
        {
           PyTuple_SET_ITEM( _python_par_objs, i, INCREASE_REFCOUNT( args[3+i] ) );
        }
    }
    else
    {
        _python_par_objs = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_source_field_name, _python_par_target_field_name, _python_par_objs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_source_field_name );
    Py_XDECREF( _python_par_target_field_name );
    Py_XDECREF( _python_par_objs );

    return NULL;
}

static PyObject *dparse_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), MAKE_TUPLE( &args[ 3 ], size > 3 ? size-3 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_source_field_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_source_field_name( _python_str_plain_source_field_name, _python_par_source_field_name );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );

    // Actual function code.
    static PyFrameObject *frame_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
        }

        frame_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_a4b98f78125ae5d4db32ceee57e2f30e, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 701 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call2;
            _python_var_db.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_write ) ), call2.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ).asObject() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ).asObject(), _python_str_plain_instance ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 703 );
        {
            PyObjectTempKeeper0 cmp21;
            if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_reverse ) ).asObject() ) || ( cmp21.assign( _python_var_source_field_name.asObject() ), RICH_COMPARE_BOOL_EQ( cmp21.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_source_field_name ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 706 );
            {
                PyObjectTempKeeper1 call18;
                PyObjectTempKeeper1 make_dict10;
                PyObjectTempKeeper1 make_dict12;
                PyObjectTempKeeper1 make_dict4;
                PyObjectTempKeeper1 make_dict8;
                DECREASE_REFCOUNT( ( call18.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_signals.asObject0(), _python_str_plain_m2m_changed ) ).asObject(), _python_str_plain_send ) ), CALL_FUNCTION( call18.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ), make_dict8.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ), make_dict10.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_reverse ) ), make_dict12.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ), MAKE_DICT7( make_dict4.asObject0(), _python_str_plain_sender, _python_str_plain_pre_clear, _python_str_plain_action, make_dict8.asObject0(), _python_str_plain_instance, make_dict10.asObject0(), _python_str_plain_reverse, make_dict12.asObject0(), _python_str_plain_model, Py_None, _python_str_plain_pk_set, _python_var_db.asObject(), _python_str_plain_using ) ) ).asObject() ) ) );
            }
        }
        }
        frame_guard.setLineNumber( 709 );
        {
            PyObjectTempKeeper1 call23;
            PyObjectTempKeeper1 call_tmp27;
            PyObjectTempKeeper1 make_dict25;
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call_tmp27.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call23.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__default_manager ) ).asObject(), _python_str_plain_using ) ), CALL_FUNCTION_WITH_ARGS( call23.asObject0(), _python_var_db.asObject() ) ) ).asObject(), _python_str_plain_filter ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp27.asObject(), ( make_dict25.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_val ) ), MAKE_DICT1( make_dict25.asObject0(), _python_var_source_field_name.asObject() ) ) ) ) ).asObject(), _python_str_plain_delete ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 712 );
        {
            PyObjectTempKeeper0 cmp46;
            if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_reverse ) ).asObject() ) || ( cmp46.assign( _python_var_source_field_name.asObject() ), RICH_COMPARE_BOOL_EQ( cmp46.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_source_field_name ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 715 );
            {
                PyObjectTempKeeper1 call43;
                PyObjectTempKeeper1 make_dict29;
                PyObjectTempKeeper1 make_dict33;
                PyObjectTempKeeper1 make_dict35;
                PyObjectTempKeeper1 make_dict37;
                DECREASE_REFCOUNT( ( call43.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_signals.asObject0(), _python_str_plain_m2m_changed ) ).asObject(), _python_str_plain_send ) ), CALL_FUNCTION( call43.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict29.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_through ) ), make_dict33.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_instance ) ), make_dict35.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_reverse ) ), make_dict37.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ), MAKE_DICT7( make_dict29.asObject0(), _python_str_plain_sender, _python_str_plain_post_clear, _python_str_plain_action, make_dict33.asObject0(), _python_str_plain_instance, make_dict35.asObject0(), _python_str_plain_reverse, make_dict37.asObject0(), _python_str_plain_model, Py_None, _python_str_plain_pk_set, _python_var_db.asObject(), _python_str_plain_using ) ) ).asObject() ) ) );
            }
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_source_field_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_db.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related );
           frame_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_source_field_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_clear_items() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_clear_items() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_source_field_name == key )
            {
                if (unlikely( _python_par_source_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_clear_items() got multiple values for keyword argument 'source_field_name'" );
                    goto error_exit;
                }

                _python_par_source_field_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_clear_items() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_source_field_name, key ) )
            {
                if (unlikely( _python_par_source_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_clear_items() got multiple values for keyword argument 'source_field_name'" );
                    goto error_exit;
                }

                _python_par_source_field_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_clear_items() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_clear_items() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_clear_items() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_clear_items() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_clear_items() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_clear_items() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_clear_items() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_clear_items() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_clear_items() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_clear_items() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_clear_items() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_clear_items() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_clear_items() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_clear_items() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_source_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_clear_items() got multiple values for keyword argument 'source_field_name'" );
             goto error_exit;
         }

        _python_par_source_field_name = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_source_field_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_source_field_name );

    return NULL;
}

static PyObject *dparse_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_related_manager_cls( _python_str_plain_related_manager_cls );
    PyObjectLocalVariable _python_var___get__( _python_str_plain___get__ );
    PyObjectLocalVariable _python_var___set__( _python_str_plain___set__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  ) );
    static PyFrameObject *frame_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_59c444d8fb7fe41ef7a7ee6eda0e535d, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 732 );
        _python_var_related_manager_cls.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__related_cached_property.asObject0(), PyObjectTemporary( MAKE_FUNCTION_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var___set__.updateLocalsDict( _python_var___get__.updateLocalsDict( _python_var_related_manager_cls.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        throw;
    }
    _python_var___get__.assign1( MAKE_FUNCTION_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  ) );
    _python_var___set__.assign1( MAKE_FUNCTION_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  ) );
    return _python_var___set__.updateLocalsDict( _python_var___get__.updateLocalsDict( _python_var_related_manager_cls.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_related )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_related( _python_str_plain_related, _python_par_related );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_67d821959c9f827e15192e61c0a16ab5, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 730 );
        {
                PyObject *tmp_identifier = _python_var_related.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_related );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_related.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_related = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_related == key )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_related, key ) )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_related != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related'" );
             goto error_exit;
         }

        _python_par_related = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_related );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_related );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_c4560a0564ea47de05e4649ddf4726dd, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 736 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 call2;
            return ( call1.assign( _mvar_django__db__models__fields__related_create_many_related_manager.asObject0() ), call2.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__default_manager ) ).asObject(), _python_str_plain___class__ ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "related_manager_cls() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "related_manager_cls() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "related_manager_cls() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "related_manager_cls() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "related_manager_cls() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "related_manager_cls() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance, PyObject *_python_par_instance_type )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_instance_type( _python_str_plain_instance_type, _python_par_instance_type );
    PyObjectLocalVariable _python_var_rel_model( _python_str_plain_rel_model );
    PyObjectLocalVariable _python_var_manager( _python_str_plain_manager );

    // Actual function code.
    static PyFrameObject *frame_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_6c1739ff01a8c89569906acd4372192f, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 742 );
        if ( ( _python_var_instance.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 743 );
            return _python_var_self.asObject1();
        }
        frame_guard.setLineNumber( 745 );
        _python_var_rel_model.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_model ) );
        frame_guard.setLineNumber( 747 );
        {
            PyObjectTempKeeper1 call19;
            PyObjectTempKeeper0 make_dict1;
            PyObjectTempKeeper1 make_dict11;
            PyObjectTempKeeper1 make_dict13;
            PyObjectTempKeeper1 make_dict3;
            PyObjectTempKeeper1 make_dict5;
            PyObjectTempKeeper0 make_dict7;
            _python_var_manager.assign1( ( call19.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_manager_cls ) ), CALL_FUNCTION( call19.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict1.assign( _python_var_rel_model.asObject() ), make_dict3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_name ) ), make_dict5.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_related_query_name ) ).asObject() ) ), make_dict7.assign( _python_var_instance.asObject() ), make_dict11.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_m2m_reverse_field_name ) ).asObject() ) ), make_dict13.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_m2m_field_name ) ).asObject() ) ), MAKE_DICT9( make_dict1.asObject0(), _python_str_plain_model, make_dict3.asObject0(), _python_str_plain_query_field_name, make_dict5.asObject0(), _python_str_plain_prefetch_cache_name, make_dict7.asObject0(), _python_str_plain_instance, Py_False, _python_str_plain_symmetrical, make_dict11.asObject0(), _python_str_plain_source_field_name, make_dict13.asObject0(), _python_str_plain_target_field_name, Py_True, _python_str_plain_reverse, PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain_through ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 759 );
        return _python_var_manager.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_instance_type.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_manager.updateLocalsDict( _python_var_rel_model.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_instance_type = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__get__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance_type == key )
            {
                if (unlikely( _python_par_instance_type ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance_type'" );
                    goto error_exit;
                }

                _python_par_instance_type = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance_type, key ) )
            {
                if (unlikely( _python_par_instance_type ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance_type'" );
                    goto error_exit;
                }

                _python_par_instance_type = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__get__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__get__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__get__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_instance_type != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance_type'" );
             goto error_exit;
         }

        _python_par_instance_type = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_instance_type == NULL )
    {
        _python_par_instance_type = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_instance_type );
    }


    return impl_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance, _python_par_instance_type );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_instance_type );

    return NULL;
}

static PyObject *dparse_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_manager( _python_str_plain_manager );

    // Actual function code.
    static PyFrameObject *frame_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_6a70840a53e0f236099e671eacdc029f, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 762 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_auto_created ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 763 );
            _python_var_opts.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related ) ).asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__meta ) );
            frame_guard.setLineNumber( 764 );
            {
                PyObjectTempKeeper1 make_tuple1;
                {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AttributeError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_edaaf291da191f71e55b851b81525e20, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_app_label ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_object_name ) ).asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 766 );
        {
            PyObjectTempKeeper1 call3;
            _python_var_manager.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___get__ ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_instance.asObject() ) ) );
        }
        frame_guard.setLineNumber( 767 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_manager.asObject(), _python_str_plain_clear ) ).asObject() ) );
        frame_guard.setLineNumber( 768 );
        {
            PyObjectTempKeeper1 call_tmp5;
            DECREASE_REFCOUNT( ( call_tmp5.assign( LOOKUP_ATTRIBUTE( _python_var_manager.asObject(), _python_str_plain_add ) ), impl_function_7_complex_call_helper_star_list_of_module___internal__( call_tmp5.asObject(), _python_var_value.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_manager.updateLocalsDict( _python_var_opts.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__set__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__set__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__set__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__set__() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_through( _python_str_plain_through );
    PyObjectLocalVariable _python_var_related_manager_cls( _python_str_plain_related_manager_cls );
    PyObjectLocalVariable _python_var___get__( _python_str_plain___get__ );
    PyObjectLocalVariable _python_var___set__( _python_str_plain___set__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  ) );
    static PyFrameObject *frame_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_058cafa31292c047e9f45a2b384634ca, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 781 );
        _python_var_through.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  ) ).asObject() ) );
        frame_guard.setLineNumber( 788 );
        _python_var_related_manager_cls.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__related_cached_property.asObject0(), PyObjectTemporary( MAKE_FUNCTION_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var___set__.updateLocalsDict( _python_var___get__.updateLocalsDict( _python_var_related_manager_cls.updateLocalsDict( _python_var_through.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        throw;
    }
    _python_var___get__.assign1( MAKE_FUNCTION_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  ) );
    _python_var___set__.assign1( MAKE_FUNCTION_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  ) );
    return _python_var___set__.updateLocalsDict( _python_var___get__.updateLocalsDict( _python_var_related_manager_cls.updateLocalsDict( _python_var_through.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_m2m_field )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_m2m_field( _python_str_plain_m2m_field, _python_par_m2m_field );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_5dc6aec5f61cd29906558385da855210, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 779 );
        {
                PyObject *tmp_identifier = _python_var_m2m_field.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_field );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_m2m_field.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_m2m_field = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_m2m_field == key )
            {
                if (unlikely( _python_par_m2m_field ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'm2m_field'" );
                    goto error_exit;
                }

                _python_par_m2m_field = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_m2m_field, key ) )
            {
                if (unlikely( _python_par_m2m_field ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'm2m_field'" );
                    goto error_exit;
                }

                _python_par_m2m_field = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_m2m_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'm2m_field'" );
             goto error_exit;
         }

        _python_par_m2m_field = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_m2m_field );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_m2m_field );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_be3af78577d3246db94fc7b8887cf3be, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 786 );
        return LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "through() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "through() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "through() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "through() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "through() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "through() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "through() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "through() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "through() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "through() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "through() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "through() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "through() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "through() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "through() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "through() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "through() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_68a32a5eb4ef11cac8b5c869e2109207, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 792 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 call2;
            return ( call1.assign( _mvar_django__db__models__fields__related_create_many_related_manager.asObject0() ), call2.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__default_manager ) ).asObject(), _python_str_plain___class__ ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "related_manager_cls() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "related_manager_cls() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "related_manager_cls() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "related_manager_cls() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "related_manager_cls() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "related_manager_cls() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "related_manager_cls() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance, PyObject *_python_par_instance_type )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_instance_type( _python_str_plain_instance_type, _python_par_instance_type );
    PyObjectLocalVariable _python_var_manager( _python_str_plain_manager );

    // Actual function code.
    static PyFrameObject *frame_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_7ac7865b0c1245dea0f6a762f8f6cebe, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 798 );
        if ( ( _python_var_instance.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 799 );
            return _python_var_self.asObject1();
        }
        frame_guard.setLineNumber( 801 );
        {
            PyObjectTempKeeper1 call19;
            PyObjectTempKeeper1 make_dict1;
            PyObjectTempKeeper1 make_dict11;
            PyObjectTempKeeper1 make_dict13;
            PyObjectTempKeeper1 make_dict3;
            PyObjectTempKeeper1 make_dict5;
            PyObjectTempKeeper0 make_dict7;
            PyObjectTempKeeper1 make_dict9;
            _python_var_manager.assign1( ( call19.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_manager_cls ) ), CALL_FUNCTION( call19.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ), make_dict3.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_related_query_name ) ).asObject() ) ), make_dict5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_name ) ), make_dict7.assign( _python_var_instance.asObject() ), make_dict9.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_symmetrical ) ), make_dict11.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_m2m_field_name ) ).asObject() ) ), make_dict13.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_m2m_reverse_field_name ) ).asObject() ) ), MAKE_DICT9( make_dict1.asObject0(), _python_str_plain_model, make_dict3.asObject0(), _python_str_plain_query_field_name, make_dict5.asObject0(), _python_str_plain_prefetch_cache_name, make_dict7.asObject0(), _python_str_plain_instance, make_dict9.asObject0(), _python_str_plain_symmetrical, make_dict11.asObject0(), _python_str_plain_source_field_name, make_dict13.asObject0(), _python_str_plain_target_field_name, Py_False, _python_str_plain_reverse, PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain_through ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 813 );
        return _python_var_manager.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_instance_type.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_manager.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_instance_type = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__get__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance_type == key )
            {
                if (unlikely( _python_par_instance_type ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance_type'" );
                    goto error_exit;
                }

                _python_par_instance_type = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance_type, key ) )
            {
                if (unlikely( _python_par_instance_type ))
                {
                    PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance_type'" );
                    goto error_exit;
                }

                _python_par_instance_type = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__get__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__get__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__get__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__get__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__get__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_instance_type != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__get__() got multiple values for keyword argument 'instance_type'" );
             goto error_exit;
         }

        _python_par_instance_type = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_instance_type == NULL )
    {
        _python_par_instance_type = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_instance_type );
    }


    return impl_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance, _python_par_instance_type );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_instance_type );

    return NULL;
}

static PyObject *dparse_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_manager( _python_str_plain_manager );

    // Actual function code.
    static PyFrameObject *frame_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
        }

        frame_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_1a9c9c949b4ef9b5da703d6c2e028a96, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 816 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_auto_created ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 817 );
            _python_var_opts.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__meta ) );
            frame_guard.setLineNumber( 818 );
            {
                PyObjectTempKeeper1 make_tuple1;
                {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AttributeError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_5f6669c826b477bb545f5210e538bed0, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_app_label ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_object_name ) ).asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 820 );
        {
            PyObjectTempKeeper1 call3;
            _python_var_manager.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___get__ ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_instance.asObject() ) ) );
        }
        frame_guard.setLineNumber( 823 );
        _python_var_value.assign1( TO_TUPLE( _python_var_value.asObject() ) );
        frame_guard.setLineNumber( 824 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_manager.asObject(), _python_str_plain_clear ) ).asObject() ) );
        frame_guard.setLineNumber( 825 );
        {
            PyObjectTempKeeper1 call_tmp5;
            DECREASE_REFCOUNT( ( call_tmp5.assign( LOOKUP_ATTRIBUTE( _python_var_manager.asObject(), _python_str_plain_add ) ), impl_function_7_complex_call_helper_star_list_of_module___internal__( call_tmp5.asObject(), _python_var_value.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_manager.updateLocalsDict( _python_var_opts.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related );
           frame_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__set__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__set__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__set__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__set__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "__set__() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__set__() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__set__() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_is_hidden( _python_str_plain_is_hidden );
    PyObjectLocalVariable _python_var_get_joining_columns( _python_str_plain_get_joining_columns );
    PyObjectLocalVariable _python_var_get_extra_restriction( _python_str_plain_get_extra_restriction );
    PyObjectLocalVariable _python_var_set_field_name( _python_str_plain_set_field_name );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  ) );
    _python_var_is_hidden.assign1( MAKE_FUNCTION_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  ) );
    _python_var_get_joining_columns.assign1( MAKE_FUNCTION_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  ) );
    _python_var_get_extra_restriction.assign1( MAKE_FUNCTION_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  ) );
    _python_var_set_field_name.assign1( MAKE_FUNCTION_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  ) );
    return _python_var_set_field_name.updateLocalsDict( _python_var_get_extra_restriction.updateLocalsDict( _python_var_get_joining_columns.updateLocalsDict( _python_var_is_hidden.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field, PyObject *_python_par_to, PyObject *_python_par_related_name, PyObject *_python_par_limit_choices_to, PyObject *_python_par_parent_link, PyObject *_python_par_on_delete )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field( _python_str_plain_field, _python_par_field );
    PyObjectLocalParameterVariableNoDel _python_var_to( _python_str_plain_to, _python_par_to );
    PyObjectLocalParameterVariableNoDel _python_var_related_name( _python_str_plain_related_name, _python_par_related_name );
    PyObjectLocalParameterVariableNoDel _python_var_limit_choices_to( _python_str_plain_limit_choices_to, _python_par_limit_choices_to );
    PyObjectLocalParameterVariableNoDel _python_var_parent_link( _python_str_plain_parent_link, _python_par_parent_link );
    PyObjectLocalParameterVariableNoDel _python_var_on_delete( _python_str_plain_on_delete, _python_par_on_delete );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related );
        }

        frame_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_4623cd1f1197417c1171e1ebfd1265e9, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 830 );
        try
        {
            frame_guard.setLineNumber( 831 );
            DECREASE_REFCOUNT( LOOKUP_ATTRIBUTE( _python_var_to.asObject(), _python_str_plain__meta ) );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_AttributeError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 833 );
                {
                    PyObjectTempKeeper0 isinstance1;
                    if ( (!( ( isinstance1.assign( _python_var_to.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) )) )
                {
                    frame_guard.setLineNumber( 833 );
                    {
                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_c4f97bafe9ba4de752415ea7928d8690, _mvar_django__db__models__fields__related_RECURSIVE_RELATIONSHIP_CONSTANT.asObject0() ) ).asObject() ) ).asObject() ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 835 );
        {
                PyObject *tmp_identifier = _python_var_field.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_field );
        }
        frame_guard.setLineNumber( 836 );
        {
                PyObject *tmp_identifier = _python_var_to.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_to );
        }
        frame_guard.setLineNumber( 837 );
        {
                PyObject *tmp_identifier = _python_var_related_name.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_related_name );
        }
        frame_guard.setLineNumber( 838 );
        {
                PyObjectTemporary tmp_identifier( ( ( _python_var_limit_choices_to.asObject() == Py_None ) ? PyDict_New() : _python_var_limit_choices_to.asObject1() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_limit_choices_to );
        }
        frame_guard.setLineNumber( 839 );
        SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain_multiple );
        frame_guard.setLineNumber( 840 );
        {
                PyObject *tmp_identifier = _python_var_parent_link.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_parent_link );
        }
        frame_guard.setLineNumber( 841 );
        {
                PyObject *tmp_identifier = _python_var_on_delete.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_on_delete );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_on_delete.updateLocalsDict( _python_var_parent_link.updateLocalsDict( _python_var_limit_choices_to.updateLocalsDict( _python_var_related_name.updateLocalsDict( _python_var_to.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related );
           frame_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field = NULL;
    PyObject *_python_par_to = NULL;
    PyObject *_python_par_related_name = NULL;
    PyObject *_python_par_limit_choices_to = NULL;
    PyObject *_python_par_parent_link = NULL;
    PyObject *_python_par_on_delete = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field == key )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_to == key )
            {
                if (unlikely( _python_par_to ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to'" );
                    goto error_exit;
                }

                _python_par_to = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_related_name == key )
            {
                if (unlikely( _python_par_related_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related_name'" );
                    goto error_exit;
                }

                _python_par_related_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_limit_choices_to == key )
            {
                if (unlikely( _python_par_limit_choices_to ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'limit_choices_to'" );
                    goto error_exit;
                }

                _python_par_limit_choices_to = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_parent_link == key )
            {
                if (unlikely( _python_par_parent_link ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'parent_link'" );
                    goto error_exit;
                }

                _python_par_parent_link = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_on_delete == key )
            {
                if (unlikely( _python_par_on_delete ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'on_delete'" );
                    goto error_exit;
                }

                _python_par_on_delete = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field, key ) )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_to, key ) )
            {
                if (unlikely( _python_par_to ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to'" );
                    goto error_exit;
                }

                _python_par_to = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_related_name, key ) )
            {
                if (unlikely( _python_par_related_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related_name'" );
                    goto error_exit;
                }

                _python_par_related_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_limit_choices_to, key ) )
            {
                if (unlikely( _python_par_limit_choices_to ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'limit_choices_to'" );
                    goto error_exit;
                }

                _python_par_limit_choices_to = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_parent_link, key ) )
            {
                if (unlikely( _python_par_parent_link ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'parent_link'" );
                    goto error_exit;
                }

                _python_par_parent_link = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_on_delete, key ) )
            {
                if (unlikely( _python_par_on_delete ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'on_delete'" );
                    goto error_exit;
                }

                _python_par_on_delete = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 7 ))
    {
        if ( 7 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 7, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 7 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#else
            if ( 7 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 7 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 7, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 7 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 7 ? args_given : 7;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field'" );
             goto error_exit;
         }

        _python_par_field = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_to != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to'" );
             goto error_exit;
         }

        _python_par_to = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_related_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related_name'" );
             goto error_exit;
         }

        _python_par_related_name = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_limit_choices_to != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'limit_choices_to'" );
             goto error_exit;
         }

        _python_par_limit_choices_to = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_parent_link != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'parent_link'" );
             goto error_exit;
         }

        _python_par_parent_link = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_on_delete != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'on_delete'" );
             goto error_exit;
         }

        _python_par_on_delete = INCREASE_REFCOUNT( args[ 6 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_related_name == NULL )
    {
        _python_par_related_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_related_name );
    }
    if ( _python_par_limit_choices_to == NULL )
    {
        _python_par_limit_choices_to = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_limit_choices_to );
    }
    if ( _python_par_parent_link == NULL )
    {
        _python_par_parent_link = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_parent_link );
    }
    if ( _python_par_on_delete == NULL )
    {
        _python_par_on_delete = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_on_delete );
    }


    return impl_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_field, _python_par_to, _python_par_related_name, _python_par_limit_choices_to, _python_par_parent_link, _python_par_on_delete );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field );
    Py_XDECREF( _python_par_to );
    Py_XDECREF( _python_par_related_name );
    Py_XDECREF( _python_par_limit_choices_to );
    Py_XDECREF( _python_par_parent_link );
    Py_XDECREF( _python_par_on_delete );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 7)
    {
        return impl_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related );
        }

        frame_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_13494ae8b97205b42678dff13707433a, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 845 );
        {
            PyObjectTempKeeper1 keeper_0;
            return ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_name ) ) ) ? RICH_COMPARE_EQ( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_name ) ).asObject(), _python_int_neg_1, -1 ) ).asObject(), _python_str_chr_43 ) : keeper_0.asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related );
           frame_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "is_hidden() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "is_hidden() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "is_hidden() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "is_hidden() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_hidden() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "is_hidden() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "is_hidden() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_hidden() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "is_hidden() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_hidden() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "is_hidden() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_hidden() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "is_hidden() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "is_hidden() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "is_hidden() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "is_hidden() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "is_hidden() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related );
        }

        frame_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_d404c4f9c2a77342dd45a5476a3370f3, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 848 );
        return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_get_reverse_joining_columns ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related );
           frame_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_joining_columns() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_joining_columns() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_joining_columns() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_joining_columns() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_joining_columns() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_joining_columns() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_joining_columns() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_joining_columns() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_joining_columns() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_joining_columns() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_joining_columns() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_joining_columns() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_joining_columns() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_joining_columns() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_joining_columns() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_joining_columns() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_joining_columns() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_where_class, PyObject *_python_par_alias, PyObject *_python_par_related_alias )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_where_class( _python_str_plain_where_class, _python_par_where_class );
    PyObjectLocalParameterVariableNoDel _python_var_alias( _python_str_plain_alias, _python_par_alias );
    PyObjectLocalParameterVariableNoDel _python_var_related_alias( _python_str_plain_related_alias, _python_par_related_alias );

    // Actual function code.
    static PyFrameObject *frame_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related );
        }

        frame_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_dad67b4c0ce8686681c133deffa2d34a, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 851 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            PyObjectTempKeeper0 call3;
            return ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field ) ).asObject(), _python_str_plain_get_extra_restriction ) ), call2.assign( _python_var_where_class.asObject() ), call3.assign( _python_var_related_alias.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), _python_var_alias.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_related_alias.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_where_class.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related );
           frame_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_where_class = NULL;
    PyObject *_python_par_alias = NULL;
    PyObject *_python_par_related_alias = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_extra_restriction() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_where_class == key )
            {
                if (unlikely( _python_par_where_class ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'where_class'" );
                    goto error_exit;
                }

                _python_par_where_class = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_alias == key )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_related_alias == key )
            {
                if (unlikely( _python_par_related_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'related_alias'" );
                    goto error_exit;
                }

                _python_par_related_alias = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_where_class, key ) )
            {
                if (unlikely( _python_par_where_class ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'where_class'" );
                    goto error_exit;
                }

                _python_par_where_class = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_alias, key ) )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_related_alias, key ) )
            {
                if (unlikely( _python_par_related_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'related_alias'" );
                    goto error_exit;
                }

                _python_par_related_alias = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_extra_restriction() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_where_class != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'where_class'" );
             goto error_exit;
         }

        _python_par_where_class = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_alias != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'alias'" );
             goto error_exit;
         }

        _python_par_alias = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_related_alias != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'related_alias'" );
             goto error_exit;
         }

        _python_par_related_alias = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_where_class, _python_par_alias, _python_par_related_alias );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_where_class );
    Py_XDECREF( _python_par_alias );
    Py_XDECREF( _python_par_related_alias );

    return NULL;
}

static PyObject *dparse_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related );
        }

        frame_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_8ed78ce37a0b4a41772aa048d7a3a568, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 861 );
        SET_ATTRIBUTE( Py_None, _python_var_self.asObject(), _python_str_plain_field_name );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related );
           frame_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "set_field_name() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_field_name() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_field_name() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "set_field_name() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_field_name() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "set_field_name() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "set_field_name() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_field_name() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "set_field_name() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_field_name() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "set_field_name() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_field_name() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "set_field_name() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "set_field_name() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "set_field_name() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "set_field_name() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_field_name() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_12_ManyToOneRel_of_module_django__db__models__fields__related(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_get_related_field( _python_str_plain_get_related_field );
    PyObjectLocalVariable _python_var_set_field_name( _python_str_plain_set_field_name );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related(  ) );
    _python_var_get_related_field.assign1( MAKE_FUNCTION_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related(  ) );
    _python_var_set_field_name.assign1( MAKE_FUNCTION_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related(  ) );
    return _python_var_set_field_name.updateLocalsDict( _python_var_get_related_field.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field, PyObject *_python_par_to, PyObject *_python_par_field_name, PyObject *_python_par_related_name, PyObject *_python_par_limit_choices_to, PyObject *_python_par_parent_link, PyObject *_python_par_on_delete )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field( _python_str_plain_field, _python_par_field );
    PyObjectLocalParameterVariableNoDel _python_var_to( _python_str_plain_to, _python_par_to );
    PyObjectLocalParameterVariableNoDel _python_var_field_name( _python_str_plain_field_name, _python_par_field_name );
    PyObjectLocalParameterVariableNoDel _python_var_related_name( _python_str_plain_related_name, _python_par_related_name );
    PyObjectLocalParameterVariableNoDel _python_var_limit_choices_to( _python_str_plain_limit_choices_to, _python_par_limit_choices_to );
    PyObjectLocalParameterVariableNoDel _python_var_parent_link( _python_str_plain_parent_link, _python_par_parent_link );
    PyObjectLocalParameterVariableNoDel _python_var_on_delete( _python_str_plain_on_delete, _python_par_on_delete );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related );
        }

        frame_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_cdf977383174bde94a15f15a52f6d0c6, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 866 );
        {
            PyObjectTempKeeper1 call13;
            PyObjectTempKeeper1 call14;
            PyObjectTempKeeper0 make_dict3;
            PyObjectTempKeeper0 make_dict5;
            PyObjectTempKeeper0 make_dict7;
            PyObjectTempKeeper0 make_tuple11;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call13.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields__related_ManyToOneRel.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call14.assign( ( make_tuple11.assign( _python_var_field.asObject() ), MAKE_TUPLE2( make_tuple11.asObject0(), _python_var_to.asObject() ) ) ), CALL_FUNCTION( call13.asObject0(), call14.asObject0(), PyObjectTemporary( ( make_dict3.assign( _python_var_related_name.asObject() ), make_dict5.assign( _python_var_limit_choices_to.asObject() ), make_dict7.assign( _python_var_parent_link.asObject() ), MAKE_DICT4( make_dict3.asObject0(), _python_str_plain_related_name, make_dict5.asObject0(), _python_str_plain_limit_choices_to, make_dict7.asObject0(), _python_str_plain_parent_link, _python_var_on_delete.asObject(), _python_str_plain_on_delete ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 869 );
        {
                PyObject *tmp_identifier = _python_var_field_name.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_field_name );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_on_delete.updateLocalsDict( _python_var_parent_link.updateLocalsDict( _python_var_limit_choices_to.updateLocalsDict( _python_var_related_name.updateLocalsDict( _python_var_field_name.updateLocalsDict( _python_var_to.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related );
           frame_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field = NULL;
    PyObject *_python_par_to = NULL;
    PyObject *_python_par_field_name = NULL;
    PyObject *_python_par_related_name = NULL;
    PyObject *_python_par_limit_choices_to = NULL;
    PyObject *_python_par_parent_link = NULL;
    PyObject *_python_par_on_delete = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field == key )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_to == key )
            {
                if (unlikely( _python_par_to ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to'" );
                    goto error_exit;
                }

                _python_par_to = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field_name == key )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_related_name == key )
            {
                if (unlikely( _python_par_related_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related_name'" );
                    goto error_exit;
                }

                _python_par_related_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_limit_choices_to == key )
            {
                if (unlikely( _python_par_limit_choices_to ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'limit_choices_to'" );
                    goto error_exit;
                }

                _python_par_limit_choices_to = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_parent_link == key )
            {
                if (unlikely( _python_par_parent_link ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'parent_link'" );
                    goto error_exit;
                }

                _python_par_parent_link = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_on_delete == key )
            {
                if (unlikely( _python_par_on_delete ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'on_delete'" );
                    goto error_exit;
                }

                _python_par_on_delete = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field, key ) )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_to, key ) )
            {
                if (unlikely( _python_par_to ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to'" );
                    goto error_exit;
                }

                _python_par_to = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field_name, key ) )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_related_name, key ) )
            {
                if (unlikely( _python_par_related_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related_name'" );
                    goto error_exit;
                }

                _python_par_related_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_limit_choices_to, key ) )
            {
                if (unlikely( _python_par_limit_choices_to ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'limit_choices_to'" );
                    goto error_exit;
                }

                _python_par_limit_choices_to = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_parent_link, key ) )
            {
                if (unlikely( _python_par_parent_link ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'parent_link'" );
                    goto error_exit;
                }

                _python_par_parent_link = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_on_delete, key ) )
            {
                if (unlikely( _python_par_on_delete ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'on_delete'" );
                    goto error_exit;
                }

                _python_par_on_delete = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 8 ))
    {
        if ( 8 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 8, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 8 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 8, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 8, args_given + kw_only_found );
            }
#else
            if ( 8 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 8, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 8, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 8 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 8, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 8 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 8 ? args_given : 8;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field'" );
             goto error_exit;
         }

        _python_par_field = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_to != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to'" );
             goto error_exit;
         }

        _python_par_to = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field_name'" );
             goto error_exit;
         }

        _python_par_field_name = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_related_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related_name'" );
             goto error_exit;
         }

        _python_par_related_name = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_limit_choices_to != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'limit_choices_to'" );
             goto error_exit;
         }

        _python_par_limit_choices_to = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_parent_link != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'parent_link'" );
             goto error_exit;
         }

        _python_par_parent_link = INCREASE_REFCOUNT( args[ 6 ] );
    }
    if (likely( 7 < args_usable_count ))
    {
         if (unlikely( _python_par_on_delete != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'on_delete'" );
             goto error_exit;
         }

        _python_par_on_delete = INCREASE_REFCOUNT( args[ 7 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_related_name == NULL )
    {
        _python_par_related_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_related_name );
    }
    if ( _python_par_limit_choices_to == NULL )
    {
        _python_par_limit_choices_to = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_limit_choices_to );
    }
    if ( _python_par_parent_link == NULL )
    {
        _python_par_parent_link = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_parent_link );
    }
    if ( _python_par_on_delete == NULL )
    {
        _python_par_on_delete = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_on_delete );
    }


    return impl_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_field, _python_par_to, _python_par_field_name, _python_par_related_name, _python_par_limit_choices_to, _python_par_parent_link, _python_par_on_delete );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field );
    Py_XDECREF( _python_par_to );
    Py_XDECREF( _python_par_field_name );
    Py_XDECREF( _python_par_related_name );
    Py_XDECREF( _python_par_limit_choices_to );
    Py_XDECREF( _python_par_parent_link );
    Py_XDECREF( _python_par_on_delete );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 8)
    {
        return impl_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_data( _python_str_plain_data );

    // Actual function code.
    static PyFrameObject *frame_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related );
        }

        frame_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_3c72c46db8cabe33395d934386efe0a8, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 876 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_data.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_field_by_name ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field_name ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 877 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_data.asObject(), _python_int_pos_2, 2 ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 878 );
            {
                PyObjectTempKeeper0 call3;
                {
                    PyObjectTemporary tmp_exception_type( ( call3.assign( _mvar_django__db__models__fields__related_FieldDoesNotExist.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_60d9c221f72f92f18e53d0c87cd68e34, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field_name ) ).asObject() ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 880 );
        return LOOKUP_SUBSCRIPT_CONST( _python_var_data.asObject(), _python_int_0, 0 );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_data.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related );
           frame_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_related_field() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_related_field() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_related_field() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_related_field() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_related_field() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_related_field() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_related_field() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_related_field() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_related_field() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_related_field() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_related_field() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_related_field() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_related_field() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_related_field() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_related_field() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_related_field() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_related_field() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related );
        }

        frame_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_20b5fce71b50e00198f44914e98aeb35, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 883 );
        {
            PyObjectTempKeeper1 keeper_0;
            {
                PyObjectTemporary tmp_identifier( ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_field_name ) ) ) ? keeper_0.asObject() : LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk ) ).asObject(), _python_str_plain_name ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_field_name );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related );
           frame_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "set_field_name() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_field_name() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_field_name() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "set_field_name() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_field_name() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "set_field_name() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "set_field_name() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_field_name() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "set_field_name() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_field_name() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "set_field_name() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_field_name() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "set_field_name() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "set_field_name() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "set_field_name() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "set_field_name() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_field_name() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_13_OneToOneRel_of_module_django__db__models__fields__related(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related(  ) );
    return _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );
}


static PyObject *impl_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_field, PyObject *_python_par_to, PyObject *_python_par_field_name, PyObject *_python_par_related_name, PyObject *_python_par_limit_choices_to, PyObject *_python_par_parent_link, PyObject *_python_par_on_delete )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_field( _python_str_plain_field, _python_par_field );
    PyObjectLocalParameterVariableNoDel _python_var_to( _python_str_plain_to, _python_par_to );
    PyObjectLocalParameterVariableNoDel _python_var_field_name( _python_str_plain_field_name, _python_par_field_name );
    PyObjectLocalParameterVariableNoDel _python_var_related_name( _python_str_plain_related_name, _python_par_related_name );
    PyObjectLocalParameterVariableNoDel _python_var_limit_choices_to( _python_str_plain_limit_choices_to, _python_par_limit_choices_to );
    PyObjectLocalParameterVariableNoDel _python_var_parent_link( _python_str_plain_parent_link, _python_par_parent_link );
    PyObjectLocalParameterVariableNoDel _python_var_on_delete( _python_str_plain_on_delete, _python_par_on_delete );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related );
        }

        frame_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_0309ee41c8823af9cf526b64c3d06496, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 889 );
        {
            PyObjectTempKeeper1 call14;
            PyObjectTempKeeper1 call15;
            PyObjectTempKeeper0 make_dict3;
            PyObjectTempKeeper0 make_dict5;
            PyObjectTempKeeper0 make_dict7;
            PyObjectTempKeeper0 make_tuple11;
            PyObjectTempKeeper0 make_tuple12;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call14.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields__related_OneToOneRel.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call15.assign( ( make_tuple11.assign( _python_var_field.asObject() ), make_tuple12.assign( _python_var_to.asObject() ), MAKE_TUPLE3( make_tuple11.asObject0(), make_tuple12.asObject0(), _python_var_field_name.asObject() ) ) ), CALL_FUNCTION( call14.asObject0(), call15.asObject0(), PyObjectTemporary( ( make_dict3.assign( _python_var_related_name.asObject() ), make_dict5.assign( _python_var_limit_choices_to.asObject() ), make_dict7.assign( _python_var_parent_link.asObject() ), MAKE_DICT4( make_dict3.asObject0(), _python_str_plain_related_name, make_dict5.asObject0(), _python_str_plain_limit_choices_to, make_dict7.asObject0(), _python_str_plain_parent_link, _python_var_on_delete.asObject(), _python_str_plain_on_delete ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 893 );
        SET_ATTRIBUTE( Py_False, _python_var_self.asObject(), _python_str_plain_multiple );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_on_delete.updateLocalsDict( _python_var_parent_link.updateLocalsDict( _python_var_limit_choices_to.updateLocalsDict( _python_var_related_name.updateLocalsDict( _python_var_field_name.updateLocalsDict( _python_var_to.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related );
           frame_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_field = NULL;
    PyObject *_python_par_to = NULL;
    PyObject *_python_par_field_name = NULL;
    PyObject *_python_par_related_name = NULL;
    PyObject *_python_par_limit_choices_to = NULL;
    PyObject *_python_par_parent_link = NULL;
    PyObject *_python_par_on_delete = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field == key )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_to == key )
            {
                if (unlikely( _python_par_to ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to'" );
                    goto error_exit;
                }

                _python_par_to = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field_name == key )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_related_name == key )
            {
                if (unlikely( _python_par_related_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related_name'" );
                    goto error_exit;
                }

                _python_par_related_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_limit_choices_to == key )
            {
                if (unlikely( _python_par_limit_choices_to ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'limit_choices_to'" );
                    goto error_exit;
                }

                _python_par_limit_choices_to = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_parent_link == key )
            {
                if (unlikely( _python_par_parent_link ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'parent_link'" );
                    goto error_exit;
                }

                _python_par_parent_link = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_on_delete == key )
            {
                if (unlikely( _python_par_on_delete ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'on_delete'" );
                    goto error_exit;
                }

                _python_par_on_delete = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field, key ) )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_to, key ) )
            {
                if (unlikely( _python_par_to ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to'" );
                    goto error_exit;
                }

                _python_par_to = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field_name, key ) )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_related_name, key ) )
            {
                if (unlikely( _python_par_related_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related_name'" );
                    goto error_exit;
                }

                _python_par_related_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_limit_choices_to, key ) )
            {
                if (unlikely( _python_par_limit_choices_to ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'limit_choices_to'" );
                    goto error_exit;
                }

                _python_par_limit_choices_to = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_parent_link, key ) )
            {
                if (unlikely( _python_par_parent_link ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'parent_link'" );
                    goto error_exit;
                }

                _python_par_parent_link = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_on_delete, key ) )
            {
                if (unlikely( _python_par_on_delete ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'on_delete'" );
                    goto error_exit;
                }

                _python_par_on_delete = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 8 ))
    {
        if ( 8 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 8, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 8 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 8, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 8, args_given + kw_only_found );
            }
#else
            if ( 8 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 8, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 8, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 8 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 8, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 8 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 8 ? args_given : 8;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field'" );
             goto error_exit;
         }

        _python_par_field = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_to != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to'" );
             goto error_exit;
         }

        _python_par_to = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'field_name'" );
             goto error_exit;
         }

        _python_par_field_name = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_related_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related_name'" );
             goto error_exit;
         }

        _python_par_related_name = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_limit_choices_to != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'limit_choices_to'" );
             goto error_exit;
         }

        _python_par_limit_choices_to = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_parent_link != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'parent_link'" );
             goto error_exit;
         }

        _python_par_parent_link = INCREASE_REFCOUNT( args[ 6 ] );
    }
    if (likely( 7 < args_usable_count ))
    {
         if (unlikely( _python_par_on_delete != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'on_delete'" );
             goto error_exit;
         }

        _python_par_on_delete = INCREASE_REFCOUNT( args[ 7 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_related_name == NULL )
    {
        _python_par_related_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_related_name );
    }
    if ( _python_par_limit_choices_to == NULL )
    {
        _python_par_limit_choices_to = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_limit_choices_to );
    }
    if ( _python_par_parent_link == NULL )
    {
        _python_par_parent_link = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_parent_link );
    }
    if ( _python_par_on_delete == NULL )
    {
        _python_par_on_delete = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_on_delete );
    }


    return impl_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_field, _python_par_to, _python_par_field_name, _python_par_related_name, _python_par_limit_choices_to, _python_par_parent_link, _python_par_on_delete );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_field );
    Py_XDECREF( _python_par_to );
    Py_XDECREF( _python_par_field_name );
    Py_XDECREF( _python_par_related_name );
    Py_XDECREF( _python_par_limit_choices_to );
    Py_XDECREF( _python_par_parent_link );
    Py_XDECREF( _python_par_on_delete );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 8)
    {
        return impl_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_14_ManyToManyRel_of_module_django__db__models__fields__related(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_is_hidden( _python_str_plain_is_hidden );
    PyObjectLocalVariable _python_var_get_related_field( _python_str_plain_get_related_field );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related(  ) );
    _python_var_is_hidden.assign1( MAKE_FUNCTION_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related(  ) );
    _python_var_get_related_field.assign1( MAKE_FUNCTION_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related(  ) );
    return _python_var_get_related_field.updateLocalsDict( _python_var_is_hidden.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_to, PyObject *_python_par_related_name, PyObject *_python_par_limit_choices_to, PyObject *_python_par_symmetrical, PyObject *_python_par_through, PyObject *_python_par_db_constraint )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_to( _python_str_plain_to, _python_par_to );
    PyObjectLocalParameterVariableNoDel _python_var_related_name( _python_str_plain_related_name, _python_par_related_name );
    PyObjectLocalParameterVariableNoDel _python_var_limit_choices_to( _python_str_plain_limit_choices_to, _python_par_limit_choices_to );
    PyObjectLocalParameterVariableNoDel _python_var_symmetrical( _python_str_plain_symmetrical, _python_par_symmetrical );
    PyObjectLocalParameterVariableNoDel _python_var_through( _python_str_plain_through, _python_par_through );
    PyObjectLocalParameterVariableNoDel _python_var_db_constraint( _python_str_plain_db_constraint, _python_par_db_constraint );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related );
        }

        frame_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_efc29db28aa021f56ee1190f1d084290, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 899 );
        if ( ( CHECK_IF_TRUE( _python_var_through.asObject() ) && (!( CHECK_IF_TRUE( _python_var_db_constraint.asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 900 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_1408a32c8a3b71930df45f5b456827ac ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 901 );
        {
                PyObject *tmp_identifier = _python_var_to.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_to );
        }
        frame_guard.setLineNumber( 902 );
        {
                PyObject *tmp_identifier = _python_var_related_name.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_related_name );
        }
        frame_guard.setLineNumber( 903 );
        if ( ( _python_var_limit_choices_to.asObject() == Py_None ) )
        {
            _python_var_limit_choices_to.assign1( PyDict_New() );
        }
        frame_guard.setLineNumber( 905 );
        {
                PyObject *tmp_identifier = _python_var_limit_choices_to.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_limit_choices_to );
        }
        frame_guard.setLineNumber( 906 );
        {
                PyObject *tmp_identifier = _python_var_symmetrical.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_symmetrical );
        }
        frame_guard.setLineNumber( 907 );
        SET_ATTRIBUTE( Py_True, _python_var_self.asObject(), _python_str_plain_multiple );
        frame_guard.setLineNumber( 908 );
        {
                PyObject *tmp_identifier = _python_var_through.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_through );
        }
        frame_guard.setLineNumber( 909 );
        {
                PyObject *tmp_identifier = _python_var_db_constraint.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_db_constraint );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_db_constraint.updateLocalsDict( _python_var_through.updateLocalsDict( _python_var_symmetrical.updateLocalsDict( _python_var_limit_choices_to.updateLocalsDict( _python_var_related_name.updateLocalsDict( _python_var_to.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related );
           frame_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_to = NULL;
    PyObject *_python_par_related_name = NULL;
    PyObject *_python_par_limit_choices_to = NULL;
    PyObject *_python_par_symmetrical = NULL;
    PyObject *_python_par_through = NULL;
    PyObject *_python_par_db_constraint = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_to == key )
            {
                if (unlikely( _python_par_to ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to'" );
                    goto error_exit;
                }

                _python_par_to = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_related_name == key )
            {
                if (unlikely( _python_par_related_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related_name'" );
                    goto error_exit;
                }

                _python_par_related_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_limit_choices_to == key )
            {
                if (unlikely( _python_par_limit_choices_to ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'limit_choices_to'" );
                    goto error_exit;
                }

                _python_par_limit_choices_to = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_symmetrical == key )
            {
                if (unlikely( _python_par_symmetrical ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'symmetrical'" );
                    goto error_exit;
                }

                _python_par_symmetrical = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_through == key )
            {
                if (unlikely( _python_par_through ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'through'" );
                    goto error_exit;
                }

                _python_par_through = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_db_constraint == key )
            {
                if (unlikely( _python_par_db_constraint ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'db_constraint'" );
                    goto error_exit;
                }

                _python_par_db_constraint = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_to, key ) )
            {
                if (unlikely( _python_par_to ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to'" );
                    goto error_exit;
                }

                _python_par_to = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_related_name, key ) )
            {
                if (unlikely( _python_par_related_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related_name'" );
                    goto error_exit;
                }

                _python_par_related_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_limit_choices_to, key ) )
            {
                if (unlikely( _python_par_limit_choices_to ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'limit_choices_to'" );
                    goto error_exit;
                }

                _python_par_limit_choices_to = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_symmetrical, key ) )
            {
                if (unlikely( _python_par_symmetrical ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'symmetrical'" );
                    goto error_exit;
                }

                _python_par_symmetrical = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_through, key ) )
            {
                if (unlikely( _python_par_through ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'through'" );
                    goto error_exit;
                }

                _python_par_through = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_db_constraint, key ) )
            {
                if (unlikely( _python_par_db_constraint ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'db_constraint'" );
                    goto error_exit;
                }

                _python_par_db_constraint = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 7 ))
    {
        if ( 7 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 7, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 7 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#else
            if ( 7 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 7 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 7, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 7 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 7 ? args_given : 7;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_to != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to'" );
             goto error_exit;
         }

        _python_par_to = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_related_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'related_name'" );
             goto error_exit;
         }

        _python_par_related_name = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_limit_choices_to != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'limit_choices_to'" );
             goto error_exit;
         }

        _python_par_limit_choices_to = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_symmetrical != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'symmetrical'" );
             goto error_exit;
         }

        _python_par_symmetrical = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_through != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'through'" );
             goto error_exit;
         }

        _python_par_through = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_db_constraint != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'db_constraint'" );
             goto error_exit;
         }

        _python_par_db_constraint = INCREASE_REFCOUNT( args[ 6 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_related_name == NULL )
    {
        _python_par_related_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_related_name );
    }
    if ( _python_par_limit_choices_to == NULL )
    {
        _python_par_limit_choices_to = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_limit_choices_to );
    }
    if ( _python_par_symmetrical == NULL )
    {
        _python_par_symmetrical = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_symmetrical );
    }
    if ( _python_par_through == NULL )
    {
        _python_par_through = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_through );
    }
    if ( _python_par_db_constraint == NULL )
    {
        _python_par_db_constraint = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_db_constraint );
    }


    return impl_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_to, _python_par_related_name, _python_par_limit_choices_to, _python_par_symmetrical, _python_par_through, _python_par_db_constraint );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_to );
    Py_XDECREF( _python_par_related_name );
    Py_XDECREF( _python_par_limit_choices_to );
    Py_XDECREF( _python_par_symmetrical );
    Py_XDECREF( _python_par_through );
    Py_XDECREF( _python_par_db_constraint );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 7)
    {
        return impl_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related );
        }

        frame_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_4c26c8c5ceddac790385258a46dc37b4, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 913 );
        {
            PyObjectTempKeeper1 keeper_0;
            return ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_name ) ) ) ? RICH_COMPARE_EQ( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_name ) ).asObject(), _python_int_neg_1, -1 ) ).asObject(), _python_str_chr_43 ) : keeper_0.asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related );
           frame_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "is_hidden() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "is_hidden() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "is_hidden() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "is_hidden() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_hidden() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "is_hidden() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "is_hidden() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "is_hidden() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "is_hidden() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_hidden() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "is_hidden() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "is_hidden() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "is_hidden() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "is_hidden() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "is_hidden() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "is_hidden() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "is_hidden() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related );
        }

        frame_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_12dc72b770fb5444aa7d2eb79679d3ba, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 921 );
        return LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related );
           frame_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_related_field() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_related_field() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_related_field() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_related_field() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_related_field() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_related_field() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_related_field() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_related_field() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_related_field() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_related_field() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_related_field() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_related_field() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_related_field() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_related_field() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_related_field() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_related_field() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_related_field() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_requires_unique_target( _python_str_plain_requires_unique_target );
    PyObjectLocalVariable _python_var_generate_reverse_relation( _python_str_plain_generate_reverse_relation );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_resolve_related_fields( _python_str_plain_resolve_related_fields );
    PyObjectLocalVariable _python_var_related_fields( _python_str_plain_related_fields );
    PyObjectLocalVariable _python_var_reverse_related_fields( _python_str_plain_reverse_related_fields );
    PyObjectLocalVariable _python_var_local_related_fields( _python_str_plain_local_related_fields );
    PyObjectLocalVariable _python_var_foreign_related_fields( _python_str_plain_foreign_related_fields );
    PyObjectLocalVariable _python_var_get_local_related_value( _python_str_plain_get_local_related_value );
    PyObjectLocalVariable _python_var_get_foreign_related_value( _python_str_plain_get_foreign_related_value );
    PyObjectLocalVariable _python_var_get_instance_value_for_fields( _python_str_plain_get_instance_value_for_fields );
    PyObjectLocalVariable _python_var_get_attname_column( _python_str_plain_get_attname_column );
    PyObjectLocalVariable _python_var_get_joining_columns( _python_str_plain_get_joining_columns );
    PyObjectLocalVariable _python_var_get_reverse_joining_columns( _python_str_plain_get_reverse_joining_columns );
    PyObjectLocalVariable _python_var_get_extra_descriptor_filter( _python_str_plain_get_extra_descriptor_filter );
    PyObjectLocalVariable _python_var_get_extra_restriction( _python_str_plain_get_extra_restriction );
    PyObjectLocalVariable _python_var_get_path_info( _python_str_plain_get_path_info );
    PyObjectLocalVariable _python_var_get_reverse_path_info( _python_str_plain_get_reverse_path_info );
    PyObjectLocalVariable _python_var_get_lookup_constraint( _python_str_plain_get_lookup_constraint );
    PyObjectLocalVariable _python_var_attnames( _python_str_plain_attnames );
    PyObjectLocalVariable _python_var_get_defaults( _python_str_plain_get_defaults );
    PyObjectLocalVariable _python_var_contribute_to_class( _python_str_plain_contribute_to_class );
    PyObjectLocalVariable _python_var_contribute_to_related_class( _python_str_plain_contribute_to_related_class );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    _python_var_requires_unique_target.assign0( Py_True );
    _python_var_generate_reverse_relation.assign0( Py_True );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) );
    _python_var_resolve_related_fields.assign1( MAKE_FUNCTION_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) );
    static PyFrameObject *frame_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_13f0a0708425faadac2e67b2952ea0c3, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 958 );
        _python_var_related_fields.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) ).asObject() ) );
        frame_guard.setLineNumber( 964 );
        _python_var_reverse_related_fields.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) ).asObject() ) );
        frame_guard.setLineNumber( 968 );
        _python_var_local_related_fields.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) ).asObject() ) );
        frame_guard.setLineNumber( 972 );
        _python_var_foreign_related_fields.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) ).asObject() ) );
        _python_var_get_local_related_value.assign1( MAKE_FUNCTION_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) );
        _python_var_get_foreign_related_value.assign1( MAKE_FUNCTION_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) );
        frame_guard.setLineNumber( 982 );
        _python_var_get_instance_value_for_fields.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_staticmethod ), PyObjectTemporary( MAKE_FUNCTION_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) ).asObject() ) );
        _python_var_get_attname_column.assign1( MAKE_FUNCTION_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) );
        _python_var_get_joining_columns.assign1( MAKE_FUNCTION_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) );
        _python_var_get_reverse_joining_columns.assign1( MAKE_FUNCTION_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) );
        _python_var_get_extra_descriptor_filter.assign1( MAKE_FUNCTION_function_13_get_extra_descriptor_filter_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) );
        _python_var_get_extra_restriction.assign1( MAKE_FUNCTION_function_14_get_extra_restriction_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) );
        _python_var_get_path_info.assign1( MAKE_FUNCTION_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) );
        _python_var_get_reverse_path_info.assign1( MAKE_FUNCTION_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) );
        _python_var_get_lookup_constraint.assign1( MAKE_FUNCTION_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) );
        frame_guard.setLineNumber( 1096 );
        _python_var_attnames.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_contribute_to_related_class.updateLocalsDict( _python_var_contribute_to_class.updateLocalsDict( _python_var_get_defaults.updateLocalsDict( _python_var_attnames.updateLocalsDict( _python_var_get_lookup_constraint.updateLocalsDict( _python_var_get_reverse_path_info.updateLocalsDict( _python_var_get_path_info.updateLocalsDict( _python_var_get_extra_restriction.updateLocalsDict( _python_var_get_extra_descriptor_filter.updateLocalsDict( _python_var_get_reverse_joining_columns.updateLocalsDict( _python_var_get_joining_columns.updateLocalsDict( _python_var_get_attname_column.updateLocalsDict( _python_var_get_instance_value_for_fields.updateLocalsDict( _python_var_get_foreign_related_value.updateLocalsDict( _python_var_get_local_related_value.updateLocalsDict( _python_var_foreign_related_fields.updateLocalsDict( _python_var_local_related_fields.updateLocalsDict( _python_var_reverse_related_fields.updateLocalsDict( _python_var_related_fields.updateLocalsDict( _python_var_resolve_related_fields.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_generate_reverse_relation.updateLocalsDict( _python_var_requires_unique_target.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        throw;
    }
    _python_var_get_defaults.assign1( MAKE_FUNCTION_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) );
    _python_var_contribute_to_class.assign1( MAKE_FUNCTION_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) );
    _python_var_contribute_to_related_class.assign1( MAKE_FUNCTION_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) );
    return _python_var_contribute_to_related_class.updateLocalsDict( _python_var_contribute_to_class.updateLocalsDict( _python_var_get_defaults.updateLocalsDict( _python_var_attnames.updateLocalsDict( _python_var_get_lookup_constraint.updateLocalsDict( _python_var_get_reverse_path_info.updateLocalsDict( _python_var_get_path_info.updateLocalsDict( _python_var_get_extra_restriction.updateLocalsDict( _python_var_get_extra_descriptor_filter.updateLocalsDict( _python_var_get_reverse_joining_columns.updateLocalsDict( _python_var_get_joining_columns.updateLocalsDict( _python_var_get_attname_column.updateLocalsDict( _python_var_get_instance_value_for_fields.updateLocalsDict( _python_var_get_foreign_related_value.updateLocalsDict( _python_var_get_local_related_value.updateLocalsDict( _python_var_foreign_related_fields.updateLocalsDict( _python_var_local_related_fields.updateLocalsDict( _python_var_reverse_related_fields.updateLocalsDict( _python_var_related_fields.updateLocalsDict( _python_var_resolve_related_fields.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_generate_reverse_relation.updateLocalsDict( _python_var_requires_unique_target.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_to, PyObject *_python_par_from_fields, PyObject *_python_par_to_fields, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_to( _python_str_plain_to, _python_par_to );
    PyObjectLocalParameterVariableNoDel _python_var_from_fields( _python_str_plain_from_fields, _python_par_from_fields );
    PyObjectLocalParameterVariableNoDel _python_var_to_fields( _python_str_plain_to_fields, _python_par_to_fields );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_bb4e11081599ea5d55e826cc2e912305, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 929 );
        {
                PyObject *tmp_identifier = _python_var_from_fields.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_from_fields );
        }
        frame_guard.setLineNumber( 930 );
        {
                PyObject *tmp_identifier = _python_var_to_fields.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_to_fields );
        }
        frame_guard.setLineNumber( 932 );
        if ( SEQUENCE_CONTAINS_NOT_BOOL( _python_str_plain_rel, _python_var_kwargs.asObject() ) )
        {
            frame_guard.setLineNumber( 933 );
            {
                PyObjectTempKeeper1 call1;
                PyObjectTempKeeper0 call14;
                PyObjectTempKeeper1 call15;
                PyObjectTempKeeper1 make_dict4;
                PyObjectTempKeeper1 make_dict6;
                PyObjectTempKeeper1 make_dict8;
                PyObjectTempKeeper0 make_tuple12;
                {
                    PyObjectTemporary tmp_identifier( ( call14.assign( _mvar_django__db__models__fields__related_ForeignObjectRel.asObject0() ), call15.assign( ( make_tuple12.assign( _python_var_self.asObject() ), MAKE_TUPLE2( make_tuple12.asObject0(), _python_var_to.asObject() ) ) ), CALL_FUNCTION( call14.asObject0(), call15.asObject0(), PyObjectTemporary( ( make_dict4.assign( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_str_plain_related_name, Py_None ) ), make_dict6.assign( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_str_plain_limit_choices_to, Py_None ) ), make_dict8.assign( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_str_plain_parent_link, Py_False ) ), MAKE_DICT4( make_dict4.asObject0(), _python_str_plain_related_name, make_dict6.asObject0(), _python_str_plain_limit_choices_to, make_dict8.asObject0(), _python_str_plain_parent_link, PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_str_plain_on_delete, _mvar_django__db__models__fields__related_CASCADE.asObject0() ) ) ).asObject(), _python_str_plain_on_delete ) ) ).asObject() ) ) );
                    SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_kwargs.asObject(), _python_str_plain_rel );
            }
            }
        }
        frame_guard.setLineNumber( 940 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_get ) ).asObject(), _python_str_plain_verbose_name, Py_None ) );
                SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_kwargs.asObject(), _python_str_plain_verbose_name );
        }
        frame_guard.setLineNumber( 942 );
        {
            PyObjectTempKeeper1 call_tmp19;
            PyObjectTempKeeper0 super17;
            DECREASE_REFCOUNT( ( call_tmp19.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super17.assign( _mvar_django__db__models__fields__related_ForeignObject.asObject0() ), BUILTIN_SUPER( super17.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp19.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_to_fields.updateLocalsDict( _python_var_from_fields.updateLocalsDict( _python_var_to.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_to = NULL;
    PyObject *_python_par_from_fields = NULL;
    PyObject *_python_par_to_fields = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument to was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_to );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_to == NULL );

            _python_par_to = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_to );

            kw_found += 1;
        }
    }

    // Check if argument from_fields was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_from_fields );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_from_fields == NULL );

            _python_par_from_fields = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_from_fields );

            kw_found += 1;
        }
    }

    // Check if argument to_fields was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_to_fields );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_to_fields == NULL );

            _python_par_to_fields = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_to_fields );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_to != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to'" );
             goto error_exit;
         }

        _python_par_to = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_from_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'from_fields'" );
             goto error_exit;
         }

        _python_par_from_fields = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_to_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to_fields'" );
             goto error_exit;
         }

        _python_par_to_fields = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_to, _python_par_from_fields, _python_par_to_fields, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_to );
    Py_XDECREF( _python_par_from_fields );
    Py_XDECREF( _python_par_to_fields );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_related_fields( _python_str_plain_related_fields );
    PyObjectLocalVariable _python_var_index( _python_str_plain_index );
    PyObjectLocalVariable _python_var_from_field_name( _python_str_plain_from_field_name );
    PyObjectLocalVariable _python_var_to_field_name( _python_str_plain_to_field_name );
    PyObjectLocalVariable _python_var_from_field( _python_str_plain_from_field );
    PyObjectLocalVariable _python_var_to_field( _python_str_plain_to_field );

    // Actual function code.
    static PyFrameObject *frame_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_8c9a391b76db83fb68aeed5651ece7f0, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 945 );
        {
            PyObjectTempKeeper1 cmp1;
            if ( ( RICH_COMPARE_BOOL_LT( PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_from_fields ) ).asObject() ) ).asObject(), _python_int_pos_1 ) || ( cmp1.assign( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_from_fields ) ).asObject() ) ), RICH_COMPARE_BOOL_NE( cmp1.asObject0(), PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_fields ) ).asObject() ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 946 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_84fdd1401a37cae088a5d9dcbdcbfb48 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        }
        _python_var_related_fields.assign1( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 948 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( BUILTIN_RANGE( PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_from_fields ) ).asObject() ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 948 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_index.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 949 );
                {
                    PyObjectTempKeeper1 subscr3;
                    _python_var_from_field_name.assign1( ( subscr3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_from_fields ) ), LOOKUP_SUBSCRIPT( subscr3.asObject0(), _python_var_index.asObject() ) ) );
                }
                frame_guard.setLineNumber( 950 );
                {
                    PyObjectTempKeeper1 subscr5;
                    _python_var_to_field_name.assign1( ( subscr5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_fields ) ), LOOKUP_SUBSCRIPT( subscr5.asObject0(), _python_var_index.asObject() ) ) );
                }
                frame_guard.setLineNumber( 951 );
                {
                    PyObjectTempKeeper1 call7;
                    _python_var_from_field.assign1( ( RICH_COMPARE_BOOL_EQ( _python_var_from_field_name.asObject(), _python_str_plain_self ) ? _python_var_self.asObject1() : LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( ( call7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_opts ) ).asObject(), _python_str_plain_get_field_by_name ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_from_field_name.asObject() ) ) ).asObject(), _python_int_0, 0 ) ) );
                }
                frame_guard.setLineNumber( 953 );
                {
                    PyObjectTempKeeper1 call9;
                    _python_var_to_field.assign1( ( ( _python_var_to_field_name.asObject() == Py_None ) ? LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk ) : LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( ( call9.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_field_by_name ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_var_to_field_name.asObject() ) ) ).asObject(), _python_int_0, 0 ) ) );
                }
                frame_guard.setLineNumber( 955 );
                {
                    PyObjectTempKeeper1 call13;
                    PyObjectTempKeeper0 make_tuple11;
                    DECREASE_REFCOUNT( ( call13.assign( LOOKUP_ATTRIBUTE( _python_var_related_fields.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), PyObjectTemporary( ( make_tuple11.assign( _python_var_from_field.asObject() ), MAKE_TUPLE2( make_tuple11.asObject0(), _python_var_to_field.asObject() ) ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 956 );
        return _python_var_related_fields.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_to_field.updateLocalsDict( _python_var_from_field.updateLocalsDict( _python_var_to_field_name.updateLocalsDict( _python_var_from_field_name.updateLocalsDict( _python_var_index.updateLocalsDict( _python_var_related_fields.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "resolve_related_fields() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_related_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_related_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "resolve_related_fields() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "resolve_related_fields() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "resolve_related_fields() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "resolve_related_fields() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "resolve_related_fields() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "resolve_related_fields() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "resolve_related_fields() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "resolve_related_fields() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "resolve_related_fields() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "resolve_related_fields() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "resolve_related_fields() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "resolve_related_fields() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "resolve_related_fields() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve_related_fields() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_418adea6a5629015e80ac141bb699f64, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 960 );
        if ( (!( HAS_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__related_fields ) )) )
        {
            frame_guard.setLineNumber( 961 );
            {
                    PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_resolve_related_fields ) ).asObject() ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain__related_fields );
            }
        }
        frame_guard.setLineNumber( 962 );
        return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__related_fields );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "related_fields() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "related_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "related_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "related_fields() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "related_fields() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "related_fields() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "related_fields() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "related_fields() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "related_fields() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "related_fields() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "related_fields() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "related_fields() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "related_fields() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "related_fields() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "related_fields() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "related_fields() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "related_fields() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_lhs_field( _python_str_plain_lhs_field );
    PyObjectLocalVariable _python_var_rhs_field( _python_str_plain_rhs_field );

    // Actual function code.
    static PyFrameObject *frame_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_b923136b93c9beb886d812ccab1b1a64, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 966 );
        return impl_listcontr_1_of_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_fields ) ).asObject() ), _python_var_lhs_field, _python_var_rhs_field );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_rhs_field.updateLocalsDict( _python_var_lhs_field.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "reverse_related_fields() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "reverse_related_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "reverse_related_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "reverse_related_fields() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "reverse_related_fields() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "reverse_related_fields() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "reverse_related_fields() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "reverse_related_fields() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "reverse_related_fields() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "reverse_related_fields() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "reverse_related_fields() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "reverse_related_fields() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "reverse_related_fields() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "reverse_related_fields() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "reverse_related_fields() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "reverse_related_fields() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "reverse_related_fields() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_lhs_field,PyObjectLocalVariable &python_closure_rhs_field )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 966 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 966 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                {
                    frame_guard.setLineNumber( 966 );
                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                    python_closure_lhs_field.assign0( _python_tmp_element_1.asObject() );
                    python_closure_rhs_field.assign0( _python_tmp_element_2.asObject() );
                }
                {
                    PyObjectTempKeeper0 make_tuple1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( make_tuple1.assign( python_closure_rhs_field.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), python_closure_lhs_field.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_lhs_field( _python_str_plain_lhs_field );
    PyObjectLocalVariable _python_var_rhs_field( _python_str_plain_rhs_field );

    // Actual function code.
    static PyFrameObject *frame_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_51cf0c6b5561923f2ddd4c643a8ab1c7, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 970 );
        return TO_TUPLE( PyObjectTemporary( impl_listcontr_1_of_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_fields ) ).asObject() ), _python_var_lhs_field, _python_var_rhs_field ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_rhs_field.updateLocalsDict( _python_var_lhs_field.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "local_related_fields() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "local_related_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "local_related_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "local_related_fields() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "local_related_fields() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "local_related_fields() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "local_related_fields() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "local_related_fields() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "local_related_fields() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "local_related_fields() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "local_related_fields() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "local_related_fields() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "local_related_fields() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "local_related_fields() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "local_related_fields() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "local_related_fields() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "local_related_fields() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_lhs_field,PyObjectLocalVariable &python_closure_rhs_field )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 970 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 970 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                {
                    frame_guard.setLineNumber( 970 );
                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                    python_closure_lhs_field.assign0( _python_tmp_element_1.asObject() );
                    python_closure_rhs_field.assign0( _python_tmp_element_2.asObject() );
                }
                APPEND_TO_LIST( _python_tmp_result.asObject(), python_closure_lhs_field.asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_lhs_field( _python_str_plain_lhs_field );
    PyObjectLocalVariable _python_var_rhs_field( _python_str_plain_rhs_field );

    // Actual function code.
    static PyFrameObject *frame_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_6f316f14d461a077c577a6d473881f90, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 974 );
        return TO_TUPLE( PyObjectTemporary( impl_listcontr_1_of_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_fields ) ).asObject() ), _python_var_lhs_field, _python_var_rhs_field ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_rhs_field.updateLocalsDict( _python_var_lhs_field.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "foreign_related_fields() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "foreign_related_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "foreign_related_fields() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "foreign_related_fields() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "foreign_related_fields() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "foreign_related_fields() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "foreign_related_fields() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "foreign_related_fields() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "foreign_related_fields() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "foreign_related_fields() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "foreign_related_fields() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "foreign_related_fields() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "foreign_related_fields() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "foreign_related_fields() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "foreign_related_fields() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "foreign_related_fields() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "foreign_related_fields() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_lhs_field,PyObjectLocalVariable &python_closure_rhs_field )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 974 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 974 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                {
                    frame_guard.setLineNumber( 974 );
                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                    python_closure_lhs_field.assign0( _python_tmp_element_1.asObject() );
                    python_closure_rhs_field.assign0( _python_tmp_element_2.asObject() );
                }
                APPEND_TO_LIST( _python_tmp_result.asObject(), python_closure_rhs_field.asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );

    // Actual function code.
    static PyFrameObject *frame_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_d169825280e017514d77790ca3a98ddf, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 977 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_instance_value_for_fields ) ), call2.assign( _python_var_instance.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_local_related_fields ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_local_related_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_local_related_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "get_local_related_value() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_local_related_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "get_local_related_value() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_local_related_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_local_related_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_local_related_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_local_related_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_local_related_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_local_related_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_local_related_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_local_related_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_local_related_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_local_related_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_local_related_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_local_related_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_local_related_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_local_related_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_local_related_value() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );

    return NULL;
}

static PyObject *dparse_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );

    // Actual function code.
    static PyFrameObject *frame_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_4ff53508df429bcf790919e14c93ede3, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 980 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_instance_value_for_fields ) ), call2.assign( _python_var_instance.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_foreign_related_fields ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_foreign_related_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_foreign_related_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "get_foreign_related_value() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_foreign_related_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "get_foreign_related_value() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_foreign_related_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_foreign_related_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_foreign_related_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_foreign_related_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_foreign_related_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_foreign_related_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_foreign_related_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_foreign_related_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_foreign_related_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_foreign_related_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_foreign_related_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_foreign_related_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_foreign_related_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_foreign_related_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_foreign_related_value() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );

    return NULL;
}

static PyObject *dparse_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_instance, PyObject *_python_par_fields )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );

    // Actual function code.
    static PyFrameObject *frame_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_7f62245277b9675e0d3389b70a753633, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 984 );
        return TO_TUPLE( PyObjectTemporary( impl_listcontr_1_of_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( MAKE_ITERATOR( _python_var_fields.asObject() ), _python_var_field, _python_var_instance ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_fields.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_field.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_fields = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fields == key )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fields, key ) )
            {
                if (unlikely( _python_par_fields ))
                {
                    PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() got multiple values for keyword argument 'fields'" );
                    goto error_exit;
                }

                _python_par_fields = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_instance_value_for_fields() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_instance_value_for_fields() got multiple values for keyword argument 'fields'" );
             goto error_exit;
         }

        _python_par_fields = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_instance, _python_par_fields );

error_exit:;

    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_fields );

    return NULL;
}

static PyObject *dparse_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_field,PyObjectLocalParameterVariableNoDel &python_closure_instance )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 984 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 984 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_field.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 getattr1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( getattr1.assign( python_closure_instance.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_field.asObject(), _python_str_plain_attname ) ).asObject(), NULL ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_attname( _python_str_plain_attname );
    PyObjectLocalVariable _python_var_column( _python_str_plain_column );

    // Actual function code.
    static PyFrameObject *frame_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_c4552663dbbc05672b96cab82dde2f38, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 987 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 super1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields__related_ForeignObject.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_get_attname_column ) ).asObject() ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            _python_var_attname.assign0( _python_tmp_element_1.asObject() );
            _python_var_column.assign0( _python_tmp_element_2.asObject() );
        }
        frame_guard.setLineNumber( 988 );
        return MAKE_TUPLE2( _python_var_attname.asObject(), Py_None );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_column.updateLocalsDict( _python_var_attname.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_attname_column() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_attname_column() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_attname_column() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_attname_column() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_attname_column() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_attname_column() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_reverse_join )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_reverse_join( _python_str_plain_reverse_join, _python_par_reverse_join );
    PyObjectLocalVariable _python_var_source( _python_str_plain_source );
    PyObjectLocalVariable _python_var_lhs_field( _python_str_plain_lhs_field );
    PyObjectLocalVariable _python_var_rhs_field( _python_str_plain_rhs_field );

    // Actual function code.
    static PyFrameObject *frame_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_26a4b8d2d989841d30900af1fabf3715, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 991 );
        _python_var_source.assign1( ( CHECK_IF_TRUE( _python_var_reverse_join.asObject() ) ? LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_reverse_related_fields ) : LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_fields ) ) );
        frame_guard.setLineNumber( 992 );
        return TO_TUPLE( PyObjectTemporary( impl_listcontr_1_of_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related( MAKE_ITERATOR( _python_var_source.asObject() ), _python_var_lhs_field, _python_var_rhs_field ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_reverse_join.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_rhs_field.updateLocalsDict( _python_var_lhs_field.updateLocalsDict( _python_var_source.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_reverse_join = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_joining_columns() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_joining_columns() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_reverse_join == key )
            {
                if (unlikely( _python_par_reverse_join ))
                {
                    PyErr_Format( PyExc_TypeError, "get_joining_columns() got multiple values for keyword argument 'reverse_join'" );
                    goto error_exit;
                }

                _python_par_reverse_join = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_joining_columns() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_reverse_join, key ) )
            {
                if (unlikely( _python_par_reverse_join ))
                {
                    PyErr_Format( PyExc_TypeError, "get_joining_columns() got multiple values for keyword argument 'reverse_join'" );
                    goto error_exit;
                }

                _python_par_reverse_join = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_joining_columns() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_joining_columns() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_joining_columns() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_joining_columns() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_joining_columns() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_joining_columns() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_joining_columns() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_joining_columns() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_joining_columns() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_joining_columns() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_joining_columns() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_joining_columns() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_joining_columns() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_joining_columns() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_reverse_join != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_joining_columns() got multiple values for keyword argument 'reverse_join'" );
             goto error_exit;
         }

        _python_par_reverse_join = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_reverse_join == NULL )
    {
        _python_par_reverse_join = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_reverse_join );
    }


    return impl_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_reverse_join );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_reverse_join );

    return NULL;
}

static PyObject *dparse_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_lhs_field,PyObjectLocalVariable &python_closure_rhs_field )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 992 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 992 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                {
                    frame_guard.setLineNumber( 992 );
                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                    python_closure_lhs_field.assign0( _python_tmp_element_1.asObject() );
                    python_closure_rhs_field.assign0( _python_tmp_element_2.asObject() );
                }
                {
                    PyObjectTempKeeper1 make_tuple1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( python_closure_lhs_field.asObject(), _python_str_plain_column ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_rhs_field.asObject(), _python_str_plain_column ) ).asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_9afb65dfab23d8bee7fdee4915264e60, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 995 );
        return CALL_FUNCTION( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_joining_columns ) ).asObject(), _python_tuple_empty, PyObjectTemporary( PyDict_Copy( _python_dict_0285fe8c07eb0ee3613155fc029d8eb9 ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_joining_columns() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_reverse_joining_columns() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_reverse_joining_columns() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_reverse_joining_columns() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_reverse_joining_columns() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_reverse_joining_columns() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_reverse_joining_columns() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_reverse_joining_columns() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_joining_columns() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_joining_columns() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_joining_columns() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_joining_columns() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_reverse_joining_columns() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_joining_columns() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_reverse_joining_columns() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_reverse_joining_columns() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_reverse_joining_columns() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_13_get_extra_descriptor_filter_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );

    // Actual function code.
    return PyDict_New();
}
static PyObject *fparse_function_13_get_extra_descriptor_filter_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_extra_descriptor_filter() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_extra_descriptor_filter() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_13_get_extra_descriptor_filter_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );

    return NULL;
}

static PyObject *dparse_function_13_get_extra_descriptor_filter_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_13_get_extra_descriptor_filter_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_13_get_extra_descriptor_filter_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_14_get_extra_restriction_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_where_class, PyObject *_python_par_alias, PyObject *_python_par_related_alias )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_where_class( _python_str_plain_where_class, _python_par_where_class );
    PyObjectLocalParameterVariableNoDel _python_var_alias( _python_str_plain_alias, _python_par_alias );
    PyObjectLocalParameterVariableNoDel _python_var_related_alias( _python_str_plain_related_alias, _python_par_related_alias );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_14_get_extra_restriction_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_where_class = NULL;
    PyObject *_python_par_alias = NULL;
    PyObject *_python_par_related_alias = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_extra_restriction() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_where_class == key )
            {
                if (unlikely( _python_par_where_class ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'where_class'" );
                    goto error_exit;
                }

                _python_par_where_class = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_alias == key )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_related_alias == key )
            {
                if (unlikely( _python_par_related_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'related_alias'" );
                    goto error_exit;
                }

                _python_par_related_alias = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_where_class, key ) )
            {
                if (unlikely( _python_par_where_class ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'where_class'" );
                    goto error_exit;
                }

                _python_par_where_class = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_alias, key ) )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_related_alias, key ) )
            {
                if (unlikely( _python_par_related_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'related_alias'" );
                    goto error_exit;
                }

                _python_par_related_alias = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_extra_restriction() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_extra_restriction() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_where_class != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'where_class'" );
             goto error_exit;
         }

        _python_par_where_class = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_alias != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'alias'" );
             goto error_exit;
         }

        _python_par_alias = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_related_alias != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_extra_restriction() got multiple values for keyword argument 'related_alias'" );
             goto error_exit;
         }

        _python_par_related_alias = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_14_get_extra_restriction_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_where_class, _python_par_alias, _python_par_related_alias );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_where_class );
    Py_XDECREF( _python_par_alias );
    Py_XDECREF( _python_par_related_alias );

    return NULL;
}

static PyObject *dparse_function_14_get_extra_restriction_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_14_get_extra_restriction_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_14_get_extra_restriction_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_from_opts( _python_str_plain_from_opts );

    // Actual function code.
    static PyFrameObject *frame_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_1305cd4294eacf4a6aa98f5531c3999d, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1028 );
        _python_var_opts.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) );
        frame_guard.setLineNumber( 1029 );
        _python_var_from_opts.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) );
        frame_guard.setLineNumber( 1030 );
        {
            PyObjectTempKeeper0 call7;
            PyObjectTempKeeper0 make_tuple1;
            PyObjectTempKeeper0 make_tuple2;
            PyObjectTempKeeper1 make_tuple3;
            return MAKE_LIST1( ( call7.assign( _mvar_django__db__models__fields__related_PathInfo.asObject0() ), CALL_FUNCTION_WITH_POSARGS( call7.asObject0(), PyObjectTemporary( ( make_tuple1.assign( _python_var_from_opts.asObject() ), make_tuple2.assign( _python_var_opts.asObject() ), make_tuple3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_foreign_related_fields ) ), MAKE_TUPLE6( make_tuple1.asObject0(), make_tuple2.asObject0(), make_tuple3.asObject0(), _python_var_self.asObject(), Py_False, Py_True ) ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_from_opts.updateLocalsDict( _python_var_opts.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_path_info() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_path_info() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_path_info() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_path_info() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_path_info() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_path_info() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_path_info() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_path_info() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_path_info() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_path_info() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_path_info() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_path_info() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_path_info() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_path_info() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_path_info() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_path_info() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_path_info() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_from_opts( _python_str_plain_from_opts );
    PyObjectLocalVariable _python_var_pathinfos( _python_str_plain_pathinfos );

    // Actual function code.
    static PyFrameObject *frame_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_e4fa4bb38858b910695e87785396930a, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1036 );
        _python_var_opts.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) );
        frame_guard.setLineNumber( 1037 );
        _python_var_from_opts.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) );
        frame_guard.setLineNumber( 1038 );
        {
            PyObjectTempKeeper0 call7;
            PyObjectTempKeeper0 make_tuple1;
            PyObjectTempKeeper0 make_tuple2;
            PyObjectTempKeeper1 make_tuple3;
            PyObjectTempKeeper1 make_tuple4;
            _python_var_pathinfos.assign1( MAKE_LIST1( ( call7.assign( _mvar_django__db__models__fields__related_PathInfo.asObject0() ), CALL_FUNCTION_WITH_POSARGS( call7.asObject0(), PyObjectTemporary( ( make_tuple1.assign( _python_var_from_opts.asObject() ), make_tuple2.assign( _python_var_opts.asObject() ), make_tuple3.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_pk ) ).asObject() ) ), make_tuple4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ), MAKE_TUPLE6( make_tuple1.asObject0(), make_tuple2.asObject0(), make_tuple3.asObject0(), make_tuple4.asObject0(), UNARY_OPERATION( UNARY_NOT, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_unique ) ).asObject() ), Py_False ) ) ).asObject() ) ) ) );
        }
        frame_guard.setLineNumber( 1039 );
        return _python_var_pathinfos.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_pathinfos.updateLocalsDict( _python_var_from_opts.updateLocalsDict( _python_var_opts.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_reverse_path_info() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_reverse_path_info() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_reverse_path_info() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_reverse_path_info() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_constraint_class, PyObject *_python_par_alias, PyObject *_python_par_targets, PyObject *_python_par_sources, PyObject *_python_par_lookup_type, PyObject *_python_par_raw_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_constraint_class( _python_str_plain_constraint_class, _python_par_constraint_class );
    PyObjectLocalParameterVariableNoDel _python_var_alias( _python_str_plain_alias, _python_par_alias );
    PyObjectLocalParameterVariableNoDel _python_var_targets( _python_str_plain_targets, _python_par_targets );
    PyObjectSharedLocalVariable _python_var_sources( _python_str_plain_sources, _python_par_sources );
    PyObjectLocalParameterVariableNoDel _python_var_lookup_type( _python_str_plain_lookup_type, _python_par_lookup_type );
    PyObjectLocalParameterVariableNoDel _python_var_raw_value( _python_str_plain_raw_value, _python_par_raw_value );
    PyObjectLocalVariable _python_var_SubqueryConstraint( _python_str_plain_SubqueryConstraint );
    PyObjectLocalVariable _python_var_Constraint( _python_str_plain_Constraint );
    PyObjectLocalVariable _python_var_AND( _python_str_plain_AND );
    PyObjectLocalVariable _python_var_OR( _python_str_plain_OR );
    PyObjectLocalVariable _python_var_root_constraint( _python_str_plain_root_constraint );
    PyObjectLocalVariable _python_var_get_normalized_value( _python_str_plain_get_normalized_value );
    PyObjectLocalVariable _python_var_is_multicolumn( _python_str_plain_is_multicolumn );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );
    PyObjectLocalVariable _python_var_index( _python_str_plain_index );
    PyObjectLocalVariable _python_var_source( _python_str_plain_source );
    PyObjectLocalVariable _python_var_values( _python_str_plain_values );
    PyObjectLocalVariable _python_var_value_constraint( _python_str_plain_value_constraint );
    PyObjectLocalVariable _python_var_target( _python_str_plain_target );
    PyObjectLocalVariable _python_var_val( _python_str_plain_val );

    // Actual function code.
    static PyFrameObject *frame_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_7e2a26e0abff5075803041dc8558308e, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1043 );
        _python_var_SubqueryConstraint.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_344cac7e275b0c088560f75ac57326e9, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, PyObjectTemporary( _python_var_raw_value.updateLocalsDict( _python_var_lookup_type.updateLocalsDict( _python_var_sources.updateLocalsDict( _python_var_targets.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_constraint_class.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_val.updateLocalsDict( _python_var_target.updateLocalsDict( _python_var_value_constraint.updateLocalsDict( _python_var_values.updateLocalsDict( _python_var_source.updateLocalsDict( _python_var_index.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_is_multicolumn.updateLocalsDict( _python_var_get_normalized_value.updateLocalsDict( _python_var_root_constraint.updateLocalsDict( _python_var_OR.updateLocalsDict( _python_var_AND.updateLocalsDict( _python_var_Constraint.updateLocalsDict( _python_var_SubqueryConstraint.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ).asObject(), _python_list_b4bb576286e95bdc3eaba7db95a27077_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_SubqueryConstraint ) );
        _python_var_Constraint.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_344cac7e275b0c088560f75ac57326e9, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, PyObjectTemporary( _python_var_raw_value.updateLocalsDict( _python_var_lookup_type.updateLocalsDict( _python_var_sources.updateLocalsDict( _python_var_targets.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_constraint_class.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_val.updateLocalsDict( _python_var_target.updateLocalsDict( _python_var_value_constraint.updateLocalsDict( _python_var_values.updateLocalsDict( _python_var_source.updateLocalsDict( _python_var_index.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_is_multicolumn.updateLocalsDict( _python_var_get_normalized_value.updateLocalsDict( _python_var_root_constraint.updateLocalsDict( _python_var_OR.updateLocalsDict( _python_var_AND.updateLocalsDict( _python_var_Constraint.updateLocalsDict( _python_var_SubqueryConstraint.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ).asObject(), _python_list_b4bb576286e95bdc3eaba7db95a27077_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_Constraint ) );
        _python_var_AND.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_344cac7e275b0c088560f75ac57326e9, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, PyObjectTemporary( _python_var_raw_value.updateLocalsDict( _python_var_lookup_type.updateLocalsDict( _python_var_sources.updateLocalsDict( _python_var_targets.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_constraint_class.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_val.updateLocalsDict( _python_var_target.updateLocalsDict( _python_var_value_constraint.updateLocalsDict( _python_var_values.updateLocalsDict( _python_var_source.updateLocalsDict( _python_var_index.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_is_multicolumn.updateLocalsDict( _python_var_get_normalized_value.updateLocalsDict( _python_var_root_constraint.updateLocalsDict( _python_var_OR.updateLocalsDict( _python_var_AND.updateLocalsDict( _python_var_Constraint.updateLocalsDict( _python_var_SubqueryConstraint.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ).asObject(), _python_list_b4bb576286e95bdc3eaba7db95a27077_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_AND ) );
        _python_var_OR.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_344cac7e275b0c088560f75ac57326e9, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, PyObjectTemporary( _python_var_raw_value.updateLocalsDict( _python_var_lookup_type.updateLocalsDict( _python_var_sources.updateLocalsDict( _python_var_targets.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_constraint_class.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_val.updateLocalsDict( _python_var_target.updateLocalsDict( _python_var_value_constraint.updateLocalsDict( _python_var_values.updateLocalsDict( _python_var_source.updateLocalsDict( _python_var_index.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_is_multicolumn.updateLocalsDict( _python_var_get_normalized_value.updateLocalsDict( _python_var_root_constraint.updateLocalsDict( _python_var_OR.updateLocalsDict( _python_var_AND.updateLocalsDict( _python_var_Constraint.updateLocalsDict( _python_var_SubqueryConstraint.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ).asObject(), _python_list_b4bb576286e95bdc3eaba7db95a27077_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_OR ) );
        frame_guard.setLineNumber( 1044 );
        _python_var_root_constraint.assign1( CALL_FUNCTION_NO_ARGS( _python_var_constraint_class.asObject() ) );
        frame_guard.setLineNumber( 1045 );
        {
            PyObjectTempKeeper1 cmp1;
            if ( (!( ( cmp1.assign( BUILTIN_LEN( _python_var_targets.asObject() ) ), RICH_COMPARE_BOOL_EQ( cmp1.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_sources.asObject() ) ).asObject() ) ) )) )
        {
            frame_guard.setLineNumber( 1045 );
            RAISE_EXCEPTION_WITH_TYPE( PyExc_AssertionError, PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        }
        _python_var_get_normalized_value.assign1( MAKE_FUNCTION_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( _python_var_sources ) );
        frame_guard.setLineNumber( 1062 );
        _python_var_is_multicolumn.assign1( RICH_COMPARE_GT( PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_fields ) ).asObject() ) ).asObject(), _python_int_pos_1 ) );
        frame_guard.setLineNumber( 1063 );
        if ( ( HAS_ATTRIBUTE( _python_var_raw_value.asObject(), _python_str_plain__as_sql ) || HAS_ATTRIBUTE( _python_var_raw_value.asObject(), _python_str_plain_get_compiler ) ) )
        {
            frame_guard.setLineNumber( 1065 );
            {
                PyObjectTempKeeper0 call3;
                PyObjectTempKeeper0 call4;
                PyObjectTempKeeper1 call5;
                PyObjectTempKeeper1 call6;
                PyObjectTempKeeper1 call8;
                PyObjectTempKeeper1 call9;
                DECREASE_REFCOUNT( ( call8.assign( LOOKUP_ATTRIBUTE( _python_var_root_constraint.asObject(), _python_str_plain_add ) ), call9.assign( ( call3.assign( _python_var_SubqueryConstraint.asObject() ), call4.assign( _python_var_alias.asObject() ), call5.assign( impl_listcontr_2_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( MAKE_ITERATOR( _python_var_targets.asObject() ), _python_var_target ) ), call6.assign( impl_listcontr_3_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( MAKE_ITERATOR( _python_var_sources.asObject() ), _python_var_source ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), call5.asObject0(), call6.asObject0(), _python_var_raw_value.asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), call9.asObject0(), _python_var_AND.asObject() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 1068 );
            if ( RICH_COMPARE_BOOL_EQ( _python_var_lookup_type.asObject(), _python_str_plain_isnull ) )
            {
                frame_guard.setLineNumber( 1069 );
                {
                    PyObjectTempKeeper0 call11;
                    PyObjectTempKeeper0 call12;
                    PyObjectTempKeeper1 call13;
                    PyObjectTempKeeper1 call18;
                    PyObjectTempKeeper1 call19;
                    PyObjectTempKeeper1 make_tuple15;
                    PyObjectTempKeeper0 make_tuple16;
                    DECREASE_REFCOUNT( ( call18.assign( LOOKUP_ATTRIBUTE( _python_var_root_constraint.asObject(), _python_str_plain_add ) ), call19.assign( ( make_tuple15.assign( ( call11.assign( _python_var_Constraint.asObject() ), call12.assign( _python_var_alias.asObject() ), call13.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_targets.asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain_column ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), call12.asObject0(), call13.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_targets.asObject(), _python_int_0, 0 ) ).asObject() ) ) ), make_tuple16.assign( _python_var_lookup_type.asObject() ), MAKE_TUPLE3( make_tuple15.asObject0(), make_tuple16.asObject0(), _python_var_raw_value.asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call18.asObject0(), call19.asObject0(), _python_var_AND.asObject() ) ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 1071 );
                if ( ( RICH_COMPARE_BOOL_EQ( _python_var_lookup_type.asObject(), _python_str_plain_exact ) || ( SEQUENCE_CONTAINS_BOOL( _python_var_lookup_type.asObject(), PyObjectTemporary( LIST_COPY( _python_list_str_plain_gt_str_plain_lt_str_plain_gte_str_plain_lte_list ) ).asObject() ) && (!( CHECK_IF_TRUE( _python_var_is_multicolumn.asObject() ) )) ) ) )
                {
                    frame_guard.setLineNumber( 1073 );
                    {
                        PyObjectTempKeeper0 call21;
                        _python_var_value.assign1( ( call21.assign( _python_var_get_normalized_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call21.asObject0(), _python_var_raw_value.asObject() ) ) );
                    }
                    {
                        frame_guard.setLineNumber( 1074 );
                        PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), _python_var_sources.asObject() ) ).asObject() ) );
                        while( true )
                        {
                            {
                                frame_guard.setLineNumber( 1074 );
                                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                if ( _tmp_unpack_1 == NULL )
                                {
                                    break;
                                }
                                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                                {
                                    frame_guard.setLineNumber( 1074 );
                                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                    _python_var_index.assign0( _python_tmp_element_1.asObject() );
                                    _python_var_source.assign0( _python_tmp_element_2.asObject() );
                                }
                            }
                            frame_guard.setLineNumber( 1075 );
                            {
                                PyObjectTempKeeper0 call27;
                                PyObjectTempKeeper0 call28;
                                PyObjectTempKeeper1 call29;
                                PyObjectTempKeeper1 call36;
                                PyObjectTempKeeper1 call37;
                                PyObjectTempKeeper1 make_tuple33;
                                PyObjectTempKeeper0 make_tuple34;
                                PyObjectTempKeeper0 subscr23;
                                PyObjectTempKeeper0 subscr25;
                                PyObjectTempKeeper0 subscr31;
                                DECREASE_REFCOUNT( ( call36.assign( LOOKUP_ATTRIBUTE( _python_var_root_constraint.asObject(), _python_str_plain_add ) ), call37.assign( ( make_tuple33.assign( ( call27.assign( _python_var_Constraint.asObject() ), call28.assign( _python_var_alias.asObject() ), call29.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( subscr23.assign( _python_var_targets.asObject() ), LOOKUP_SUBSCRIPT( subscr23.asObject0(), _python_var_index.asObject() ) ) ).asObject(), _python_str_plain_column ) ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), call28.asObject0(), call29.asObject0(), PyObjectTemporary( ( subscr25.assign( _python_var_sources.asObject() ), LOOKUP_SUBSCRIPT( subscr25.asObject0(), _python_var_index.asObject() ) ) ).asObject() ) ) ), make_tuple34.assign( _python_var_lookup_type.asObject() ), MAKE_TUPLE3( make_tuple33.asObject0(), make_tuple34.asObject0(), PyObjectTemporary( ( subscr31.assign( _python_var_value.asObject() ), LOOKUP_SUBSCRIPT( subscr31.asObject0(), _python_var_index.asObject() ) ) ).asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call36.asObject0(), call37.asObject0(), _python_var_AND.asObject() ) ) );
                            }

                           CONSIDER_THREADING();
                        }
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 1078 );
                    if ( ( SEQUENCE_CONTAINS_BOOL( _python_var_lookup_type.asObject(), PyObjectTemporary( LIST_COPY( _python_list_str_plain_range_str_plain_in_list ) ).asObject() ) && (!( CHECK_IF_TRUE( _python_var_is_multicolumn.asObject() ) )) ) )
                    {
                        frame_guard.setLineNumber( 1079 );
                        _python_var_values.assign1( impl_listcontr_4_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( MAKE_ITERATOR( _python_var_raw_value.asObject() ), _python_var_get_normalized_value, _python_var_value ) );
                        frame_guard.setLineNumber( 1080 );
                        _python_var_value.assign1( impl_listcontr_5_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( MAKE_ITERATOR( _python_var_values.asObject() ), _python_var_val ) );
                        frame_guard.setLineNumber( 1081 );
                        {
                            PyObjectTempKeeper0 call39;
                            PyObjectTempKeeper0 call40;
                            PyObjectTempKeeper1 call41;
                            PyObjectTempKeeper1 call46;
                            PyObjectTempKeeper1 call47;
                            PyObjectTempKeeper1 make_tuple43;
                            PyObjectTempKeeper0 make_tuple44;
                            DECREASE_REFCOUNT( ( call46.assign( LOOKUP_ATTRIBUTE( _python_var_root_constraint.asObject(), _python_str_plain_add ) ), call47.assign( ( make_tuple43.assign( ( call39.assign( _python_var_Constraint.asObject() ), call40.assign( _python_var_alias.asObject() ), call41.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_targets.asObject(), _python_int_0, 0 ) ).asObject(), _python_str_plain_column ) ), CALL_FUNCTION_WITH_ARGS( call39.asObject0(), call40.asObject0(), call41.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_sources.asObject(), _python_int_0, 0 ) ).asObject() ) ) ), make_tuple44.assign( _python_var_lookup_type.asObject() ), MAKE_TUPLE3( make_tuple43.asObject0(), make_tuple44.asObject0(), _python_var_value.asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call46.asObject0(), call47.asObject0(), _python_var_AND.asObject() ) ) );
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 1083 );
                        if ( RICH_COMPARE_BOOL_EQ( _python_var_lookup_type.asObject(), _python_str_plain_in ) )
                        {
                            frame_guard.setLineNumber( 1084 );
                            _python_var_values.assign1( impl_listcontr_6_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( MAKE_ITERATOR( _python_var_raw_value.asObject() ), _python_var_get_normalized_value, _python_var_value ) );
                            {
                                frame_guard.setLineNumber( 1085 );
                                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_values.asObject() ) );
                                while( true )
                                {
                                    {
                                        frame_guard.setLineNumber( 1085 );
                                        PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                        if ( _tmp_unpack_2 == NULL )
                                        {
                                            break;
                                        }
                                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                                        _python_var_value.assign0( _python_tmp_iter_value.asObject() );
                                    }
                                    frame_guard.setLineNumber( 1086 );
                                    _python_var_value_constraint.assign1( CALL_FUNCTION_NO_ARGS( _python_var_constraint_class.asObject() ) );
                                    {
                                        frame_guard.setLineNumber( 1087 );
                                        PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), _python_var_targets.asObject() ) ).asObject() ) );
                                        while( true )
                                        {
                                            {
                                                frame_guard.setLineNumber( 1087 );
                                                PyObject *_tmp_unpack_3 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                                if ( _tmp_unpack_3 == NULL )
                                                {
                                                    break;
                                                }
                                                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_3 );
                                                {
                                                    frame_guard.setLineNumber( 1087 );
                                                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                                    _python_var_index.assign0( _python_tmp_element_1.asObject() );
                                                    _python_var_target.assign0( _python_tmp_element_2.asObject() );
                                                }
                                            }
                                            frame_guard.setLineNumber( 1088 );
                                            {
                                                PyObjectTempKeeper0 call51;
                                                PyObjectTempKeeper0 call52;
                                                PyObjectTempKeeper1 call53;
                                                PyObjectTempKeeper1 call60;
                                                PyObjectTempKeeper1 call61;
                                                PyObjectTempKeeper1 make_tuple57;
                                                PyObjectTempKeeper0 subscr49;
                                                PyObjectTempKeeper0 subscr55;
                                                DECREASE_REFCOUNT( ( call60.assign( LOOKUP_ATTRIBUTE( _python_var_value_constraint.asObject(), _python_str_plain_add ) ), call61.assign( ( make_tuple57.assign( ( call51.assign( _python_var_Constraint.asObject() ), call52.assign( _python_var_alias.asObject() ), call53.assign( LOOKUP_ATTRIBUTE( _python_var_target.asObject(), _python_str_plain_column ) ), CALL_FUNCTION_WITH_ARGS( call51.asObject0(), call52.asObject0(), call53.asObject0(), PyObjectTemporary( ( subscr49.assign( _python_var_sources.asObject() ), LOOKUP_SUBSCRIPT( subscr49.asObject0(), _python_var_index.asObject() ) ) ).asObject() ) ) ), MAKE_TUPLE3( make_tuple57.asObject0(), _python_str_plain_exact, PyObjectTemporary( ( subscr55.assign( _python_var_value.asObject() ), LOOKUP_SUBSCRIPT( subscr55.asObject0(), _python_var_index.asObject() ) ) ).asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call60.asObject0(), call61.asObject0(), _python_var_AND.asObject() ) ) );
                                            }

                                           CONSIDER_THREADING();
                                        }
                                    }
                                    frame_guard.setLineNumber( 1091 );
                                    {
                                        PyObjectTempKeeper1 call63;
                                        PyObjectTempKeeper0 call64;
                                        DECREASE_REFCOUNT( ( call63.assign( LOOKUP_ATTRIBUTE( _python_var_root_constraint.asObject(), _python_str_plain_add ) ), call64.assign( _python_var_value_constraint.asObject() ), CALL_FUNCTION_WITH_ARGS( call63.asObject0(), call64.asObject0(), _python_var_OR.asObject() ) ) );
                                    }

                                   CONSIDER_THREADING();
                                }
                            }
                        }
                        else
                        {
                            frame_guard.setLineNumber( 1093 );
                            {
                                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_TypeError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_7d44d327c848245c8552d692ff5fdc26, _python_var_lookup_type.asObject() ) ).asObject() ) ).asObject() ) );
                                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                            }
                        }
                    }
                }
            }
        }
        frame_guard.setLineNumber( 1094 );
        return _python_var_root_constraint.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_raw_value.updateLocalsDict( _python_var_lookup_type.updateLocalsDict( _python_var_sources.updateLocalsDict( _python_var_targets.updateLocalsDict( _python_var_alias.updateLocalsDict( _python_var_constraint_class.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_val.updateLocalsDict( _python_var_target.updateLocalsDict( _python_var_value_constraint.updateLocalsDict( _python_var_values.updateLocalsDict( _python_var_source.updateLocalsDict( _python_var_index.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_is_multicolumn.updateLocalsDict( _python_var_get_normalized_value.updateLocalsDict( _python_var_root_constraint.updateLocalsDict( _python_var_OR.updateLocalsDict( _python_var_AND.updateLocalsDict( _python_var_Constraint.updateLocalsDict( _python_var_SubqueryConstraint.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_constraint_class = NULL;
    PyObject *_python_par_alias = NULL;
    PyObject *_python_par_targets = NULL;
    PyObject *_python_par_sources = NULL;
    PyObject *_python_par_lookup_type = NULL;
    PyObject *_python_par_raw_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_lookup_constraint() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_constraint_class == key )
            {
                if (unlikely( _python_par_constraint_class ))
                {
                    PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'constraint_class'" );
                    goto error_exit;
                }

                _python_par_constraint_class = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_alias == key )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_targets == key )
            {
                if (unlikely( _python_par_targets ))
                {
                    PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'targets'" );
                    goto error_exit;
                }

                _python_par_targets = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_sources == key )
            {
                if (unlikely( _python_par_sources ))
                {
                    PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'sources'" );
                    goto error_exit;
                }

                _python_par_sources = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_lookup_type == key )
            {
                if (unlikely( _python_par_lookup_type ))
                {
                    PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'lookup_type'" );
                    goto error_exit;
                }

                _python_par_lookup_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_raw_value == key )
            {
                if (unlikely( _python_par_raw_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'raw_value'" );
                    goto error_exit;
                }

                _python_par_raw_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_constraint_class, key ) )
            {
                if (unlikely( _python_par_constraint_class ))
                {
                    PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'constraint_class'" );
                    goto error_exit;
                }

                _python_par_constraint_class = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_alias, key ) )
            {
                if (unlikely( _python_par_alias ))
                {
                    PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'alias'" );
                    goto error_exit;
                }

                _python_par_alias = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_targets, key ) )
            {
                if (unlikely( _python_par_targets ))
                {
                    PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'targets'" );
                    goto error_exit;
                }

                _python_par_targets = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_sources, key ) )
            {
                if (unlikely( _python_par_sources ))
                {
                    PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'sources'" );
                    goto error_exit;
                }

                _python_par_sources = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_lookup_type, key ) )
            {
                if (unlikely( _python_par_lookup_type ))
                {
                    PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'lookup_type'" );
                    goto error_exit;
                }

                _python_par_lookup_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_raw_value, key ) )
            {
                if (unlikely( _python_par_raw_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'raw_value'" );
                    goto error_exit;
                }

                _python_par_raw_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_lookup_constraint() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 7 ))
    {
        if ( 7 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_lookup_constraint() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_lookup_constraint() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_lookup_constraint() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_lookup_constraint() takes exactly %d arguments (%zd given)", 7, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 7 == 7 )
            {
                PyErr_Format( PyExc_TypeError, "get_lookup_constraint() takes exactly %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_lookup_constraint() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#else
            if ( 7 == 7 )
            {
                PyErr_Format( PyExc_TypeError, "get_lookup_constraint() takes %d positional arguments but %zd were given", 7, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_lookup_constraint() takes at most %d positional arguments (%zd given)", 7, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 7 ))
    {
        if ( 7 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_lookup_constraint() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_lookup_constraint() takes exactly %d non-keyword arguments (%zd given)", 7, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 7 == 7 )
                {
                    PyErr_Format( PyExc_TypeError, "get_lookup_constraint() takes exactly %d arguments (%zd given)", 7, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_lookup_constraint() takes at least %d arguments (%zd given)", 7, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 7 ? args_given : 7;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_constraint_class != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'constraint_class'" );
             goto error_exit;
         }

        _python_par_constraint_class = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_alias != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'alias'" );
             goto error_exit;
         }

        _python_par_alias = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_targets != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'targets'" );
             goto error_exit;
         }

        _python_par_targets = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_sources != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'sources'" );
             goto error_exit;
         }

        _python_par_sources = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_lookup_type != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'lookup_type'" );
             goto error_exit;
         }

        _python_par_lookup_type = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_raw_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_lookup_constraint() got multiple values for keyword argument 'raw_value'" );
             goto error_exit;
         }

        _python_par_raw_value = INCREASE_REFCOUNT( args[ 6 ] );
    }


    return impl_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_constraint_class, _python_par_alias, _python_par_targets, _python_par_sources, _python_par_lookup_type, _python_par_raw_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_constraint_class );
    Py_XDECREF( _python_par_alias );
    Py_XDECREF( _python_par_targets );
    Py_XDECREF( _python_par_sources );
    Py_XDECREF( _python_par_lookup_type );
    Py_XDECREF( _python_par_raw_value );

    return NULL;
}

static PyObject *dparse_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 7)
    {
        return impl_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_value )
{
    // The context of the function.
    struct _context_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related_t *_python_context = (struct _context_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_Model( _python_str_plain_Model );
    PyObjectLocalVariable _python_var_value_list( _python_str_plain_value_list );
    PyObjectLocalVariable _python_var_source( _python_str_plain_source );

    // Actual function code.
    static PyFrameObject *frame_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_623504230943f4573840f5a325b8662a, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1049 );
        _python_var_Model.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_cb8fece6bec5decd96c3feee6d1288d4, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, PyObjectTemporary( _python_var_value.updateLocalsDict( _python_context->python_closure_sources.updateLocalsDict( _python_var_source.updateLocalsDict( _python_var_value_list.updateLocalsDict( _python_var_Model.updateLocalsDict( PyDict_New() ) ) ) ) ) ).asObject(), _python_list_str_plain_Model_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_Model ) );
        frame_guard.setLineNumber( 1050 );
        {
            PyObjectTempKeeper0 isinstance10;
            if ( ( isinstance10.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance10.asObject0(), _python_var_Model.asObject() ) ) )
        {
            _python_var_value_list.assign1( PyList_New( 0 ) );
            {
                frame_guard.setLineNumber( 1052 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_context->python_closure_sources.asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 1052 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_var_source.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 1054 );
                    while( true )
                    {
                        frame_guard.setLineNumber( 1054 );
                        {
                            PyObjectTempKeeper0 isinstance1;
                            if ( (!( (!( ( isinstance1.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_source.asObject(), _python_str_plain_model ) ).asObject() ) ) )) )) )
                        {
                            frame_guard.setLineNumber( 1054 );
                            break;
                        }
                        }
                        frame_guard.setLineNumber( 1055 );
                        {
                            PyObjectTempKeeper1 call3;
                            _python_var_source.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_source.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_field ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_source.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_field_name ) ).asObject() ) ) );
                        }

                       CONSIDER_THREADING();
                    }
                    frame_guard.setLineNumber( 1056 );
                    {
                        PyObjectTempKeeper1 call8;
                        PyObjectTempKeeper0 getattr5;
                        DECREASE_REFCOUNT( ( call8.assign( LOOKUP_ATTRIBUTE( _python_var_value_list.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), PyObjectTemporary( ( getattr5.assign( _python_var_value.asObject() ), BUILTIN_GETATTR( getattr5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_source.asObject(), _python_str_plain_attname ) ).asObject(), NULL ) ) ).asObject() ) ) );
                    }

                   CONSIDER_THREADING();
                }
            }
            frame_guard.setLineNumber( 1057 );
            return TO_TUPLE( _python_var_value_list.asObject() );
        }
        else
        {
            frame_guard.setLineNumber( 1058 );
            if ( (!( BUILTIN_ISINSTANCE_BOOL( _python_var_value.asObject(), LOOKUP_BUILTIN( _python_str_plain_tuple ) ) )) )
            {
                frame_guard.setLineNumber( 1059 );
                return MAKE_TUPLE1( _python_var_value.asObject() );
            }
        }
        }
        frame_guard.setLineNumber( 1060 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_context->python_closure_sources.updateLocalsDict( _python_var_source.updateLocalsDict( _python_var_value_list.updateLocalsDict( _python_var_Model.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_normalized_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_normalized_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_normalized_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_normalized_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_normalized_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_normalized_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_normalized_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_normalized_value() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_normalized_value() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_normalized_value() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_normalized_value() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_normalized_value() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_normalized_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_normalized_value() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_normalized_value() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_normalized_value() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_normalized_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_target )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1065 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1065 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_target.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_target.asObject(), _python_str_plain_column ) ).asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_3_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_source )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1066 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1066 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_source.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_source.asObject(), _python_str_plain_name ) ).asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_4_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_get_normalized_value,PyObjectLocalVariable &python_closure_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1079 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1079 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_value.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call1.assign( python_closure_get_normalized_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), python_closure_value.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_5_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_val )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1080 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1080 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_val.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( python_closure_val.asObject(), _python_int_0, 0 ) ).asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_6_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_get_normalized_value,PyObjectLocalVariable &python_closure_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1084 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1084 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_value.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call1.assign( python_closure_get_normalized_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), python_closure_value.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );

    // Actual function code.
    static PyFrameObject *frame_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_9c321fa8e9dedf3bf686bf1e08fca951, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1098 );
        return TO_TUPLE( PyObjectTemporary( impl_listcontr_1_of_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_local_related_fields ) ).asObject() ), _python_var_field ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_field.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "attnames() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "attnames() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "attnames() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "attnames() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "attnames() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "attnames() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "attnames() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "attnames() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "attnames() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "attnames() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "attnames() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "attnames() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "attnames() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "attnames() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "attnames() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "attnames() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "attnames() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_field )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1098 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1098 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_field.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_field.asObject(), _python_str_plain_attname ) ).asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );

    // Actual function code.
    static PyFrameObject *frame_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_781cb5468a94a0444ee4f1bceb69e8ce, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1101 );
        return TO_TUPLE( PyObjectTemporary( impl_listcontr_1_of_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_local_related_fields ) ).asObject() ), _python_var_field ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_field.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_defaults() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_defaults() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_defaults() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_defaults() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_defaults() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_defaults() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_defaults() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_defaults() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_defaults() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_defaults() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_defaults() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_defaults() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_defaults() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_defaults() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_defaults() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_defaults() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_defaults() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_field )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1101 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1101 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_field.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_field.asObject(), _python_str_plain_get_default ) ).asObject() ) ).asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_cls, PyObject *_python_par_name, PyObject *_python_par_virtual_only )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_virtual_only( _python_str_plain_virtual_only, _python_par_virtual_only );

    // Actual function code.
    static PyFrameObject *frame_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_a4cb6276cd8795dc1d13ae4dc5dcdf7f, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1104 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper1 call6;
            PyObjectTempKeeper0 make_tuple3;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields__related_ForeignObject.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_contribute_to_class ) ), call6.assign( ( make_tuple3.assign( _python_var_cls.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), _python_var_name.asObject() ) ) ), CALL_FUNCTION( call5.asObject0(), call6.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_virtual_only.asObject(), _python_str_plain_virtual_only ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 1105 );
        {
            PyObjectTempKeeper0 call8;
            PyObjectTempKeeper0 setattr10;
            PyObjectTempKeeper1 setattr11;
            ( ( setattr10.assign( _python_var_cls.asObject() ), setattr11.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ), BUILTIN_SETATTR( setattr10.asObject0(), setattr11.asObject0(), PyObjectTemporary( ( call8.assign( _mvar_django__db__models__fields__related_ReverseSingleRelatedObjectDescriptor.asObject0() ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_var_self.asObject() ) ) ).asObject() ) ), Py_None );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_virtual_only.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_cls.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_cls = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_virtual_only = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_virtual_only == key )
            {
                if (unlikely( _python_par_virtual_only ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'virtual_only'" );
                    goto error_exit;
                }

                _python_par_virtual_only = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_virtual_only, key ) )
            {
                if (unlikely( _python_par_virtual_only ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'virtual_only'" );
                    goto error_exit;
                }

                _python_par_virtual_only = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "contribute_to_class() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_virtual_only != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'virtual_only'" );
             goto error_exit;
         }

        _python_par_virtual_only = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_virtual_only == NULL )
    {
        _python_par_virtual_only = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_virtual_only );
    }


    return impl_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_cls, _python_par_name, _python_par_virtual_only );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_cls );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_virtual_only );

    return NULL;
}

static PyObject *dparse_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_cls, PyObject *_python_par_related )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );
    PyObjectLocalParameterVariableNoDel _python_var_related( _python_str_plain_related, _python_par_related );

    // Actual function code.
    static PyFrameObject *frame_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
        }

        frame_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_c562271a9b14a08de9bccd536996de3a, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1110 );
        if ( ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_is_hidden ) ).asObject() ) ).asObject() ) )) && (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_related.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_swapped ) ).asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 1111 );
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 setattr3;
                PyObjectTempKeeper1 setattr4;
                ( ( setattr3.assign( _python_var_cls.asObject() ), setattr4.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_related.asObject(), _python_str_plain_get_accessor_name ) ).asObject() ) ), BUILTIN_SETATTR( setattr3.asObject0(), setattr4.asObject0(), PyObjectTemporary( ( call1.assign( _mvar_django__db__models__fields__related_ForeignRelatedObjectsDescriptor.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_related.asObject() ) ) ).asObject() ) ), Py_None );
            }
            frame_guard.setLineNumber( 1112 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_limit_choices_to ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 1113 );
                {
                    PyObjectTempKeeper1 call6;
                    DECREASE_REFCOUNT( ( call6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_related_fkey_lookups ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_limit_choices_to ) ).asObject() ) ) );
                }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_related.updateLocalsDict( _python_var_cls.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related );
           frame_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_cls = NULL;
    PyObject *_python_par_related = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_related == key )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_related, key ) )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "contribute_to_related_class() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_related != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'related'" );
             goto error_exit;
         }

        _python_par_related = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_cls, _python_par_related );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_cls );
    Py_XDECREF( _python_par_related );

    return NULL;
}

static PyObject *dparse_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_16_ForeignKey_of_module_django__db__models__fields__related(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_empty_strings_allowed( _python_str_plain_empty_strings_allowed );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_related_field( _python_str_plain_related_field );
    PyObjectLocalVariable _python_var_get_reverse_path_info( _python_str_plain_get_reverse_path_info );
    PyObjectLocalVariable _python_var_validate( _python_str_plain_validate );
    PyObjectLocalVariable _python_var_get_attname( _python_str_plain_get_attname );
    PyObjectLocalVariable _python_var_get_attname_column( _python_str_plain_get_attname_column );
    PyObjectLocalVariable _python_var_get_validator_unique_lookup_type( _python_str_plain_get_validator_unique_lookup_type );
    PyObjectLocalVariable _python_var_get_default( _python_str_plain_get_default );
    PyObjectLocalVariable _python_var_get_db_prep_save( _python_str_plain_get_db_prep_save );
    PyObjectLocalVariable _python_var_value_to_string( _python_str_plain_value_to_string );
    PyObjectLocalVariable _python_var_contribute_to_related_class( _python_str_plain_contribute_to_related_class );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );
    PyObjectLocalVariable _python_var_db_type( _python_str_plain_db_type );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    _python_var_empty_strings_allowed.assign0( Py_False );
    static PyFrameObject *frame_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_class_16_ForeignKey_of_module_django__db__models__fields__related ) )
    {
        if ( frame_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_16_ForeignKey_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_class_16_ForeignKey_of_module_django__db__models__fields__related );
        }

        frame_class_16_ForeignKey_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_ae85d63354caa78bd45c89b9cfd4e902, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_class_16_ForeignKey_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_class_16_ForeignKey_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1118 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__related__.asObject0(), _python_str_digest_f25aa9033c23ec7d5f64ac2d8d320497 ) ).asObject(), _python_str_plain_invalid ) );
        frame_guard.setLineNumber( 1121 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__related__.asObject0(), _python_str_digest_8a7cba40e7f6dbda043adcaca93f5c63 ) );
        frame_guard.setLineNumber( 1123 );
        _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related( MAKE_TUPLE3( Py_None, _mvar_django__db__models__fields__related_ManyToOneRel.asObject0(), Py_True ) ) );
        frame_guard.setLineNumber( 1150 );
        _python_var_related_field.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_db_type.updateLocalsDict( _python_var_formfield.updateLocalsDict( _python_var_contribute_to_related_class.updateLocalsDict( _python_var_value_to_string.updateLocalsDict( _python_var_get_db_prep_save.updateLocalsDict( _python_var_get_default.updateLocalsDict( _python_var_get_validator_unique_lookup_type.updateLocalsDict( _python_var_get_attname_column.updateLocalsDict( _python_var_get_attname.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_get_reverse_path_info.updateLocalsDict( _python_var_related_field.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_class_16_ForeignKey_of_module_django__db__models__fields__related );
           frame_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;
        }

        throw;
    }
    _python_var_get_reverse_path_info.assign1( MAKE_FUNCTION_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  ) );
    _python_var_validate.assign1( MAKE_FUNCTION_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  ) );
    _python_var_get_attname.assign1( MAKE_FUNCTION_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  ) );
    _python_var_get_attname_column.assign1( MAKE_FUNCTION_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  ) );
    _python_var_get_validator_unique_lookup_type.assign1( MAKE_FUNCTION_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  ) );
    _python_var_get_default.assign1( MAKE_FUNCTION_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  ) );
    _python_var_get_db_prep_save.assign1( MAKE_FUNCTION_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  ) );
    _python_var_value_to_string.assign1( MAKE_FUNCTION_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  ) );
    _python_var_contribute_to_related_class.assign1( MAKE_FUNCTION_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  ) );
    _python_var_db_type.assign1( MAKE_FUNCTION_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  ) );
    return _python_var_db_type.updateLocalsDict( _python_var_formfield.updateLocalsDict( _python_var_contribute_to_related_class.updateLocalsDict( _python_var_value_to_string.updateLocalsDict( _python_var_get_db_prep_save.updateLocalsDict( _python_var_get_default.updateLocalsDict( _python_var_get_validator_unique_lookup_type.updateLocalsDict( _python_var_get_attname_column.updateLocalsDict( _python_var_get_attname.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_get_reverse_path_info.updateLocalsDict( _python_var_related_field.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_to, PyObject *_python_par_to_field, PyObject *_python_par_rel_class, PyObject *_python_par_db_constraint, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_to( _python_str_plain_to, _python_par_to );
    PyObjectLocalParameterVariableNoDel _python_var_to_field( _python_str_plain_to_field, _python_par_to_field );
    PyObjectLocalParameterVariableNoDel _python_var_rel_class( _python_str_plain_rel_class, _python_par_rel_class );
    PyObjectLocalParameterVariableNoDel _python_var_db_constraint( _python_str_plain_db_constraint, _python_par_db_constraint );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_to_name( _python_str_plain_to_name );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related );
        }

        frame_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_0fd6e19c12cfef84dbcf6e1bf3020f3d, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        {
            PyObject *_python_tmp_unhandled_indicator = Py_True;
            frame_guard.setLineNumber( 1125 );
            try
            {
                frame_guard.setLineNumber( 1126 );
                _python_var_to_name.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_to.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ).asObject(), _python_str_plain_lower ) ).asObject() ) );
            }
            catch ( PythonException &_exception )
            {
                if ( !_exception.hasTraceback() )
                {
                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                }
                else
                {
                    _exception.addTraceback( frame_guard.getFrame0() );
                }

                frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                _exception.toExceptionHandler();

                if ( _exception.matches( PyExc_AttributeError ) )
                {
                    frame_guard.detachFrame();
                    _python_tmp_unhandled_indicator = Py_False;
                    frame_guard.setLineNumber( 1128 );
                    {
                        PyObjectTempKeeper0 isinstance4;
                        if ( (!( ( isinstance4.assign( _python_var_to.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance4.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) )) )
                    {
                        frame_guard.setLineNumber( 1128 );
                        {
                            PyObjectTempKeeper1 make_tuple1;
                            PyObjectTempKeeper0 make_tuple2;
                            {
                                PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_e4b4c475492bb31ee0b4aa5cbdd1863a, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___name__ ) ), make_tuple2.assign( _python_var_to.asObject() ), MAKE_TUPLE3( make_tuple1.asObject0(), make_tuple2.asObject0(), _mvar_django__db__models__fields__related_RECURSIVE_RELATIONSHIP_CONSTANT.asObject0() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                        }
                        }
                    }
                    }
                }
                else
                {
                    PyTracebackObject *tb = _exception.getTraceback();
                    frame_guard.setLineNumber( tb->tb_lineno );
                    _exception.setTraceback( tb->tb_next );
                    tb->tb_next = NULL;

                    throw;
                }
            }
            if ( ( _python_tmp_unhandled_indicator == Py_True ) )
            {
                frame_guard.setLineNumber( 1130 );
                if ( (!( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_to.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_abstract ) ).asObject() ) )) )) )
                {
                    frame_guard.setLineNumber( 1130 );
                    {
                        PyObjectTempKeeper1 make_tuple6;
                        {
                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_3c84e73a4ba692071174b919ae6e6c85, PyObjectTemporary( ( make_tuple6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___name__ ) ), MAKE_TUPLE2( make_tuple6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_to.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ).asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
                frame_guard.setLineNumber( 1134 );
                {
                    PyObjectTempKeeper1 keeper_0;
                    PyObjectTempKeeper0 keeper_1;
                    _python_var_to_field.assign1( ( CHECK_IF_TRUE( keeper_1.assign( _python_var_to_field.asObject() ) ) ? INCREASE_REFCOUNT( keeper_1.asObject0() ) : ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_to.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk ) ) ) ? LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_to.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk ) ).asObject(), _python_str_plain_name ) : keeper_0.asObject() ) ) );
                }
            }
        }
        frame_guard.setLineNumber( 1136 );
        if ( SEQUENCE_CONTAINS_NOT_BOOL( _python_str_plain_db_index, _python_var_kwargs.asObject() ) )
        {
            frame_guard.setLineNumber( 1137 );
            SET_SUBSCRIPT( Py_True, _python_var_kwargs.asObject(), _python_str_plain_db_index );
        }
        frame_guard.setLineNumber( 1139 );
        {
                PyObject *tmp_identifier = _python_var_db_constraint.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_db_constraint );
        }
        frame_guard.setLineNumber( 1141 );
        {
            PyObjectTempKeeper0 call22;
            PyObjectTempKeeper1 call23;
            PyObjectTempKeeper1 call8;
            PyObjectTempKeeper1 make_dict11;
            PyObjectTempKeeper1 make_dict13;
            PyObjectTempKeeper1 make_dict15;
            PyObjectTempKeeper0 make_tuple19;
            PyObjectTempKeeper0 make_tuple20;
            {
                PyObjectTemporary tmp_identifier( ( call22.assign( _python_var_rel_class.asObject() ), call23.assign( ( make_tuple19.assign( _python_var_self.asObject() ), make_tuple20.assign( _python_var_to.asObject() ), MAKE_TUPLE3( make_tuple19.asObject0(), make_tuple20.asObject0(), _python_var_to_field.asObject() ) ) ), CALL_FUNCTION( call22.asObject0(), call23.asObject0(), PyObjectTemporary( ( make_dict11.assign( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_str_plain_related_name, Py_None ) ), make_dict13.assign( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_str_plain_limit_choices_to, Py_None ) ), make_dict15.assign( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_str_plain_parent_link, Py_False ) ), MAKE_DICT4( make_dict11.asObject0(), _python_str_plain_related_name, make_dict13.asObject0(), _python_str_plain_limit_choices_to, make_dict15.asObject0(), _python_str_plain_parent_link, PyObjectTemporary( ( call8.assign( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), _python_str_plain_on_delete, _mvar_django__db__models__fields__related_CASCADE.asObject0() ) ) ).asObject(), _python_str_plain_on_delete ) ) ).asObject() ) ) );
                SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_kwargs.asObject(), _python_str_plain_rel );
        }
        }
        frame_guard.setLineNumber( 1148 );
        {
            PyObjectTempKeeper1 call_tmp30;
            PyObjectTempKeeper1 call_tmp31;
            PyObjectTempKeeper0 make_tuple27;
            PyObjectTempKeeper0 super25;
            DECREASE_REFCOUNT( ( call_tmp30.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super25.assign( _mvar_django__db__models__fields__related_ForeignKey.asObject0() ), BUILTIN_SUPER( super25.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp31.assign( ( make_tuple27.assign( _python_var_to.asObject() ), MAKE_TUPLE3( make_tuple27.asObject0(), PyObjectTemporary( LIST_COPY( _python_list_str_plain_self_list ) ).asObject(), PyObjectTemporary( MAKE_LIST1( _python_var_to_field.asObject1() ) ).asObject() ) ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp30.asObject(), call_tmp31.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_db_constraint.updateLocalsDict( _python_var_rel_class.updateLocalsDict( _python_var_to_field.updateLocalsDict( _python_var_to.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_to_name.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related );
           frame_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_to = NULL;
    PyObject *_python_par_to_field = NULL;
    PyObject *_python_par_rel_class = NULL;
    PyObject *_python_par_db_constraint = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument to was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_to );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_to == NULL );

            _python_par_to = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_to );

            kw_found += 1;
        }
    }

    // Check if argument to_field was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_to_field );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_to_field == NULL );

            _python_par_to_field = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_to_field );

            kw_found += 1;
        }
    }

    // Check if argument rel_class was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_rel_class );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_rel_class == NULL );

            _python_par_rel_class = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_rel_class );

            kw_found += 1;
        }
    }

    // Check if argument db_constraint was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_db_constraint );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_db_constraint == NULL );

            _python_par_db_constraint = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_db_constraint );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_to != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to'" );
             goto error_exit;
         }

        _python_par_to = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_to_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to_field'" );
             goto error_exit;
         }

        _python_par_to_field = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_rel_class != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'rel_class'" );
             goto error_exit;
         }

        _python_par_rel_class = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_db_constraint != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'db_constraint'" );
             goto error_exit;
         }

        _python_par_db_constraint = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_to_field == NULL )
    {
        _python_par_to_field = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_to_field );
    }
    if ( _python_par_rel_class == NULL )
    {
        _python_par_rel_class = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_rel_class );
    }
    if ( _python_par_db_constraint == NULL )
    {
        _python_par_db_constraint = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_db_constraint );
    }


    return impl_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_to, _python_par_to_field, _python_par_rel_class, _python_par_db_constraint, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_to );
    Py_XDECREF( _python_par_to_field );
    Py_XDECREF( _python_par_rel_class );
    Py_XDECREF( _python_par_db_constraint );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6)
    {
        return impl_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
        }

        frame_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_92fef04af27b9fde2e76e7ebdef3d057, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1152 );
        return LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_foreign_related_fields ) ).asObject(), _python_int_0, 0 );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
           frame_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "related_field() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "related_field() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "related_field() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "related_field() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "related_field() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "related_field() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "related_field() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "related_field() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "related_field() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "related_field() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "related_field() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "related_field() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "related_field() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "related_field() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "related_field() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "related_field() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "related_field() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_opts( _python_str_plain_opts );
    PyObjectLocalVariable _python_var_from_opts( _python_str_plain_from_opts );
    PyObjectLocalVariable _python_var_pathinfos( _python_str_plain_pathinfos );

    // Actual function code.
    static PyFrameObject *frame_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
        }

        frame_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_e60679a6cda76725d69511d32085489c, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1158 );
        _python_var_opts.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) );
        frame_guard.setLineNumber( 1159 );
        _python_var_from_opts.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) );
        frame_guard.setLineNumber( 1160 );
        {
            PyObjectTempKeeper0 call7;
            PyObjectTempKeeper0 make_tuple1;
            PyObjectTempKeeper0 make_tuple2;
            PyObjectTempKeeper1 make_tuple3;
            PyObjectTempKeeper1 make_tuple4;
            _python_var_pathinfos.assign1( MAKE_LIST1( ( call7.assign( _mvar_django__db__models__fields__related_PathInfo.asObject0() ), CALL_FUNCTION_WITH_POSARGS( call7.asObject0(), PyObjectTemporary( ( make_tuple1.assign( _python_var_from_opts.asObject() ), make_tuple2.assign( _python_var_opts.asObject() ), make_tuple3.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_pk ) ).asObject() ) ), make_tuple4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ), MAKE_TUPLE6( make_tuple1.asObject0(), make_tuple2.asObject0(), make_tuple3.asObject0(), make_tuple4.asObject0(), UNARY_OPERATION( UNARY_NOT, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_unique ) ).asObject() ), Py_False ) ) ).asObject() ) ) ) );
        }
        frame_guard.setLineNumber( 1161 );
        return _python_var_pathinfos.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_pathinfos.updateLocalsDict( _python_var_from_opts.updateLocalsDict( _python_var_opts.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
           frame_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_reverse_path_info() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_reverse_path_info() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_reverse_path_info() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_reverse_path_info() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_model_instance )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_model_instance( _python_str_plain_model_instance, _python_par_model_instance );
    PyObjectLocalVariable _python_var_using( _python_str_plain_using );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );

    // Actual function code.
    static PyFrameObject *frame_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
        }

        frame_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_e860ffd75e513f8d38247dc0e2ec5c85, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1164 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_parent_link ) ).asObject() ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 1166 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields__related_ForeignKey.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_validate ) ), call4.assign( _python_var_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_model_instance.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1167 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 1170 );
        {
            PyObjectTempKeeper1 call6;
            PyObjectTempKeeper1 call7;
            _python_var_using.assign1( ( call6.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_router.asObject0(), _python_str_plain_db_for_read ) ), call7.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_model_instance.asObject(), _python_str_plain___class__ ) ).asObject() ) ), CALL_FUNCTION( call6.asObject0(), call7.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_model_instance.asObject(), _python_str_plain_instance ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 1171 );
        {
            PyObjectTempKeeper1 call9;
            PyObjectTempKeeper1 call_tmp13;
            PyObjectTempKeeper0 make_dict11;
            _python_var_qs.assign1( ( call_tmp13.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call9.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__default_manager ) ).asObject(), _python_str_plain_using ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_var_using.asObject() ) ) ).asObject(), _python_str_plain_filter ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp13.asObject(), ( make_dict11.assign( _python_var_value.asObject() ), MAKE_DICT1( make_dict11.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_field_name ) ).asObject() ) ) ) ) );
        }
        frame_guard.setLineNumber( 1174 );
        {
            PyObjectTempKeeper1 call15;
            _python_var_qs.assign1( ( call15.assign( LOOKUP_ATTRIBUTE( _python_var_qs.asObject(), _python_str_plain_complex_filter ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_limit_choices_to ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 1175 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_qs.asObject(), _python_str_plain_exists ) ).asObject() ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 1176 );
            {
                PyObjectTempKeeper1 call23;
                PyObjectTempKeeper1 make_dict17;
                PyObjectTempKeeper1 op21;
                {
                    PyObjectTemporary tmp_exception_type( ( call23.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call23.asObject0(), PyObjectTemporary( ( op21.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_str_plain_invalid ) ), BINARY_OPERATION_REMAINDER( op21.asObject0(), PyObjectTemporary( ( make_dict17.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_verbose_name ) ), MAKE_DICT2( make_dict17.asObject0(), _python_str_plain_model, _python_var_value.asObject(), _python_str_plain_pk ) ) ).asObject() ) ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_model_instance.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_qs.updateLocalsDict( _python_var_using.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
           frame_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_model_instance = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "validate() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model_instance == key )
            {
                if (unlikely( _python_par_model_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'model_instance'" );
                    goto error_exit;
                }

                _python_par_model_instance = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model_instance, key ) )
            {
                if (unlikely( _python_par_model_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'model_instance'" );
                    goto error_exit;
                }

                _python_par_model_instance = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "validate() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "validate() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_model_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'model_instance'" );
             goto error_exit;
         }

        _python_par_model_instance = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_value, _python_par_model_instance );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_model_instance );

    return NULL;
}

static PyObject *dparse_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
        }

        frame_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_5c13a23d2c97d9315b958f4e27b9fbed, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1180 );
        return BINARY_OPERATION_REMAINDER( _python_str_digest_81acbcb7731349929ebc72695ced4b37, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
           frame_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_attname() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_attname() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_attname() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_attname() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_attname() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_attname() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_attname() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_attname() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_attname() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_attname() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_attname() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_attname() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_attname() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_attname() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_attname() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_attname() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_attname() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_attname( _python_str_plain_attname );
    PyObjectLocalVariable _python_var_column( _python_str_plain_column );

    // Actual function code.
    static PyFrameObject *frame_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
        }

        frame_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_b02784da14320529e493f165e94be0ce, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1183 );
        _python_var_attname.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_attname ) ).asObject() ) );
        frame_guard.setLineNumber( 1184 );
        {
            PyObjectTempKeeper1 keeper_0;
            _python_var_column.assign0( ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db_column ) ) ) ? PyObjectTemporary( keeper_0.asObject() ).asObject() : _python_var_attname.asObject() ) );
        }
        frame_guard.setLineNumber( 1185 );
        {
            PyObjectTempKeeper0 make_tuple1;
            return ( make_tuple1.assign( _python_var_attname.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_column.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_column.updateLocalsDict( _python_var_attname.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
           frame_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_attname_column() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_attname_column() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_attname_column() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_attname_column() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_attname_column() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_attname_column() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
        }

        frame_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_5478e3c1a57adb721dd8dfdd8e986526, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1188 );
        {
            PyObjectTempKeeper1 make_tuple1;
            return BINARY_OPERATION_REMAINDER( _python_str_digest_6c7e2004db7e8bf2e1a2e61f7c097470, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_field ) ).asObject(), _python_str_plain_name ) ).asObject() ) ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
           frame_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_validator_unique_lookup_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_field_default( _python_str_plain_field_default );

    // Actual function code.
    static PyFrameObject *frame_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
        }

        frame_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_9a5ab59e3c58bbdcf07acc70d59a53cf, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1192 );
        {
            PyObjectTempKeeper0 super1;
            _python_var_field_default.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields__related_ForeignKey.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_get_default ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 1193 );
        {
            PyObjectTempKeeper0 isinstance6;
            if ( ( isinstance6.assign( _python_var_field_default.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 1194 );
            {
                PyObjectTempKeeper0 getattr3;
                return ( getattr3.assign( _python_var_field_default.asObject() ), BUILTIN_GETATTR( getattr3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_field ) ).asObject(), _python_str_plain_attname ) ).asObject(), NULL ) );
            }
        }
        }
        frame_guard.setLineNumber( 1195 );
        return _python_var_field_default.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_field_default.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
           frame_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_default() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_default() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_default() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_default() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_default() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_default() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_default() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_default() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_default() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_default() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_default() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_default() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_default() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_default() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_default() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_default() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_default() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_connection )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );

    // Actual function code.
    static PyFrameObject *frame_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
        }

        frame_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_a987a67ce52c817589cb3163acca428c, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1198 );
        if ( ( RICH_COMPARE_BOOL_EQ( _python_var_value.asObject(), _python_str_empty ) || RICH_COMPARE_BOOL_EQ( _python_var_value.asObject(), Py_None ) ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        else
        {
            frame_guard.setLineNumber( 1201 );
            {
                PyObjectTempKeeper1 call1;
                PyObjectTempKeeper1 call2;
                return ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_field ) ).asObject(), _python_str_plain_get_db_prep_save ) ), call2.assign( MAKE_TUPLE1( _python_var_value.asObject() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_connection.asObject(), _python_str_plain_connection ) ).asObject() ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_connection.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
           frame_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_connection = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_db_prep_save() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_value, _python_par_connection );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_connection );

    return NULL;
}

static PyObject *dparse_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_obj( _python_str_plain_obj, _python_par_obj );
    PyObjectLocalVariable _python_var_choice_list( _python_str_plain_choice_list );

    // Actual function code.
    static PyFrameObject *frame_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
        }

        frame_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_4b28f9aae0df14459ccd165ce9b5bc24, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1205 );
        if ( (!( CHECK_IF_TRUE( _python_var_obj.asObject() ) )) )
        {
            frame_guard.setLineNumber( 1210 );
            if ( ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_blank ) ).asObject() ) )) && CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ).asObject() ) ) )
            {
                frame_guard.setLineNumber( 1211 );
                _python_var_choice_list.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_choices_default ) ).asObject() ) );
                frame_guard.setLineNumber( 1212 );
                if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( BUILTIN_LEN( _python_var_choice_list.asObject() ) ).asObject(), _python_int_pos_2 ) )
                {
                    frame_guard.setLineNumber( 1213 );
                    {
                        PyObjectTempKeeper0 call1;
                        return ( call1.assign( _mvar_django__db__models__fields__related_smart_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_choice_list.asObject(), _python_int_pos_1, 1 ) ).asObject(), _python_int_0, 0 ) ).asObject() ) );
                    }
                }
            }
        }
        frame_guard.setLineNumber( 1214 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper0 super3;
            return ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields__related_ForeignKey.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_value_to_string ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_obj.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_obj.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_choice_list.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
           frame_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_obj = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_obj == key )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_obj, key ) )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_to_string() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_to_string() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_cls, PyObject *_python_par_related )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );
    PyObjectLocalParameterVariableNoDel _python_var_related( _python_str_plain_related, _python_par_related );

    // Actual function code.
    static PyFrameObject *frame_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
        }

        frame_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_cad9544d570033ae04a5c2994cb6c010, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1217 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields__related_ForeignKey.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_contribute_to_related_class ) ), call4.assign( _python_var_cls.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_related.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1218 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_field_name ) ).asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 1219 );
            {
                    PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_pk ) ).asObject(), _python_str_plain_name ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_field_name );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_related.updateLocalsDict( _python_var_cls.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
           frame_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_cls = NULL;
    PyObject *_python_par_related = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_related == key )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_related, key ) )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "contribute_to_related_class() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_related != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'related'" );
             goto error_exit;
         }

        _python_par_related = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_cls, _python_par_related );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_cls );
    Py_XDECREF( _python_par_related );

    return NULL;
}

static PyObject *dparse_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
        }

        frame_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_fad88bcfdb0593e47f30188b96603946, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1222 );
        _python_var_db.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_str_plain_using, Py_None ) );
        frame_guard.setLineNumber( 1223 );
        {
            PyObjectTempKeeper1 isinstance3;
            if ( ( isinstance3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ), BUILTIN_ISINSTANCE_BOOL( isinstance3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 1224 );
            {
                PyObjectTempKeeper1 make_tuple1;
                {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_9e9ac0a86a6199923c6715166f6f2126, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        }
        frame_guard.setLineNumber( 1227 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper1 call7;
            PyObjectTempKeeper1 make_dict11;
            PyObjectTempKeeper1 make_dict9;
            _python_var_defaults.assign1( ( make_dict9.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_forms.asObject0(), _python_str_plain_ModelChoiceField ) ), make_dict11.assign( ( call7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__default_manager ) ).asObject(), _python_str_plain_using ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_db.asObject() ) ) ).asObject(), _python_str_plain_complex_filter ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_limit_choices_to ) ).asObject() ) ) ), MAKE_DICT3( make_dict9.asObject0(), _python_str_plain_form_class, make_dict11.asObject0(), _python_str_plain_queryset, PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_field_name ) ).asObject(), _python_str_plain_to_field_name ) ) );
        }
        frame_guard.setLineNumber( 1232 );
        {
            PyObjectTempKeeper1 call15;
            DECREASE_REFCOUNT( ( call15.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1233 );
        {
            PyObjectTempKeeper1 call_tmp19;
            PyObjectTempKeeper0 super17;
            return ( call_tmp19.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super17.assign( _mvar_django__db__models__fields__related_ForeignKey.asObject0() ), BUILTIN_SUPER( super17.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp19.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( _python_var_db.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
           frame_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_connection )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );
    PyObjectLocalVariable _python_var_rel_field( _python_str_plain_rel_field );

    // Actual function code.
    static PyFrameObject *frame_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
        }

        frame_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_0878993590556d2097bd72c6e63af90c, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1242 );
        _python_var_rel_field.assign1( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_related_field ) );
        frame_guard.setLineNumber( 1243 );
        {
            PyObjectTempKeeper0 isinstance4;
            PyObjectTempKeeper0 isinstance8;
            PyObjectTempKeeper0 make_tuple6;
            if ( ( ( isinstance4.assign( _python_var_rel_field.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance4.asObject0(), _mvar_django__db__models__fields__related_AutoField.asObject0() ) ) || ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_features ) ).asObject(), _python_str_plain_related_fields_match_type ) ).asObject() ) )) && ( isinstance8.assign( _python_var_rel_field.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance8.asObject0(), PyObjectTemporary( ( make_tuple6.assign( _mvar_django__db__models__fields__related_PositiveIntegerField.asObject0() ), MAKE_TUPLE2( make_tuple6.asObject0(), _mvar_django__db__models__fields__related_PositiveSmallIntegerField.asObject0() ) ) ).asObject() ) ) ) ) )
        {
            frame_guard.setLineNumber( 1247 );
            {
                PyObjectTempKeeper1 call1;
                return ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( _mvar_django__db__models__fields__related_IntegerField.asObject0() ) ).asObject(), _python_str_plain_db_type ) ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_connection.asObject(), _python_str_plain_connection ) ).asObject() ) );
            }
        }
        }
        frame_guard.setLineNumber( 1248 );
        {
            PyObjectTempKeeper1 call10;
            return ( call10.assign( LOOKUP_ATTRIBUTE( _python_var_rel_field.asObject(), _python_str_plain_db_type ) ), CALL_FUNCTION( call10.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_connection.asObject(), _python_str_plain_connection ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_connection.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_rel_field.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related );
           frame_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_connection = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "db_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "db_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "db_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "db_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "db_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "db_type() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "db_type() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "db_type() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "db_type() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "db_type() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "db_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "db_type() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "db_type() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "db_type() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_connection );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_connection );

    return NULL;
}

static PyObject *dparse_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_17_OneToOneField_of_module_django__db__models__fields__related(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_contribute_to_related_class( _python_str_plain_contribute_to_related_class );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );
    PyObjectLocalVariable _python_var_save_form_data( _python_str_plain_save_form_data );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    _python_var___doc__.assign0( _python_str_digest_6799b72b741427811881eea23fbb8cc5 );
    static PyFrameObject *frame_class_17_OneToOneField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_class_17_OneToOneField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_class_17_OneToOneField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_17_OneToOneField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_class_17_OneToOneField_of_module_django__db__models__fields__related );
        }

        frame_class_17_OneToOneField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_7b5b4794f097971e4a142bb01ac4f816, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_class_17_OneToOneField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_class_17_OneToOneField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1258 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__related__.asObject0(), _python_str_digest_9433457184635e3ca9e101507fb51c41 ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_save_form_data.updateLocalsDict( _python_var_formfield.updateLocalsDict( _python_var_contribute_to_related_class.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_17_OneToOneField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_class_17_OneToOneField_of_module_django__db__models__fields__related );
           frame_class_17_OneToOneField_of_module_django__db__models__fields__related = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related(  ) );
    _python_var_contribute_to_related_class.assign1( MAKE_FUNCTION_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related(  ) );
    _python_var_save_form_data.assign1( MAKE_FUNCTION_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related(  ) );
    return _python_var_save_form_data.updateLocalsDict( _python_var_formfield.updateLocalsDict( _python_var_contribute_to_related_class.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_to, PyObject *_python_par_to_field, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_to( _python_str_plain_to, _python_par_to );
    PyObjectLocalParameterVariableNoDel _python_var_to_field( _python_str_plain_to_field, _python_par_to_field );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related );
        }

        frame_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_eedd59f547f80f90dddb3665285b751d, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1261 );
        SET_SUBSCRIPT( Py_True, _python_var_kwargs.asObject(), _python_str_plain_unique );
        frame_guard.setLineNumber( 1262 );
        {
            PyObjectTempKeeper1 call_tmp6;
            PyObjectTempKeeper1 call_tmp7;
            PyObjectTempKeeper0 make_tuple3;
            PyObjectTempKeeper0 make_tuple4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields__related_OneToOneField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp7.assign( ( make_tuple3.assign( _python_var_to.asObject() ), make_tuple4.assign( _python_var_to_field.asObject() ), MAKE_TUPLE3( make_tuple3.asObject0(), make_tuple4.asObject0(), _mvar_django__db__models__fields__related_OneToOneRel.asObject0() ) ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp6.asObject(), call_tmp7.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_to_field.updateLocalsDict( _python_var_to.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related );
           frame_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_to = NULL;
    PyObject *_python_par_to_field = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument to was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_to );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_to == NULL );

            _python_par_to = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_to );

            kw_found += 1;
        }
    }

    // Check if argument to_field was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_to_field );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_to_field == NULL );

            _python_par_to_field = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_to_field );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_to != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to'" );
             goto error_exit;
         }

        _python_par_to = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_to_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to_field'" );
             goto error_exit;
         }

        _python_par_to_field = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_to_field == NULL )
    {
        _python_par_to_field = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_to_field );
    }


    return impl_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_to, _python_par_to_field, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_to );
    Py_XDECREF( _python_par_to_field );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_cls, PyObject *_python_par_related )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );
    PyObjectLocalParameterVariableNoDel _python_var_related( _python_str_plain_related, _python_par_related );

    // Actual function code.
    static PyFrameObject *frame_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related );
        }

        frame_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_1821cae5287129aa8d5931f7bae9de53, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1265 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 setattr3;
            PyObjectTempKeeper1 setattr4;
            ( ( setattr3.assign( _python_var_cls.asObject() ), setattr4.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_related.asObject(), _python_str_plain_get_accessor_name ) ).asObject() ) ), BUILTIN_SETATTR( setattr3.asObject0(), setattr4.asObject0(), PyObjectTemporary( ( call1.assign( _mvar_django__db__models__fields__related_SingleRelatedObjectDescriptor.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_related.asObject() ) ) ).asObject() ) ), Py_None );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_related.updateLocalsDict( _python_var_cls.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related );
           frame_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_cls = NULL;
    PyObject *_python_par_related = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_related == key )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_related, key ) )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "contribute_to_related_class() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_related != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'related'" );
             goto error_exit;
         }

        _python_par_related = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_cls, _python_par_related );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_cls );
    Py_XDECREF( _python_par_related );

    return NULL;
}

static PyObject *dparse_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related );
        }

        frame_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_d32e38f9f80f17e56d5fdeb6be941d79, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1269 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_parent_link ) ).asObject() ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 1271 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper0 super1;
            return ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields__related_OneToOneField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp3.asObject(), _python_var_kwargs.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related );
           frame_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );

    // Actual function code.
    static PyFrameObject *frame_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related );
        }

        frame_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_07a6b1631c6410332afeadc89473b72d, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1274 );
        {
            PyObjectTempKeeper0 isinstance7;
            if ( ( isinstance7.assign( _python_var_data.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance7.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 1275 );
            {
                PyObjectTempKeeper0 setattr1;
                PyObjectTempKeeper1 setattr2;
                ( ( setattr1.assign( _python_var_instance.asObject() ), setattr2.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ), BUILTIN_SETATTR( setattr1.asObject0(), setattr2.asObject0(), _python_var_data.asObject() ) ), Py_None );
            }
        }
        else
        {
            frame_guard.setLineNumber( 1277 );
            {
                PyObjectTempKeeper0 setattr4;
                PyObjectTempKeeper1 setattr5;
                ( ( setattr4.assign( _python_var_instance.asObject() ), setattr5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attname ) ), BUILTIN_SETATTR( setattr4.asObject0(), setattr5.asObject0(), _python_var_data.asObject() ) ), Py_None );
            }
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related );
           frame_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "save_form_data() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "save_form_data() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_field, PyObject *_python_par_klass )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_field( _python_str_plain_field, _python_par_field );
    PyObjectLocalParameterVariableNoDel _python_var_klass( _python_str_plain_klass, _python_par_klass );
    PyObjectLocalVariable _python_var_models( _python_str_plain_models );
    PyObjectLocalVariable _python_var_managed( _python_str_plain_managed );
    PyObjectLocalVariable _python_var_to_model( _python_str_plain_to_model );
    PyObjectLocalVariable _python_var_to( _python_str_plain_to );
    PyObjectLocalVariable _python_var_set_managed( _python_str_plain_set_managed );
    PyObjectLocalVariable _python_var_name( _python_str_plain_name );
    PyObjectLocalVariable _python_var_from_( _python_str_plain_from_ );
    PyObjectLocalVariable _python_var_meta( _python_str_plain_meta );

    // Actual function code.
    static PyFrameObject *frame_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related );
        }

        frame_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_0b7129d899d23d65791eaee25d796e8a, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1281 );
        _python_var_models.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_391c2f4b507ae374cc9606a76384636e, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, PyObjectTemporary( _python_var_klass.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_meta.updateLocalsDict( _python_var_from_.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_set_managed.updateLocalsDict( _python_var_to.updateLocalsDict( _python_var_to_model.updateLocalsDict( _python_var_managed.updateLocalsDict( _python_var_models.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ).asObject(), _python_list_str_plain_models_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_models ) );
        _python_var_managed.assign0( Py_True );
        frame_guard.setLineNumber( 1283 );
        {
            PyObjectTempKeeper1 cmp10;
            PyObjectTempKeeper1 isinstance8;
            if ( ( ( isinstance8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ), BUILTIN_ISINSTANCE_BOOL( isinstance8.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) && ( cmp10.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ), RICH_COMPARE_BOOL_NE( cmp10.asObject0(), _mvar_django__db__models__fields__related_RECURSIVE_RELATIONSHIP_CONSTANT.asObject0() ) ) ) )
        {
            frame_guard.setLineNumber( 1284 );
            _python_var_to_model.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) );
            frame_guard.setLineNumber( 1285 );
            _python_var_to.assign1( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_to_model.asObject(), _python_str_plain_split ) ).asObject(), _python_str_dot ) ).asObject(), _python_int_neg_1, -1 ) );
            _python_var_set_managed.assign1( MAKE_FUNCTION_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related(  ) );
            frame_guard.setLineNumber( 1289 );
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 call2;
                PyObjectTempKeeper0 call3;
                PyObjectTempKeeper0 call4;
                DECREASE_REFCOUNT( ( call1.assign( _mvar_django__db__models__fields__related_add_lazy_relation.asObject0() ), call2.assign( _python_var_klass.asObject() ), call3.assign( _python_var_field.asObject() ), call4.assign( _python_var_to_model.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), call4.asObject0(), _python_var_set_managed.asObject() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 1290 );
            {
                PyObjectTempKeeper1 isinstance6;
                if ( ( isinstance6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ), BUILTIN_ISINSTANCE_BOOL( isinstance6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) )
            {
                frame_guard.setLineNumber( 1291 );
                _python_var_to.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) );
                frame_guard.setLineNumber( 1292 );
                _python_var_to_model.assign0( _python_var_klass.asObject() );
                frame_guard.setLineNumber( 1293 );
                _python_var_managed.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_managed ) );
            }
            else
            {
                frame_guard.setLineNumber( 1295 );
                _python_var_to.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) );
                frame_guard.setLineNumber( 1296 );
                _python_var_to_model.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) );
                frame_guard.setLineNumber( 1297 );
                {
                    PyObjectTempKeeper1 keeper_1;
                    _python_var_managed.assign1( ( CHECK_IF_TRUE( keeper_1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_managed ) ) ) ? keeper_1.asObject() : LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_to_model.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_managed ) ) );
                }
            }
            }
        }
        }
        frame_guard.setLineNumber( 1298 );
        {
            PyObjectTempKeeper1 make_tuple12;
            _python_var_name.assign1( BINARY_OPERATION_REMAINDER( _python_str_digest_2c4280e570e051c9f90f753460217fb9, PyObjectTemporary( ( make_tuple12.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ), MAKE_TUPLE2( make_tuple12.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_name ) ).asObject() ) ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 1299 );
        {
            PyObjectTempKeeper1 cmp14;
            PyObjectTempKeeper0 cmp16;
            if ( ( ( cmp14.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ), RICH_COMPARE_BOOL_EQ( cmp14.asObject0(), _mvar_django__db__models__fields__related_RECURSIVE_RELATIONSHIP_CONSTANT.asObject0() ) ) || ( cmp16.assign( _python_var_to.asObject() ), RICH_COMPARE_BOOL_EQ( cmp16.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 1300 );
            _python_var_from_.assign1( BINARY_OPERATION_REMAINDER( _python_str_digest_9a59adc0844db72bd3c45ec1bde08a26, PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_to.asObject(), _python_str_plain_lower ) ).asObject() ) ).asObject() ) );
            frame_guard.setLineNumber( 1301 );
            _python_var_to.assign1( BINARY_OPERATION_REMAINDER( _python_str_digest_535bca456fda2ccc03eca173ee650dea, PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_to.asObject(), _python_str_plain_lower ) ).asObject() ) ).asObject() ) );
        }
        else
        {
            frame_guard.setLineNumber( 1303 );
            _python_var_from_.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_model_name ) );
            frame_guard.setLineNumber( 1304 );
            _python_var_to.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_to.asObject(), _python_str_plain_lower ) ).asObject() ) );
        }
        }
        frame_guard.setLineNumber( 1305 );
        {
            PyObjectTempKeeper1 call18;
            PyObjectTempKeeper0 make_dict22;
            PyObjectTempKeeper0 make_dict26;
            PyObjectTempKeeper1 make_dict30;
            PyObjectTempKeeper0 make_dict32;
            PyObjectTempKeeper0 make_dict34;
            PyObjectTempKeeper1 make_dict36;
            PyObjectTempKeeper1 make_dict38;
            PyObjectTempKeeper1 make_dict40;
            PyObjectTempKeeper1 make_dict42;
            PyObjectTempKeeper0 make_tuple20;
            _python_var_meta.assign1( BUILTIN_TYPE3( _python_str_digest_429a1979feac8a565a5c2aef69a2e26c, _python_str_plain_Meta, PyObjectTemporary( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) ).asObject(), PyObjectTemporary( ( make_dict30.assign( ( call18.assign( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain__get_m2m_db_table ) ), CALL_FUNCTION_WITH_ARGS( call18.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject() ) ) ), make_dict32.assign( _python_var_managed.asObject() ), make_dict34.assign( _python_var_klass.asObject() ), make_dict36.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_app_label ) ), make_dict38.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_db_tablespace ) ), make_dict40.assign( ( make_tuple20.assign( _python_var_from_.asObject() ), MAKE_TUPLE2( make_tuple20.asObject0(), _python_var_to.asObject() ) ) ), make_dict42.assign( BINARY_OPERATION_REMAINDER( _python_str_digest_cca50c6870416d2576eb83a28f5fe5b5, PyObjectTemporary( ( make_dict22.assign( _python_var_from_.asObject() ), MAKE_DICT2( make_dict22.asObject0(), _python_str_plain_from, _python_var_to.asObject(), _python_str_plain_to ) ) ).asObject() ) ), MAKE_DICT8( make_dict30.asObject0(), _python_str_plain_db_table, make_dict32.asObject0(), _python_str_plain_managed, make_dict34.asObject0(), _python_str_plain_auto_created, make_dict36.asObject0(), _python_str_plain_app_label, make_dict38.asObject0(), _python_str_plain_db_tablespace, make_dict40.asObject0(), _python_str_plain_unique_together, make_dict42.asObject0(), _python_str_plain_verbose_name, PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_781f6ec1e0652e33cffdf8b1949ad266, PyObjectTemporary( ( make_dict26.assign( _python_var_from_.asObject() ), MAKE_DICT2( make_dict26.asObject0(), _python_str_plain_from, _python_var_to.asObject(), _python_str_plain_to ) ) ).asObject() ) ).asObject(), _python_str_plain_verbose_name_plural ) ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 1316 );
        {
            PyObjectTempKeeper1 call52;
            PyObjectTempKeeper1 call53;
            PyObjectTempKeeper1 call61;
            PyObjectTempKeeper1 call62;
            PyObjectTempKeeper1 make_dict46;
            PyObjectTempKeeper1 make_dict48;
            PyObjectTempKeeper1 make_dict55;
            PyObjectTempKeeper1 make_dict57;
            PyObjectTempKeeper0 make_dict64;
            PyObjectTempKeeper1 make_dict66;
            PyObjectTempKeeper1 make_dict68;
            PyObjectTempKeeper0 make_dict69;
            PyObjectTempKeeper1 make_dict70;
            PyObjectTempKeeper1 type372;
            PyObjectTempKeeper1 type373;
            return ( type372.assign( TO_STR( _python_var_name.asObject() ) ), type373.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_models.asObject(), _python_str_plain_Model ) ).asObject() ) ), BUILTIN_TYPE3( _python_str_digest_429a1979feac8a565a5c2aef69a2e26c, type372.asObject0(), type373.asObject0(), PyObjectTemporary( ( make_dict64.assign( _python_var_meta.asObject() ), make_dict66.assign( LOOKUP_ATTRIBUTE( _python_var_klass.asObject(), _python_str_plain___module__ ) ), make_dict68.assign( ( call52.assign( LOOKUP_ATTRIBUTE( _python_var_models.asObject(), _python_str_plain_ForeignKey ) ), call53.assign( MAKE_TUPLE1( _python_var_klass.asObject() ) ), CALL_FUNCTION( call52.asObject0(), call53.asObject0(), PyObjectTemporary( ( make_dict46.assign( BINARY_OPERATION_REMAINDER( _python_str_digest_dd72d5819cbac04b4c6a48627895b12f, _python_var_name.asObject() ) ), make_dict48.assign( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_db_tablespace ) ), MAKE_DICT3( make_dict46.asObject0(), _python_str_plain_related_name, make_dict48.asObject0(), _python_str_plain_db_tablespace, PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_db_constraint ) ).asObject(), _python_str_plain_db_constraint ) ) ).asObject() ) ) ), make_dict69.assign( _python_var_from_.asObject() ), make_dict70.assign( ( call61.assign( LOOKUP_ATTRIBUTE( _python_var_models.asObject(), _python_str_plain_ForeignKey ) ), call62.assign( MAKE_TUPLE1( _python_var_to_model.asObject() ) ), CALL_FUNCTION( call61.asObject0(), call62.asObject0(), PyObjectTemporary( ( make_dict55.assign( BINARY_OPERATION_REMAINDER( _python_str_digest_dd72d5819cbac04b4c6a48627895b12f, _python_var_name.asObject() ) ), make_dict57.assign( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_db_tablespace ) ), MAKE_DICT3( make_dict55.asObject0(), _python_str_plain_related_name, make_dict57.asObject0(), _python_str_plain_db_tablespace, PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_db_constraint ) ).asObject(), _python_str_plain_db_constraint ) ) ).asObject() ) ) ), MAKE_DICT4( make_dict64.asObject0(), _python_str_plain_Meta, make_dict66.asObject0(), _python_str_plain___module__, make_dict68.asObject0(), make_dict69.asObject0(), make_dict70.asObject0(), _python_var_to.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_klass.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_meta.updateLocalsDict( _python_var_from_.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_set_managed.updateLocalsDict( _python_var_to.updateLocalsDict( _python_var_to_model.updateLocalsDict( _python_var_managed.updateLocalsDict( _python_var_models.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related );
           frame_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_field = NULL;
    PyObject *_python_par_klass = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_field == key )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_klass == key )
            {
                if (unlikely( _python_par_klass ))
                {
                    PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() got multiple values for keyword argument 'klass'" );
                    goto error_exit;
                }

                _python_par_klass = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field, key ) )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_klass, key ) )
            {
                if (unlikely( _python_par_klass ))
                {
                    PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() got multiple values for keyword argument 'klass'" );
                    goto error_exit;
                }

                _python_par_klass = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "create_many_to_many_intermediary_model() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() got multiple values for keyword argument 'field'" );
             goto error_exit;
         }

        _python_par_field = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_klass != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "create_many_to_many_intermediary_model() got multiple values for keyword argument 'klass'" );
             goto error_exit;
         }

        _python_par_klass = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related( self, _python_par_field, _python_par_klass );

error_exit:;

    Py_XDECREF( _python_par_field );
    Py_XDECREF( _python_par_klass );

    return NULL;
}

static PyObject *dparse_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_field, PyObject *_python_par_model, PyObject *_python_par_cls )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_field( _python_str_plain_field, _python_par_field );
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );

    // Actual function code.
    static PyFrameObject *frame_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related );
        }

        frame_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_9a4d2e0843356beed72c27be1a97d421, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1288 );
        {
            PyObjectTempKeeper1 keeper_0;
            {
                PyObjectTemporary tmp_identifier( ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_model.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_managed ) ) ) ? keeper_0.asObject() : LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_managed ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_managed );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_cls.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_field.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related );
           frame_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_field = NULL;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_cls = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "set_managed() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_field == key )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "set_managed() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "set_managed() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "set_managed() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field, key ) )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "set_managed() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "set_managed() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "set_managed() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "set_managed() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_managed() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "set_managed() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "set_managed() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_managed() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "set_managed() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_managed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "set_managed() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_managed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "set_managed() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "set_managed() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "set_managed() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "set_managed() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_managed() got multiple values for keyword argument 'field'" );
             goto error_exit;
         }

        _python_par_field = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_managed() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_managed() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related( self, _python_par_field, _python_par_model, _python_par_cls );

error_exit:;

    Py_XDECREF( _python_par_field );
    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_cls );

    return NULL;
}

static PyObject *dparse_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var__get_path_info( _python_str_plain__get_path_info );
    PyObjectLocalVariable _python_var_get_path_info( _python_str_plain_get_path_info );
    PyObjectLocalVariable _python_var_get_reverse_path_info( _python_str_plain_get_reverse_path_info );
    PyObjectLocalVariable _python_var_get_choices_default( _python_str_plain_get_choices_default );
    PyObjectLocalVariable _python_var__get_m2m_db_table( _python_str_plain__get_m2m_db_table );
    PyObjectLocalVariable _python_var__get_m2m_attr( _python_str_plain__get_m2m_attr );
    PyObjectLocalVariable _python_var__get_m2m_reverse_attr( _python_str_plain__get_m2m_reverse_attr );
    PyObjectLocalVariable _python_var_value_to_string( _python_str_plain_value_to_string );
    PyObjectLocalVariable _python_var_contribute_to_class( _python_str_plain_contribute_to_class );
    PyObjectLocalVariable _python_var_contribute_to_related_class( _python_str_plain_contribute_to_related_class );
    PyObjectLocalVariable _python_var_set_attributes_from_rel( _python_str_plain_set_attributes_from_rel );
    PyObjectLocalVariable _python_var_value_from_object( _python_str_plain_value_from_object );
    PyObjectLocalVariable _python_var_save_form_data( _python_str_plain_save_form_data );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_related );
    static PyFrameObject *frame_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_db015968d63cd6a61ca1f230ec669afd, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1325 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__related__.asObject0(), _python_str_digest_044a7bda4dbc88c5c5ae3b95dc716b73 ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_save_form_data.updateLocalsDict( _python_var_value_from_object.updateLocalsDict( _python_var_set_attributes_from_rel.updateLocalsDict( _python_var_contribute_to_related_class.updateLocalsDict( _python_var_contribute_to_class.updateLocalsDict( _python_var_value_to_string.updateLocalsDict( _python_var__get_m2m_reverse_attr.updateLocalsDict( _python_var__get_m2m_attr.updateLocalsDict( _python_var__get_m2m_db_table.updateLocalsDict( _python_var_get_choices_default.updateLocalsDict( _python_var_get_reverse_path_info.updateLocalsDict( _python_var_get_path_info.updateLocalsDict( _python_var__get_path_info.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
    _python_var__get_path_info.assign1( MAKE_FUNCTION_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
    _python_var_get_path_info.assign1( MAKE_FUNCTION_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
    _python_var_get_reverse_path_info.assign1( MAKE_FUNCTION_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
    _python_var_get_choices_default.assign1( MAKE_FUNCTION_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
    _python_var__get_m2m_db_table.assign1( MAKE_FUNCTION_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
    _python_var__get_m2m_attr.assign1( MAKE_FUNCTION_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
    _python_var__get_m2m_reverse_attr.assign1( MAKE_FUNCTION_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
    _python_var_value_to_string.assign1( MAKE_FUNCTION_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
    _python_var_contribute_to_class.assign1( MAKE_FUNCTION_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
    _python_var_contribute_to_related_class.assign1( MAKE_FUNCTION_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
    _python_var_set_attributes_from_rel.assign1( MAKE_FUNCTION_function_12_set_attributes_from_rel_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
    _python_var_value_from_object.assign1( MAKE_FUNCTION_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
    _python_var_save_form_data.assign1( MAKE_FUNCTION_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_save_form_data.updateLocalsDict( _python_var_value_from_object.updateLocalsDict( _python_var_set_attributes_from_rel.updateLocalsDict( _python_var_contribute_to_related_class.updateLocalsDict( _python_var_contribute_to_class.updateLocalsDict( _python_var_value_to_string.updateLocalsDict( _python_var__get_m2m_reverse_attr.updateLocalsDict( _python_var__get_m2m_attr.updateLocalsDict( _python_var__get_m2m_db_table.updateLocalsDict( _python_var_get_choices_default.updateLocalsDict( _python_var_get_reverse_path_info.updateLocalsDict( _python_var_get_path_info.updateLocalsDict( _python_var__get_path_info.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_to, PyObject *_python_par_db_constraint, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_to( _python_str_plain_to, _python_par_to );
    PyObjectLocalParameterVariableNoDel _python_var_db_constraint( _python_str_plain_db_constraint, _python_par_db_constraint );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_38b0635c0a739126d4cc309462a6a9b4, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1328 );
        try
        {
            frame_guard.setLineNumber( 1329 );
            if ( (!( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_to.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_abstract ) ).asObject() ) )) )) )
            {
                frame_guard.setLineNumber( 1329 );
                {
                    PyObjectTempKeeper1 make_tuple6;
                    {
                        PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_3c84e73a4ba692071174b919ae6e6c85, PyObjectTemporary( ( make_tuple6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___name__ ) ), MAKE_TUPLE2( make_tuple6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_to.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ).asObject() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_AttributeError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 1331 );
                {
                    PyObjectTempKeeper0 isinstance4;
                    if ( (!( ( isinstance4.assign( _python_var_to.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance4.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) )) )
                {
                    frame_guard.setLineNumber( 1331 );
                    {
                        PyObjectTempKeeper1 make_tuple1;
                        PyObjectTempKeeper0 make_tuple2;
                        {
                            PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_str_digest_939fb665e84fa492f70cab160b0051ca, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___name__ ) ), make_tuple2.assign( _python_var_to.asObject() ), MAKE_TUPLE3( make_tuple1.asObject0(), make_tuple2.asObject0(), _mvar_django__db__models__fields__related_RECURSIVE_RELATIONSHIP_CONSTANT.asObject0() ) ) ).asObject() ) ).asObject() ) ).asObject() ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
                }
                frame_guard.setLineNumber( 1335 );
                _python_var_to.assign1( TO_STR( _python_var_to.asObject() ) );
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 1337 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_get ) ).asObject(), _python_str_plain_verbose_name, Py_None ) );
                SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_kwargs.asObject(), _python_str_plain_verbose_name );
        }
        frame_guard.setLineNumber( 1338 );
        {
            PyObjectTempKeeper1 call10;
            PyObjectTempKeeper0 call23;
            PyObjectTempKeeper1 call24;
            PyObjectTempKeeper0 cmp8;
            PyObjectTempKeeper1 make_dict13;
            PyObjectTempKeeper1 make_dict15;
            PyObjectTempKeeper1 make_dict17;
            PyObjectTempKeeper1 make_dict19;
            {
                PyObjectTemporary tmp_identifier( ( call23.assign( _mvar_django__db__models__fields__related_ManyToManyRel.asObject0() ), call24.assign( MAKE_TUPLE1( _python_var_to.asObject() ) ), CALL_FUNCTION( call23.asObject0(), call24.asObject0(), PyObjectTemporary( ( make_dict13.assign( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_str_plain_related_name, Py_None ) ), make_dict15.assign( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_str_plain_limit_choices_to, Py_None ) ), make_dict17.assign( ( call10.assign( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), _python_str_plain_symmetrical, PyObjectTemporary( ( cmp8.assign( _python_var_to.asObject() ), RICH_COMPARE_EQ( cmp8.asObject0(), _mvar_django__db__models__fields__related_RECURSIVE_RELATIONSHIP_CONSTANT.asObject0() ) ) ).asObject() ) ) ), make_dict19.assign( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_str_plain_through, Py_None ) ), MAKE_DICT5( make_dict13.asObject0(), _python_str_plain_related_name, make_dict15.asObject0(), _python_str_plain_limit_choices_to, make_dict17.asObject0(), _python_str_plain_symmetrical, make_dict19.asObject0(), _python_str_plain_through, _python_var_db_constraint.asObject(), _python_str_plain_db_constraint ) ) ).asObject() ) ) );
                SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_kwargs.asObject(), _python_str_plain_rel );
        }
        }
        frame_guard.setLineNumber( 1346 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_str_plain_db_table, Py_None ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_db_table );
        }
        frame_guard.setLineNumber( 1347 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT( _python_var_kwargs.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 1348 );
            if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db_table ) ).asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 1348 );
                {
                        PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_str_digest_d22f102a4730e299f41e681be8ddfc6e ) ).asObject() ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
            }
        }
        frame_guard.setLineNumber( 1350 );
        {
            PyObjectTempKeeper1 call_tmp28;
            PyObjectTempKeeper0 super26;
            DECREASE_REFCOUNT( ( call_tmp28.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super26.assign( _mvar_django__db__models__fields__related_ManyToManyField.asObject0() ), BUILTIN_SUPER( super26.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp28.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_db_constraint.updateLocalsDict( _python_var_to.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_to = NULL;
    PyObject *_python_par_db_constraint = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument to was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_to );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_to == NULL );

            _python_par_to = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_to );

            kw_found += 1;
        }
    }

    // Check if argument db_constraint was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_db_constraint );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_db_constraint == NULL );

            _python_par_db_constraint = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_db_constraint );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_to != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'to'" );
             goto error_exit;
         }

        _python_par_to = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_db_constraint != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'db_constraint'" );
             goto error_exit;
         }

        _python_par_db_constraint = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_db_constraint == NULL )
    {
        _python_par_db_constraint = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_db_constraint );
    }


    return impl_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_to, _python_par_db_constraint, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_to );
    Py_XDECREF( _python_par_db_constraint );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_direct )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_direct( _python_str_plain_direct, _python_par_direct );
    PyObjectLocalVariable _python_var_pathinfos( _python_str_plain_pathinfos );
    PyObjectLocalVariable _python_var_int_model( _python_str_plain_int_model );
    PyObjectLocalVariable _python_var_linkfield1( _python_str_plain_linkfield1 );
    PyObjectLocalVariable _python_var_linkfield2( _python_str_plain_linkfield2 );
    PyObjectLocalVariable _python_var_join1infos( _python_str_plain_join1infos );
    PyObjectLocalVariable _python_var_join2infos( _python_str_plain_join2infos );

    // Actual function code.
    _python_var_pathinfos.assign1( PyList_New( 0 ) );
    static PyFrameObject *frame_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_9c360c3537c54bec6819fb5242989b77, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1357 );
        _python_var_int_model.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through ) );
        frame_guard.setLineNumber( 1358 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_linkfield1.assign1( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_int_model.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_field_by_name ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_m2m_field_name ) ).asObject() ) ).asObject() ) ) ).asObject(), _python_int_0, 0 ) );
        }
        frame_guard.setLineNumber( 1359 );
        {
            PyObjectTempKeeper1 call3;
            _python_var_linkfield2.assign1( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_int_model.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_field_by_name ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_m2m_reverse_field_name ) ).asObject() ) ).asObject() ) ) ).asObject(), _python_int_0, 0 ) );
        }
        frame_guard.setLineNumber( 1360 );
        if ( CHECK_IF_TRUE( _python_var_direct.asObject() ) )
        {
            frame_guard.setLineNumber( 1361 );
            _python_var_join1infos.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_linkfield1.asObject(), _python_str_plain_get_reverse_path_info ) ).asObject() ) );
            frame_guard.setLineNumber( 1362 );
            _python_var_join2infos.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_linkfield2.asObject(), _python_str_plain_get_path_info ) ).asObject() ) );
        }
        else
        {
            frame_guard.setLineNumber( 1364 );
            _python_var_join1infos.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_linkfield2.asObject(), _python_str_plain_get_reverse_path_info ) ).asObject() ) );
            frame_guard.setLineNumber( 1365 );
            _python_var_join2infos.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_linkfield1.asObject(), _python_str_plain_get_path_info ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 1366 );
        {
            PyObjectTempKeeper1 call5;
            DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_pathinfos.asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_join1infos.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1367 );
        {
            PyObjectTempKeeper1 call7;
            DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_pathinfos.asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_join2infos.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1368 );
        return _python_var_pathinfos.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_direct.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_join2infos.updateLocalsDict( _python_var_join1infos.updateLocalsDict( _python_var_linkfield2.updateLocalsDict( _python_var_linkfield1.updateLocalsDict( _python_var_int_model.updateLocalsDict( _python_var_pathinfos.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_direct = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_path_info() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_path_info() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_direct == key )
            {
                if (unlikely( _python_par_direct ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_path_info() got multiple values for keyword argument 'direct'" );
                    goto error_exit;
                }

                _python_par_direct = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_path_info() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_direct, key ) )
            {
                if (unlikely( _python_par_direct ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_path_info() got multiple values for keyword argument 'direct'" );
                    goto error_exit;
                }

                _python_par_direct = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_path_info() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_path_info() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_get_path_info() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_get_path_info() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_path_info() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_path_info() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_path_info() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_path_info() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_path_info() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_get_path_info() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_get_path_info() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_get_path_info() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_get_path_info() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_path_info() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_direct != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_path_info() got multiple values for keyword argument 'direct'" );
             goto error_exit;
         }

        _python_par_direct = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_direct == NULL )
    {
        _python_par_direct = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_direct );
    }


    return impl_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_direct );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_direct );

    return NULL;
}

static PyObject *dparse_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_dcf62c7a9921ce2e8313312d8e3eb386, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1371 );
        return CALL_FUNCTION( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_path_info ) ).asObject(), _python_tuple_empty, PyObjectTemporary( PyDict_Copy( _python_dict_443e6034d88f2c9bc9f7a97b4b6098e0 ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_path_info() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_path_info() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_path_info() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_path_info() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_path_info() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_path_info() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_path_info() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_path_info() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_path_info() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_path_info() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_path_info() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_path_info() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_path_info() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_path_info() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_path_info() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_path_info() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_path_info() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_bb3a44daa62217c6b565c7b2ccc6fc6f, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1374 );
        return CALL_FUNCTION( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_path_info ) ).asObject(), _python_tuple_empty, PyObjectTemporary( PyDict_Copy( _python_dict_e9da05e7a7f3c950d7e6b4c9b96677b5 ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_reverse_path_info() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_reverse_path_info() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_reverse_path_info() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_reverse_path_info() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_reverse_path_info() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_aa7748bccccb41cf1b9f556b42692f37, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1377 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_Field.asObject0(), _python_str_plain_get_choices ) ), CALL_FUNCTION( call1.asObject0(), PyObjectTemporary( MAKE_TUPLE1( _python_var_self.asObject() ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_065e89848c3f4616e7699c2fc1c78120 ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_choices_default() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_choices_default() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_choices_default() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_choices_default() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_choices_default() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_choices_default() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_choices_default() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_choices_default() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_choices_default() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_choices_default() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_choices_default() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_choices_default() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_choices_default() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_choices_default() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_choices_default() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_choices_default() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_choices_default() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_opts )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_opts( _python_str_plain_opts, _python_par_opts );

    // Actual function code.
    static PyFrameObject *frame_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_16887cc3cac341a3a6023215d2644cc7, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1381 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 1382 );
            return LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_db_table );
        }
        else
        {
            frame_guard.setLineNumber( 1383 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db_table ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 1384 );
                return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db_table );
            }
            else
            {
                frame_guard.setLineNumber( 1386 );
                {
                    PyObjectTempKeeper1 call3;
                    PyObjectTempKeeper1 call4;
                    PyObjectTempKeeper1 make_tuple1;
                    return ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_util.asObject0(), _python_str_plain_truncate_name ) ), call4.assign( BINARY_OPERATION_REMAINDER( _python_str_digest_2c4280e570e051c9f90f753460217fb9, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( _python_var_opts.asObject(), _python_str_plain_db_table ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ).asObject() ) ) ).asObject() ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_connection.asObject0(), _python_str_plain_ops ) ).asObject(), _python_str_plain_max_name_length ) ).asObject() ) ).asObject() ) );
                }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_opts.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_opts = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_opts == key )
            {
                if (unlikely( _python_par_opts ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() got multiple values for keyword argument 'opts'" );
                    goto error_exit;
                }

                _python_par_opts = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_opts, key ) )
            {
                if (unlikely( _python_par_opts ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() got multiple values for keyword argument 'opts'" );
                    goto error_exit;
                }

                _python_par_opts = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_m2m_db_table() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_opts != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_m2m_db_table() got multiple values for keyword argument 'opts'" );
             goto error_exit;
         }

        _python_par_opts = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_opts );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_opts );

    return NULL;
}

static PyObject *dparse_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_related, PyObject *_python_par_attr )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_related( _python_str_plain_related, _python_par_related );
    PyObjectLocalParameterVariableNoDel _python_var_attr( _python_str_plain_attr, _python_par_attr );
    PyObjectLocalVariable _python_var_cache_attr( _python_str_plain_cache_attr );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );

    // Actual function code.
    static PyFrameObject *frame_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_f0f5c4838325c617ab6b176cfc2f51a7, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1391 );
        _python_var_cache_attr.assign1( BINARY_OPERATION_REMAINDER( _python_str_digest_a52efff02e1abde46322895135a15bfd, _python_var_attr.asObject() ) );
        frame_guard.setLineNumber( 1392 );
        {
            PyObjectTempKeeper0 hasattr4;
            if ( ( hasattr4.assign( _python_var_self.asObject() ), HAS_ATTRIBUTE( hasattr4.asObject0(), _python_var_cache_attr.asObject() ) ) )
        {
            frame_guard.setLineNumber( 1393 );
            {
                PyObjectTempKeeper0 getattr1;
                return ( getattr1.assign( _python_var_self.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), _python_var_cache_attr.asObject(), NULL ) );
            }
        }
        }
        {
            frame_guard.setLineNumber( 1394 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1394 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 1395 );
                {
                    PyObjectTempKeeper1 cmp15;
                    if ( ( HAS_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_rel ) && ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_rel ) ).asObject() ) && ( cmp15.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ), RICH_COMPARE_BOOL_EQ( cmp15.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_related.asObject(), _python_str_plain_model ) ).asObject() ) ) ) ) )
                {
                    frame_guard.setLineNumber( 1396 );
                    {
                        PyObjectTempKeeper0 getattr6;
                        PyObjectTempKeeper0 setattr10;
                        PyObjectTempKeeper0 setattr9;
                        ( ( setattr9.assign( _python_var_self.asObject() ), setattr10.assign( _python_var_cache_attr.asObject() ), BUILTIN_SETATTR( setattr9.asObject0(), setattr10.asObject0(), PyObjectTemporary( ( getattr6.assign( _python_var_f.asObject() ), BUILTIN_GETATTR( getattr6.asObject0(), _python_var_attr.asObject(), NULL ) ) ).asObject() ) ), Py_None );
                    }
                    frame_guard.setLineNumber( 1397 );
                    {
                        PyObjectTempKeeper0 getattr12;
                        return ( getattr12.assign( _python_var_self.asObject() ), BUILTIN_GETATTR( getattr12.asObject0(), _python_var_cache_attr.asObject(), NULL ) );
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attr.updateLocalsDict( _python_var_related.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_cache_attr.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_related = NULL;
    PyObject *_python_par_attr = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_attr() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_attr() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_related == key )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_attr() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attr == key )
            {
                if (unlikely( _python_par_attr ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_attr() got multiple values for keyword argument 'attr'" );
                    goto error_exit;
                }

                _python_par_attr = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_attr() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_related, key ) )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_attr() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attr, key ) )
            {
                if (unlikely( _python_par_attr ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_attr() got multiple values for keyword argument 'attr'" );
                    goto error_exit;
                }

                _python_par_attr = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_m2m_attr() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_m2m_attr() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_get_m2m_attr() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_get_m2m_attr() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_m2m_attr() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_attr() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_attr() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_attr() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_attr() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_get_m2m_attr() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_attr() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_attr() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_attr() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_m2m_attr() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_related != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_m2m_attr() got multiple values for keyword argument 'related'" );
             goto error_exit;
         }

        _python_par_related = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_attr != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_m2m_attr() got multiple values for keyword argument 'attr'" );
             goto error_exit;
         }

        _python_par_attr = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_related, _python_par_attr );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_related );
    Py_XDECREF( _python_par_attr );

    return NULL;
}

static PyObject *dparse_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_related, PyObject *_python_par_attr )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_related( _python_str_plain_related, _python_par_related );
    PyObjectLocalParameterVariableNoDel _python_var_attr( _python_str_plain_attr, _python_par_attr );
    PyObjectLocalVariable _python_var_cache_attr( _python_str_plain_cache_attr );
    PyObjectLocalVariable _python_var_found( _python_str_plain_found );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );

    // Actual function code.
    static PyFrameObject *frame_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_fcf492d019d91e3ef02de73f55d3d541, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1401 );
        _python_var_cache_attr.assign1( BINARY_OPERATION_REMAINDER( _python_str_digest_3acdbc0ecc57c28a34a4a43731979556, _python_var_attr.asObject() ) );
        frame_guard.setLineNumber( 1402 );
        {
            PyObjectTempKeeper0 hasattr4;
            if ( ( hasattr4.assign( _python_var_self.asObject() ), HAS_ATTRIBUTE( hasattr4.asObject0(), _python_var_cache_attr.asObject() ) ) )
        {
            frame_guard.setLineNumber( 1403 );
            {
                PyObjectTempKeeper0 getattr1;
                return ( getattr1.assign( _python_var_self.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), _python_var_cache_attr.asObject(), NULL ) );
            }
        }
        }
        _python_var_found.assign0( Py_False );
        {
            frame_guard.setLineNumber( 1405 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_fields ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1405 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 1406 );
                {
                    PyObjectTempKeeper1 cmp20;
                    if ( ( HAS_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_rel ) && ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_rel ) ).asObject() ) && ( cmp20.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ), RICH_COMPARE_BOOL_EQ( cmp20.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_related.asObject(), _python_str_plain_parent_model ) ).asObject() ) ) ) ) )
                {
                    frame_guard.setLineNumber( 1407 );
                    {
                        PyObjectTempKeeper1 cmp18;
                        if ( ( cmp18.assign( LOOKUP_ATTRIBUTE( _python_var_related.asObject(), _python_str_plain_model ) ), RICH_COMPARE_BOOL_EQ( cmp18.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_related.asObject(), _python_str_plain_parent_model ) ).asObject() ) ) )
                    {
                        frame_guard.setLineNumber( 1412 );
                        if ( CHECK_IF_TRUE( _python_var_found.asObject() ) )
                        {
                            frame_guard.setLineNumber( 1413 );
                            {
                                PyObjectTempKeeper0 getattr6;
                                PyObjectTempKeeper0 setattr10;
                                PyObjectTempKeeper0 setattr9;
                                ( ( setattr9.assign( _python_var_self.asObject() ), setattr10.assign( _python_var_cache_attr.asObject() ), BUILTIN_SETATTR( setattr9.asObject0(), setattr10.asObject0(), PyObjectTemporary( ( getattr6.assign( _python_var_f.asObject() ), BUILTIN_GETATTR( getattr6.asObject0(), _python_var_attr.asObject(), NULL ) ) ).asObject() ) ), Py_None );
                            }
                            frame_guard.setLineNumber( 1414 );
                            break;
                        }
                        else
                        {
                            _python_var_found.assign0( Py_True );
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 1418 );
                        {
                            PyObjectTempKeeper0 getattr12;
                            PyObjectTempKeeper0 setattr15;
                            PyObjectTempKeeper0 setattr16;
                            ( ( setattr15.assign( _python_var_self.asObject() ), setattr16.assign( _python_var_cache_attr.asObject() ), BUILTIN_SETATTR( setattr15.asObject0(), setattr16.asObject0(), PyObjectTemporary( ( getattr12.assign( _python_var_f.asObject() ), BUILTIN_GETATTR( getattr12.asObject0(), _python_var_attr.asObject(), NULL ) ) ).asObject() ) ), Py_None );
                        }
                        frame_guard.setLineNumber( 1419 );
                        break;
                    }
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 1420 );
        {
            PyObjectTempKeeper0 getattr22;
            return ( getattr22.assign( _python_var_self.asObject() ), BUILTIN_GETATTR( getattr22.asObject0(), _python_var_cache_attr.asObject(), NULL ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_attr.updateLocalsDict( _python_var_related.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_found.updateLocalsDict( _python_var_cache_attr.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_related = NULL;
    PyObject *_python_par_attr = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_related == key )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_attr == key )
            {
                if (unlikely( _python_par_attr ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() got multiple values for keyword argument 'attr'" );
                    goto error_exit;
                }

                _python_par_attr = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_related, key ) )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_attr, key ) )
            {
                if (unlikely( _python_par_attr ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() got multiple values for keyword argument 'attr'" );
                    goto error_exit;
                }

                _python_par_attr = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_m2m_reverse_attr() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_related != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() got multiple values for keyword argument 'related'" );
             goto error_exit;
         }

        _python_par_related = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_attr != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_m2m_reverse_attr() got multiple values for keyword argument 'attr'" );
             goto error_exit;
         }

        _python_par_attr = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_related, _python_par_attr );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_related );
    Py_XDECREF( _python_par_attr );

    return NULL;
}

static PyObject *dparse_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_obj( _python_str_plain_obj, _python_par_obj );
    PyObjectLocalVariable _python_var_data( _python_str_plain_data );
    PyObjectLocalVariable _python_var_qs( _python_str_plain_qs );
    PyObjectLocalVariable _python_var_choices_list( _python_str_plain_choices_list );
    PyObjectLocalVariable _python_var_instance( _python_str_plain_instance );

    // Actual function code.
    _python_var_data.assign0( _python_str_empty );
    static PyFrameObject *frame_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_6b82f9717d5f3ab5366e4affbaa88a86, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1424 );
        if ( CHECK_IF_TRUE( _python_var_obj.asObject() ) )
        {
            frame_guard.setLineNumber( 1425 );
            {
                PyObjectTempKeeper0 getattr1;
                _python_var_qs.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( getattr1.assign( _python_var_obj.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ).asObject(), NULL ) ) ).asObject(), _python_str_plain_all ) ).asObject() ) );
            }
            frame_guard.setLineNumber( 1426 );
            _python_var_data.assign1( impl_listcontr_1_of_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( MAKE_ITERATOR( _python_var_qs.asObject() ), _python_var_instance ) );
        }
        else
        {
            frame_guard.setLineNumber( 1430 );
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_blank ) ).asObject() ) )) )
            {
                frame_guard.setLineNumber( 1431 );
                _python_var_choices_list.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_choices_default ) ).asObject() ) );
                frame_guard.setLineNumber( 1432 );
                if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( BUILTIN_LEN( _python_var_choices_list.asObject() ) ).asObject(), _python_int_pos_1 ) )
                {
                    frame_guard.setLineNumber( 1433 );
                    _python_var_data.assign1( MAKE_LIST1( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_choices_list.asObject(), _python_int_0, 0 ) ).asObject(), _python_int_0, 0 ) ) );
                }
            }
        }
        frame_guard.setLineNumber( 1434 );
        {
            PyObjectTempKeeper0 call4;
            return ( call4.assign( _mvar_django__db__models__fields__related_smart_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_data.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_obj.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_choices_list.updateLocalsDict( _python_var_qs.updateLocalsDict( _python_var_data.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_obj = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_obj == key )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_obj, key ) )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_to_string() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_to_string() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_instance )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1426 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1426 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_instance.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_instance.asObject(), _python_str_plain__get_pk_val ) ).asObject() ) ).asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_cls, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalVariable _python_var_resolve_through_model( _python_str_plain_resolve_through_model );

    // Actual function code.
    static PyFrameObject *frame_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_36b16d0964d426590f358baab841bd17, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1443 );
        {
            PyObjectTempKeeper1 cmp1;
            if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_symmetrical ) ).asObject() ) && ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain_self ) || ( cmp1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ), RICH_COMPARE_BOOL_EQ( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ).asObject() ) ) ) ) )
        {
            frame_guard.setLineNumber( 1444 );
            {
                    PyObjectTemporary tmp_identifier( BINARY_OPERATION_REMAINDER( _python_str_digest_bb5e1087ffe0eac5e4236e43846b6ede, _python_var_name.asObject() ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_related_name );
            }
        }
        }
        frame_guard.setLineNumber( 1446 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper0 call6;
            PyObjectTempKeeper0 super3;
            DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields__related_ManyToManyField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_contribute_to_class ) ), call6.assign( _python_var_cls.asObject() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), call6.asObject0(), _python_var_name.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1452 );
        if ( ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through ) ).asObject() ) )) && ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_abstract ) ).asObject() ) )) && (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_swapped ) ).asObject() ) )) ) ) )
        {
            frame_guard.setLineNumber( 1453 );
            {
                PyObjectTempKeeper0 call8;
                PyObjectTempKeeper0 call9;
                {
                    PyObjectTemporary tmp_identifier( ( call8.assign( _mvar_django__db__models__fields__related_create_many_to_many_intermediary_model.asObject0() ), call9.assign( _python_var_self.asObject() ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), call9.asObject0(), _python_var_cls.asObject() ) ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through );
            }
            }
        }
        frame_guard.setLineNumber( 1456 );
        {
            PyObjectTempKeeper0 call11;
            PyObjectTempKeeper0 setattr13;
            PyObjectTempKeeper1 setattr14;
            ( ( setattr13.assign( _python_var_cls.asObject() ), setattr14.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ), BUILTIN_SETATTR( setattr13.asObject0(), setattr14.asObject0(), PyObjectTemporary( ( call11.assign( _mvar_django__db__models__fields__related_ReverseManyRelatedObjectsDescriptor.asObject0() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _python_var_self.asObject() ) ) ).asObject() ) ), Py_None );
        }
        frame_guard.setLineNumber( 1459 );
        {
            PyObjectTempKeeper0 call16;
            PyObjectTempKeeper1 call17;
            {
                PyObjectTemporary tmp_identifier( ( call16.assign( _mvar_django__db__models__fields__related_curry.asObject0() ), call17.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_m2m_db_table ) ), CALL_FUNCTION_WITH_ARGS( call16.asObject0(), call17.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_m2m_db_table );
        }
        }
        frame_guard.setLineNumber( 1463 );
        {
            PyObjectTempKeeper1 isinstance24;
            if ( ( isinstance24.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through ) ), BUILTIN_ISINSTANCE_BOOL( isinstance24.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) )
        {
            _python_var_resolve_through_model.assign1( MAKE_FUNCTION_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
            frame_guard.setLineNumber( 1466 );
            {
                PyObjectTempKeeper0 call19;
                PyObjectTempKeeper0 call20;
                PyObjectTempKeeper0 call21;
                PyObjectTempKeeper1 call22;
                DECREASE_REFCOUNT( ( call19.assign( _mvar_django__db__models__fields__related_add_lazy_relation.asObject0() ), call20.assign( _python_var_cls.asObject() ), call21.assign( _python_var_self.asObject() ), call22.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through ) ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), call20.asObject0(), call21.asObject0(), call22.asObject0(), _python_var_resolve_through_model.asObject() ) ) );
            }
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_cls.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_resolve_through_model.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_cls = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "contribute_to_class() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_cls, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_cls );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_field, PyObject *_python_par_model, PyObject *_python_par_cls )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_field( _python_str_plain_field, _python_par_field );
    PyObjectLocalParameterVariableNoDel _python_var_model( _python_str_plain_model, _python_par_model );
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );

    // Actual function code.
    static PyFrameObject *frame_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_d7ee3999dbaf9029570c30d09be176cd, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1465 );
        {
                PyObject *tmp_identifier = _python_var_model.asObject();
                SET_ATTRIBUTE( tmp_identifier, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_through );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_cls.updateLocalsDict( _python_var_model.updateLocalsDict( _python_var_field.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_field = NULL;
    PyObject *_python_par_model = NULL;
    PyObject *_python_par_cls = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "resolve_through_model() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_field == key )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_through_model() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model == key )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_through_model() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_through_model() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field, key ) )
            {
                if (unlikely( _python_par_field ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_through_model() got multiple values for keyword argument 'field'" );
                    goto error_exit;
                }

                _python_par_field = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model, key ) )
            {
                if (unlikely( _python_par_model ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_through_model() got multiple values for keyword argument 'model'" );
                    goto error_exit;
                }

                _python_par_model = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "resolve_through_model() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "resolve_through_model() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "resolve_through_model() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "resolve_through_model() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "resolve_through_model() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "resolve_through_model() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "resolve_through_model() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "resolve_through_model() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "resolve_through_model() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "resolve_through_model() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "resolve_through_model() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "resolve_through_model() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "resolve_through_model() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "resolve_through_model() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_field != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve_through_model() got multiple values for keyword argument 'field'" );
             goto error_exit;
         }

        _python_par_field = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_model != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve_through_model() got multiple values for keyword argument 'model'" );
             goto error_exit;
         }

        _python_par_model = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "resolve_through_model() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, _python_par_field, _python_par_model, _python_par_cls );

error_exit:;

    Py_XDECREF( _python_par_field );
    Py_XDECREF( _python_par_model );
    Py_XDECREF( _python_par_cls );

    return NULL;
}

static PyObject *dparse_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_cls, PyObject *_python_par_related )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );
    PyObjectLocalParameterVariableNoDel _python_var_related( _python_str_plain_related, _python_par_related );
    PyObjectSharedLocalVariable _python_var_get_m2m_rel( _python_str_plain_get_m2m_rel );
    PyObjectSharedLocalVariable _python_var_get_m2m_reverse_rel( _python_str_plain_get_m2m_reverse_rel );

    // Actual function code.
    static PyFrameObject *frame_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_dd54100ceb95666450bb5934198b4c53, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1471 );
        if ( ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_is_hidden ) ).asObject() ) ).asObject() ) )) && (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_related.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_swapped ) ).asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 1472 );
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 setattr3;
                PyObjectTempKeeper1 setattr4;
                ( ( setattr3.assign( _python_var_cls.asObject() ), setattr4.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_related.asObject(), _python_str_plain_get_accessor_name ) ).asObject() ) ), BUILTIN_SETATTR( setattr3.asObject0(), setattr4.asObject0(), PyObjectTemporary( ( call1.assign( _mvar_django__db__models__fields__related_ManyRelatedObjectsDescriptor.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_related.asObject() ) ) ).asObject() ) ), Py_None );
            }
        }
        frame_guard.setLineNumber( 1475 );
        {
            PyObjectTempKeeper0 call6;
            PyObjectTempKeeper1 call7;
            {
                PyObjectTemporary tmp_identifier( ( call6.assign( _mvar_django__db__models__fields__related_curry.asObject0() ), call7.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_m2m_attr ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), call7.asObject0(), _python_var_related.asObject(), _python_str_plain_column ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_m2m_column_name );
        }
        }
        frame_guard.setLineNumber( 1476 );
        {
            PyObjectTempKeeper0 call10;
            PyObjectTempKeeper1 call11;
            {
                PyObjectTemporary tmp_identifier( ( call10.assign( _mvar_django__db__models__fields__related_curry.asObject0() ), call11.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_m2m_reverse_attr ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), call11.asObject0(), _python_var_related.asObject(), _python_str_plain_column ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_m2m_reverse_name );
        }
        }
        frame_guard.setLineNumber( 1478 );
        {
            PyObjectTempKeeper0 call14;
            PyObjectTempKeeper1 call15;
            {
                PyObjectTemporary tmp_identifier( ( call14.assign( _mvar_django__db__models__fields__related_curry.asObject0() ), call15.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_m2m_attr ) ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), call15.asObject0(), _python_var_related.asObject(), _python_str_plain_name ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_m2m_field_name );
        }
        }
        frame_guard.setLineNumber( 1479 );
        {
            PyObjectTempKeeper0 call18;
            PyObjectTempKeeper1 call19;
            {
                PyObjectTemporary tmp_identifier( ( call18.assign( _mvar_django__db__models__fields__related_curry.asObject0() ), call19.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_m2m_reverse_attr ) ), CALL_FUNCTION_WITH_ARGS( call18.asObject0(), call19.asObject0(), _python_var_related.asObject(), _python_str_plain_name ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_m2m_reverse_field_name );
        }
        }
        frame_guard.setLineNumber( 1481 );
        {
            PyObjectTempKeeper0 call22;
            PyObjectTempKeeper1 call23;
            _python_var_get_m2m_rel.assign1( ( call22.assign( _mvar_django__db__models__fields__related_curry.asObject0() ), call23.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_m2m_attr ) ), CALL_FUNCTION_WITH_ARGS( call22.asObject0(), call23.asObject0(), _python_var_related.asObject(), _python_str_plain_rel ) ) );
        }
        frame_guard.setLineNumber( 1482 );
        SET_ATTRIBUTE( PyObjectTemporary( MAKE_FUNCTION_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( _python_var_get_m2m_rel ) ).asObject(), _python_var_self.asObject(), _python_str_plain_m2m_target_field_name );
        frame_guard.setLineNumber( 1483 );
        {
            PyObjectTempKeeper0 call26;
            PyObjectTempKeeper1 call27;
            _python_var_get_m2m_reverse_rel.assign1( ( call26.assign( _mvar_django__db__models__fields__related_curry.asObject0() ), call27.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_m2m_reverse_attr ) ), CALL_FUNCTION_WITH_ARGS( call26.asObject0(), call27.asObject0(), _python_var_related.asObject(), _python_str_plain_rel ) ) );
        }
        frame_guard.setLineNumber( 1484 );
        SET_ATTRIBUTE( PyObjectTemporary( MAKE_FUNCTION_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( _python_var_get_m2m_reverse_rel ) ).asObject(), _python_var_self.asObject(), _python_str_plain_m2m_reverse_target_field_name );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_related.updateLocalsDict( _python_var_cls.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_get_m2m_reverse_rel.updateLocalsDict( _python_var_get_m2m_rel.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_cls = NULL;
    PyObject *_python_par_related = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_related == key )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_related, key ) )
            {
                if (unlikely( _python_par_related ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'related'" );
                    goto error_exit;
                }

                _python_par_related = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "contribute_to_related_class() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_related_class() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_related != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_related_class() got multiple values for keyword argument 'related'" );
             goto error_exit;
         }

        _python_par_related = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_cls, _python_par_related );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_cls );
    Py_XDECREF( _python_par_related );

    return NULL;
}

static PyObject *dparse_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self )
{
    // The context of the function.
    struct _context_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_t *_python_context = (struct _context_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.


    // Actual function code.
    static PyFrameObject *frame_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_b286a952a6d49b45e0128057d4eae042, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1482 );
        return LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( _python_context->python_closure_get_m2m_rel.asObject() ) ).asObject(), _python_str_plain_field_name );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_context->python_closure_get_m2m_rel.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;

    if (unlikely( args_given + kw_size > 0 ))
    {
#if PYTHON_VERSION < 330
        PyErr_Format( PyExc_TypeError, "<lambda>() takes no arguments (%zd given)", args_given + kw_size );
#else
        if ( kw_size == 0 )
        {
           PyErr_Format( PyExc_TypeError, "<lambda>() takes 0 positional arguments but %zd was given", args_given );
        }
        else
        {
           PyObject *tmp_iter = PyObject_GetIter( kw );
           PyObject *tmp_arg_name = PyIter_Next( tmp_iter );
           Py_DECREF( tmp_iter );

           PyErr_Format( PyExc_TypeError, "<lambda>() got an unexpected keyword argument '%s'", Nuitka_String_AsString( tmp_arg_name ) );

           Py_DECREF( tmp_arg_name );
        }
#endif
        goto error_exit;
    }


    return impl_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self );

error_exit:;


    return NULL;
}

static PyObject *dparse_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 0)
    {
        return impl_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self );
    }
    else
    {
        PyObject *result = fparse_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self )
{
    // The context of the function.
    struct _context_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_t *_python_context = (struct _context_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_t *)self->m_context;

    // Local variable declarations.


    // Actual function code.
    static PyFrameObject *frame_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_62c8c908ddd49b4245e1dba30eaaaaa2, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1484 );
        return LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( _python_context->python_closure_get_m2m_reverse_rel.asObject() ) ).asObject(), _python_str_plain_field_name );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_context->python_closure_get_m2m_reverse_rel.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;

    if (unlikely( args_given + kw_size > 0 ))
    {
#if PYTHON_VERSION < 330
        PyErr_Format( PyExc_TypeError, "<lambda>() takes no arguments (%zd given)", args_given + kw_size );
#else
        if ( kw_size == 0 )
        {
           PyErr_Format( PyExc_TypeError, "<lambda>() takes 0 positional arguments but %zd was given", args_given );
        }
        else
        {
           PyObject *tmp_iter = PyObject_GetIter( kw );
           PyObject *tmp_arg_name = PyIter_Next( tmp_iter );
           Py_DECREF( tmp_iter );

           PyErr_Format( PyExc_TypeError, "<lambda>() got an unexpected keyword argument '%s'", Nuitka_String_AsString( tmp_arg_name ) );

           Py_DECREF( tmp_arg_name );
        }
#endif
        goto error_exit;
    }


    return impl_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self );

error_exit:;


    return NULL;
}

static PyObject *dparse_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 0)
    {
        return impl_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self );
    }
    else
    {
        PyObject *result = fparse_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_12_set_attributes_from_rel_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_12_set_attributes_from_rel_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "set_attributes_from_rel() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_attributes_from_rel() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_12_set_attributes_from_rel_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_12_set_attributes_from_rel_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_12_set_attributes_from_rel_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_12_set_attributes_from_rel_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_obj( _python_str_plain_obj, _python_par_obj );

    // Actual function code.
    static PyFrameObject *frame_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_80520ee537af1e43bb078d38a4ebf7ff, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1491 );
        {
            PyObjectTempKeeper0 getattr1;
            return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( getattr1.assign( _python_var_obj.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attname ) ).asObject(), NULL ) ) ).asObject(), _python_str_plain_all ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_obj.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_obj = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_from_object() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_object() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_obj == key )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_object() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_object() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_obj, key ) )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_object() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_from_object() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_object() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_from_object() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_from_object() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_object() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_object() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_object() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_object() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_object() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_from_object() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_object() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "value_from_object() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_from_object() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_object() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_object() got multiple values for keyword argument 'obj'" );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );

    // Actual function code.
    static PyFrameObject *frame_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_887a4ceb2709bcabd4fb894fdf2963b6, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1494 );
        {
            PyObjectTempKeeper0 setattr1;
            PyObjectTempKeeper1 setattr2;
            ( ( setattr1.assign( _python_var_instance.asObject() ), setattr2.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attname ) ), BUILTIN_SETATTR( setattr1.asObject0(), setattr2.asObject0(), _python_var_data.asObject() ) ), Py_None );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "save_form_data() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "save_form_data() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_instance, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_db( _python_str_plain_db );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );
    PyObjectLocalVariable _python_var_initial( _python_str_plain_initial );
    PyObjectLocalVariable _python_var_i( _python_str_plain_i );

    // Actual function code.
    static PyFrameObject *frame_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;

    if ( isFrameUnusable( frame_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) )
    {
        if ( frame_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related" );
#endif
            Py_DECREF( frame_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
        }

        frame_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_425089fddbc8b1077f22b916a0499370, _module_django__db__models__fields__related );
    }

    FrameGuard frame_guard( frame_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1497 );
        _python_var_db.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_str_plain_using, Py_None ) );
        frame_guard.setLineNumber( 1498 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 make_dict5;
            _python_var_defaults.assign1( ( make_dict5.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_forms.asObject0(), _python_str_plain_ModelMultipleChoiceField ) ), MAKE_DICT2( make_dict5.asObject0(), _python_str_plain_form_class, PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) ).asObject(), _python_str_plain__default_manager ) ).asObject(), _python_str_plain_using ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_db.asObject() ) ) ).asObject(), _python_str_plain_complex_filter ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_limit_choices_to ) ).asObject() ) ) ).asObject(), _python_str_plain_queryset ) ) );
        }
        frame_guard.setLineNumber( 1502 );
        {
            PyObjectTempKeeper1 call9;
            DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1505 );
        if ( ( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_get ) ).asObject(), _python_str_plain_initial ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 1506 );
            _python_var_initial.assign1( LOOKUP_SUBSCRIPT( _python_var_defaults.asObject(), _python_str_plain_initial ) );
            frame_guard.setLineNumber( 1507 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_callable ), _python_var_initial.asObject() ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 1508 );
                _python_var_initial.assign1( CALL_FUNCTION_NO_ARGS( _python_var_initial.asObject() ) );
            }
            frame_guard.setLineNumber( 1509 );
            {
                    PyObjectTemporary tmp_identifier( impl_listcontr_1_of_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( MAKE_ITERATOR( _python_var_initial.asObject() ), _python_var_i ) );
                    SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_defaults.asObject(), _python_str_plain_initial );
            }
        }
        frame_guard.setLineNumber( 1510 );
        {
            PyObjectTempKeeper1 call_tmp13;
            PyObjectTempKeeper0 super11;
            return ( call_tmp13.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super11.assign( _mvar_django__db__models__fields__related_ManyToManyField.asObject0() ), BUILTIN_SUPER( super11.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp13.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_i.updateLocalsDict( _python_var_initial.updateLocalsDict( _python_var_defaults.updateLocalsDict( _python_var_db.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related )
        {
           Py_DECREF( frame_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related );
           frame_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_i )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1509 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1509 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_i.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_i.asObject(), _python_str_plain__get_pk_val ) ).asObject() ) ).asObject() ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}



static PyObject *MAKE_FUNCTION_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        dparse_function_10__add_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        _python_str_plain__add_items,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_71b2b325878e9b3727f94e321eaa77c5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_plain_contribute_to_class,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_36b16d0964d426590f358baab841bd17,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_10_get_attname_column_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_get_attname_column,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c4552663dbbc05672b96cab82dde2f38,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        dparse_function_10_value_to_string_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        _python_str_plain_value_to_string,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4b28f9aae0df14459ccd165ce9b5bc24,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        dparse_function_11__remove_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        _python_str_plain__remove_items,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6f8146b5f2ccefd2b92bcd87f521eb29,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        dparse_function_11_contribute_to_related_class_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        _python_str_plain_contribute_to_related_class,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_cad9544d570033ae04a5c2994cb6c010,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_plain_contribute_to_related_class,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_dd54100ceb95666450bb5934198b4c53,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_11_get_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_get_joining_columns,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_26a4b8d2d989841d30900af1fabf3715,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        dparse_function_12__clear_items_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        _python_str_plain__clear_items,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a4b98f78125ae5d4db32ceee57e2f30e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        dparse_function_12_formfield_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_fad88bcfdb0593e47f30188b96603946,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_12_get_reverse_joining_columns_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_get_reverse_joining_columns,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9afb65dfab23d8bee7fdee4915264e60,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_12_set_attributes_from_rel_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_12_set_attributes_from_rel_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_function_12_set_attributes_from_rel_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_plain_set_attributes_from_rel,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2591d705db0eca5d25d617c34c853b52,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        dparse_function_13_db_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        _python_str_plain_db_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0878993590556d2097bd72c6e63af90c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_13_get_extra_descriptor_filter_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_13_get_extra_descriptor_filter_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_13_get_extra_descriptor_filter_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_get_extra_descriptor_filter,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6257e4fac40bcc000ac291861e95a52b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_56a474074838ecea11edf089c1982b5f
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_function_13_value_from_object_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_plain_value_from_object,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_80520ee537af1e43bb078d38a4ebf7ff,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_c1074e8c562ca242b3221573edbf1799
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_14_get_extra_restriction_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_14_get_extra_restriction_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_14_get_extra_restriction_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_get_extra_restriction,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_79684c06cffc662a76e775d501596edb,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_05be971e50a7570720f733b7068ae034
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_function_14_save_form_data_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_plain_save_form_data,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_887a4ceb2709bcabd4fb894fdf2963b6,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_function_15_formfield_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_425089fddbc8b1077f22b916a0499370,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_15_get_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_get_path_info,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1305cd4294eacf4a6aa98f5531c3999d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_29954dc73b18b61829b46361241cd240
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_16_get_reverse_path_info_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_get_reverse_path_info,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e4fa4bb38858b910695e87785396930a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_028e65d9cd071b6d7efacde835e29a54
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_get_lookup_constraint,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7e2a26e0abff5075803041dc8558308e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_18_attnames_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_attnames,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9c321fa8e9dedf3bf686bf1e08fca951,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related,
        dparse_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related,
        _python_str_plain_create_many_to_many_intermediary_model,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0b7129d899d23d65791eaee25d796e8a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_19_get_defaults_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_get_defaults,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_781cb5468a94a0444ee4f1bceb69e8ce,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_1___init___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5dc6aec5f61cd29906558385da855210,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related,
        dparse_function_1___init___of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4623cd1f1197417c1171e1ebfd1265e9,
        INCREASE_REFCOUNT( _python_tuple_none_none_false_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related,
        dparse_function_1___init___of_class_12_ManyToOneRel_of_module_django__db__models__fields__related,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_cdf977383174bde94a15f15a52f6d0c6,
        INCREASE_REFCOUNT( _python_tuple_none_none_false_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related,
        dparse_function_1___init___of_class_13_OneToOneRel_of_module_django__db__models__fields__related,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0309ee41c8823af9cf526b64c3d06496,
        INCREASE_REFCOUNT( _python_tuple_none_none_false_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related,
        dparse_function_1___init___of_class_14_ManyToManyRel_of_module_django__db__models__fields__related,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_efc29db28aa021f56ee1190f1d084290,
        INCREASE_REFCOUNT( _python_tuple_none_none_true_none_true_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_1___init___of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_bb4e11081599ea5d55e826cc2e912305,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        dparse_function_1___init___of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0fd6e19c12cfef84dbcf6e1bf3020f3d,
        defaults,
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related,
        dparse_function_1___init___of_class_17_OneToOneField_of_module_django__db__models__fields__related,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_eedd59f547f80f90dddb3665285b751d,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_function_1___init___of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_38b0635c0a739126d4cc309462a6a9b4,
        INCREASE_REFCOUNT( _python_tuple_true_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_ManyRelatedManager )
{
    struct _context_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = new _context_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_ManyRelatedManager.shareWith( python_closure_ManyRelatedManager );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        dparse_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_194fbca438c9f37d6d72fe6ab84afb77,
        INCREASE_REFCOUNT( _python_tuple_none_none_none_none_none_none_false_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_function_1___init___of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_RelatedManager, PyObjectSharedLocalVariable &python_closure_rel_field, PyObjectSharedLocalVariable &python_closure_rel_model )
{
    struct _context_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = new _context_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_RelatedManager.shareWith( python_closure_RelatedManager );
    _python_context->python_closure_rel_field.shareWith( python_closure_rel_field );
    _python_context->python_closure_rel_model.shareWith( python_closure_rel_model );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6ee15c6520caa5debc1a9daee81e6a31,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_function_1___init___of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        dparse_function_1___init___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_64137537a7a0647acc0ef6c26cd56e96,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        dparse_function_1___init___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_aac847b14d1fc54ba861d0e19c5f754b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_1___init___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_14db334eeac86273c34937b3e452d90c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_1___init___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_67d821959c9f827e15192e61c0a16ab5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_add_lazy_relation_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_add_lazy_relation_of_module_django__db__models__fields__related,
        dparse_function_1_add_lazy_relation_of_module_django__db__models__fields__related,
        _python_str_plain_add_lazy_relation,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c3a2dbc6975ec3333c2eaa6929091771,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_1db1a60c769be88c5d336780b010b282
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_db_type_of_class_3_RelatedField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_db_type_of_class_3_RelatedField_of_module_django__db__models__fields__related,
        dparse_function_1_db_type_of_class_3_RelatedField_of_module_django__db__models__fields__related,
        _python_str_plain_db_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0f76727dc7b636be03c82fbf9752f8ea,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_f21addb9fe63f1702fd2401c69bc421c
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_sources )
{
    struct _context_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related_t *_python_context = new _context_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_sources.shareWith( python_closure_sources );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_get_normalized_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_623504230943f4573840f5a325b8662a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_function_1_get_normalized_value_of_function_17_get_lookup_constraint_of_class_15_ForeignObject_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related,
        dparse_function_1_resolve_related_class_of_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related,
        _python_str_plain_resolve_related_class,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9ba540e9f4a19c064ad24d2178d4810d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_function_1_resolve_through_model_of_function_10_contribute_to_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_plain_resolve_through_model,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d7ee3999dbaf9029570c30d09be176cd,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related,
        dparse_function_1_set_managed_of_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related,
        _python_str_plain_set_managed,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9a4d2e0843356beed72c27be1a97d421,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_20_contribute_to_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_contribute_to_class,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a4cb6276cd8795dc1d13ae4dc5dcdf7f,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_21_contribute_to_related_class_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_contribute_to_related_class,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c562271a9b14a08de9bccd536996de3a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_2___get___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain___get__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_15c6fb5fbd26db5b6787bbd6de704f70,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        dparse_function_2__get_fk_val_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        _python_str_plain__get_fk_val,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_cef46977aa250b0edf04cedab41c8744,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_966831cd5699f82303a4168afce89cbe
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_function_2__get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_plain__get_path_info,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9c360c3537c54bec6819fb5242989b77,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_a254f98b557af18688fbf02b9a527904
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related,
        dparse_function_2_contribute_to_class_of_class_3_RelatedField_of_module_django__db__models__fields__related,
        _python_str_plain_contribute_to_class,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_bc5b0aeaebfc7156df826839387a6c62,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related,
        dparse_function_2_contribute_to_related_class_of_class_17_OneToOneField_of_module_django__db__models__fields__related,
        _python_str_plain_contribute_to_related_class,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1821cae5287129aa8d5931f7bae9de53,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_do_pending_lookups_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_do_pending_lookups_of_module_django__db__models__fields__related,
        dparse_function_2_do_pending_lookups_of_module_django__db__models__fields__related,
        _python_str_plain_do_pending_lookups,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ba13a8aad5dbb25e08e1152bf7a22edc,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_cf5e887b45f5e646fab93da2d4140a3a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_RelatedManager, PyObjectSharedLocalVariable &python_closure_rel_field )
{
    struct _context_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = new _context_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_RelatedManager.shareWith( python_closure_RelatedManager );
    _python_context->python_closure_rel_field.shareWith( python_closure_rel_field );

    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_get_queryset,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8b278fa88effb4373d6b32fbfdd5ddc5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_function_2_get_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related,
        dparse_function_2_get_related_field_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related,
        _python_str_plain_get_related_field,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3c72c46db8cabe33395d934386efe0a8,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_82c3fec75ac4c17eb70ba219b17c07e5
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        dparse_function_2_is_cached_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_is_cached,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d28d5ae34d13fda664469a4ea2a69fff,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        dparse_function_2_is_cached_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_is_cached,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b549b315fff229a29ff20b65f5774428,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related,
        dparse_function_2_is_hidden_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related,
        _python_str_plain_is_hidden,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_13494ae8b97205b42678dff13707433a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_889df57e9eb40000ee60a6da0002ccd7
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related,
        dparse_function_2_is_hidden_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related,
        _python_str_plain_is_hidden,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4c26c8c5ceddac790385258a46dc37b4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_889df57e9eb40000ee60a6da0002ccd7
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        dparse_function_2_related_field_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        _python_str_plain_related_field,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_92fef04af27b9fde2e76e7ebdef3d057,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_2_related_manager_cls_of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_related_manager_cls,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c4560a0564ea47de05e4649ddf4726dd,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_2_resolve_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_resolve_related_fields,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8c9a391b76db83fb68aeed5651ece7f0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_2_through_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_through,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_be3af78577d3246db94fc7b8887cf3be,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_3___get___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain___get__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6c1739ff01a8c89569906acd4372192f,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_3___set___of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain___set__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_bf8d236350922751c13bc7cd262a0d5b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related,
        dparse_function_3_formfield_of_class_17_OneToOneField_of_module_django__db__models__fields__related,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d32e38f9f80f17e56d5fdeb6be941d79,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related,
        dparse_function_3_get_joining_columns_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related,
        _python_str_plain_get_joining_columns,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d404c4f9c2a77342dd45a5476a3370f3,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_function_3_get_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_plain_get_path_info,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_dcf62c7a9921ce2e8313312d8e3eb386,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_RelatedManager, PyObjectSharedLocalVariable &python_closure_rel_field )
{
    struct _context_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = new _context_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_RelatedManager.shareWith( python_closure_RelatedManager );
    _python_context->python_closure_rel_field.shareWith( python_closure_rel_field );

    PyObject *result = Nuitka_Function_New(
        fparse_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_get_prefetch_queryset,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d2ef755b7b61bcc647cc45d70fb1ae72,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_function_3_get_prefetch_queryset_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_ManyRelatedManager )
{
    struct _context_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = new _context_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_ManyRelatedManager.shareWith( python_closure_ManyRelatedManager );

    PyObject *result = Nuitka_Function_New(
        fparse_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        dparse_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        _python_str_plain_get_queryset,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6b2fc2f17f340f69ea98b4dff3edbf0d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_function_3_get_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        dparse_function_3_get_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_get_queryset,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_16beb6b8ed16da453e0464b2a8319278,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        dparse_function_3_get_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_get_queryset,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_95d09e31206407c206d9e3f401deaa5b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related,
        dparse_function_3_get_related_field_of_class_14_ManyToManyRel_of_module_django__db__models__fields__related,
        _python_str_plain_get_related_field,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_12dc72b770fb5444aa7d2eb79679d3ba,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_41fd178e1958b1109e2ac56d25d5b829
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        dparse_function_3_get_reverse_path_info_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        _python_str_plain_get_reverse_path_info,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e60679a6cda76725d69511d32085489c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_028e65d9cd071b6d7efacde835e29a54
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_3_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_related_fields,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_418adea6a5629015e80ac141bb699f64,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_3_related_manager_cls_of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_related_manager_cls,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_68a32a5eb4ef11cac8b5c869e2109207,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related,
        dparse_function_3_set_attributes_from_rel_of_class_3_RelatedField_of_module_django__db__models__fields__related,
        _python_str_plain_set_attributes_from_rel,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4c143e6082456ae695f0b64a6e74ac9f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related,
        dparse_function_3_set_field_name_of_class_12_ManyToOneRel_of_module_django__db__models__fields__related,
        _python_str_plain_set_field_name,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_20b5fce71b50e00198f44914e98aeb35,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_4___get___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain___get__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7ac7865b0c1245dea0f6a762f8f6cebe,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_4___set___of_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain___set__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6a70840a53e0f236099e671eacdc029f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_rel_field )
{
    struct _context_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = new _context_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_rel_field.shareWith( python_closure_rel_field );

    PyObject *result = Nuitka_Function_New(
        fparse_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_add,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3b246849b82d09e0ad58c942ba86b684,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_function_4_add_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related,
        dparse_function_4_do_related_class_of_class_3_RelatedField_of_module_django__db__models__fields__related,
        _python_str_plain_do_related_class,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0e9a372826592849853aab29adc747a4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related,
        dparse_function_4_get_extra_restriction_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related,
        _python_str_plain_get_extra_restriction,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_dad67b4c0ce8686681c133deffa2d34a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_ManyRelatedManager )
{
    struct _context_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = new _context_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_ManyRelatedManager.shareWith( python_closure_ManyRelatedManager );

    PyObject *result = Nuitka_Function_New(
        fparse_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        dparse_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        _python_str_plain_get_prefetch_queryset,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ec7a67018d241b0e67e9dcd266573da2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        dparse_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_get_prefetch_queryset,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0e5350cfbd538e0fa91c20eb9baa856c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        dparse_function_4_get_prefetch_queryset_of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_get_prefetch_queryset,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6b8e4b71780de64a63a8775a43723386,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_function_4_get_reverse_path_info_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_plain_get_reverse_path_info,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_bb3a44daa62217c6b565c7b2ccc6fc6f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_related_manager_cls,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a5ea7752676b2913f5ae854be69ba24c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_4_reverse_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_reverse_related_fields,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b923136b93c9beb886d812ccab1b1a64,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related,
        dparse_function_4_save_form_data_of_class_17_OneToOneField_of_module_django__db__models__fields__related,
        _python_str_plain_save_form_data,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_07a6b1631c6410332afeadc89473b72d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        dparse_function_4_validate_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        _python_str_plain_validate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e860ffd75e513f8d38247dc0e2ec5c85,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        dparse_function_5___get___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain___get__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_826b83c79bcf6360945c4fc14709ded0,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        dparse_function_5___get___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain___get__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_bc20b1a5a572e80559fb184efea8fa29,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_5___set___of_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain___set__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1a9c9c949b4ef9b5da703d6c2e028a96,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        dparse_function_5_add_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        _python_str_plain_add,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_819f81e2496b2c73c8ab43527194b77e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_RelatedManager, PyObjectSharedLocalVariable &python_closure_rel_field )
{
    struct _context_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = new _context_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_RelatedManager.shareWith( python_closure_RelatedManager );
    _python_context->python_closure_rel_field.shareWith( python_closure_rel_field );

    PyObject *result = Nuitka_Function_New(
        fparse_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_create,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5ce791380cf003f4f0d95ba322192e86,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_function_5_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        dparse_function_5_get_attname_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        _python_str_plain_get_attname,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5c13a23d2c97d9315b958f4e27b9fbed,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_function_5_get_choices_default_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_plain_get_choices_default,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_aa7748bccccb41cf1b9f556b42692f37,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_5_local_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_local_related_fields,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_51cf0c6b5561923f2ddd4c643a8ab1c7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related,
        dparse_function_5_related_query_name_of_class_3_RelatedField_of_module_django__db__models__fields__related,
        _python_str_plain_related_query_name,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f5ce7a5ec9a158a5c33edb9a96940fcd,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related,
        dparse_function_5_set_field_name_of_class_11_ForeignObjectRel_of_module_django__db__models__fields__related,
        _python_str_plain_set_field_name,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8ed78ce37a0b4a41772aa048d7a3a568,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_87e672dedf6c61182bad96cbc8b297df
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        dparse_function_6___set___of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain___set__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_04c25a7a25a7c648761f4e2bbb67b45a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        dparse_function_6___set___of_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain___set__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e0d3522756e588f9a102c7f7d600f9ca,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_function_6__get_m2m_db_table_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_plain__get_m2m_db_table,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_16887cc3cac341a3a6023215d2644cc7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_90a7980bf41dd97981ce0b7bf5d0a5c8
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_6_foreign_related_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_foreign_related_fields,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6f316f14d461a077c577a6d473881f90,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        dparse_function_6_get_attname_column_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        _python_str_plain_get_attname_column,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b02784da14320529e493f165e94be0ce,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_RelatedManager, PyObjectSharedLocalVariable &python_closure_rel_field )
{
    struct _context_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = new _context_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_RelatedManager.shareWith( python_closure_RelatedManager );
    _python_context->python_closure_rel_field.shareWith( python_closure_rel_field );

    PyObject *result = Nuitka_Function_New(
        fparse_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_get_or_create,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2fb93090ecdb5ac0db42a220824e25bf,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_function_6_get_or_create_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        dparse_function_6_remove_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        _python_str_plain_remove,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_97c5a40392872e12d420c1c983326d0a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_function_7__get_m2m_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_plain__get_m2m_attr,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f0f5c4838325c617ab6b176cfc2f51a7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_8b975189668477104bea773782fcc6d3
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        dparse_function_7_clear_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        _python_str_plain_clear,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d3a9811d01a03df6eec8eeb0075758a5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_7_get_local_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_get_local_related_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d169825280e017514d77790ca3a98ddf,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        dparse_function_7_get_validator_unique_lookup_type_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        _python_str_plain_get_validator_unique_lookup_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5478e3c1a57adb721dd8dfdd8e986526,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_rel_field )
{
    struct _context_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = new _context_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_rel_field.shareWith( python_closure_rel_field );

    PyObject *result = Nuitka_Function_New(
        fparse_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_remove,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_36c27b941084ad327a58ce664db80956,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_function_7_remove_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_function_8__get_m2m_reverse_attr_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_plain__get_m2m_reverse_attr,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_fcf492d019d91e3ef02de73f55d3d541,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_a0897b7744255563d840dcd709f9878c
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_rel_field )
{
    struct _context_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t *_python_context = new _context_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_rel_field.shareWith( python_closure_rel_field );

    PyObject *result = Nuitka_Function_New(
        fparse_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        dparse_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related,
        _python_str_plain_clear,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_02f7367a50cc860b37bd851714ee471d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_function_8_clear_of_class_1_RelatedManager_of_function_4_related_manager_cls_of_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        dparse_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        _python_str_plain_create_many_related_manager,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c0cddba87982c46033093486e4af38d9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_f423260989e0247c1eda137ec05dcdd4
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_ManyRelatedManager )
{
    struct _context_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = new _context_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_ManyRelatedManager.shareWith( python_closure_ManyRelatedManager );

    PyObject *result = Nuitka_Function_New(
        fparse_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        dparse_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        _python_str_plain_create,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_42273badce720345eb5152e45de56798,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_function_8_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        dparse_function_8_get_default_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        _python_str_plain_get_default,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9a5ab59e3c58bbdcf07acc70d59a53cf,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        _python_str_digest_3d30c641dcee4095b84e2efbe15728b9
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_8_get_foreign_related_value_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_get_foreign_related_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4ff53508df429bcf790919e14c93ede3,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        dparse_function_9_get_db_prep_save_of_class_16_ForeignKey_of_module_django__db__models__fields__related,
        _python_str_plain_get_db_prep_save,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a987a67ce52c817589cb3163acca428c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        dparse_function_9_get_instance_value_for_fields_of_class_15_ForeignObject_of_module_django__db__models__fields__related,
        _python_str_plain_get_instance_value_for_fields,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7f62245277b9675e0d3389b70a753633,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_ManyRelatedManager )
{
    struct _context_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = new _context_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_ManyRelatedManager.shareWith( python_closure_ManyRelatedManager );

    PyObject *result = Nuitka_Function_New(
        fparse_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        dparse_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        _python_str_plain_get_or_create,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b069e9a410d20ed55f4799ddb13cd55d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_function_9_get_or_create_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_function_9_value_to_string_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_plain_value_to_string,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6b82f9717d5f3ab5366e4affbaa88a86,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_get_m2m_rel )
{
    struct _context_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_t *_python_context = new _context_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_get_m2m_rel.shareWith( python_closure_get_m2m_rel );

    PyObject *result = Nuitka_Function_New(
        fparse_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b286a952a6d49b45e0128057d4eae042,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_lambda_1_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        dparse_lambda_1_lambda_of_function_4_get_prefetch_queryset_of_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related,
        _python_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a0f34d4020f97e5efaa5c5013ca6b3ab,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_get_m2m_reverse_rel )
{
    struct _context_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_t *_python_context = new _context_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_get_m2m_reverse_rel.shareWith( python_closure_get_m2m_reverse_rel );

    PyObject *result = Nuitka_Function_New(
        fparse_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        dparse_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related,
        _python_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_62c8c908ddd49b4245e1dba30eaaaaa2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_lambda_2_lambda_of_function_11_contribute_to_related_class_of_class_19_ManyToManyField_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_fk )
{
    struct _context_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = new _context_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_fk.shareWith( python_closure_fk );

    PyObject *result = Nuitka_Function_New(
        fparse_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        dparse_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        _python_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_896cd3160fd989798af653fe16c9f4fa,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_lambda_2_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related( PyObjectSharedLocalVariable &python_closure_fk )
{
    struct _context_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t *_python_context = new _context_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_fk.shareWith( python_closure_fk );

    PyObject *result = Nuitka_Function_New(
        fparse_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        dparse_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related,
        _python_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_527108c14224893838e7431e73b2ac85,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields__related,
        Py_None,
        _python_context,
        _context_lambda_3_lambda_of_function_4_get_prefetch_queryset_of_class_1_ManyRelatedManager_of_function_8_create_many_related_manager_of_module_django__db__models__fields__related_destructor
    );

    return result;
}


#if PYTHON_VERSION >= 300
static struct PyModuleDef _moduledef =
{
    PyModuleDef_HEAD_INIT,
    "django.db.models.fields.related",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#define _MODULE_UNFREEZER 0

#if _MODULE_UNFREEZER
// For embedded modules, to be unpacked. Used by main program/package only
extern void registerMetaPathBasedUnfreezer( struct _inittab *_frozen_modules );

// Our own inittab for lookup of "frozen" modules, i.e. the ones included in this binary.
static struct _inittab _frozen_modules[] =
{

    { NULL, NULL }
};

// For loader attribute.
#if PYTHON_VERSION >= 330
extern PyObject *loader_frozen_modules;
#endif

#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( django__db__models__fields__related )
{

#if defined( _NUITKA_EXE ) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Packages can be imported recursively in deep executables.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( _module_django__db__models__fields__related );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    _initConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );

    patchInspectModule();

    patchBuiltinModule();
#endif

#if _MODULE_UNFREEZER
    registerMetaPathBasedUnfreezer( _frozen_modules );
#endif

    // puts( "in initdjango__db__models__fields__related" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    _module_django__db__models__fields__related = Py_InitModule4(
        "django.db.models.fields.related",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    _module_django__db__models__fields__related = PyModule_Create( &_moduledef );
#endif

    _moduledict_django__db__models__fields__related = (PyDictObject *)((PyModuleObject *)_module_django__db__models__fields__related)->md_dict;

    assertObject( _module_django__db__models__fields__related );

#ifndef _NUITKA_MODULE
// Seems to work for Python2.7 out of the box, but for Python3.2, the module
// doesn't automatically enter "sys.modules" with the object that it should, so
// do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), _python_str_digest_429a1979feac8a565a5c2aef69a2e26c, _module_django__db__models__fields__related );

        assert( r != -1 );
    }
#endif
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( _module_django__db__models__fields__related );

    if ( PyDict_GetItem( module_dict, _python_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = ( PyObject *)module_builtin;

#ifdef _NUITKA_EXE
        if ( _module_django__db__models__fields__related != _module___main__ )
        {
#endif
            value = PyModule_GetDict( value );
#ifdef _NUITKA_EXE
        }
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, _python_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
#if _MODULE_UNFREEZER
    PyDict_SetItem( module_dict, _python_str_plain___loader__, loader_frozen_modules );
#else
    PyDict_SetItem( module_dict, _python_str_plain___loader__, Py_None );
#endif
#endif

    // Module code
    UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain___doc__, Py_None );
    UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain___file__, _python_str_digest_c394d7ef4d938379f398440b51d5cae7 );
    PyFrameObject *frame_module_django__db__models__fields__related = MAKE_FRAME( _codeobj_190234c16bd404a2d7590aea36e51e6b, _module_django__db__models__fields__related );

    FrameGuard frame_guard( frame_module_django__db__models__fields__related );
    try
    {
        assert( Py_REFCNT( frame_module_django__db__models__fields__related ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_attrgetter, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain_operator, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_attrgetter_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_attrgetter ) );
        frame_guard.setLineNumber( 3 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_connection, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_391c2f4b507ae374cc9606a76384636e, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_connection_str_plain_connections_str_plain_router_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_connection ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_connections, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_391c2f4b507ae374cc9606a76384636e, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_connection_str_plain_connections_str_plain_router_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_connections ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_router, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_391c2f4b507ae374cc9606a76384636e, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_connection_str_plain_connections_str_plain_router_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_router ) );
        frame_guard.setLineNumber( 4 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_util, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_67631acd3c65ad614c0beb0db7bbe60a, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_util_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_util ) );
        frame_guard.setLineNumber( 5 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_signals, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_cb8fece6bec5decd96c3feee6d1288d4, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_signals_str_plain_get_model_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_signals ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_get_model, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_cb8fece6bec5decd96c3feee6d1288d4, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_signals_str_plain_get_model_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_get_model ) );
        frame_guard.setLineNumber( 6 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_AutoField, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_a15da66f68fa45171bbcd4f7a464bcd8, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_783191c8b735c7e7c2a8f1d4508878cd_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_AutoField ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_Field, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_a15da66f68fa45171bbcd4f7a464bcd8, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_783191c8b735c7e7c2a8f1d4508878cd_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_Field ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_IntegerField, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_a15da66f68fa45171bbcd4f7a464bcd8, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_783191c8b735c7e7c2a8f1d4508878cd_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_IntegerField ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_PositiveIntegerField, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_a15da66f68fa45171bbcd4f7a464bcd8, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_783191c8b735c7e7c2a8f1d4508878cd_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_PositiveIntegerField ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_PositiveSmallIntegerField, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_a15da66f68fa45171bbcd4f7a464bcd8, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_783191c8b735c7e7c2a8f1d4508878cd_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_PositiveSmallIntegerField ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_FieldDoesNotExist, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_a15da66f68fa45171bbcd4f7a464bcd8, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_783191c8b735c7e7c2a8f1d4508878cd_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_FieldDoesNotExist ) );
        frame_guard.setLineNumber( 8 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_RelatedObject, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_df3af17e9a1169756a1e6ec2e5c5be9c, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_RelatedObject_str_plain_PathInfo_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_RelatedObject ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_PathInfo, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_df3af17e9a1169756a1e6ec2e5c5be9c, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_RelatedObject_str_plain_PathInfo_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_PathInfo ) );
        frame_guard.setLineNumber( 9 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_QuerySet, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_7724c9571b8badb7e606430d6fe9b7eb, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_QuerySet_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_QuerySet ) );
        frame_guard.setLineNumber( 10 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_CASCADE, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_8638e65d7a0f1d4a4dd67c303bb33fe0, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_CASCADE_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_CASCADE ) );
        frame_guard.setLineNumber( 11 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_smart_text, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_5c6adb5fc6275b5d2a085f73ed00809a, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_smart_text_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_smart_text ) );
        frame_guard.setLineNumber( 12 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_six, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_11a3eb3229bb1ce81f02aa3fc01149d5, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_six_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_six ) );
        frame_guard.setLineNumber( 13 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_RenameMethodsBase, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_82e2052e97d6975cbf1c3e3aad670491, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_RenameMethodsBase_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_RenameMethodsBase ) );
        frame_guard.setLineNumber( 14 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain__, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_695d25035a0d5e79b21b6e2fa3e00631, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_ugettext_lazy_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_ugettext_lazy ) );
        frame_guard.setLineNumber( 15 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_curry, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_17c58b9ed63e22a2fe75ba31286ba1f7, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_curry_str_plain_cached_property_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_curry ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_cached_property, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_17c58b9ed63e22a2fe75ba31286ba1f7, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_curry_str_plain_cached_property_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_cached_property ) );
        frame_guard.setLineNumber( 16 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_exceptions, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_7fde38a6b8ad78c8ebb1bdff593c9e48, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_exceptions_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_exceptions ) );
        frame_guard.setLineNumber( 17 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_forms, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain_django, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict, _python_list_str_plain_forms_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_forms ) );
        UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_RECURSIVE_RELATIONSHIP_CONSTANT, _python_str_plain_self );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_pending_lookups, PyDict_New() );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_add_lazy_relation, MAKE_FUNCTION_function_1_add_lazy_relation_of_module_django__db__models__fields__related(  ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_do_pending_lookups, MAKE_FUNCTION_function_2_do_pending_lookups_of_module_django__db__models__fields__related(  ) );
        frame_guard.setLineNumber( 91 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_signals.asObject0(), _python_str_plain_class_prepared ) ).asObject(), _python_str_plain_connect ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _mvar_django__db__models__fields__related_do_pending_lookups.asObject0() ) ) );
        }
        {
            frame_guard.setLineNumber( 95 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields__related_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_3_RelatedField_of_module_django__db__models__fields__related(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call3;
                PyObjectTempKeeper0 call5;
                _tmp_python_tmp_class = ( call3.assign( _python_tmp_metaclass.asObject() ), call5.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_str_plain_RelatedField, call5.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_RelatedField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 145 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields__related_RenameMethodsBase.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_4_RenameRelatedObjectDescriptorMethods_of_module_django__db__models__fields__related(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call7;
                PyObjectTempKeeper0 call9;
                _tmp_python_tmp_class = ( call7.assign( _python_tmp_metaclass.asObject() ), call9.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_str_plain_RenameRelatedObjectDescriptorMethods, call9.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_RenameRelatedObjectDescriptorMethods, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 152 );
            PyObject *_tmp_python_tmp_bases;
            {
                PyObjectTempKeeper1 call11;
                _tmp_python_tmp_bases = MAKE_TUPLE1( PyObjectTemporary( ( call11.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_six.asObject0(), _python_str_plain_with_metaclass ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _mvar_django__db__models__fields__related_RenameRelatedObjectDescriptorMethods.asObject0() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_bases( _tmp_python_tmp_bases );
            PyObjectTemporary _python_tmp_class_dict( impl_class_5_SingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call13;
                PyObjectTempKeeper0 call15;
                _tmp_python_tmp_class = ( call13.assign( _python_tmp_metaclass.asObject() ), call15.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), _python_str_plain_SingleRelatedObjectDescriptor, call15.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_SingleRelatedObjectDescriptor, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 249 );
            PyObject *_tmp_python_tmp_bases;
            {
                PyObjectTempKeeper1 call17;
                _tmp_python_tmp_bases = MAKE_TUPLE1( PyObjectTemporary( ( call17.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields__related_six.asObject0(), _python_str_plain_with_metaclass ) ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), _mvar_django__db__models__fields__related_RenameRelatedObjectDescriptorMethods.asObject0() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_bases( _tmp_python_tmp_bases );
            PyObjectTemporary _python_tmp_class_dict( impl_class_6_ReverseSingleRelatedObjectDescriptor_of_module_django__db__models__fields__related(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call19;
                PyObjectTempKeeper0 call21;
                _tmp_python_tmp_class = ( call19.assign( _python_tmp_metaclass.asObject() ), call21.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), _python_str_plain_ReverseSingleRelatedObjectDescriptor, call21.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_ReverseSingleRelatedObjectDescriptor, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 366 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_7_ForeignRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call23;
                PyObjectTempKeeper0 call25;
                _tmp_python_tmp_class = ( call23.assign( _python_tmp_metaclass.asObject() ), call25.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call23.asObject0(), _python_str_plain_ForeignRelatedObjectsDescriptor, call25.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_ForeignRelatedObjectsDescriptor, _python_tmp_class.asObject() );
        }
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_create_many_related_manager, MAKE_FUNCTION_function_8_create_many_related_manager_of_module_django__db__models__fields__related(  ) );
        {
            frame_guard.setLineNumber( 722 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_9_ManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call27;
                PyObjectTempKeeper0 call29;
                _tmp_python_tmp_class = ( call27.assign( _python_tmp_metaclass.asObject() ), call29.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), _python_str_plain_ManyRelatedObjectsDescriptor, call29.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_ManyRelatedObjectsDescriptor, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 771 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_10_ReverseManyRelatedObjectsDescriptor_of_module_django__db__models__fields__related(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call31;
                PyObjectTempKeeper0 call33;
                _tmp_python_tmp_class = ( call31.assign( _python_tmp_metaclass.asObject() ), call33.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call31.asObject0(), _python_str_plain_ReverseManyRelatedObjectsDescriptor, call33.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_ReverseManyRelatedObjectsDescriptor, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 827 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_11_ForeignObjectRel_of_module_django__db__models__fields__related(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call35;
                PyObjectTempKeeper0 call37;
                _tmp_python_tmp_class = ( call35.assign( _python_tmp_metaclass.asObject() ), call37.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call35.asObject0(), _python_str_plain_ForeignObjectRel, call37.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_ForeignObjectRel, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 863 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields__related_ForeignObjectRel.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_12_ManyToOneRel_of_module_django__db__models__fields__related(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call39;
                PyObjectTempKeeper0 call41;
                _tmp_python_tmp_class = ( call39.assign( _python_tmp_metaclass.asObject() ), call41.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call39.asObject0(), _python_str_plain_ManyToOneRel, call41.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_ManyToOneRel, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 886 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields__related_ManyToOneRel.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_13_OneToOneRel_of_module_django__db__models__fields__related(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call43;
                PyObjectTempKeeper0 call45;
                _tmp_python_tmp_class = ( call43.assign( _python_tmp_metaclass.asObject() ), call45.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call43.asObject0(), _python_str_plain_OneToOneRel, call45.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_OneToOneRel, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 896 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_14_ManyToManyRel_of_module_django__db__models__fields__related(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call47;
                PyObjectTempKeeper0 call49;
                _tmp_python_tmp_class = ( call47.assign( _python_tmp_metaclass.asObject() ), call49.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call47.asObject0(), _python_str_plain_ManyToManyRel, call49.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_ManyToManyRel, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 924 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields__related_RelatedField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_15_ForeignObject_of_module_django__db__models__fields__related(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call51;
                PyObjectTempKeeper0 call53;
                _tmp_python_tmp_class = ( call51.assign( _python_tmp_metaclass.asObject() ), call53.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call51.asObject0(), _python_str_plain_ForeignObject, call53.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_ForeignObject, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1116 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields__related_ForeignObject.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_16_ForeignKey_of_module_django__db__models__fields__related(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call55;
                PyObjectTempKeeper0 call57;
                _tmp_python_tmp_class = ( call55.assign( _python_tmp_metaclass.asObject() ), call57.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call55.asObject0(), _python_str_plain_ForeignKey, call57.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_ForeignKey, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1251 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields__related_ForeignKey.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_17_OneToOneField_of_module_django__db__models__fields__related(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call59;
                PyObjectTempKeeper0 call61;
                _tmp_python_tmp_class = ( call59.assign( _python_tmp_metaclass.asObject() ), call61.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call59.asObject0(), _python_str_plain_OneToOneField, call61.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_OneToOneField, _python_tmp_class.asObject() );
        }
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_create_many_to_many_intermediary_model, MAKE_FUNCTION_function_18_create_many_to_many_intermediary_model_of_module_django__db__models__fields__related(  ) );
        {
            frame_guard.setLineNumber( 1324 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields__related_RelatedField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_19_ManyToManyField_of_module_django__db__models__fields__related(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields__related___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields__related___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call63;
                PyObjectTempKeeper0 call65;
                _tmp_python_tmp_class = ( call63.assign( _python_tmp_metaclass.asObject() ), call65.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call63.asObject0(), _python_str_plain_ManyToManyField, call65.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields__related, (Nuitka_StringObject *)_python_str_plain_ManyToManyField, _python_tmp_class.asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

#if 0
    // TODO: Recognize the need for it
        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = INCREASE_REFCOUNT( ((PyModuleObject *)_module_django__db__models__fields__related)->md_dict );
#endif

    // Return the error.
        _exception.toPython();
        return MOD_RETURN_VALUE( NULL );
    }

   return MOD_RETURN_VALUE( _module_django__db__models__fields__related );
}
