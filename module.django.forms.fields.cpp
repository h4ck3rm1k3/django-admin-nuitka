// Generated code for Python source for module 'django.forms.fields'
// created by Nuitka version 0.4.4pre3

// This code is in part copyright 2013 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__modules.hpp"
#include "__constants.hpp"
#include "__helpers.hpp"

// The _module_django__forms__fields is a Python object pointer of module type.

// Note: For full compatability with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *_module_django__forms__fields;
PyDictObject *_moduledict_django__forms__fields;

// The module level variables.
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_BaseTemporalField( &_module_django__forms__fields, &_python_str_plain_BaseTemporalField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_BooleanField( &_module_django__forms__fields, &_python_str_plain_BooleanField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_BytesIO( &_module_django__forms__fields, &_python_str_plain_BytesIO );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_CharField( &_module_django__forms__fields, &_python_str_plain_CharField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_CheckboxInput( &_module_django__forms__fields, &_python_str_plain_CheckboxInput );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_ChoiceField( &_module_django__forms__fields, &_python_str_plain_ChoiceField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_ClearableFileInput( &_module_django__forms__fields, &_python_str_plain_ClearableFileInput );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_ComboField( &_module_django__forms__fields, &_python_str_plain_ComboField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_DateField( &_module_django__forms__fields, &_python_str_plain_DateField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_DateInput( &_module_django__forms__fields, &_python_str_plain_DateInput );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_DateTimeField( &_module_django__forms__fields, &_python_str_plain_DateTimeField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_DateTimeInput( &_module_django__forms__fields, &_python_str_plain_DateTimeInput );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_Decimal( &_module_django__forms__fields, &_python_str_plain_Decimal );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_DecimalException( &_module_django__forms__fields, &_python_str_plain_DecimalException );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_DecimalField( &_module_django__forms__fields, &_python_str_plain_DecimalField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_EmailField( &_module_django__forms__fields, &_python_str_plain_EmailField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_EmailInput( &_module_django__forms__fields, &_python_str_plain_EmailInput );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_ErrorList( &_module_django__forms__fields, &_python_str_plain_ErrorList );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_FILE_INPUT_CONTRADICTION( &_module_django__forms__fields, &_python_str_plain_FILE_INPUT_CONTRADICTION );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_Field( &_module_django__forms__fields, &_python_str_plain_Field );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_FileField( &_module_django__forms__fields, &_python_str_plain_FileField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_FilePathField( &_module_django__forms__fields, &_python_str_plain_FilePathField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_FloatField( &_module_django__forms__fields, &_python_str_plain_FloatField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_GenericIPAddressField( &_module_django__forms__fields, &_python_str_plain_GenericIPAddressField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_HiddenInput( &_module_django__forms__fields, &_python_str_plain_HiddenInput );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_ImageField( &_module_django__forms__fields, &_python_str_plain_ImageField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_IntegerField( &_module_django__forms__fields, &_python_str_plain_IntegerField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_MultiValueField( &_module_django__forms__fields, &_python_str_plain_MultiValueField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_MultipleChoiceField( &_module_django__forms__fields, &_python_str_plain_MultipleChoiceField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_MultipleHiddenInput( &_module_django__forms__fields, &_python_str_plain_MultipleHiddenInput );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_NullBooleanSelect( &_module_django__forms__fields, &_python_str_plain_NullBooleanSelect );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_NumberInput( &_module_django__forms__fields, &_python_str_plain_NumberInput );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_RegexField( &_module_django__forms__fields, &_python_str_plain_RegexField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_Select( &_module_django__forms__fields, &_python_str_plain_Select );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_SelectMultiple( &_module_django__forms__fields, &_python_str_plain_SelectMultiple );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_SlugField( &_module_django__forms__fields, &_python_str_plain_SlugField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_SplitDateTimeField( &_module_django__forms__fields, &_python_str_plain_SplitDateTimeField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_SplitDateTimeWidget( &_module_django__forms__fields, &_python_str_plain_SplitDateTimeWidget );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_SplitHiddenDateTimeWidget( &_module_django__forms__fields, &_python_str_plain_SplitHiddenDateTimeWidget );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_TextInput( &_module_django__forms__fields, &_python_str_plain_TextInput );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_TimeField( &_module_django__forms__fields, &_python_str_plain_TimeField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_TimeInput( &_module_django__forms__fields, &_python_str_plain_TimeInput );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_TypedChoiceField( &_module_django__forms__fields, &_python_str_plain_TypedChoiceField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_TypedMultipleChoiceField( &_module_django__forms__fields, &_python_str_plain_TypedMultipleChoiceField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_URLField( &_module_django__forms__fields, &_python_str_plain_URLField );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_URLInput( &_module_django__forms__fields, &_python_str_plain_URLInput );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_ValidationError( &_module_django__forms__fields, &_python_str_plain_ValidationError );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields__( &_module_django__forms__fields, &_python_str_plain__ );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields___metaclass__( &_module_django__forms__fields, &_python_str_plain___metaclass__ );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_clean_ipv6_address( &_module_django__forms__fields, &_python_str_plain_clean_ipv6_address );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_copy( &_module_django__forms__fields, &_python_str_plain_copy );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_datetime( &_module_django__forms__fields, &_python_str_plain_datetime );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_force_str( &_module_django__forms__fields, &_python_str_plain_force_str );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_force_text( &_module_django__forms__fields, &_python_str_plain_force_text );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_formats( &_module_django__forms__fields, &_python_str_plain_formats );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_from_current_timezone( &_module_django__forms__fields, &_python_str_plain_from_current_timezone );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_os( &_module_django__forms__fields, &_python_str_plain_os );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_re( &_module_django__forms__fields, &_python_str_plain_re );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_six( &_module_django__forms__fields, &_python_str_plain_six );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_smart_text( &_module_django__forms__fields, &_python_str_plain_smart_text );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_sys( &_module_django__forms__fields, &_python_str_plain_sys );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_to_current_timezone( &_module_django__forms__fields, &_python_str_plain_to_current_timezone );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_ungettext_lazy( &_module_django__forms__fields, &_python_str_plain_ungettext_lazy );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_urlsplit( &_module_django__forms__fields, &_python_str_plain_urlsplit );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_urlunsplit( &_module_django__forms__fields, &_python_str_plain_urlunsplit );
static PyObjectGlobalVariable_django__forms__fields _mvar_django__forms__fields_validators( &_module_django__forms__fields, &_python_str_plain_validators );

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_Field_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_2_CharField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_3_IntegerField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_4_FloatField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_5_DecimalField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_6_BaseTemporalField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_7_DateField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_8_TimeField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_9_DateTimeField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_10_RegexField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_11_EmailField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_12_FileField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_13_ImageField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_14_URLField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_15_BooleanField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_16_NullBooleanField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_17_ChoiceField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_18_TypedChoiceField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_19_MultipleChoiceField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_val );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_value );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_value );


NUITKA_LOCAL_MODULE PyObject *impl_class_20_TypedMultipleChoiceField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_21_ComboField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_22_MultiValueField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &python_closure_self, PyObjectLocalVariable &python_closure_v );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_class_23_FilePathField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_24_SplitDateTimeField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_25_IPAddressField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_26_GenericIPAddressField_of_module_django__forms__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_27_SlugField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_10_RegexField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_12_FileField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_14_URLField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_1_Field_of_module_django__forms__fields( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_21_ComboField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_2_CharField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields( PyObjectSharedLocalVariable &python_closure_self );


// This structure is for attachment as self of function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields.
// It is allocated at the time the function object is created.
struct _context_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable python_closure_self;
};

static void _context_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields_destructor( void *context_voidptr )
{
    _context_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields_t *_python_context = (_context_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_validate_of_class_16_NullBooleanField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_validate_of_class_22_MultiValueField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_3_clean_of_class_12_FileField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_3_clean_of_class_14_URLField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_1_Field_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_4_validate_of_class_1_Field_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_6_clean_of_class_1_Field_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_8_widget_attrs_of_class_1_Field_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields(  );


static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields(  );


// The module function definitions.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_Field_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );
    PyObjectLocalVariable _python_var_hidden_widget( _python_str_plain_hidden_widget );
    PyObjectLocalVariable _python_var_default_validators( _python_str_plain_default_validators );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var_empty_values( _python_str_plain_empty_values );
    PyObjectLocalVariable _python_var_creation_counter( _python_str_plain_creation_counter );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_prepare_value( _python_str_plain_prepare_value );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_validate( _python_str_plain_validate );
    PyObjectLocalVariable _python_var_run_validators( _python_str_plain_run_validators );
    PyObjectLocalVariable _python_var_clean( _python_str_plain_clean );
    PyObjectLocalVariable _python_var_bound_data( _python_str_plain_bound_data );
    PyObjectLocalVariable _python_var_widget_attrs( _python_str_plain_widget_attrs );
    PyObjectLocalVariable _python_var__has_changed( _python_str_plain__has_changed );
    PyObjectLocalVariable _python_var___deepcopy__( _python_str_plain___deepcopy__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_1_Field_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_1_Field_of_module_django__forms__fields ) )
    {
        if ( frame_class_1_Field_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_1_Field_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_1_Field_of_module_django__forms__fields );
        }

        frame_class_1_Field_of_module_django__forms__fields = MAKE_FRAME( _codeobj_2557926a5be3306a5b5c37e2ea088e29, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_1_Field_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_1_Field_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 50 );
        _python_var_widget.assign0( _mvar_django__forms__fields_TextInput.asObject0() );
        frame_guard.setLineNumber( 51 );
        _python_var_hidden_widget.assign0( _mvar_django__forms__fields_HiddenInput.asObject0() );
        _python_var_default_validators.assign1( PyList_New( 0 ) );
        frame_guard.setLineNumber( 55 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_9303c9bd4f8178680dc382adbfcd62af ) ).asObject(), _python_unicode_plain_required ) );
        frame_guard.setLineNumber( 58 );
        _python_var_empty_values.assign1( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_validators.asObject0(), _python_str_plain_EMPTY_VALUES ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var___deepcopy__.updateLocalsDict( _python_var__has_changed.updateLocalsDict( _python_var_widget_attrs.updateLocalsDict( _python_var_bound_data.updateLocalsDict( _python_var_clean.updateLocalsDict( _python_var_run_validators.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_prepare_value.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_creation_counter.updateLocalsDict( _python_var_empty_values.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_default_validators.updateLocalsDict( _python_var_hidden_widget.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_1_Field_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_1_Field_of_module_django__forms__fields );
           frame_class_1_Field_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var_creation_counter.assign0( _python_int_0 );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_1_Field_of_module_django__forms__fields( MAKE_TUPLE9( Py_True, Py_None, Py_None, Py_None, _python_unicode_empty, Py_None, Py_False, PyObjectTemporary( PyList_New( 0 ) ).asObject(), Py_False ) ) );
    _python_var_prepare_value.assign1( MAKE_FUNCTION_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_3_to_python_of_class_1_Field_of_module_django__forms__fields(  ) );
    _python_var_validate.assign1( MAKE_FUNCTION_function_4_validate_of_class_1_Field_of_module_django__forms__fields(  ) );
    _python_var_run_validators.assign1( MAKE_FUNCTION_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields(  ) );
    _python_var_clean.assign1( MAKE_FUNCTION_function_6_clean_of_class_1_Field_of_module_django__forms__fields(  ) );
    _python_var_bound_data.assign1( MAKE_FUNCTION_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields(  ) );
    _python_var_widget_attrs.assign1( MAKE_FUNCTION_function_8_widget_attrs_of_class_1_Field_of_module_django__forms__fields(  ) );
    _python_var__has_changed.assign1( MAKE_FUNCTION_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields(  ) );
    _python_var___deepcopy__.assign1( MAKE_FUNCTION_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields(  ) );
    return _python_var___deepcopy__.updateLocalsDict( _python_var__has_changed.updateLocalsDict( _python_var_widget_attrs.updateLocalsDict( _python_var_bound_data.updateLocalsDict( _python_var_clean.updateLocalsDict( _python_var_run_validators.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_prepare_value.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_creation_counter.updateLocalsDict( _python_var_empty_values.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_default_validators.updateLocalsDict( _python_var_hidden_widget.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_required, PyObject *_python_par_widget, PyObject *_python_par_label, PyObject *_python_par_initial, PyObject *_python_par_help_text, PyObject *_python_par_error_messages, PyObject *_python_par_show_hidden_initial, PyObject *_python_par_validators, PyObject *_python_par_localize )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_required( _python_str_plain_required, _python_par_required );
    PyObjectLocalParameterVariableNoDel _python_var_widget( _python_str_plain_widget, _python_par_widget );
    PyObjectLocalParameterVariableNoDel _python_var_label( _python_str_plain_label, _python_par_label );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );
    PyObjectLocalParameterVariableNoDel _python_var_help_text( _python_str_plain_help_text, _python_par_help_text );
    PyObjectLocalParameterVariableNoDel _python_var_error_messages( _python_str_plain_error_messages, _python_par_error_messages );
    PyObjectLocalParameterVariableNoDel _python_var_show_hidden_initial( _python_str_plain_show_hidden_initial, _python_par_show_hidden_initial );
    PyObjectLocalParameterVariableNoDel _python_var_validators( _python_str_plain_validators, _python_par_validators );
    PyObjectLocalParameterVariableNoDel _python_var_localize( _python_str_plain_localize, _python_par_localize );
    PyObjectLocalVariable _python_var_extra_attrs( _python_str_plain_extra_attrs );
    PyObjectLocalVariable _python_var_messages( _python_str_plain_messages );
    PyObjectLocalVariable _python_var_c( _python_str_plain_c );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_1_Field_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_1_Field_of_module_django__forms__fields ) )
    {
        if ( frame_function_1___init___of_class_1_Field_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_1_Field_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_1_Field_of_module_django__forms__fields );
        }

        frame_function_1___init___of_class_1_Field_of_module_django__forms__fields = MAKE_FRAME( _codeobj_64eb608e60e87ed4b95d1d8265df3864, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_1_Field_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_1_Field_of_module_django__forms__fields ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 85 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple1;
                PyObjectTempKeeper0 make_tuple2;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( _python_var_required.asObject() ), make_tuple2.assign( _python_var_label.asObject() ), MAKE_TUPLE3( make_tuple1.asObject0(), make_tuple2.asObject0(), _python_var_initial.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 3 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_required );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_label );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_3.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_initial );
            }
        }
        frame_guard.setLineNumber( 86 );
        {
                PyObject *tmp_identifier = _python_var_show_hidden_initial.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_show_hidden_initial );
        }
        frame_guard.setLineNumber( 87 );
        {
                PyObject *tmp_identifier = _python_var_help_text.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_help_text );
        }
        frame_guard.setLineNumber( 88 );
        {
            PyObjectTempKeeper0 keeper_0;
            _python_var_widget.assign1( ( CHECK_IF_TRUE( keeper_0.assign( _python_var_widget.asObject() ) ) ? INCREASE_REFCOUNT( keeper_0.asObject0() ) : LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_widget ) ) );
        }
        frame_guard.setLineNumber( 89 );
        if ( BUILTIN_ISINSTANCE_BOOL( _python_var_widget.asObject(), LOOKUP_BUILTIN( _python_str_plain_type ) ) )
        {
            frame_guard.setLineNumber( 90 );
            _python_var_widget.assign1( CALL_FUNCTION_NO_ARGS( _python_var_widget.asObject() ) );
        }
        frame_guard.setLineNumber( 93 );
        {
                PyObject *tmp_identifier = _python_var_localize.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_localize );
        }
        frame_guard.setLineNumber( 94 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_localize ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 95 );
            SET_ATTRIBUTE( Py_True, _python_var_widget.asObject(), _python_str_plain_is_localized );
        }
        frame_guard.setLineNumber( 98 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_required ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_widget.asObject(), _python_str_plain_is_required );
        }
        frame_guard.setLineNumber( 101 );
        {
            PyObjectTempKeeper1 call4;
            _python_var_extra_attrs.assign1( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_widget_attrs ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_widget.asObject() ) ) );
        }
        frame_guard.setLineNumber( 102 );
        if ( CHECK_IF_TRUE( _python_var_extra_attrs.asObject() ) )
        {
            frame_guard.setLineNumber( 103 );
            {
                PyObjectTempKeeper1 call6;
                DECREASE_REFCOUNT( ( call6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_widget.asObject(), _python_str_plain_attrs ) ).asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_extra_attrs.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 105 );
        {
                PyObject *tmp_identifier = _python_var_widget.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_widget );
        }
        frame_guard.setLineNumber( 108 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_Field.asObject0(), _python_str_plain_creation_counter ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_creation_counter );
        }
        {
            frame_guard.setLineNumber( 109 );
            PyObjectTemporary _python_tmp_inplace_start( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_Field.asObject0(), _python_str_plain_creation_counter ) );
            PyObjectTemporary _python_tmp_inplace_end( BINARY_OPERATION( PyNumber_InPlaceAdd, _python_tmp_inplace_start.asObject(), _python_int_pos_1 ) );
            if ( ( _python_tmp_inplace_start.asObject() != _python_tmp_inplace_end.asObject() ) )
            {
                frame_guard.setLineNumber( 109 );
                {
                        PyObject *tmp_identifier = _python_tmp_inplace_end.asObject();
                        SET_ATTRIBUTE( tmp_identifier, _mvar_django__forms__fields_Field.asObject0(), _python_str_plain_creation_counter );
                }
            }
        }
        _python_var_messages.assign1( PyDict_New() );
        {
            frame_guard.setLineNumber( 112 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_reversed ), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___mro__ ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 112 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_c.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 113 );
                {
                    PyObjectTempKeeper1 call8;
                    DECREASE_REFCOUNT( ( call8.assign( LOOKUP_ATTRIBUTE( _python_var_messages.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), PyObjectTemporary( BUILTIN_GETATTR( _python_var_c.asObject(), _python_unicode_plain_default_error_messages, PyObjectTemporary( PyDict_New() ).asObject() ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 114 );
        {
            PyObjectTempKeeper1 call10;
            PyObjectTempKeeper0 keeper_1;
            DECREASE_REFCOUNT( ( call10.assign( LOOKUP_ATTRIBUTE( _python_var_messages.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), PyObjectTemporary( ( CHECK_IF_TRUE( keeper_1.assign( _python_var_error_messages.asObject() ) ) ? INCREASE_REFCOUNT( keeper_1.asObject0() ) : PyDict_New() ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 115 );
        {
                PyObject *tmp_identifier = _python_var_messages.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_error_messages );
        }
        frame_guard.setLineNumber( 117 );
        {
            PyObjectTempKeeper1 op12;
            {
                PyObjectTemporary tmp_identifier( ( op12.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_default_validators ) ), BINARY_OPERATION_ADD( op12.asObject0(), _python_var_validators.asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_validators );
        }
        }
        frame_guard.setLineNumber( 118 );
        {
            PyObjectTempKeeper0 super14;
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super14.assign( _mvar_django__forms__fields_Field.asObject0() ), BUILTIN_SUPER( super14.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_localize.updateLocalsDict( _python_var_validators.updateLocalsDict( _python_var_show_hidden_initial.updateLocalsDict( _python_var_error_messages.updateLocalsDict( _python_var_help_text.updateLocalsDict( _python_var_initial.updateLocalsDict( _python_var_label.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var_required.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_c.updateLocalsDict( _python_var_messages.updateLocalsDict( _python_var_extra_attrs.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_1_Field_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_1_Field_of_module_django__forms__fields );
           frame_function_1___init___of_class_1_Field_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_required = NULL;
    PyObject *_python_par_widget = NULL;
    PyObject *_python_par_label = NULL;
    PyObject *_python_par_initial = NULL;
    PyObject *_python_par_help_text = NULL;
    PyObject *_python_par_error_messages = NULL;
    PyObject *_python_par_show_hidden_initial = NULL;
    PyObject *_python_par_validators = NULL;
    PyObject *_python_par_localize = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_required == key )
            {
                if (unlikely( _python_par_required ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'required'" );
                    goto error_exit;
                }

                _python_par_required = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_widget == key )
            {
                if (unlikely( _python_par_widget ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'widget'" );
                    goto error_exit;
                }

                _python_par_widget = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_label == key )
            {
                if (unlikely( _python_par_label ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'label'" );
                    goto error_exit;
                }

                _python_par_label = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_initial == key )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_help_text == key )
            {
                if (unlikely( _python_par_help_text ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'help_text'" );
                    goto error_exit;
                }

                _python_par_help_text = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_error_messages == key )
            {
                if (unlikely( _python_par_error_messages ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'error_messages'" );
                    goto error_exit;
                }

                _python_par_error_messages = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_show_hidden_initial == key )
            {
                if (unlikely( _python_par_show_hidden_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'show_hidden_initial'" );
                    goto error_exit;
                }

                _python_par_show_hidden_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_validators == key )
            {
                if (unlikely( _python_par_validators ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'validators'" );
                    goto error_exit;
                }

                _python_par_validators = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_localize == key )
            {
                if (unlikely( _python_par_localize ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'localize'" );
                    goto error_exit;
                }

                _python_par_localize = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_required, key ) )
            {
                if (unlikely( _python_par_required ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'required'" );
                    goto error_exit;
                }

                _python_par_required = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_widget, key ) )
            {
                if (unlikely( _python_par_widget ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'widget'" );
                    goto error_exit;
                }

                _python_par_widget = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_label, key ) )
            {
                if (unlikely( _python_par_label ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'label'" );
                    goto error_exit;
                }

                _python_par_label = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_initial, key ) )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_help_text, key ) )
            {
                if (unlikely( _python_par_help_text ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'help_text'" );
                    goto error_exit;
                }

                _python_par_help_text = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_error_messages, key ) )
            {
                if (unlikely( _python_par_error_messages ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'error_messages'" );
                    goto error_exit;
                }

                _python_par_error_messages = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_show_hidden_initial, key ) )
            {
                if (unlikely( _python_par_show_hidden_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'show_hidden_initial'" );
                    goto error_exit;
                }

                _python_par_show_hidden_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_validators, key ) )
            {
                if (unlikely( _python_par_validators ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'validators'" );
                    goto error_exit;
                }

                _python_par_validators = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_localize, key ) )
            {
                if (unlikely( _python_par_localize ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'localize'" );
                    goto error_exit;
                }

                _python_par_localize = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 10 ))
    {
        if ( 10 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 10, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 10 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 10, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 10, args_given + kw_only_found );
            }
#else
            if ( 10 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 10, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 10, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 10 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 10, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 10 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 10 ? args_given : 10;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_required != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'required'" );
             goto error_exit;
         }

        _python_par_required = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_widget != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'widget'" );
             goto error_exit;
         }

        _python_par_widget = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_label != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'label'" );
             goto error_exit;
         }

        _python_par_label = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_help_text != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'help_text'" );
             goto error_exit;
         }

        _python_par_help_text = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_error_messages != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'error_messages'" );
             goto error_exit;
         }

        _python_par_error_messages = INCREASE_REFCOUNT( args[ 6 ] );
    }
    if (likely( 7 < args_usable_count ))
    {
         if (unlikely( _python_par_show_hidden_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'show_hidden_initial'" );
             goto error_exit;
         }

        _python_par_show_hidden_initial = INCREASE_REFCOUNT( args[ 7 ] );
    }
    if (likely( 8 < args_usable_count ))
    {
         if (unlikely( _python_par_validators != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'validators'" );
             goto error_exit;
         }

        _python_par_validators = INCREASE_REFCOUNT( args[ 8 ] );
    }
    if (likely( 9 < args_usable_count ))
    {
         if (unlikely( _python_par_localize != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'localize'" );
             goto error_exit;
         }

        _python_par_localize = INCREASE_REFCOUNT( args[ 9 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_required == NULL )
    {
        _python_par_required = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_required );
    }
    if ( _python_par_widget == NULL )
    {
        _python_par_widget = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_widget );
    }
    if ( _python_par_label == NULL )
    {
        _python_par_label = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_label );
    }
    if ( _python_par_initial == NULL )
    {
        _python_par_initial = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_initial );
    }
    if ( _python_par_help_text == NULL )
    {
        _python_par_help_text = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_help_text );
    }
    if ( _python_par_error_messages == NULL )
    {
        _python_par_error_messages = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 5 ) );
        assertObject( _python_par_error_messages );
    }
    if ( _python_par_show_hidden_initial == NULL )
    {
        _python_par_show_hidden_initial = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 6 ) );
        assertObject( _python_par_show_hidden_initial );
    }
    if ( _python_par_validators == NULL )
    {
        _python_par_validators = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 7 ) );
        assertObject( _python_par_validators );
    }
    if ( _python_par_localize == NULL )
    {
        _python_par_localize = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 8 ) );
        assertObject( _python_par_localize );
    }


    return impl_function_1___init___of_class_1_Field_of_module_django__forms__fields( self, _python_par_self, _python_par_required, _python_par_widget, _python_par_label, _python_par_initial, _python_par_help_text, _python_par_error_messages, _python_par_show_hidden_initial, _python_par_validators, _python_par_localize );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_required );
    Py_XDECREF( _python_par_widget );
    Py_XDECREF( _python_par_label );
    Py_XDECREF( _python_par_initial );
    Py_XDECREF( _python_par_help_text );
    Py_XDECREF( _python_par_error_messages );
    Py_XDECREF( _python_par_show_hidden_initial );
    Py_XDECREF( _python_par_validators );
    Py_XDECREF( _python_par_localize );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 10)
    {
        return impl_function_1___init___of_class_1_Field_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ), INCREASE_REFCOUNT( args[ 8 ] ), INCREASE_REFCOUNT( args[ 9 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_1_Field_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields );
        }

        frame_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields = MAKE_FRAME( _codeobj_4fb7bd151543320e1066b68badf11a4d, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 121 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields );
           frame_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "prepare_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "prepare_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_to_python_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_3_to_python_of_class_1_Field_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_3_to_python_of_class_1_Field_of_module_django__forms__fields ) )
    {
        if ( frame_function_3_to_python_of_class_1_Field_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_to_python_of_class_1_Field_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_3_to_python_of_class_1_Field_of_module_django__forms__fields );
        }

        frame_function_3_to_python_of_class_1_Field_of_module_django__forms__fields = MAKE_FRAME( _codeobj_12962f2f67c151425f963a9ed5d788f4, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_3_to_python_of_class_1_Field_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_to_python_of_class_1_Field_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 124 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_3_to_python_of_class_1_Field_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_3_to_python_of_class_1_Field_of_module_django__forms__fields );
           frame_function_3_to_python_of_class_1_Field_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_to_python_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_to_python_of_class_1_Field_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_3_to_python_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_to_python_of_class_1_Field_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_to_python_of_class_1_Field_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_validate_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_4_validate_of_class_1_Field_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_4_validate_of_class_1_Field_of_module_django__forms__fields ) )
    {
        if ( frame_function_4_validate_of_class_1_Field_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_validate_of_class_1_Field_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_4_validate_of_class_1_Field_of_module_django__forms__fields );
        }

        frame_function_4_validate_of_class_1_Field_of_module_django__forms__fields = MAKE_FRAME( _codeobj_03fa83dbe78c95d13f33b2a8fce51570, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_4_validate_of_class_1_Field_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4_validate_of_class_1_Field_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 127 );
        {
            PyObjectTempKeeper0 cmp3;
            if ( ( ( cmp3.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) && CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_required ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 128 );
            {
                PyObjectTempKeeper0 call1;
                {
                    PyObjectTemporary tmp_exception_type( ( call1.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_required ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_4_validate_of_class_1_Field_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_4_validate_of_class_1_Field_of_module_django__forms__fields );
           frame_function_4_validate_of_class_1_Field_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_4_validate_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "validate() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "validate() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "validate() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4_validate_of_class_1_Field_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_4_validate_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4_validate_of_class_1_Field_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_validate_of_class_1_Field_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_errors( _python_str_plain_errors );
    PyObjectLocalVariable _python_var_v( _python_str_plain_v );
    PyObjectLocalVariable _python_var_e( _python_str_plain_e );
    PyObjectLocalVariable _python_var_message( _python_str_plain_message );

    // Actual function code.
    static PyFrameObject *frame_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields ) )
    {
        if ( frame_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_run_validators_of_class_1_Field_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields );
        }

        frame_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields = MAKE_FRAME( _codeobj_7ea90519ad92ea07d214f72aebd0638d, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 131 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        }
        _python_var_errors.assign1( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 134 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validators ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 134 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_v.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 135 );
                try
                {
                    frame_guard.setLineNumber( 136 );
                    {
                        PyObjectTempKeeper0 call13;
                        DECREASE_REFCOUNT( ( call13.assign( _python_var_v.asObject() ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), _python_var_value.asObject() ) ) );
                    }
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( _mvar_django__forms__fields_ValidationError.asObject0() ) )
                    {
                        frame_guard.detachFrame();
                        _python_var_e.assign0( _exception.getValue() );
                        frame_guard.setLineNumber( 138 );
                        {
                            PyObjectTempKeeper1 cmp11;
                            if ( ( HAS_ATTRIBUTE( _python_var_e.asObject(), _python_unicode_plain_code ) && ( cmp11.assign( LOOKUP_ATTRIBUTE( _python_var_e.asObject(), _python_str_plain_code ) ), SEQUENCE_CONTAINS_BOOL( cmp11.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject() ) ) ) )
                        {
                            frame_guard.setLineNumber( 139 );
                            {
                                PyObjectTempKeeper1 subscr3;
                                _python_var_message.assign1( ( subscr3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ), LOOKUP_SUBSCRIPT( subscr3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_e.asObject(), _python_str_plain_code ) ).asObject() ) ) );
                            }
                            frame_guard.setLineNumber( 140 );
                            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_e.asObject(), _python_str_plain_params ) ).asObject() ) )
                            {
                                frame_guard.setLineNumber( 141 );
                                {
                                    PyObjectTempKeeper0 op5;
                                    _python_var_message.assign1( ( op5.assign( _python_var_message.asObject() ), BINARY_OPERATION_REMAINDER( op5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_e.asObject(), _python_str_plain_params ) ).asObject() ) ) );
                                }
                            }
                            frame_guard.setLineNumber( 142 );
                            {
                                PyObjectTempKeeper1 call7;
                                DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_errors.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_message.asObject() ) ) );
                            }
                        }
                        else
                        {
                            frame_guard.setLineNumber( 144 );
                            {
                                PyObjectTempKeeper1 call9;
                                DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_errors.asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_e.asObject(), _python_str_plain_messages ) ).asObject() ) ) );
                            }
                        }
                        }
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 145 );
        if ( CHECK_IF_TRUE( _python_var_errors.asObject() ) )
        {
            frame_guard.setLineNumber( 146 );
            {
                PyObjectTempKeeper0 call15;
                {
                    PyObjectTemporary tmp_exception_type( ( call15.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), _python_var_errors.asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_message.updateLocalsDict( _python_var_e.updateLocalsDict( _python_var_v.updateLocalsDict( _python_var_errors.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields );
           frame_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "run_validators() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "run_validators() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "run_validators() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "run_validators() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "run_validators() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "run_validators() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "run_validators() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "run_validators() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "run_validators() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "run_validators() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "run_validators() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "run_validators() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "run_validators() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "run_validators() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "run_validators() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "run_validators() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "run_validators() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "run_validators() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "run_validators() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "run_validators() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_clean_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_6_clean_of_class_1_Field_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_6_clean_of_class_1_Field_of_module_django__forms__fields ) )
    {
        if ( frame_function_6_clean_of_class_1_Field_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_clean_of_class_1_Field_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_6_clean_of_class_1_Field_of_module_django__forms__fields );
        }

        frame_function_6_clean_of_class_1_Field_of_module_django__forms__fields = MAKE_FRAME( _codeobj_089dc4969ae432f3a85465776d9eafa0, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_6_clean_of_class_1_Field_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_6_clean_of_class_1_Field_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 155 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_value.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 156 );
        {
            PyObjectTempKeeper1 call3;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validate ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 157 );
        {
            PyObjectTempKeeper1 call5;
            DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_run_validators ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 158 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_6_clean_of_class_1_Field_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_6_clean_of_class_1_Field_of_module_django__forms__fields );
           frame_function_6_clean_of_class_1_Field_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_clean_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clean() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clean() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clean() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_6_clean_of_class_1_Field_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_6_clean_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_6_clean_of_class_1_Field_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_clean_of_class_1_Field_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data, PyObject *_python_par_initial )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );

    // Actual function code.
    static PyFrameObject *frame_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields ) )
    {
        if ( frame_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_bound_data_of_class_1_Field_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields );
        }

        frame_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields = MAKE_FRAME( _codeobj_db63f9217915f53a97da7b6533e5d185, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 169 );
        return _python_var_data.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_initial.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields );
           frame_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    PyObject *_python_par_initial = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "bound_data() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_initial == key )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_initial, key ) )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "bound_data() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "bound_data() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "bound_data() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "bound_data() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "bound_data() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "bound_data() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "bound_data() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "bound_data() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "bound_data() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "bound_data() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "bound_data() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "bound_data() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "bound_data() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields( self, _python_par_self, _python_par_data, _python_par_initial );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );
    Py_XDECREF( _python_par_initial );

    return NULL;
}

static PyObject *dparse_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_widget_attrs_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_widget )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_widget( _python_str_plain_widget, _python_par_widget );

    // Actual function code.
    return PyDict_New();
}
static PyObject *fparse_function_8_widget_attrs_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_widget = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_widget == key )
            {
                if (unlikely( _python_par_widget ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'widget'" );
                    goto error_exit;
                }

                _python_par_widget = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_widget, key ) )
            {
                if (unlikely( _python_par_widget ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'widget'" );
                    goto error_exit;
                }

                _python_par_widget = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "widget_attrs() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_widget != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'widget'" );
             goto error_exit;
         }

        _python_par_widget = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_8_widget_attrs_of_class_1_Field_of_module_django__forms__fields( self, _python_par_self, _python_par_widget );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_widget );

    return NULL;
}

static PyObject *dparse_function_8_widget_attrs_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_8_widget_attrs_of_class_1_Field_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_widget_attrs_of_class_1_Field_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_initial, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalVariable _python_var_initial_value( _python_str_plain_initial_value );
    PyObjectLocalVariable _python_var_data_value( _python_str_plain_data_value );

    // Actual function code.
    static PyFrameObject *frame_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields ) )
    {
        if ( frame_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9__has_changed_of_class_1_Field_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields );
        }

        frame_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields = MAKE_FRAME( _codeobj_b0eeea64f6a04702b25cf43e7615e124, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 186 );
        _python_var_initial_value.assign0( ( ( _python_var_initial.asObject() != Py_None ) ? _python_var_initial.asObject() : _python_unicode_empty ) );
        frame_guard.setLineNumber( 187 );
        try
        {
            frame_guard.setLineNumber( 188 );
            {
                PyObjectTempKeeper1 call1;
                _python_var_data.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_data.asObject() ) ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( _mvar_django__forms__fields_ValidationError.asObject0() ) )
            {
                frame_guard.detachFrame();
                return INCREASE_REFCOUNT( Py_True );
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 191 );
        _python_var_data_value.assign0( ( ( _python_var_data.asObject() != Py_None ) ? _python_var_data.asObject() : _python_unicode_empty ) );
        frame_guard.setLineNumber( 192 );
        {
            PyObjectTempKeeper0 cmp3;
            return ( cmp3.assign( _python_var_initial_value.asObject() ), RICH_COMPARE_NE( cmp3.asObject0(), _python_var_data_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data.updateLocalsDict( _python_var_initial.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_data_value.updateLocalsDict( _python_var_initial_value.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields );
           frame_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_initial = NULL;
    PyObject *_python_par_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_initial == key )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_initial, key ) )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_has_changed() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_has_changed() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields( self, _python_par_self, _python_par_initial, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_initial );
    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_memo )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_memo( _python_str_plain_memo, _python_par_memo );
    PyObjectLocalVariable _python_var_result( _python_str_plain_result );

    // Actual function code.
    static PyFrameObject *frame_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields ) )
    {
        if ( frame_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields );
        }

        frame_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields = MAKE_FRAME( _codeobj_14045b48e02a1465dfbe9eb1c1064209, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 195 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_result.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_copy.asObject0(), _python_str_plain_copy ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_self.asObject() ) ) );
        }
        frame_guard.setLineNumber( 196 );
        {
                PyObject *tmp_identifier = _python_var_result.asObject();
                PyObject *tmp_subscribed = _python_var_memo.asObject();
                SET_SUBSCRIPT( tmp_identifier, tmp_subscribed, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_id ), _python_var_self.asObject() ) ).asObject() );
        }
        frame_guard.setLineNumber( 197 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 call4;
            {
                PyObjectTemporary tmp_identifier( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_copy.asObject0(), _python_str_plain_deepcopy ) ), call4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_widget ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_memo.asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_result.asObject(), _python_str_plain_widget );
        }
        }
        frame_guard.setLineNumber( 198 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_INDEX_SLICE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validators ) ).asObject(), 0, PY_SSIZE_T_MAX ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_result.asObject(), _python_str_plain_validators );
        }
        frame_guard.setLineNumber( 199 );
        return _python_var_result.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_memo.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_result.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields );
           frame_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_memo = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_memo == key )
            {
                if (unlikely( _python_par_memo ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
                    goto error_exit;
                }

                _python_par_memo = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_memo, key ) )
            {
                if (unlikely( _python_par_memo ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
                    goto error_exit;
                }

                _python_par_memo = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__deepcopy__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_memo != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
             goto error_exit;
         }

        _python_par_memo = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields( self, _python_par_self, _python_par_memo );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_memo );

    return NULL;
}

static PyObject *dparse_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_2_CharField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_widget_attrs( _python_str_plain_widget_attrs );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_2_CharField_of_module_django__forms__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields(  ) );
    _python_var_widget_attrs.assign1( MAKE_FUNCTION_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields(  ) );
    return _python_var_widget_attrs.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_2_CharField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_max_length, PyObject *_python_par_min_length, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_max_length( _python_str_plain_max_length, _python_par_max_length );
    PyObjectLocalParameterVariableNoDel _python_var_min_length( _python_str_plain_min_length, _python_par_min_length );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_2_CharField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_2_CharField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1___init___of_class_2_CharField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_2_CharField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_2_CharField_of_module_django__forms__fields );
        }

        frame_function_1___init___of_class_2_CharField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_df07df0bc025d636abba46fe37fd4f3d, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_2_CharField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_2_CharField_of_module_django__forms__fields ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 204 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( _python_var_max_length.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_min_length.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_max_length );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_min_length );
            }
        }
        frame_guard.setLineNumber( 205 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 call_tmp6;
            PyObjectTempKeeper0 super3;
            DECREASE_REFCOUNT( ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__forms__fields_CharField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp6.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp5.asObject(), call_tmp6.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 206 );
        if ( ( _python_var_min_length.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 207 );
            {
                PyObjectTempKeeper1 call10;
                PyObjectTempKeeper1 call8;
                DECREASE_REFCOUNT( ( call10.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validators ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), PyObjectTemporary( ( call8.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_validators.asObject0(), _python_str_plain_MinLengthValidator ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), PyObjectTemporary( TO_INT( _python_var_min_length.asObject() ) ).asObject() ) ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 208 );
        if ( ( _python_var_max_length.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 209 );
            {
                PyObjectTempKeeper1 call12;
                PyObjectTempKeeper1 call14;
                DECREASE_REFCOUNT( ( call14.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validators ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), PyObjectTemporary( ( call12.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_validators.asObject0(), _python_str_plain_MaxLengthValidator ) ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), PyObjectTemporary( TO_INT( _python_var_max_length.asObject() ) ).asObject() ) ) ).asObject() ) ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_min_length.updateLocalsDict( _python_var_max_length.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_2_CharField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_2_CharField_of_module_django__forms__fields );
           frame_function_1___init___of_class_2_CharField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_2_CharField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_max_length = NULL;
    PyObject *_python_par_min_length = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument max_length was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_max_length );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_max_length == NULL );

            _python_par_max_length = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_max_length );

            kw_found += 1;
        }
    }

    // Check if argument min_length was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_min_length );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_min_length == NULL );

            _python_par_min_length = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_min_length );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 3, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 3, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_max_length != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'max_length'" );
             goto error_exit;
         }

        _python_par_max_length = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_min_length != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'min_length'" );
             goto error_exit;
         }

        _python_par_min_length = INCREASE_REFCOUNT( args[ 2 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 3 )
    {
        _python_par_args = PyTuple_New( args_size - 3 );

        for( Py_ssize_t i = 0; i < args_size - 3; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[3+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }
    // Assign values not given to defaults
    if ( _python_par_max_length == NULL )
    {
        _python_par_max_length = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_max_length );
    }
    if ( _python_par_min_length == NULL )
    {
        _python_par_min_length = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_min_length );
    }


    return impl_function_1___init___of_class_2_CharField_of_module_django__forms__fields( self, _python_par_self, _python_par_max_length, _python_par_min_length, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_max_length );
    Py_XDECREF( _python_par_min_length );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_2_CharField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_1___init___of_class_2_CharField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), MAKE_TUPLE( &args[ 3 ], size > 3 ? size-3 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_2_CharField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_to_python_of_class_2_CharField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields );
        }

        frame_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_c584c613fbb0115543ad9e477c1b6052, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 213 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( _python_unicode_empty );
        }
        }
        frame_guard.setLineNumber( 215 );
        {
            PyObjectTempKeeper0 call3;
            return ( call3.assign( _mvar_django__forms__fields_smart_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields );
           frame_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_widget )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_widget( _python_str_plain_widget, _python_par_widget );
    PyObjectLocalVariable _python_var_attrs( _python_str_plain_attrs );

    // Actual function code.
    static PyFrameObject *frame_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields ) )
    {
        if ( frame_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields );
        }

        frame_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_b76bdab5ef672844490f84253d4f0ddd, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 218 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            _python_var_attrs.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_CharField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_widget_attrs ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_widget.asObject() ) ) );
        }
        frame_guard.setLineNumber( 219 );
        {
            PyObjectTempKeeper0 isinstance7;
            if ( ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_length ) ).asObject() != Py_None ) && ( isinstance7.assign( _python_var_widget.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance7.asObject0(), _mvar_django__forms__fields_TextInput.asObject0() ) ) ) )
        {
            frame_guard.setLineNumber( 221 );
            {
                PyObjectTempKeeper1 call5;
                DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_attrs.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( TO_STR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_length ) ).asObject() ) ).asObject(), _python_unicode_plain_maxlength ) ).asObject() ) ) );
            }
        }
        }
        frame_guard.setLineNumber( 222 );
        return _python_var_attrs.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_widget.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_attrs.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields );
           frame_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_widget = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_widget == key )
            {
                if (unlikely( _python_par_widget ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'widget'" );
                    goto error_exit;
                }

                _python_par_widget = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_widget, key ) )
            {
                if (unlikely( _python_par_widget ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'widget'" );
                    goto error_exit;
                }

                _python_par_widget = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "widget_attrs() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_widget != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'widget'" );
             goto error_exit;
         }

        _python_par_widget = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields( self, _python_par_self, _python_par_widget );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_widget );

    return NULL;
}

static PyObject *dparse_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_3_IntegerField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_widget_attrs( _python_str_plain_widget_attrs );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_3_IntegerField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_3_IntegerField_of_module_django__forms__fields ) )
    {
        if ( frame_class_3_IntegerField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_3_IntegerField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_3_IntegerField_of_module_django__forms__fields );
        }

        frame_class_3_IntegerField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_f87a14904e92c4506813be830d77be69, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_3_IntegerField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_3_IntegerField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 226 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_12ccec8bb88cdd2b02b81e680a2ff8ce ) ).asObject(), _python_unicode_plain_invalid ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_widget_attrs.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_3_IntegerField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_3_IntegerField_of_module_django__forms__fields );
           frame_class_3_IntegerField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields(  ) );
    _python_var_widget_attrs.assign1( MAKE_FUNCTION_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields(  ) );
    return _python_var_widget_attrs.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_max_value, PyObject *_python_par_min_value, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_max_value( _python_str_plain_max_value, _python_par_max_value );
    PyObjectLocalParameterVariableNoDel _python_var_min_value( _python_str_plain_min_value, _python_par_min_value );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_3_IntegerField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields );
        }

        frame_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_75b7b18e425d1b4092d3ed19db2014ec, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 231 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( _python_var_max_value.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_min_value.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_max_value );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_min_value );
            }
        }
        frame_guard.setLineNumber( 232 );
        {
            PyObjectTempKeeper1 call3;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_setdefault ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_unicode_plain_widget, PyObjectTemporary( ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_get ) ).asObject(), _python_unicode_plain_localize ) ).asObject() ) )) ? _mvar_django__forms__fields_NumberInput.asObject() : LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_widget ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 233 );
        {
            PyObjectTempKeeper1 call_tmp8;
            PyObjectTempKeeper0 call_tmp9;
            PyObjectTempKeeper0 super6;
            DECREASE_REFCOUNT( ( call_tmp8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super6.assign( _mvar_django__forms__fields_IntegerField.asObject0() ), BUILTIN_SUPER( super6.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp9.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp8.asObject(), call_tmp9.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 235 );
        if ( ( _python_var_max_value.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 236 );
            {
                PyObjectTempKeeper1 call11;
                PyObjectTempKeeper1 call13;
                DECREASE_REFCOUNT( ( call13.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validators ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), PyObjectTemporary( ( call11.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_validators.asObject0(), _python_str_plain_MaxValueValidator ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _python_var_max_value.asObject() ) ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 237 );
        if ( ( _python_var_min_value.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 238 );
            {
                PyObjectTempKeeper1 call15;
                PyObjectTempKeeper1 call17;
                DECREASE_REFCOUNT( ( call17.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validators ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), PyObjectTemporary( ( call15.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_validators.asObject0(), _python_str_plain_MinValueValidator ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), _python_var_min_value.asObject() ) ) ).asObject() ) ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_min_value.updateLocalsDict( _python_var_max_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields );
           frame_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_max_value = NULL;
    PyObject *_python_par_min_value = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument max_value was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_max_value );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_max_value == NULL );

            _python_par_max_value = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_max_value );

            kw_found += 1;
        }
    }

    // Check if argument min_value was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_min_value );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_min_value == NULL );

            _python_par_min_value = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_min_value );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 3, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 3, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_max_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'max_value'" );
             goto error_exit;
         }

        _python_par_max_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_min_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'min_value'" );
             goto error_exit;
         }

        _python_par_min_value = INCREASE_REFCOUNT( args[ 2 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 3 )
    {
        _python_par_args = PyTuple_New( args_size - 3 );

        for( Py_ssize_t i = 0; i < args_size - 3; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[3+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }
    // Assign values not given to defaults
    if ( _python_par_max_value == NULL )
    {
        _python_par_max_value = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_max_value );
    }
    if ( _python_par_min_value == NULL )
    {
        _python_par_min_value = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_min_value );
    }


    return impl_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields( self, _python_par_self, _python_par_max_value, _python_par_min_value, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_max_value );
    Py_XDECREF( _python_par_min_value );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), MAKE_TUPLE( &args[ 3 ], size > 3 ? size-3 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields );
        }

        frame_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_081f4968f38aafc52502e6ca7fd17515, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 245 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            _python_var_value.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_IntegerField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 246 );
        {
            PyObjectTempKeeper0 cmp5;
            if ( ( cmp5.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        }
        frame_guard.setLineNumber( 248 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_localize ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 249 );
            {
                PyObjectTempKeeper1 call7;
                _python_var_value.assign1( ( call7.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_formats.asObject0(), _python_str_plain_sanitize_separators ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 250 );
        try
        {
            frame_guard.setLineNumber( 251 );
            _python_var_value.assign1( TO_INT( PyObjectTemporary( TO_STR( _python_var_value.asObject() ) ).asObject() ) );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_ValueError ) || _exception.matches( PyExc_TypeError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 253 );
                {
                    PyObjectTempKeeper0 call9;
                    {
                        PyObjectTemporary tmp_exception_type( ( call9.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 254 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields );
           frame_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_widget )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_widget( _python_str_plain_widget, _python_par_widget );
    PyObjectLocalVariable _python_var_attrs( _python_str_plain_attrs );

    // Actual function code.
    static PyFrameObject *frame_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields ) )
    {
        if ( frame_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields );
        }

        frame_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_7bcc251fed8dea8551d5ffb86a098ba0, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 257 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            _python_var_attrs.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_IntegerField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_widget_attrs ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_widget.asObject() ) ) );
        }
        frame_guard.setLineNumber( 258 );
        {
            PyObjectTempKeeper0 isinstance5;
            if ( ( isinstance5.assign( _python_var_widget.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance5.asObject0(), _mvar_django__forms__fields_NumberInput.asObject0() ) ) )
        {
            frame_guard.setLineNumber( 259 );
            if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_min_value ) ).asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 260 );
                {
                        PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_min_value ) );
                        SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_attrs.asObject(), _python_unicode_plain_min );
                }
            }
            frame_guard.setLineNumber( 261 );
            if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_value ) ).asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 262 );
                {
                        PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_value ) );
                        SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_attrs.asObject(), _python_unicode_plain_max );
                }
            }
        }
        }
        frame_guard.setLineNumber( 263 );
        return _python_var_attrs.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_widget.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_attrs.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields );
           frame_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_widget = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_widget == key )
            {
                if (unlikely( _python_par_widget ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'widget'" );
                    goto error_exit;
                }

                _python_par_widget = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_widget, key ) )
            {
                if (unlikely( _python_par_widget ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'widget'" );
                    goto error_exit;
                }

                _python_par_widget = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "widget_attrs() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_widget != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'widget'" );
             goto error_exit;
         }

        _python_par_widget = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields( self, _python_par_self, _python_par_widget );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_widget );

    return NULL;
}

static PyObject *dparse_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_4_FloatField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_widget_attrs( _python_str_plain_widget_attrs );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_4_FloatField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_4_FloatField_of_module_django__forms__fields ) )
    {
        if ( frame_class_4_FloatField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_4_FloatField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_4_FloatField_of_module_django__forms__fields );
        }

        frame_class_4_FloatField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_da79a10502a890fefea32f0858b9c343, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_4_FloatField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_4_FloatField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 267 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_56c2f202bc95b4ae338696c40199b7c3 ) ).asObject(), _python_unicode_plain_invalid ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_widget_attrs.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_4_FloatField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_4_FloatField_of_module_django__forms__fields );
           frame_class_4_FloatField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var_to_python.assign1( MAKE_FUNCTION_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields(  ) );
    _python_var_widget_attrs.assign1( MAKE_FUNCTION_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields(  ) );
    return _python_var_widget_attrs.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields );
        }

        frame_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_53ace8e221a6f902a44b24be597b3ef4, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 276 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            _python_var_value.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_IntegerField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 277 );
        {
            PyObjectTempKeeper0 cmp5;
            if ( ( cmp5.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        }
        frame_guard.setLineNumber( 279 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_localize ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 280 );
            {
                PyObjectTempKeeper1 call7;
                _python_var_value.assign1( ( call7.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_formats.asObject0(), _python_str_plain_sanitize_separators ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 281 );
        try
        {
            frame_guard.setLineNumber( 282 );
            _python_var_value.assign1( TO_FLOAT( _python_var_value.asObject() ) );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_ValueError ) || _exception.matches( PyExc_TypeError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 284 );
                {
                    PyObjectTempKeeper0 call9;
                    {
                        PyObjectTemporary tmp_exception_type( ( call9.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 285 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields );
           frame_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_widget )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_widget( _python_str_plain_widget, _python_par_widget );
    PyObjectLocalVariable _python_var_attrs( _python_str_plain_attrs );

    // Actual function code.
    static PyFrameObject *frame_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields );
        }

        frame_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_6375b631a2ce1d98d155a004b38c3dce, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 288 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            _python_var_attrs.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_FloatField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_widget_attrs ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_widget.asObject() ) ) );
        }
        frame_guard.setLineNumber( 289 );
        {
            PyObjectTempKeeper0 isinstance5;
            if ( ( isinstance5.assign( _python_var_widget.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance5.asObject0(), _mvar_django__forms__fields_NumberInput.asObject0() ) ) )
        {
            frame_guard.setLineNumber( 290 );
            DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_attrs.asObject(), _python_str_plain_setdefault ) ).asObject(), _python_unicode_plain_step, _python_unicode_plain_any ) );
        }
        }
        frame_guard.setLineNumber( 291 );
        return _python_var_attrs.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_widget.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_attrs.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields );
           frame_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_widget = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_widget == key )
            {
                if (unlikely( _python_par_widget ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'widget'" );
                    goto error_exit;
                }

                _python_par_widget = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_widget, key ) )
            {
                if (unlikely( _python_par_widget ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'widget'" );
                    goto error_exit;
                }

                _python_par_widget = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "widget_attrs() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_widget != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'widget'" );
             goto error_exit;
         }

        _python_par_widget = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields( self, _python_par_self, _python_par_widget );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_widget );

    return NULL;
}

static PyObject *dparse_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_5_DecimalField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_validate( _python_str_plain_validate );
    PyObjectLocalVariable _python_var_widget_attrs( _python_str_plain_widget_attrs );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_5_DecimalField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_5_DecimalField_of_module_django__forms__fields ) )
    {
        if ( frame_class_5_DecimalField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_5_DecimalField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_5_DecimalField_of_module_django__forms__fields );
        }

        frame_class_5_DecimalField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_ea54e93d8965dccb04403b5e444cdbd6, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_5_DecimalField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_5_DecimalField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 295 );
        {
            PyObjectTempKeeper1 make_dict1;
            PyObjectTempKeeper1 make_dict3;
            PyObjectTempKeeper1 make_dict5;
            _python_var_default_error_messages.assign1( ( make_dict1.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_56c2f202bc95b4ae338696c40199b7c3 ) ), make_dict3.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields_ungettext_lazy.asObject0(), _python_unicode_digest_9b4834658555220cf8d8464e497162f8, _python_unicode_digest_d13d9b307c5ab0cb2456c2b778ff8fc5, _python_unicode_plain_max ) ), make_dict5.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields_ungettext_lazy.asObject0(), _python_unicode_digest_425c08844fa197ac0d712520b3afdf79, _python_unicode_digest_1200f7035bc4497b1b175b3fc2b7f32e, _python_unicode_plain_max ) ), MAKE_DICT4( make_dict1.asObject0(), _python_unicode_plain_invalid, make_dict3.asObject0(), _python_unicode_plain_max_digits, make_dict5.asObject0(), _python_unicode_plain_max_decimal_places, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields_ungettext_lazy.asObject0(), _python_unicode_digest_44d71ed83d9551b5a5f81f992903f7e3, _python_unicode_digest_e7cc2e19d529051b48d4adc3bff80bd8, _python_unicode_plain_max ) ).asObject(), _python_unicode_plain_max_whole_digits ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_widget_attrs.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_5_DecimalField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_5_DecimalField_of_module_django__forms__fields );
           frame_class_5_DecimalField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields(  ) );
    _python_var_validate.assign1( MAKE_FUNCTION_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields(  ) );
    _python_var_widget_attrs.assign1( MAKE_FUNCTION_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields(  ) );
    return _python_var_widget_attrs.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_max_value, PyObject *_python_par_min_value, PyObject *_python_par_max_digits, PyObject *_python_par_decimal_places, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_max_value( _python_str_plain_max_value, _python_par_max_value );
    PyObjectLocalParameterVariableNoDel _python_var_min_value( _python_str_plain_min_value, _python_par_min_value );
    PyObjectLocalParameterVariableNoDel _python_var_max_digits( _python_str_plain_max_digits, _python_par_max_digits );
    PyObjectLocalParameterVariableNoDel _python_var_decimal_places( _python_str_plain_decimal_places, _python_par_decimal_places );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_5_DecimalField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields );
        }

        frame_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_4473c7f4f4b66fdab58c4831794e375f, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 312 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( _python_var_max_digits.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_decimal_places.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_max_digits );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_decimal_places );
            }
        }
        frame_guard.setLineNumber( 313 );
        {
            PyObjectTempKeeper1 call_tmp7;
            PyObjectTempKeeper1 call_tmp8;
            PyObjectTempKeeper0 call_tmp9;
            PyObjectTempKeeper0 make_tuple5;
            PyObjectTempKeeper0 super3;
            DECREASE_REFCOUNT( ( call_tmp7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__forms__fields_DecimalField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp8.assign( ( make_tuple5.assign( _python_var_max_value.asObject() ), MAKE_TUPLE2( make_tuple5.asObject0(), _python_var_min_value.asObject() ) ) ), call_tmp9.assign( _python_var_args.asObject() ), impl_function_8_complex_call_helper_pos_star_list_star_dict_of_module___internal__( call_tmp7.asObject(), call_tmp8.asObject(), call_tmp9.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_decimal_places.updateLocalsDict( _python_var_max_digits.updateLocalsDict( _python_var_min_value.updateLocalsDict( _python_var_max_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields );
           frame_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_max_value = NULL;
    PyObject *_python_par_min_value = NULL;
    PyObject *_python_par_max_digits = NULL;
    PyObject *_python_par_decimal_places = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument max_value was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_max_value );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_max_value == NULL );

            _python_par_max_value = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_max_value );

            kw_found += 1;
        }
    }

    // Check if argument min_value was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_min_value );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_min_value == NULL );

            _python_par_min_value = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_min_value );

            kw_found += 1;
        }
    }

    // Check if argument max_digits was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_max_digits );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_max_digits == NULL );

            _python_par_max_digits = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_max_digits );

            kw_found += 1;
        }
    }

    // Check if argument decimal_places was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_decimal_places );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_decimal_places == NULL );

            _python_par_decimal_places = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_decimal_places );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 5, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 5, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_max_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'max_value'" );
             goto error_exit;
         }

        _python_par_max_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_min_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'min_value'" );
             goto error_exit;
         }

        _python_par_min_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_max_digits != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'max_digits'" );
             goto error_exit;
         }

        _python_par_max_digits = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_decimal_places != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'decimal_places'" );
             goto error_exit;
         }

        _python_par_decimal_places = INCREASE_REFCOUNT( args[ 4 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 5 )
    {
        _python_par_args = PyTuple_New( args_size - 5 );

        for( Py_ssize_t i = 0; i < args_size - 5; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[5+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }
    // Assign values not given to defaults
    if ( _python_par_max_value == NULL )
    {
        _python_par_max_value = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_max_value );
    }
    if ( _python_par_min_value == NULL )
    {
        _python_par_min_value = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_min_value );
    }
    if ( _python_par_max_digits == NULL )
    {
        _python_par_max_digits = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_max_digits );
    }
    if ( _python_par_decimal_places == NULL )
    {
        _python_par_decimal_places = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_decimal_places );
    }


    return impl_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields( self, _python_par_self, _python_par_max_value, _python_par_min_value, _python_par_max_digits, _python_par_decimal_places, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_max_value );
    Py_XDECREF( _python_par_min_value );
    Py_XDECREF( _python_par_max_digits );
    Py_XDECREF( _python_par_decimal_places );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 7)
    {
        return impl_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), MAKE_TUPLE( &args[ 5 ], size > 5 ? size-5 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields );
        }

        frame_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_d1ba7aea158d2179eabf4b53933ccd77, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 322 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        }
        frame_guard.setLineNumber( 324 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_localize ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 325 );
            {
                PyObjectTempKeeper1 call3;
                _python_var_value.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_formats.asObject0(), _python_str_plain_sanitize_separators ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 326 );
        {
            PyObjectTempKeeper0 call5;
            _python_var_value.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call5.assign( _mvar_django__forms__fields_smart_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_value.asObject() ) ) ).asObject(), _python_str_plain_strip ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 327 );
        try
        {
            frame_guard.setLineNumber( 328 );
            {
                PyObjectTempKeeper0 call9;
                _python_var_value.assign1( ( call9.assign( _mvar_django__forms__fields_Decimal.asObject0() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( _mvar_django__forms__fields_DecimalException.asObject0() ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 330 );
                {
                    PyObjectTempKeeper0 call7;
                    {
                        PyObjectTemporary tmp_exception_type( ( call7.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 331 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields );
           frame_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_sign( _python_str_plain_sign );
    PyObjectLocalVariable _python_var_digittuple( _python_str_plain_digittuple );
    PyObjectLocalVariable _python_var_exponent( _python_str_plain_exponent );
    PyObjectLocalVariable _python_var_decimals( _python_str_plain_decimals );
    PyObjectLocalVariable _python_var_digits( _python_str_plain_digits );
    PyObjectLocalVariable _python_var_whole_digits( _python_str_plain_whole_digits );

    // Actual function code.
    static PyFrameObject *frame_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields ) )
    {
        if ( frame_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields );
        }

        frame_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_67aaf8027d4c64648fca2d6aba89bcf7, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 334 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_DecimalField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_validate ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 335 );
        {
            PyObjectTempKeeper0 cmp5;
            if ( ( cmp5.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        }
        frame_guard.setLineNumber( 340 );
        {
            PyObjectTempKeeper0 cmp11;
            PyObjectTempKeeper0 cmp13;
            PyObjectTempKeeper0 cmp9;
            if ( ( ( cmp9.assign( _python_var_value.asObject() ), RICH_COMPARE_BOOL_NE( cmp9.asObject0(), _python_var_value.asObject() ) ) || ( ( cmp11.assign( _python_var_value.asObject() ), RICH_COMPARE_BOOL_EQ( cmp11.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields_Decimal.asObject0(), _python_unicode_plain_Inf ) ).asObject() ) ) || ( cmp13.assign( _python_var_value.asObject() ), RICH_COMPARE_BOOL_EQ( cmp13.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields_Decimal.asObject0(), _python_unicode_digest_a761cb6fa56551e54bf789fca5c24455 ) ).asObject() ) ) ) ) )
        {
            frame_guard.setLineNumber( 341 );
            {
                PyObjectTempKeeper0 call7;
                {
                    PyObjectTemporary tmp_exception_type( ( call7.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        }
        {
            frame_guard.setLineNumber( 342 );
            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_as_tuple ) ).asObject() ) ).asObject() ) );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 3 );
            _python_var_sign.assign0( _python_tmp_element_1.asObject() );
            _python_var_digittuple.assign0( _python_tmp_element_2.asObject() );
            _python_var_exponent.assign0( _python_tmp_element_3.asObject() );
        }
        frame_guard.setLineNumber( 343 );
        _python_var_decimals.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_abs ), _python_var_exponent.asObject() ) );
        frame_guard.setLineNumber( 345 );
        _python_var_digits.assign1( BUILTIN_LEN( _python_var_digittuple.asObject() ) );
        frame_guard.setLineNumber( 346 );
        {
            PyObjectTempKeeper0 cmp15;
            if ( ( cmp15.assign( _python_var_decimals.asObject() ), RICH_COMPARE_BOOL_GT( cmp15.asObject0(), _python_var_digits.asObject() ) ) )
        {
            frame_guard.setLineNumber( 351 );
            _python_var_digits.assign0( _python_var_decimals.asObject() );
        }
        }
        frame_guard.setLineNumber( 352 );
        {
            PyObjectTempKeeper0 op17;
            _python_var_whole_digits.assign1( ( op17.assign( _python_var_digits.asObject() ), BINARY_OPERATION_SUB( op17.asObject0(), _python_var_decimals.asObject() ) ) );
        }
        frame_guard.setLineNumber( 354 );
        {
            PyObjectTempKeeper0 cmp23;
            if ( ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_digits ) ).asObject() != Py_None ) && ( cmp23.assign( _python_var_digits.asObject() ), RICH_COMPARE_BOOL_GT( cmp23.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_digits ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 355 );
            {
                PyObjectTempKeeper0 call21;
                PyObjectTempKeeper1 op19;
                {
                    PyObjectTemporary tmp_exception_type( ( call21.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call21.asObject0(), PyObjectTemporary( ( op19.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_max_digits ) ), BINARY_OPERATION_REMAINDER( op19.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_digits ) ).asObject(), _python_unicode_plain_max ) ).asObject() ) ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        }
        frame_guard.setLineNumber( 357 );
        {
            PyObjectTempKeeper0 cmp29;
            if ( ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_decimal_places ) ).asObject() != Py_None ) && ( cmp29.assign( _python_var_decimals.asObject() ), RICH_COMPARE_BOOL_GT( cmp29.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_decimal_places ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 358 );
            {
                PyObjectTempKeeper0 call27;
                PyObjectTempKeeper1 op25;
                {
                    PyObjectTemporary tmp_exception_type( ( call27.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), PyObjectTemporary( ( op25.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_max_decimal_places ) ), BINARY_OPERATION_REMAINDER( op25.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_decimal_places ) ).asObject(), _python_unicode_plain_max ) ).asObject() ) ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        }
        frame_guard.setLineNumber( 360 );
        {
            PyObjectTempKeeper0 cmp39;
            PyObjectTempKeeper1 op37;
            if ( ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_digits ) ).asObject() != Py_None ) && ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_decimal_places ) ).asObject() != Py_None ) && ( cmp39.assign( _python_var_whole_digits.asObject() ), RICH_COMPARE_BOOL_GT( cmp39.asObject0(), PyObjectTemporary( ( op37.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_digits ) ), BINARY_OPERATION_SUB( op37.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_decimal_places ) ).asObject() ) ) ).asObject() ) ) ) ) )
        {
            frame_guard.setLineNumber( 362 );
            {
                PyObjectTempKeeper0 call35;
                PyObjectTempKeeper1 op31;
                PyObjectTempKeeper1 op33;
                {
                    PyObjectTemporary tmp_exception_type( ( call35.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call35.asObject0(), PyObjectTemporary( ( op33.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_max_whole_digits ) ), BINARY_OPERATION_REMAINDER( op33.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( ( op31.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_digits ) ), BINARY_OPERATION_SUB( op31.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_decimal_places ) ).asObject() ) ) ).asObject(), _python_unicode_plain_max ) ).asObject() ) ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        }
        frame_guard.setLineNumber( 364 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_whole_digits.updateLocalsDict( _python_var_digits.updateLocalsDict( _python_var_decimals.updateLocalsDict( _python_var_exponent.updateLocalsDict( _python_var_digittuple.updateLocalsDict( _python_var_sign.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields );
           frame_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "validate() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "validate() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "validate() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_widget )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_widget( _python_str_plain_widget, _python_par_widget );
    PyObjectLocalVariable _python_var_attrs( _python_str_plain_attrs );
    PyObjectLocalVariable _python_var_max_length( _python_str_plain_max_length );

    // Actual function code.
    static PyFrameObject *frame_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields ) )
    {
        if ( frame_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields );
        }

        frame_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_0840d1507656dacc1704985843f630f5, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 367 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            _python_var_attrs.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_DecimalField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_widget_attrs ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_widget.asObject() ) ) );
        }
        frame_guard.setLineNumber( 368 );
        {
            PyObjectTempKeeper0 isinstance5;
            if ( ( isinstance5.assign( _python_var_widget.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance5.asObject0(), _mvar_django__forms__fields_NumberInput.asObject0() ) ) )
        {
            frame_guard.setLineNumber( 369 );
            if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_digits ) ).asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 370 );
                _python_var_max_length.assign1( BINARY_OPERATION_ADD( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_digits ) ).asObject(), _python_int_pos_1 ) );
                frame_guard.setLineNumber( 371 );
                if ( ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_decimal_places ) ).asObject() == Py_None ) || RICH_COMPARE_BOOL_GT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_decimal_places ) ).asObject(), _python_int_0 ) ) )
                {
                    {
                        frame_guard.setLineNumber( 372 );
                        PyObject *_python_tmp_inplace_start = _python_var_max_length.asObject();
                        PyObjectTemporary _python_tmp_inplace_end( BINARY_OPERATION( PyNumber_InPlaceAdd, _python_tmp_inplace_start, _python_int_pos_1 ) );
                        if ( ( _python_tmp_inplace_start != _python_tmp_inplace_end.asObject() ) )
                        {
                            _python_var_max_length.assign0( _python_tmp_inplace_end.asObject() );
                        }
                    }
                }
                frame_guard.setLineNumber( 373 );
                {
                        PyObject *tmp_identifier = _python_var_max_length.asObject();
                        SET_SUBSCRIPT( tmp_identifier, _python_var_attrs.asObject(), _python_unicode_plain_maxlength );
                }
            }
            frame_guard.setLineNumber( 374 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_decimal_places ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 375 );
                {
                        PyObjectTemporary tmp_identifier( BINARY_OPERATION_REMAINDER( _python_unicode_digest_91f4dc2ba26edad5ba649e3b5ba405ef, PyObjectTemporary( BINARY_OPERATION_MUL( _python_unicode_plain_0, PyObjectTemporary( BINARY_OPERATION_SUB( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_decimal_places ) ).asObject(), _python_int_pos_1 ) ).asObject() ) ).asObject() ) );
                        SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_attrs.asObject(), _python_unicode_plain_step );
                }
            }
        }
        }
        frame_guard.setLineNumber( 376 );
        return _python_var_attrs.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_widget.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_max_length.updateLocalsDict( _python_var_attrs.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields );
           frame_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_widget = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_widget == key )
            {
                if (unlikely( _python_par_widget ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'widget'" );
                    goto error_exit;
                }

                _python_par_widget = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_widget, key ) )
            {
                if (unlikely( _python_par_widget ))
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'widget'" );
                    goto error_exit;
                }

                _python_par_widget = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "widget_attrs() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "widget_attrs() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_widget != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "widget_attrs() got multiple values for keyword argument 'widget'" );
             goto error_exit;
         }

        _python_par_widget = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields( self, _python_par_self, _python_par_widget );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_widget );

    return NULL;
}

static PyObject *dparse_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_6_BaseTemporalField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_strptime( _python_str_plain_strptime );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields(  ) );
    _python_var_strptime.assign1( MAKE_FUNCTION_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields(  ) );
    return _python_var_strptime.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_input_formats, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_input_formats( _python_str_plain_input_formats, _python_par_input_formats );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields );
        }

        frame_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_12b587d6fb2956c53de1a7091cb4d5dd, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 382 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_BaseTemporalField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp4.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 383 );
        if ( ( _python_var_input_formats.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 384 );
            {
                    PyObject *tmp_identifier = _python_var_input_formats.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_input_formats );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_input_formats.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields );
           frame_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_input_formats = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument input_formats was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_input_formats );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_input_formats == NULL );

            _python_par_input_formats = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_input_formats );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 2, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_input_formats != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'input_formats'" );
             goto error_exit;
         }

        _python_par_input_formats = INCREASE_REFCOUNT( args[ 1 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 2 )
    {
        _python_par_args = PyTuple_New( args_size - 2 );

        for( Py_ssize_t i = 0; i < args_size - 2; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[2+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }
    // Assign values not given to defaults
    if ( _python_par_input_formats == NULL )
    {
        _python_par_input_formats = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_input_formats );
    }


    return impl_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields( self, _python_par_self, _python_par_input_formats, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_input_formats );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), MAKE_TUPLE( &args[ 2 ], size > 2 ? size-2 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_unicode_value( _python_str_plain_unicode_value );
    PyObjectLocalVariable _python_var_format( _python_str_plain_format );

    // Actual function code.
    static PyFrameObject *frame_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields );
        }

        frame_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_530c8b911f010719eb6bbba51a855f39, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 388 );
        {
            PyObjectTempKeeper0 call1;
            _python_var_unicode_value.assign1( ( call1.assign( _mvar_django__forms__fields_force_text.asObject0() ), CALL_FUNCTION( call1.asObject0(), PyObjectTemporary( MAKE_TUPLE1( _python_var_value.asObject() ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_e3f0fef39fbf6dbec750d2896d62ce03 ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 389 );
        {
            PyObjectTempKeeper0 isinstance4;
            if ( ( isinstance4.assign( _python_var_unicode_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance4.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_six.asObject0(), _python_str_plain_text_type ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 390 );
            _python_var_value.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_unicode_value.asObject(), _python_str_plain_strip ) ).asObject() ) );
        }
        }
        frame_guard.setLineNumber( 392 );
        {
            PyObjectTempKeeper0 isinstance9;
            if ( ( isinstance9.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance9.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_six.asObject0(), _python_str_plain_text_type ) ).asObject() ) ) )
        {
            {
                frame_guard.setLineNumber( 393 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_input_formats ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 393 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_var_format.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 394 );
                    try
                    {
                        frame_guard.setLineNumber( 395 );
                        {
                            PyObjectTempKeeper1 call6;
                            PyObjectTempKeeper0 call7;
                            return ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_strptime ) ), call7.assign( _python_var_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), call7.asObject0(), _python_var_format.asObject() ) );
                        }
                    }
                    catch ( PythonException &_exception )
                    {
                        if ( !_exception.hasTraceback() )
                        {
                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                        }
                        else
                        {
                            _exception.addTraceback( frame_guard.getFrame0() );
                        }

                        frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                        ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                        _exception.toExceptionHandler();

                        if ( _exception.matches( PyExc_ValueError ) || _exception.matches( PyExc_TypeError ) )
                        {
                            frame_guard.detachFrame();
                            frame_guard.setLineNumber( 397 );
                            CONSIDER_THREADING(); continue;
                        }
                        else
                        {
                            PyTracebackObject *tb = _exception.getTraceback();
                            frame_guard.setLineNumber( tb->tb_lineno );
                            _exception.setTraceback( tb->tb_next );
                            tb->tb_next = NULL;

                            throw;
                        }
                    }

                   CONSIDER_THREADING();
                }
            }
        }
        }
        frame_guard.setLineNumber( 398 );
        {
            PyObjectTempKeeper0 call11;
            {
                PyObjectTemporary tmp_exception_type( ( call11.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ).asObject() ) ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_format.updateLocalsDict( _python_var_unicode_value.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields );
           frame_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_format )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_format( _python_str_plain_format, _python_par_format );

    // Actual function code.
    static PyFrameObject *frame_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields ) )
    {
        if ( frame_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields );
        }

        frame_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_d60964810624247cd95f2fc85115a2ad, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 401 );
        {
                PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_NotImplementedError, PyObjectTemporary( MAKE_TUPLE1( _python_unicode_digest_812df31f6ed50fcbf64ace0191262aef ) ).asObject() ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_format.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields );
           frame_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_format = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "strptime() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_format == key )
            {
                if (unlikely( _python_par_format ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'format'" );
                    goto error_exit;
                }

                _python_par_format = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_format, key ) )
            {
                if (unlikely( _python_par_format ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'format'" );
                    goto error_exit;
                }

                _python_par_format = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "strptime() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "strptime() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "strptime() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "strptime() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "strptime() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "strptime() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "strptime() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "strptime() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_format != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'format'" );
             goto error_exit;
         }

        _python_par_format = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields( self, _python_par_self, _python_par_value, _python_par_format );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_format );

    return NULL;
}

static PyObject *dparse_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_7_DateField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );
    PyObjectLocalVariable _python_var_input_formats( _python_str_plain_input_formats );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_strptime( _python_str_plain_strptime );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_7_DateField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_7_DateField_of_module_django__forms__fields ) )
    {
        if ( frame_class_7_DateField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_7_DateField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_7_DateField_of_module_django__forms__fields );
        }

        frame_class_7_DateField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_3ccbd2c1d6973002171ae6772f2675b8, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_7_DateField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_7_DateField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 405 );
        _python_var_widget.assign0( _mvar_django__forms__fields_DateInput.asObject0() );
        frame_guard.setLineNumber( 406 );
        _python_var_input_formats.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_formats.asObject0(), _python_str_plain_get_format_lazy ) ).asObject(), _python_unicode_plain_DATE_INPUT_FORMATS ) );
        frame_guard.setLineNumber( 407 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_cc3423894adcd935177f0c624410cb53 ) ).asObject(), _python_unicode_plain_invalid ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_strptime.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_input_formats.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_7_DateField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_7_DateField_of_module_django__forms__fields );
           frame_class_7_DateField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var_to_python.assign1( MAKE_FUNCTION_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields(  ) );
    _python_var_strptime.assign1( MAKE_FUNCTION_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields(  ) );
    return _python_var_strptime.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_input_formats.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );
}


static PyObject *impl_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_to_python_of_class_7_DateField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields );
        }

        frame_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_6b7e3e0ae7b2db410877212f59344bbd, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 416 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        }
        frame_guard.setLineNumber( 418 );
        {
            PyObjectTempKeeper0 isinstance3;
            if ( ( isinstance3.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_datetime.asObject0(), _python_str_plain_datetime ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 419 );
            return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_date ) ).asObject() );
        }
        }
        frame_guard.setLineNumber( 420 );
        {
            PyObjectTempKeeper0 isinstance5;
            if ( ( isinstance5.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_datetime.asObject0(), _python_str_plain_date ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 421 );
            return _python_var_value.asObject1();
        }
        }
        frame_guard.setLineNumber( 422 );
        {
            PyObjectTempKeeper1 call9;
            PyObjectTempKeeper0 super7;
            return ( call9.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super7.assign( _mvar_django__forms__fields_DateField.asObject0() ), BUILTIN_SUPER( super7.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields );
           frame_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_format )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_format( _python_str_plain_format, _python_par_format );

    // Actual function code.
    static PyFrameObject *frame_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_strptime_of_class_7_DateField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields );
        }

        frame_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_cb3c569f6c17cb09ac56c99f53e00da1, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 425 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 call4;
            return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_datetime.asObject0(), _python_str_plain_datetime ) ).asObject(), _python_str_plain_strptime ) ), call4.assign( ( call1.assign( _mvar_django__forms__fields_force_str.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_format.asObject() ) ) ).asObject(), _python_str_plain_date ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_format.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields );
           frame_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_format = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "strptime() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_format == key )
            {
                if (unlikely( _python_par_format ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'format'" );
                    goto error_exit;
                }

                _python_par_format = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_format, key ) )
            {
                if (unlikely( _python_par_format ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'format'" );
                    goto error_exit;
                }

                _python_par_format = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "strptime() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "strptime() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "strptime() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "strptime() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "strptime() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "strptime() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "strptime() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "strptime() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_format != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'format'" );
             goto error_exit;
         }

        _python_par_format = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields( self, _python_par_self, _python_par_value, _python_par_format );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_format );

    return NULL;
}

static PyObject *dparse_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_8_TimeField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );
    PyObjectLocalVariable _python_var_input_formats( _python_str_plain_input_formats );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_strptime( _python_str_plain_strptime );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_8_TimeField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_8_TimeField_of_module_django__forms__fields ) )
    {
        if ( frame_class_8_TimeField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_8_TimeField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_8_TimeField_of_module_django__forms__fields );
        }

        frame_class_8_TimeField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_d7f21aae0d1c5325e21f736b1f960a38, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_8_TimeField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_8_TimeField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 429 );
        _python_var_widget.assign0( _mvar_django__forms__fields_TimeInput.asObject0() );
        frame_guard.setLineNumber( 430 );
        _python_var_input_formats.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_formats.asObject0(), _python_str_plain_get_format_lazy ) ).asObject(), _python_unicode_plain_TIME_INPUT_FORMATS ) );
        frame_guard.setLineNumber( 431 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_0bac3511ee6d665901724954087e6c0a ) ).asObject(), _python_unicode_plain_invalid ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_strptime.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_input_formats.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_8_TimeField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_8_TimeField_of_module_django__forms__fields );
           frame_class_8_TimeField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var_to_python.assign1( MAKE_FUNCTION_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields(  ) );
    _python_var_strptime.assign1( MAKE_FUNCTION_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields(  ) );
    return _python_var_strptime.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_input_formats.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );
}


static PyObject *impl_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields );
        }

        frame_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_fbd3a39cb7b3e471180e44596dc61972, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 440 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        }
        frame_guard.setLineNumber( 442 );
        {
            PyObjectTempKeeper0 isinstance3;
            if ( ( isinstance3.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_datetime.asObject0(), _python_str_plain_time ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 443 );
            return _python_var_value.asObject1();
        }
        }
        frame_guard.setLineNumber( 444 );
        {
            PyObjectTempKeeper1 call7;
            PyObjectTempKeeper0 super5;
            return ( call7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super5.assign( _mvar_django__forms__fields_TimeField.asObject0() ), BUILTIN_SUPER( super5.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields );
           frame_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_format )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_format( _python_str_plain_format, _python_par_format );

    // Actual function code.
    static PyFrameObject *frame_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields );
        }

        frame_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_f2e81b418678acda8627c0d55a6f52c6, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 447 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 call4;
            return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_datetime.asObject0(), _python_str_plain_datetime ) ).asObject(), _python_str_plain_strptime ) ), call4.assign( ( call1.assign( _mvar_django__forms__fields_force_str.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_format.asObject() ) ) ).asObject(), _python_str_plain_time ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_format.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields );
           frame_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_format = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "strptime() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_format == key )
            {
                if (unlikely( _python_par_format ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'format'" );
                    goto error_exit;
                }

                _python_par_format = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_format, key ) )
            {
                if (unlikely( _python_par_format ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'format'" );
                    goto error_exit;
                }

                _python_par_format = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "strptime() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "strptime() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "strptime() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "strptime() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "strptime() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "strptime() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "strptime() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "strptime() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_format != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'format'" );
             goto error_exit;
         }

        _python_par_format = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields( self, _python_par_self, _python_par_value, _python_par_format );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_format );

    return NULL;
}

static PyObject *dparse_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_9_DateTimeField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );
    PyObjectLocalVariable _python_var_input_formats( _python_str_plain_input_formats );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var_prepare_value( _python_str_plain_prepare_value );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_strptime( _python_str_plain_strptime );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_9_DateTimeField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_9_DateTimeField_of_module_django__forms__fields ) )
    {
        if ( frame_class_9_DateTimeField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_9_DateTimeField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_9_DateTimeField_of_module_django__forms__fields );
        }

        frame_class_9_DateTimeField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_d1e80edba586a8474da9fefd2bcc0e0f, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_9_DateTimeField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_9_DateTimeField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 451 );
        _python_var_widget.assign0( _mvar_django__forms__fields_DateTimeInput.asObject0() );
        frame_guard.setLineNumber( 452 );
        _python_var_input_formats.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_formats.asObject0(), _python_str_plain_get_format_lazy ) ).asObject(), _python_unicode_plain_DATETIME_INPUT_FORMATS ) );
        frame_guard.setLineNumber( 453 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_d49fbd4b4e9a88d0083228eeee64737a ) ).asObject(), _python_unicode_plain_invalid ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_strptime.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_prepare_value.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_input_formats.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_9_DateTimeField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_9_DateTimeField_of_module_django__forms__fields );
           frame_class_9_DateTimeField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var_prepare_value.assign1( MAKE_FUNCTION_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields(  ) );
    _python_var_strptime.assign1( MAKE_FUNCTION_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields(  ) );
    return _python_var_strptime.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_prepare_value.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_input_formats.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );
}


static PyObject *impl_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields );
        }

        frame_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_da8b04a52f4754e21a0ddbcf55a39f8a, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 458 );
        {
            PyObjectTempKeeper0 isinstance3;
            if ( ( isinstance3.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_datetime.asObject0(), _python_str_plain_datetime ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 459 );
            {
                PyObjectTempKeeper0 call1;
                _python_var_value.assign1( ( call1.assign( _mvar_django__forms__fields_to_current_timezone.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        }
        frame_guard.setLineNumber( 460 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields );
           frame_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "prepare_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "prepare_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "prepare_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "prepare_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_result( _python_str_plain_result );

    // Actual function code.
    static PyFrameObject *frame_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields );
        }

        frame_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_38f245fe8c6e7eaebbdbcc48d13dc0ab, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 467 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        }
        frame_guard.setLineNumber( 469 );
        {
            PyObjectTempKeeper0 isinstance5;
            if ( ( isinstance5.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_datetime.asObject0(), _python_str_plain_datetime ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 470 );
            {
                PyObjectTempKeeper0 call3;
                return ( call3.assign( _mvar_django__forms__fields_from_current_timezone.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) );
            }
        }
        }
        frame_guard.setLineNumber( 471 );
        {
            PyObjectTempKeeper0 isinstance13;
            if ( ( isinstance13.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance13.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_datetime.asObject0(), _python_str_plain_date ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 472 );
            {
                PyObjectTempKeeper1 call7;
                PyObjectTempKeeper1 call8;
                PyObjectTempKeeper1 call9;
                _python_var_result.assign1( ( call7.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_datetime.asObject0(), _python_str_plain_datetime ) ), call8.assign( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_year ) ), call9.assign( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_month ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), call8.asObject0(), call9.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_day ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 473 );
            {
                PyObjectTempKeeper0 call11;
                return ( call11.assign( _mvar_django__forms__fields_from_current_timezone.asObject0() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _python_var_result.asObject() ) );
            }
        }
        }
        frame_guard.setLineNumber( 474 );
        if ( BUILTIN_ISINSTANCE_BOOL( _python_var_value.asObject(), LOOKUP_BUILTIN( _python_str_plain_list ) ) )
        {
            frame_guard.setLineNumber( 477 );
            if ( RICH_COMPARE_BOOL_NE( PyObjectTemporary( BUILTIN_LEN( _python_var_value.asObject() ) ).asObject(), _python_int_pos_2 ) )
            {
                frame_guard.setLineNumber( 478 );
                {
                    PyObjectTempKeeper0 call15;
                    {
                        PyObjectTemporary tmp_exception_type( ( call15.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            frame_guard.setLineNumber( 479 );
            {
                PyObjectTempKeeper1 cmp17;
                PyObjectTempKeeper1 cmp19;
                if ( ( ( cmp17.assign( LOOKUP_SUBSCRIPT_CONST( _python_var_value.asObject(), _python_int_0, 0 ) ), SEQUENCE_CONTAINS_BOOL( cmp17.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) && ( cmp19.assign( LOOKUP_SUBSCRIPT_CONST( _python_var_value.asObject(), _python_int_pos_1, 1 ) ), SEQUENCE_CONTAINS_BOOL( cmp19.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) ) )
            {
                return INCREASE_REFCOUNT( Py_None );
            }
            }
            frame_guard.setLineNumber( 481 );
            _python_var_value.assign1( BINARY_OPERATION_REMAINDER( _python_unicode_digest_29bf226e186bf57b52fac1b0ba1f88ff, PyObjectTemporary( TO_TUPLE( _python_var_value.asObject() ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 482 );
        {
            PyObjectTempKeeper1 call23;
            PyObjectTempKeeper0 super21;
            _python_var_result.assign1( ( call23.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super21.assign( _mvar_django__forms__fields_DateTimeField.asObject0() ), BUILTIN_SUPER( super21.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call23.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 483 );
        {
            PyObjectTempKeeper0 call25;
            return ( call25.assign( _mvar_django__forms__fields_from_current_timezone.asObject0() ), CALL_FUNCTION_WITH_ARGS( call25.asObject0(), _python_var_result.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_result.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields );
           frame_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_format )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_format( _python_str_plain_format, _python_par_format );

    // Actual function code.
    static PyFrameObject *frame_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields ) )
    {
        if ( frame_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields );
        }

        frame_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_1ff167b0e3d73e3d2894267c2506e1ee, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 486 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 call4;
            return ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_datetime.asObject0(), _python_str_plain_datetime ) ).asObject(), _python_str_plain_strptime ) ), call4.assign( ( call1.assign( _mvar_django__forms__fields_force_str.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_format.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_format.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields );
           frame_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_format = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "strptime() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_format == key )
            {
                if (unlikely( _python_par_format ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'format'" );
                    goto error_exit;
                }

                _python_par_format = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_format, key ) )
            {
                if (unlikely( _python_par_format ))
                {
                    PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'format'" );
                    goto error_exit;
                }

                _python_par_format = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "strptime() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "strptime() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "strptime() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "strptime() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "strptime() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "strptime() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "strptime() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "strptime() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "strptime() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_format != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "strptime() got multiple values for keyword argument 'format'" );
             goto error_exit;
         }

        _python_par_format = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields( self, _python_par_self, _python_par_value, _python_par_format );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_format );

    return NULL;
}

static PyObject *dparse_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_10_RegexField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var__get_regex( _python_str_plain__get_regex );
    PyObjectLocalVariable _python_var__set_regex( _python_str_plain__set_regex );
    PyObjectLocalVariable _python_var_regex( _python_str_plain_regex );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_10_RegexField_of_module_django__forms__fields(  ) );
    _python_var__get_regex.assign1( MAKE_FUNCTION_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields(  ) );
    _python_var__set_regex.assign1( MAKE_FUNCTION_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields(  ) );
    static PyFrameObject *frame_class_10_RegexField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_10_RegexField_of_module_django__forms__fields ) )
    {
        if ( frame_class_10_RegexField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_10_RegexField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_10_RegexField_of_module_django__forms__fields );
        }

        frame_class_10_RegexField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_3d6fb76eed0c9a63c129376886ba883e, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_10_RegexField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_10_RegexField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 516 );
        {
            PyObjectTempKeeper0 call2;
            _python_var_regex.assign1( ( call2.assign( _python_var__get_regex.asObject() ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), call2.asObject0(), _python_var__set_regex.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_regex.updateLocalsDict( _python_var__set_regex.updateLocalsDict( _python_var__get_regex.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_10_RegexField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_10_RegexField_of_module_django__forms__fields );
           frame_class_10_RegexField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    return _python_var_regex.updateLocalsDict( _python_var__set_regex.updateLocalsDict( _python_var__get_regex.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_10_RegexField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_regex, PyObject *_python_par_max_length, PyObject *_python_par_min_length, PyObject *_python_par_error_message, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_regex( _python_str_plain_regex, _python_par_regex );
    PyObjectLocalParameterVariableNoDel _python_var_max_length( _python_str_plain_max_length, _python_par_max_length );
    PyObjectLocalParameterVariableNoDel _python_var_min_length( _python_str_plain_min_length, _python_par_min_length );
    PyObjectLocalParameterVariableNoDel _python_var_error_message( _python_str_plain_error_message, _python_par_error_message );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_error_messages( _python_str_plain_error_messages );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_10_RegexField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_10_RegexField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1___init___of_class_10_RegexField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_10_RegexField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_10_RegexField_of_module_django__forms__fields );
        }

        frame_function_1___init___of_class_10_RegexField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_1f5abfac3fd3cc892560097cd64b05f1, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_10_RegexField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_10_RegexField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 497 );
        if ( CHECK_IF_TRUE( _python_var_error_message.asObject() ) )
        {
            frame_guard.setLineNumber( 498 );
            {
                PyObjectTempKeeper1 keeper_0;
                _python_var_error_messages.assign1( ( CHECK_IF_TRUE( keeper_0.assign( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_get ) ).asObject(), _python_unicode_plain_error_messages ) ) ) ? keeper_0.asObject() : PyDict_New() ) );
            }
            frame_guard.setLineNumber( 499 );
            {
                    PyObject *tmp_identifier = _python_var_error_message.asObject();
                    SET_SUBSCRIPT( tmp_identifier, _python_var_error_messages.asObject(), _python_unicode_plain_invalid );
            }
            frame_guard.setLineNumber( 500 );
            {
                    PyObject *tmp_identifier = _python_var_error_messages.asObject();
                    SET_SUBSCRIPT( tmp_identifier, _python_var_kwargs.asObject(), _python_unicode_plain_error_messages );
            }
        }
        frame_guard.setLineNumber( 501 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper1 call_tmp6;
            PyObjectTempKeeper0 call_tmp7;
            PyObjectTempKeeper0 make_tuple3;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_RegexField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp6.assign( ( make_tuple3.assign( _python_var_max_length.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), _python_var_min_length.asObject() ) ) ), call_tmp7.assign( _python_var_args.asObject() ), impl_function_8_complex_call_helper_pos_star_list_star_dict_of_module___internal__( call_tmp5.asObject(), call_tmp6.asObject(), call_tmp7.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 502 );
        {
            PyObjectTempKeeper1 call9;
            DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__set_regex ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_var_regex.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_error_message.updateLocalsDict( _python_var_min_length.updateLocalsDict( _python_var_max_length.updateLocalsDict( _python_var_regex.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_error_messages.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_10_RegexField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_10_RegexField_of_module_django__forms__fields );
           frame_function_1___init___of_class_10_RegexField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_10_RegexField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_regex = NULL;
    PyObject *_python_par_max_length = NULL;
    PyObject *_python_par_min_length = NULL;
    PyObject *_python_par_error_message = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument regex was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_regex );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_regex == NULL );

            _python_par_regex = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_regex );

            kw_found += 1;
        }
    }

    // Check if argument max_length was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_max_length );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_max_length == NULL );

            _python_par_max_length = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_max_length );

            kw_found += 1;
        }
    }

    // Check if argument min_length was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_min_length );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_min_length == NULL );

            _python_par_min_length = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_min_length );

            kw_found += 1;
        }
    }

    // Check if argument error_message was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_error_message );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_error_message == NULL );

            _python_par_error_message = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_error_message );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 5, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 5, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_regex != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'regex'" );
             goto error_exit;
         }

        _python_par_regex = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_max_length != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'max_length'" );
             goto error_exit;
         }

        _python_par_max_length = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_min_length != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'min_length'" );
             goto error_exit;
         }

        _python_par_min_length = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_error_message != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'error_message'" );
             goto error_exit;
         }

        _python_par_error_message = INCREASE_REFCOUNT( args[ 4 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 5 )
    {
        _python_par_args = PyTuple_New( args_size - 5 );

        for( Py_ssize_t i = 0; i < args_size - 5; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[5+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }
    // Assign values not given to defaults
    if ( _python_par_max_length == NULL )
    {
        _python_par_max_length = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_max_length );
    }
    if ( _python_par_min_length == NULL )
    {
        _python_par_min_length = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_min_length );
    }
    if ( _python_par_error_message == NULL )
    {
        _python_par_error_message = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_error_message );
    }


    return impl_function_1___init___of_class_10_RegexField_of_module_django__forms__fields( self, _python_par_self, _python_par_regex, _python_par_max_length, _python_par_min_length, _python_par_error_message, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_regex );
    Py_XDECREF( _python_par_max_length );
    Py_XDECREF( _python_par_min_length );
    Py_XDECREF( _python_par_error_message );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_10_RegexField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 7)
    {
        return impl_function_1___init___of_class_10_RegexField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), MAKE_TUPLE( &args[ 5 ], size > 5 ? size-5 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_10_RegexField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields );
        }

        frame_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_a4a2aeaf792dcb1aaed9b8dfefcdc1db, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 505 );
        return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__regex );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields );
           frame_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_regex() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_regex() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_regex() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_regex() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_regex() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_get_regex() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_get_regex() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_regex() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_regex() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_regex() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_regex() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_regex() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_get_regex() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_get_regex() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_get_regex() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_get_regex() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_regex() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_regex )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_regex( _python_str_plain_regex, _python_par_regex );

    // Actual function code.
    static PyFrameObject *frame_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields ) )
    {
        if ( frame_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields );
        }

        frame_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_5d2d94081b7691223c1b00665a23d861, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 508 );
        {
            PyObjectTempKeeper0 isinstance4;
            if ( ( isinstance4.assign( _python_var_regex.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance4.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 509 );
            {
                PyObjectTempKeeper1 call1;
                PyObjectTempKeeper0 call2;
                _python_var_regex.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_re.asObject0(), _python_str_plain_compile ) ), call2.assign( _python_var_regex.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_re.asObject0(), _python_str_plain_UNICODE ) ).asObject() ) ) );
            }
        }
        }
        frame_guard.setLineNumber( 510 );
        {
                PyObject *tmp_identifier = _python_var_regex.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain__regex );
        }
        frame_guard.setLineNumber( 511 );
        {
            PyObjectTempKeeper1 cmp8;
            if ( ( HAS_ATTRIBUTE( _python_var_self.asObject(), _python_unicode_plain__regex_validator ) && ( cmp8.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__regex_validator ) ), SEQUENCE_CONTAINS_BOOL( cmp8.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validators ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 512 );
            {
                PyObjectTempKeeper1 call6;
                DECREASE_REFCOUNT( ( call6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validators ) ).asObject(), _python_str_plain_remove ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__regex_validator ) ).asObject() ) ) );
            }
        }
        }
        frame_guard.setLineNumber( 513 );
        {
            PyObjectTempKeeper1 call10;
            {
                PyObjectTemporary tmp_identifier( ( call10.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_validators.asObject0(), _python_str_plain_RegexValidator ) ), CALL_FUNCTION( call10.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_regex.asObject(), _python_str_plain_regex ) ).asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain__regex_validator );
        }
        }
        frame_guard.setLineNumber( 514 );
        {
            PyObjectTempKeeper1 call13;
            DECREASE_REFCOUNT( ( call13.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validators ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__regex_validator ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_regex.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields );
           frame_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_regex = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_set_regex() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_set_regex() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_regex == key )
            {
                if (unlikely( _python_par_regex ))
                {
                    PyErr_Format( PyExc_TypeError, "_set_regex() got multiple values for keyword argument 'regex'" );
                    goto error_exit;
                }

                _python_par_regex = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_set_regex() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_regex, key ) )
            {
                if (unlikely( _python_par_regex ))
                {
                    PyErr_Format( PyExc_TypeError, "_set_regex() got multiple values for keyword argument 'regex'" );
                    goto error_exit;
                }

                _python_par_regex = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_set_regex() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_set_regex() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_set_regex() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_set_regex() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_set_regex() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_set_regex() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_set_regex() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_set_regex() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_set_regex() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_set_regex() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_set_regex() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_set_regex() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_set_regex() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_set_regex() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_regex != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_set_regex() got multiple values for keyword argument 'regex'" );
             goto error_exit;
         }

        _python_par_regex = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields( self, _python_par_self, _python_par_regex );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_regex );

    return NULL;
}

static PyObject *dparse_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_11_EmailField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );
    PyObjectLocalVariable _python_var_default_validators( _python_str_plain_default_validators );
    PyObjectLocalVariable _python_var_clean( _python_str_plain_clean );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_11_EmailField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_11_EmailField_of_module_django__forms__fields ) )
    {
        if ( frame_class_11_EmailField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_11_EmailField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_11_EmailField_of_module_django__forms__fields );
        }

        frame_class_11_EmailField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_56338bced77cfb984343ff95cd34b4cb, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_11_EmailField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_11_EmailField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 520 );
        _python_var_widget.assign0( _mvar_django__forms__fields_EmailInput.asObject0() );
        frame_guard.setLineNumber( 521 );
        _python_var_default_validators.assign1( MAKE_LIST1( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_validators.asObject0(), _python_str_plain_validate_email ) ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_clean.updateLocalsDict( _python_var_default_validators.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_11_EmailField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_11_EmailField_of_module_django__forms__fields );
           frame_class_11_EmailField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var_clean.assign1( MAKE_FUNCTION_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields(  ) );
    return _python_var_clean.updateLocalsDict( _python_var_default_validators.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_clean_of_class_11_EmailField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields );
        }

        frame_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_ba4d26f02a9d240b90dfdae52377feab, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 524 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_value.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) ).asObject(), _python_str_plain_strip ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 525 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper0 super3;
            return ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__forms__fields_EmailField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_clean ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields );
           frame_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clean() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clean() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clean() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_12_FileField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_clean( _python_str_plain_clean );
    PyObjectLocalVariable _python_var_bound_data( _python_str_plain_bound_data );
    PyObjectLocalVariable _python_var__has_changed( _python_str_plain__has_changed );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_12_FileField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_12_FileField_of_module_django__forms__fields ) )
    {
        if ( frame_class_12_FileField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_12_FileField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_12_FileField_of_module_django__forms__fields );
        }

        frame_class_12_FileField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_89883beda7d6e021c3e729a0217bc6d4, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_12_FileField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_12_FileField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 529 );
        _python_var_widget.assign0( _mvar_django__forms__fields_ClearableFileInput.asObject0() );
        frame_guard.setLineNumber( 530 );
        {
            PyObjectTempKeeper1 make_dict1;
            PyObjectTempKeeper1 make_dict3;
            PyObjectTempKeeper1 make_dict5;
            PyObjectTempKeeper1 make_dict7;
            _python_var_default_error_messages.assign1( ( make_dict1.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_1bf7434458d029b64b3231c31b7210c9 ) ), make_dict3.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_50fb421d88994914266e60b743c6e925 ) ), make_dict5.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_ed11f6d0171225c629549688af653b62 ) ), make_dict7.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields_ungettext_lazy.asObject0(), _python_unicode_digest_ee4630c663ce44f2913fb59dccc74867, _python_unicode_digest_139ea9ac44e459a7f2bb2709cabe3f8e, _python_unicode_plain_max ) ), MAKE_DICT5( make_dict1.asObject0(), _python_unicode_plain_invalid, make_dict3.asObject0(), _python_unicode_plain_missing, make_dict5.asObject0(), _python_unicode_plain_empty, make_dict7.asObject0(), _python_unicode_plain_max_length, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_83beebad0b844759c1cab7be7a7c63de ) ).asObject(), _python_unicode_plain_contradiction ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var__has_changed.updateLocalsDict( _python_var_bound_data.updateLocalsDict( _python_var_clean.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_12_FileField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_12_FileField_of_module_django__forms__fields );
           frame_class_12_FileField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_12_FileField_of_module_django__forms__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields(  ) );
    _python_var_clean.assign1( MAKE_FUNCTION_function_3_clean_of_class_12_FileField_of_module_django__forms__fields(  ) );
    _python_var_bound_data.assign1( MAKE_FUNCTION_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields(  ) );
    _python_var__has_changed.assign1( MAKE_FUNCTION_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields(  ) );
    return _python_var__has_changed.updateLocalsDict( _python_var_bound_data.updateLocalsDict( _python_var_clean.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_12_FileField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_12_FileField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_12_FileField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1___init___of_class_12_FileField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_12_FileField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_12_FileField_of_module_django__forms__fields );
        }

        frame_function_1___init___of_class_12_FileField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_2fbc8c78af6b90f8a5bfcb68740e176b, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_12_FileField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_12_FileField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 542 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_unicode_plain_max_length, Py_None ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_max_length );
        }
        frame_guard.setLineNumber( 543 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_unicode_plain_allow_empty_file, Py_False ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_allow_empty_file );
        }
        frame_guard.setLineNumber( 544 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_FileField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp4.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_12_FileField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_12_FileField_of_module_django__forms__fields );
           frame_function_1___init___of_class_12_FileField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_12_FileField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_12_FileField_of_module_django__forms__fields( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_12_FileField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_12_FileField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_12_FileField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalVariable _python_var_file_name( _python_str_plain_file_name );
    PyObjectLocalVariable _python_var_file_size( _python_str_plain_file_size );
    PyObjectLocalVariable _python_var_error_values( _python_str_plain_error_values );

    // Actual function code.
    static PyFrameObject *frame_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_to_python_of_class_12_FileField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields );
        }

        frame_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_2b0d56dd355dcf8a40029fc9f71e841a, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 547 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( _python_var_data.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        }
        frame_guard.setLineNumber( 551 );
        try
        {
            frame_guard.setLineNumber( 552 );
            _python_var_file_name.assign1( LOOKUP_ATTRIBUTE( _python_var_data.asObject(), _python_str_plain_name ) );
            frame_guard.setLineNumber( 553 );
            _python_var_file_size.assign1( LOOKUP_ATTRIBUTE( _python_var_data.asObject(), _python_str_plain_size ) );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_AttributeError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 555 );
                {
                    PyObjectTempKeeper0 call3;
                    {
                        PyObjectTemporary tmp_exception_type( ( call3.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 557 );
        {
            PyObjectTempKeeper1 cmp13;
            if ( ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_length ) ).asObject() != Py_None ) && ( cmp13.assign( BUILTIN_LEN( _python_var_file_name.asObject() ) ), RICH_COMPARE_BOOL_GT( cmp13.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_length ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 558 );
            {
                PyObjectTempKeeper1 make_dict5;
                _python_var_error_values.assign1( ( make_dict5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_length ) ), MAKE_DICT2( make_dict5.asObject0(), _python_unicode_plain_max, PyObjectTemporary( BUILTIN_LEN( _python_var_file_name.asObject() ) ).asObject(), _python_unicode_plain_length ) ) );
            }
            frame_guard.setLineNumber( 559 );
            {
                PyObjectTempKeeper0 call11;
                PyObjectTempKeeper1 op9;
                {
                    PyObjectTemporary tmp_exception_type( ( call11.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), PyObjectTemporary( ( op9.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_max_length ) ), BINARY_OPERATION_REMAINDER( op9.asObject0(), _python_var_error_values.asObject() ) ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        }
        frame_guard.setLineNumber( 560 );
        if ( (!( CHECK_IF_TRUE( _python_var_file_name.asObject() ) )) )
        {
            frame_guard.setLineNumber( 561 );
            {
                PyObjectTempKeeper0 call15;
                {
                    PyObjectTemporary tmp_exception_type( ( call15.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 562 );
        if ( ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_allow_empty_file ) ).asObject() ) )) && (!( CHECK_IF_TRUE( _python_var_file_size.asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 563 );
            {
                PyObjectTempKeeper0 call17;
                {
                    PyObjectTemporary tmp_exception_type( ( call17.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_empty ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 565 );
        return _python_var_data.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_error_values.updateLocalsDict( _python_var_file_size.updateLocalsDict( _python_var_file_name.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields );
           frame_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields( self, _python_par_self, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_clean_of_class_12_FileField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data, PyObject *_python_par_initial )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );

    // Actual function code.
    static PyFrameObject *frame_function_3_clean_of_class_12_FileField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_3_clean_of_class_12_FileField_of_module_django__forms__fields ) )
    {
        if ( frame_function_3_clean_of_class_12_FileField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_clean_of_class_12_FileField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_3_clean_of_class_12_FileField_of_module_django__forms__fields );
        }

        frame_function_3_clean_of_class_12_FileField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_215a6d524c1e08d9177780898aaeeab7, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_3_clean_of_class_12_FileField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_clean_of_class_12_FileField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 569 );
        if ( ( _python_var_data.asObject() == _mvar_django__forms__fields_FILE_INPUT_CONTRADICTION.asObject0() ) )
        {
            frame_guard.setLineNumber( 570 );
            {
                PyObjectTempKeeper0 call1;
                {
                    PyObjectTemporary tmp_exception_type( ( call1.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_contradiction ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 573 );
        if ( ( _python_var_data.asObject() == Py_False ) )
        {
            frame_guard.setLineNumber( 574 );
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_required ) ).asObject() ) )) )
            {
                return INCREASE_REFCOUNT( Py_False );
            }
            _python_var_data.assign0( Py_None );
        }
        frame_guard.setLineNumber( 582 );
        if ( ( (!( CHECK_IF_TRUE( _python_var_data.asObject() ) )) && CHECK_IF_TRUE( _python_var_initial.asObject() ) ) )
        {
            frame_guard.setLineNumber( 583 );
            return _python_var_initial.asObject1();
        }
        frame_guard.setLineNumber( 584 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper0 super3;
            return ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__forms__fields_FileField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_clean ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_data.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_initial.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_clean_of_class_12_FileField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_3_clean_of_class_12_FileField_of_module_django__forms__fields );
           frame_function_3_clean_of_class_12_FileField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_clean_of_class_12_FileField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    PyObject *_python_par_initial = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clean() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_initial == key )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_initial, key ) )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clean() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clean() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_initial == NULL )
    {
        _python_par_initial = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_initial );
    }


    return impl_function_3_clean_of_class_12_FileField_of_module_django__forms__fields( self, _python_par_self, _python_par_data, _python_par_initial );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );
    Py_XDECREF( _python_par_initial );

    return NULL;
}

static PyObject *dparse_function_3_clean_of_class_12_FileField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_3_clean_of_class_12_FileField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_clean_of_class_12_FileField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data, PyObject *_python_par_initial )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );

    // Actual function code.
    static PyFrameObject *frame_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields ) )
    {
        if ( frame_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields );
        }

        frame_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_ee4ebc8592da7ea6395f737e0b8a0a23, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 587 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( _python_var_data.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( MAKE_TUPLE2( Py_None, _mvar_django__forms__fields_FILE_INPUT_CONTRADICTION.asObject0() ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 588 );
            return _python_var_initial.asObject1();
        }
        }
        frame_guard.setLineNumber( 589 );
        return _python_var_data.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_initial.updateLocalsDict( _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields );
           frame_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    PyObject *_python_par_initial = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "bound_data() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_initial == key )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_initial, key ) )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "bound_data() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "bound_data() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "bound_data() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "bound_data() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "bound_data() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "bound_data() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "bound_data() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "bound_data() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "bound_data() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "bound_data() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "bound_data() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "bound_data() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "bound_data() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "bound_data() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields( self, _python_par_self, _python_par_data, _python_par_initial );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );
    Py_XDECREF( _python_par_initial );

    return NULL;
}

static PyObject *dparse_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_initial, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );

    // Actual function code.
    static PyFrameObject *frame_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields ) )
    {
        if ( frame_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields );
        }

        frame_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_3dfc7f6047be827cd930d36275510a58, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 592 );
        if ( ( _python_var_data.asObject() == Py_None ) )
        {
            return INCREASE_REFCOUNT( Py_False );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data.updateLocalsDict( _python_var_initial.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields );
           frame_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_True );
}
static PyObject *fparse_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_initial = NULL;
    PyObject *_python_par_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_initial == key )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_initial, key ) )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_has_changed() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_has_changed() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields( self, _python_par_self, _python_par_initial, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_initial );
    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_13_ImageField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_13_ImageField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_13_ImageField_of_module_django__forms__fields ) )
    {
        if ( frame_class_13_ImageField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_13_ImageField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_13_ImageField_of_module_django__forms__fields );
        }

        frame_class_13_ImageField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_53b62f1bd87276a02c5e09cb5deaf75a, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_13_ImageField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_13_ImageField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 598 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_49a82be12b102f095663ec5206d31a78 ) ).asObject(), _python_unicode_plain_invalid_image ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_to_python.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_class_13_ImageField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_13_ImageField_of_module_django__forms__fields );
           frame_class_13_ImageField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var_to_python.assign1( MAKE_FUNCTION_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields(  ) );
    return _python_var_to_python.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );
    PyObjectLocalVariable _python_var_Image( _python_str_plain_Image );
    PyObjectLocalVariable _python_var_file( _python_str_plain_file );

    // Actual function code.
    static PyFrameObject *frame_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields );
        }

        frame_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_e15b9797b92241412e1df14fb48f6aad, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 607 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            _python_var_f.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_ImageField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_data.asObject() ) ) );
        }
        frame_guard.setLineNumber( 608 );
        if ( ( _python_var_f.asObject() == Py_None ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 611 );
        _python_var_Image.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_e738cb01fb9731f7df53867340473848, ((PyModuleObject *)_module_django__forms__fields)->md_dict, PyObjectTemporary( _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_file.updateLocalsDict( _python_var_Image.updateLocalsDict( _python_var_f.updateLocalsDict( PyDict_New() ) ) ) ) ) ).asObject(), _python_list_str_plain_Image_list, _python_int_0 ) ).asObject(), _python_str_plain_Image ) );
        frame_guard.setLineNumber( 615 );
        if ( HAS_ATTRIBUTE( _python_var_data.asObject(), _python_unicode_plain_temporary_file_path ) )
        {
            frame_guard.setLineNumber( 616 );
            _python_var_file.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_data.asObject(), _python_str_plain_temporary_file_path ) ).asObject() ) );
        }
        else
        {
            frame_guard.setLineNumber( 618 );
            if ( HAS_ATTRIBUTE( _python_var_data.asObject(), _python_unicode_plain_read ) )
            {
                frame_guard.setLineNumber( 619 );
                {
                    PyObjectTempKeeper0 call5;
                    _python_var_file.assign1( ( call5.assign( _mvar_django__forms__fields_BytesIO.asObject0() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_data.asObject(), _python_str_plain_read ) ).asObject() ) ).asObject() ) ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 621 );
                {
                    PyObjectTempKeeper0 call7;
                    _python_var_file.assign1( ( call7.assign( _mvar_django__forms__fields_BytesIO.asObject0() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( _python_var_data.asObject(), _python_unicode_plain_content ) ).asObject() ) ) );
                }
            }
        }
        frame_guard.setLineNumber( 623 );
        try
        {
            frame_guard.setLineNumber( 627 );
            {
                PyObjectTempKeeper1 call15;
                DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call15.assign( LOOKUP_ATTRIBUTE( _python_var_Image.asObject(), _python_str_plain_open ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), _python_var_file.asObject() ) ) ).asObject(), _python_str_plain_verify ) ).asObject() ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_Exception ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 630 );
                {
                    PyObjectTempKeeper1 call11;
                    PyObjectTempKeeper0 call12;
                    PyObjectTempKeeper1 call13;
                    PyObjectTempKeeper0 call9;
                    DECREASE_REFCOUNT( ( call11.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_six.asObject0(), _python_str_plain_reraise ) ), call12.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), call13.assign( ( call9.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_image ) ).asObject() ) ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), call12.asObject0(), call13.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_sys.asObject0(), _python_str_plain_exc_info ) ).asObject() ) ).asObject(), _python_int_pos_2, 2 ) ).asObject() ) ) );
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 631 );
        if ( ( HAS_ATTRIBUTE( _python_var_f.asObject(), _python_unicode_plain_seek ) && CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_callable ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_seek ) ).asObject() ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 632 );
            DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_seek ) ).asObject(), _python_int_0 ) );
        }
        frame_guard.setLineNumber( 633 );
        return _python_var_f.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_file.updateLocalsDict( _python_var_Image.updateLocalsDict( _python_var_f.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields );
           frame_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields( self, _python_par_self, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_14_URLField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_clean( _python_str_plain_clean );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_14_URLField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_14_URLField_of_module_django__forms__fields ) )
    {
        if ( frame_class_14_URLField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_14_URLField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_14_URLField_of_module_django__forms__fields );
        }

        frame_class_14_URLField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_e58688b98f6e8fc6aadbac7d6d213cc1, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_14_URLField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_14_URLField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 637 );
        _python_var_widget.assign0( _mvar_django__forms__fields_URLInput.asObject0() );
        frame_guard.setLineNumber( 638 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_b1b8a23c18894c1e6bebea49198231d6 ) ).asObject(), _python_unicode_plain_invalid ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_clean.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_14_URLField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_14_URLField_of_module_django__forms__fields );
           frame_class_14_URLField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_14_URLField_of_module_django__forms__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields(  ) );
    _python_var_clean.assign1( MAKE_FUNCTION_function_3_clean_of_class_14_URLField_of_module_django__forms__fields(  ) );
    return _python_var_clean.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_14_URLField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_max_length, PyObject *_python_par_min_length, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_max_length( _python_str_plain_max_length, _python_par_max_length );
    PyObjectLocalParameterVariableNoDel _python_var_min_length( _python_str_plain_min_length, _python_par_min_length );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_14_URLField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_14_URLField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1___init___of_class_14_URLField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_14_URLField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_14_URLField_of_module_django__forms__fields );
        }

        frame_function_1___init___of_class_14_URLField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_232668ecb2d8e0cd0f29bc09ad4c5323, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_14_URLField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_14_URLField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 643 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper1 call_tmp6;
            PyObjectTempKeeper0 call_tmp7;
            PyObjectTempKeeper0 make_tuple3;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_URLField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp6.assign( ( make_tuple3.assign( _python_var_max_length.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), _python_var_min_length.asObject() ) ) ), call_tmp7.assign( _python_var_args.asObject() ), impl_function_8_complex_call_helper_pos_star_list_star_dict_of_module___internal__( call_tmp5.asObject(), call_tmp6.asObject(), call_tmp7.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 644 );
        {
            PyObjectTempKeeper1 call9;
            DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validators ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_validators.asObject0(), _python_str_plain_URLValidator ) ).asObject() ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_min_length.updateLocalsDict( _python_var_max_length.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_14_URLField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_14_URLField_of_module_django__forms__fields );
           frame_function_1___init___of_class_14_URLField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_14_URLField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_max_length = NULL;
    PyObject *_python_par_min_length = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument max_length was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_max_length );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_max_length == NULL );

            _python_par_max_length = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_max_length );

            kw_found += 1;
        }
    }

    // Check if argument min_length was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_min_length );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_min_length == NULL );

            _python_par_min_length = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_min_length );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 3, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 3, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_max_length != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'max_length'" );
             goto error_exit;
         }

        _python_par_max_length = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_min_length != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'min_length'" );
             goto error_exit;
         }

        _python_par_min_length = INCREASE_REFCOUNT( args[ 2 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 3 )
    {
        _python_par_args = PyTuple_New( args_size - 3 );

        for( Py_ssize_t i = 0; i < args_size - 3; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[3+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }
    // Assign values not given to defaults
    if ( _python_par_max_length == NULL )
    {
        _python_par_max_length = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_max_length );
    }
    if ( _python_par_min_length == NULL )
    {
        _python_par_min_length = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_min_length );
    }


    return impl_function_1___init___of_class_14_URLField_of_module_django__forms__fields( self, _python_par_self, _python_par_max_length, _python_par_min_length, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_max_length );
    Py_XDECREF( _python_par_min_length );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_14_URLField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_1___init___of_class_14_URLField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), MAKE_TUPLE( &args[ 3 ], size > 3 ? size-3 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_14_URLField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectSharedLocalVariable _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_split_url( _python_str_plain_split_url );
    PyObjectLocalVariable _python_var_url_fields( _python_str_plain_url_fields );

    // Actual function code.
    _python_var_split_url.assign1( MAKE_FUNCTION_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields( _python_var_self ) );
    static PyFrameObject *frame_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_to_python_of_class_14_URLField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields );
        }

        frame_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_453d9ee76fe12ecde493c3c60f49fdea, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 660 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            _python_var_value.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_URLField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 661 );
        if ( CHECK_IF_TRUE( _python_var_value.asObject() ) )
        {
            frame_guard.setLineNumber( 662 );
            {
                PyObjectTempKeeper0 call5;
                _python_var_url_fields.assign1( ( call5.assign( _python_var_split_url.asObject() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_value.asObject() ) ) );
            }
            frame_guard.setLineNumber( 663 );
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_url_fields.asObject(), _python_int_0, 0 ) ).asObject() ) )) )
            {
                frame_guard.setLineNumber( 665 );
                SET_SUBSCRIPT( _python_unicode_plain_http, _python_var_url_fields.asObject(), _python_int_0 );
            }
            frame_guard.setLineNumber( 666 );
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_url_fields.asObject(), _python_int_pos_1, 1 ) ).asObject() ) )) )
            {
                frame_guard.setLineNumber( 669 );
                {
                        PyObjectTemporary tmp_identifier( LOOKUP_SUBSCRIPT_CONST( _python_var_url_fields.asObject(), _python_int_pos_2, 2 ) );
                        SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_url_fields.asObject(), _python_int_pos_1 );
                }
                frame_guard.setLineNumber( 670 );
                SET_SUBSCRIPT( _python_unicode_empty, _python_var_url_fields.asObject(), _python_int_pos_2 );
                frame_guard.setLineNumber( 673 );
                {
                    PyObjectTempKeeper0 call7;
                    PyObjectTempKeeper0 call9;
                    _python_var_url_fields.assign1( ( call9.assign( _python_var_split_url.asObject() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), PyObjectTemporary( ( call7.assign( _mvar_django__forms__fields_urlunsplit.asObject0() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_url_fields.asObject() ) ) ).asObject() ) ) );
                }
            }
            frame_guard.setLineNumber( 674 );
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_var_url_fields.asObject(), _python_int_pos_2, 2 ) ).asObject() ) )) )
            {
                frame_guard.setLineNumber( 676 );
                SET_SUBSCRIPT( _python_unicode_chr_47, _python_var_url_fields.asObject(), _python_int_pos_2 );
            }
            frame_guard.setLineNumber( 677 );
            {
                PyObjectTempKeeper0 call11;
                _python_var_value.assign1( ( call11.assign( _mvar_django__forms__fields_urlunsplit.asObject0() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _python_var_url_fields.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 678 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_url_fields.updateLocalsDict( _python_var_split_url.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields );
           frame_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_url )
{
    // The context of the function.
    struct _context_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields_t *_python_context = (struct _context_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_url( _python_str_plain_url, _python_par_url );

    // Actual function code.
    static PyFrameObject *frame_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields );
        }

        frame_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_14e4a502d592aef7bcf53dc438373420, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 653 );
        try
        {
            frame_guard.setLineNumber( 654 );
            {
                PyObjectTempKeeper0 call3;
                return TO_LIST( PyObjectTemporary( ( call3.assign( _mvar_django__forms__fields_urlsplit.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_url.asObject() ) ) ).asObject() );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_ValueError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 658 );
                {
                    PyObjectTempKeeper0 call1;
                    {
                        PyObjectTemporary tmp_exception_type( ( call1.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_context->python_closure_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_url.updateLocalsDict( _python_context->python_closure_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields );
           frame_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_url = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "split_url() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_url == key )
            {
                if (unlikely( _python_par_url ))
                {
                    PyErr_Format( PyExc_TypeError, "split_url() got multiple values for keyword argument 'url'" );
                    goto error_exit;
                }

                _python_par_url = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_url, key ) )
            {
                if (unlikely( _python_par_url ))
                {
                    PyErr_Format( PyExc_TypeError, "split_url() got multiple values for keyword argument 'url'" );
                    goto error_exit;
                }

                _python_par_url = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "split_url() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "split_url() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "split_url() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "split_url() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "split_url() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "split_url() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "split_url() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "split_url() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "split_url() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "split_url() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "split_url() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "split_url() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "split_url() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_url != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "split_url() got multiple values for keyword argument 'url'" );
             goto error_exit;
         }

        _python_par_url = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields( self, _python_par_url );

error_exit:;

    Py_XDECREF( _python_par_url );

    return NULL;
}

static PyObject *dparse_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_clean_of_class_14_URLField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_3_clean_of_class_14_URLField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_3_clean_of_class_14_URLField_of_module_django__forms__fields ) )
    {
        if ( frame_function_3_clean_of_class_14_URLField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_clean_of_class_14_URLField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_3_clean_of_class_14_URLField_of_module_django__forms__fields );
        }

        frame_function_3_clean_of_class_14_URLField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_f819756ad8037a96ecbb7565b5c1bf0e, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_3_clean_of_class_14_URLField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_clean_of_class_14_URLField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 681 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_value.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) ).asObject(), _python_str_plain_strip ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 682 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper0 super3;
            return ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__forms__fields_URLField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_clean ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_3_clean_of_class_14_URLField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_3_clean_of_class_14_URLField_of_module_django__forms__fields );
           frame_function_3_clean_of_class_14_URLField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_clean_of_class_14_URLField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clean() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clean() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clean() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_clean_of_class_14_URLField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_3_clean_of_class_14_URLField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_clean_of_class_14_URLField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_clean_of_class_14_URLField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_15_BooleanField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_validate( _python_str_plain_validate );
    PyObjectLocalVariable _python_var__has_changed( _python_str_plain__has_changed );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_15_BooleanField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_15_BooleanField_of_module_django__forms__fields ) )
    {
        if ( frame_class_15_BooleanField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_15_BooleanField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_15_BooleanField_of_module_django__forms__fields );
        }

        frame_class_15_BooleanField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_dd8cb20767bb85820d78ec7116c6def4, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_15_BooleanField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_15_BooleanField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 686 );
        _python_var_widget.assign0( _mvar_django__forms__fields_CheckboxInput.asObject0() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var__has_changed.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_15_BooleanField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_15_BooleanField_of_module_django__forms__fields );
           frame_class_15_BooleanField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var_to_python.assign1( MAKE_FUNCTION_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields(  ) );
    _python_var_validate.assign1( MAKE_FUNCTION_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields(  ) );
    _python_var__has_changed.assign1( MAKE_FUNCTION_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields(  ) );
    return _python_var__has_changed.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );
}


static PyObject *impl_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields );
        }

        frame_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_4c02dd901f62563270475a2a6130a587, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 694 );
        {
            PyObjectTempKeeper0 isinstance1;
            if ( ( ( isinstance1.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) && SEQUENCE_CONTAINS_BOOL( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_lower ) ).asObject() ) ).asObject(), _python_tuple_unicode_plain_false_unicode_plain_0_tuple ) ) )
        {
            _python_var_value.assign0( Py_False );
        }
        else
        {
            frame_guard.setLineNumber( 697 );
            _python_var_value.assign0( TO_BOOL( _python_var_value.asObject() ) );
        }
        }
        frame_guard.setLineNumber( 698 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper0 super3;
            return ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__forms__fields_BooleanField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields );
           frame_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields );
        }

        frame_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_db1dfff01056737d1fd23685a39f4fa5, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 701 );
        if ( ( (!( CHECK_IF_TRUE( _python_var_value.asObject() ) )) && CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_required ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 702 );
            {
                PyObjectTempKeeper0 call1;
                {
                    PyObjectTemporary tmp_exception_type( ( call1.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_required ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields );
           frame_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "validate() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "validate() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "validate() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_initial, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );

    // Actual function code.
    static PyFrameObject *frame_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields ) )
    {
        if ( frame_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields );
        }

        frame_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_6724af4eadb9224b65e125d56e237f69, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 707 );
        if ( RICH_COMPARE_BOOL_EQ( _python_var_initial.asObject(), _python_unicode_plain_False ) )
        {
            _python_var_initial.assign0( Py_False );
        }
        frame_guard.setLineNumber( 710 );
        {
            PyObjectTempKeeper0 cmp1;
            return ( cmp1.assign( TO_BOOL( _python_var_initial.asObject() ) ), RICH_COMPARE_NE( cmp1.asObject0(), TO_BOOL( _python_var_data.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data.updateLocalsDict( _python_var_initial.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields );
           frame_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_initial = NULL;
    PyObject *_python_par_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_initial == key )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_initial, key ) )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_has_changed() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_has_changed() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields( self, _python_par_self, _python_par_initial, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_initial );
    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_16_NullBooleanField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_validate( _python_str_plain_validate );
    PyObjectLocalVariable _python_var__has_changed( _python_str_plain__has_changed );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var___doc__.assign0( _python_unicode_digest_8c803e028f7a34fe0573fd83363bf3d3 );
    static PyFrameObject *frame_class_16_NullBooleanField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_16_NullBooleanField_of_module_django__forms__fields ) )
    {
        if ( frame_class_16_NullBooleanField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_16_NullBooleanField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_16_NullBooleanField_of_module_django__forms__fields );
        }

        frame_class_16_NullBooleanField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_50a7c2874cf7c391b63c59caf4fae941, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_16_NullBooleanField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_16_NullBooleanField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 718 );
        _python_var_widget.assign0( _mvar_django__forms__fields_NullBooleanSelect.asObject0() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var__has_changed.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_16_NullBooleanField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_16_NullBooleanField_of_module_django__forms__fields );
           frame_class_16_NullBooleanField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var_to_python.assign1( MAKE_FUNCTION_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields(  ) );
    _python_var_validate.assign1( MAKE_FUNCTION_function_2_validate_of_class_16_NullBooleanField_of_module_django__forms__fields(  ) );
    _python_var__has_changed.assign1( MAKE_FUNCTION_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields(  ) );
    return _python_var__has_changed.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );
}


static PyObject *impl_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields );
        }

        frame_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_6863cd1541fcd27094a3c1e1908b6625, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 727 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_var_value.asObject(), _python_tuple_true_unicode_plain_True_unicode_plain_1_tuple ) )
        {
            return INCREASE_REFCOUNT( Py_True );
        }
        else
        {
            frame_guard.setLineNumber( 729 );
            if ( SEQUENCE_CONTAINS_BOOL( _python_var_value.asObject(), _python_tuple_false_unicode_plain_False_unicode_plain_0_tuple ) )
            {
                return INCREASE_REFCOUNT( Py_False );
            }
            else
            {
                return INCREASE_REFCOUNT( Py_None );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields );
           frame_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_validate_of_class_16_NullBooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_2_validate_of_class_16_NullBooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "validate() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "validate() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "validate() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_validate_of_class_16_NullBooleanField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_validate_of_class_16_NullBooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_validate_of_class_16_NullBooleanField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_validate_of_class_16_NullBooleanField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_initial, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );

    // Actual function code.
    static PyFrameObject *frame_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields ) )
    {
        if ( frame_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields );
        }

        frame_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_2a0a62355d8140967b9a745db721d341, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 739 );
        if ( ( _python_var_initial.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 740 );
            _python_var_initial.assign0( TO_BOOL( _python_var_initial.asObject() ) );
        }
        frame_guard.setLineNumber( 741 );
        if ( ( _python_var_data.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 742 );
            _python_var_data.assign0( TO_BOOL( _python_var_data.asObject() ) );
        }
        frame_guard.setLineNumber( 743 );
        {
            PyObjectTempKeeper0 cmp1;
            return ( cmp1.assign( _python_var_initial.asObject() ), RICH_COMPARE_NE( cmp1.asObject0(), _python_var_data.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data.updateLocalsDict( _python_var_initial.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields );
           frame_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_initial = NULL;
    PyObject *_python_par_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_initial == key )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_initial, key ) )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_has_changed() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_has_changed() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields( self, _python_par_self, _python_par_initial, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_initial );
    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_17_ChoiceField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___deepcopy__( _python_str_plain___deepcopy__ );
    PyObjectLocalVariable _python_var__get_choices( _python_str_plain__get_choices );
    PyObjectLocalVariable _python_var__set_choices( _python_str_plain__set_choices );
    PyObjectLocalVariable _python_var_choices( _python_str_plain_choices );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_validate( _python_str_plain_validate );
    PyObjectLocalVariable _python_var_valid_value( _python_str_plain_valid_value );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_17_ChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_17_ChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_class_17_ChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_17_ChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_17_ChoiceField_of_module_django__forms__fields );
        }

        frame_class_17_ChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_06ea3ad60dd7bde3b067a44b1cb29257, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_17_ChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_17_ChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 747 );
        _python_var_widget.assign0( _mvar_django__forms__fields_Select.asObject0() );
        frame_guard.setLineNumber( 748 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_dc7e57c48d98c9d0f0372702f09e7ff2 ) ).asObject(), _python_unicode_plain_invalid_choice ) );
        _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields(  ) );
        _python_var___deepcopy__.assign1( MAKE_FUNCTION_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields(  ) );
        _python_var__get_choices.assign1( MAKE_FUNCTION_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields(  ) );
        _python_var__set_choices.assign1( MAKE_FUNCTION_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields(  ) );
        frame_guard.setLineNumber( 772 );
        {
            PyObjectTempKeeper0 call2;
            _python_var_choices.assign1( ( call2.assign( _python_var__get_choices.asObject() ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), call2.asObject0(), _python_var__set_choices.asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_valid_value.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_choices.updateLocalsDict( _python_var__set_choices.updateLocalsDict( _python_var__get_choices.updateLocalsDict( _python_var___deepcopy__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_17_ChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_17_ChoiceField_of_module_django__forms__fields );
           frame_class_17_ChoiceField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var_to_python.assign1( MAKE_FUNCTION_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields(  ) );
    _python_var_validate.assign1( MAKE_FUNCTION_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields(  ) );
    _python_var_valid_value.assign1( MAKE_FUNCTION_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields(  ) );
    return _python_var_valid_value.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_choices.updateLocalsDict( _python_var__set_choices.updateLocalsDict( _python_var__get_choices.updateLocalsDict( _python_var___deepcopy__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_choices, PyObject *_python_par_required, PyObject *_python_par_widget, PyObject *_python_par_label, PyObject *_python_par_initial, PyObject *_python_par_help_text, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_choices( _python_str_plain_choices, _python_par_choices );
    PyObjectLocalParameterVariableNoDel _python_var_required( _python_str_plain_required, _python_par_required );
    PyObjectLocalParameterVariableNoDel _python_var_widget( _python_str_plain_widget, _python_par_widget );
    PyObjectLocalParameterVariableNoDel _python_var_label( _python_str_plain_label, _python_par_label );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );
    PyObjectLocalParameterVariableNoDel _python_var_help_text( _python_str_plain_help_text, _python_par_help_text );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields );
        }

        frame_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_a099a02d7cf2e9967e15eff615c38f19, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 754 );
        {
            PyObjectTempKeeper1 call_tmp13;
            PyObjectTempKeeper1 call_tmp14;
            PyObjectTempKeeper0 call_tmp15;
            PyObjectTempKeeper0 make_dict3;
            PyObjectTempKeeper0 make_dict5;
            PyObjectTempKeeper0 make_dict7;
            PyObjectTempKeeper0 make_dict9;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp13.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_ChoiceField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp14.assign( ( make_dict3.assign( _python_var_required.asObject() ), make_dict5.assign( _python_var_widget.asObject() ), make_dict7.assign( _python_var_label.asObject() ), make_dict9.assign( _python_var_initial.asObject() ), MAKE_DICT5( make_dict3.asObject0(), _python_str_plain_required, make_dict5.asObject0(), _python_str_plain_widget, make_dict7.asObject0(), _python_str_plain_label, make_dict9.asObject0(), _python_str_plain_initial, _python_var_help_text.asObject(), _python_str_plain_help_text ) ) ), call_tmp15.assign( _python_var_args.asObject() ), impl_function_10_complex_call_helper_keywords_star_list_star_dict_of_module___internal__( call_tmp13.asObject(), call_tmp14.asObject(), call_tmp15.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 756 );
        {
                PyObject *tmp_identifier = _python_var_choices.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_choices );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_help_text.updateLocalsDict( _python_var_initial.updateLocalsDict( _python_var_label.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var_required.updateLocalsDict( _python_var_choices.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields );
           frame_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_choices = NULL;
    PyObject *_python_par_required = NULL;
    PyObject *_python_par_widget = NULL;
    PyObject *_python_par_label = NULL;
    PyObject *_python_par_initial = NULL;
    PyObject *_python_par_help_text = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument choices was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_choices );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_choices == NULL );

            _python_par_choices = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_choices );

            kw_found += 1;
        }
    }

    // Check if argument required was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_required );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_required == NULL );

            _python_par_required = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_required );

            kw_found += 1;
        }
    }

    // Check if argument widget was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_widget );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_widget == NULL );

            _python_par_widget = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_widget );

            kw_found += 1;
        }
    }

    // Check if argument label was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_label );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_label == NULL );

            _python_par_label = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_label );

            kw_found += 1;
        }
    }

    // Check if argument initial was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_initial );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_initial == NULL );

            _python_par_initial = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_initial );

            kw_found += 1;
        }
    }

    // Check if argument help_text was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_help_text );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_help_text == NULL );

            _python_par_help_text = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_help_text );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 7 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 7, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 7, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 7 ? args_given : 7;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choices'" );
             goto error_exit;
         }

        _python_par_choices = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_required != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'required'" );
             goto error_exit;
         }

        _python_par_required = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_widget != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'widget'" );
             goto error_exit;
         }

        _python_par_widget = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_label != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'label'" );
             goto error_exit;
         }

        _python_par_label = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_help_text != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'help_text'" );
             goto error_exit;
         }

        _python_par_help_text = INCREASE_REFCOUNT( args[ 6 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 7 )
    {
        _python_par_args = PyTuple_New( args_size - 7 );

        for( Py_ssize_t i = 0; i < args_size - 7; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[7+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }
    // Assign values not given to defaults
    if ( _python_par_choices == NULL )
    {
        _python_par_choices = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_choices );
    }
    if ( _python_par_required == NULL )
    {
        _python_par_required = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_required );
    }
    if ( _python_par_widget == NULL )
    {
        _python_par_widget = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_widget );
    }
    if ( _python_par_label == NULL )
    {
        _python_par_label = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_label );
    }
    if ( _python_par_initial == NULL )
    {
        _python_par_initial = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_initial );
    }
    if ( _python_par_help_text == NULL )
    {
        _python_par_help_text = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 5 ) );
        assertObject( _python_par_help_text );
    }


    return impl_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields( self, _python_par_self, _python_par_choices, _python_par_required, _python_par_widget, _python_par_label, _python_par_initial, _python_par_help_text, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_choices );
    Py_XDECREF( _python_par_required );
    Py_XDECREF( _python_par_widget );
    Py_XDECREF( _python_par_label );
    Py_XDECREF( _python_par_initial );
    Py_XDECREF( _python_par_help_text );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 9)
    {
        return impl_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), MAKE_TUPLE( &args[ 7 ], size > 7 ? size-7 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_memo )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_memo( _python_str_plain_memo, _python_par_memo );
    PyObjectLocalVariable _python_var_result( _python_str_plain_result );

    // Actual function code.
    static PyFrameObject *frame_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields );
        }

        frame_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_ed59254aa602c13bbaee9ecbde77ca89, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 759 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            _python_var_result.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_ChoiceField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___deepcopy__ ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_memo.asObject() ) ) );
        }
        frame_guard.setLineNumber( 760 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper1 call6;
            {
                PyObjectTemporary tmp_identifier( ( call5.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_copy.asObject0(), _python_str_plain_deepcopy ) ), call6.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__choices ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), call6.asObject0(), _python_var_memo.asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_result.asObject(), _python_str_plain__choices );
        }
        }
        frame_guard.setLineNumber( 761 );
        return _python_var_result.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_memo.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_result.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields );
           frame_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_memo = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_memo == key )
            {
                if (unlikely( _python_par_memo ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
                    goto error_exit;
                }

                _python_par_memo = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_memo, key ) )
            {
                if (unlikely( _python_par_memo ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
                    goto error_exit;
                }

                _python_par_memo = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__deepcopy__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_memo != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memo'" );
             goto error_exit;
         }

        _python_par_memo = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields( self, _python_par_self, _python_par_memo );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_memo );

    return NULL;
}

static PyObject *dparse_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields );
        }

        frame_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_542e682b71197b3e3e59920fb7f63468, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 764 );
        return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__choices );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields );
           frame_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_choices() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_choices() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_choices() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_get_choices() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_get_choices() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_choices() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields );
        }

        frame_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_e3d2439e42c717ed71dc636f7964dbf4, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 770 );
            PyObjectTemporary _python_tmp_assign_source( TO_LIST( _python_var_value.asObject() ) );
            {
                    PyObject *tmp_identifier = _python_tmp_assign_source.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain__choices );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_assign_source.asObject();
                    SET_ATTRIBUTE( tmp_identifier, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_widget ) ).asObject(), _python_str_plain_choices );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields );
           frame_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_set_choices() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_set_choices() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "_set_choices() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_set_choices() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "_set_choices() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_set_choices() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_set_choices() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_set_choices() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_set_choices() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_set_choices() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_set_choices() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_set_choices() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_set_choices() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_set_choices() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_set_choices() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_set_choices() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_set_choices() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_set_choices() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_set_choices() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_set_choices() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields );
        }

        frame_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_8ea9e5ae98e5f68069b013b923d20fa0, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 776 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( _python_unicode_empty );
        }
        }
        frame_guard.setLineNumber( 778 );
        {
            PyObjectTempKeeper0 call3;
            return ( call3.assign( _mvar_django__forms__fields_smart_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields );
           frame_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields );
        }

        frame_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_6302b285f3dbc140dc1de81b14ef9822, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 784 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_ChoiceField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_validate ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 785 );
        {
            PyObjectTempKeeper1 call9;
            if ( ( CHECK_IF_TRUE( _python_var_value.asObject() ) && (!( CHECK_IF_TRUE( PyObjectTemporary( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_valid_value ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_var_value.asObject() ) ) ).asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 786 );
            {
                PyObjectTempKeeper0 call7;
                PyObjectTempKeeper1 op5;
                {
                    PyObjectTemporary tmp_exception_type( ( call7.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), PyObjectTemporary( ( op5.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_choice ) ), BINARY_OPERATION_REMAINDER( op5.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_value.asObject(), _python_unicode_plain_value ) ).asObject() ) ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields );
           frame_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "validate() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "validate() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "validate() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_text_value( _python_str_plain_text_value );
    PyObjectLocalVariable _python_var_k( _python_str_plain_k );
    PyObjectLocalVariable _python_var_v( _python_str_plain_v );
    PyObjectLocalVariable _python_var_k2( _python_str_plain_k2 );
    PyObjectLocalVariable _python_var_v2( _python_str_plain_v2 );

    // Actual function code.
    static PyFrameObject *frame_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields );
        }

        frame_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_ac7d25a360633818d1571dcd2e4a31bd, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 790 );
        {
            PyObjectTempKeeper0 call1;
            _python_var_text_value.assign1( ( call1.assign( _mvar_django__forms__fields_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) );
        }
        {
            frame_guard.setLineNumber( 791 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 791 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 791 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_k.assign0( _python_tmp_element_1.asObject() );
                        _python_var_v.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 792 );
                if ( BUILTIN_ISINSTANCE_BOOL( _python_var_v.asObject(), PyObjectTemporary( MAKE_TUPLE2( LOOKUP_BUILTIN( _python_str_plain_list ), LOOKUP_BUILTIN( _python_str_plain_tuple ) ) ).asObject() ) )
                {
                    {
                        frame_guard.setLineNumber( 794 );
                        PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_v.asObject() ) );
                        while( true )
                        {
                            {
                                frame_guard.setLineNumber( 794 );
                                PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                if ( _tmp_unpack_2 == NULL )
                                {
                                    break;
                                }
                                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                                {
                                    frame_guard.setLineNumber( 794 );
                                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                    _python_var_k2.assign0( _python_tmp_element_1.asObject() );
                                    _python_var_v2.assign0( _python_tmp_element_2.asObject() );
                                }
                            }
                            frame_guard.setLineNumber( 795 );
                            {
                                PyObjectTempKeeper0 call5;
                                PyObjectTempKeeper0 cmp3;
                                PyObjectTempKeeper0 cmp7;
                                if ( ( ( cmp3.assign( _python_var_value.asObject() ), RICH_COMPARE_BOOL_EQ( cmp3.asObject0(), _python_var_k2.asObject() ) ) || ( cmp7.assign( _python_var_text_value.asObject() ), RICH_COMPARE_BOOL_EQ( cmp7.asObject0(), PyObjectTemporary( ( call5.assign( _mvar_django__forms__fields_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_k2.asObject() ) ) ).asObject() ) ) ) )
                            {
                                return INCREASE_REFCOUNT( Py_True );
                            }
                            }

                           CONSIDER_THREADING();
                        }
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 798 );
                    {
                        PyObjectTempKeeper0 call11;
                        PyObjectTempKeeper0 cmp13;
                        PyObjectTempKeeper0 cmp9;
                        if ( ( ( cmp9.assign( _python_var_value.asObject() ), RICH_COMPARE_BOOL_EQ( cmp9.asObject0(), _python_var_k.asObject() ) ) || ( cmp13.assign( _python_var_text_value.asObject() ), RICH_COMPARE_BOOL_EQ( cmp13.asObject0(), PyObjectTemporary( ( call11.assign( _mvar_django__forms__fields_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _python_var_k.asObject() ) ) ).asObject() ) ) ) )
                    {
                        return INCREASE_REFCOUNT( Py_True );
                    }
                    }
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_v2.updateLocalsDict( _python_var_k2.updateLocalsDict( _python_var_v.updateLocalsDict( _python_var_k.updateLocalsDict( _python_var_text_value.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields );
           frame_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_False );
}
static PyObject *fparse_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "valid_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "valid_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "valid_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "valid_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "valid_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "valid_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "valid_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "valid_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "valid_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "valid_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "valid_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "valid_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "valid_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "valid_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "valid_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "valid_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "valid_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "valid_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "valid_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "valid_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_18_TypedChoiceField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields(  ) );
    return _python_var_to_python.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields );
        }

        frame_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_f2448c589930c3c84ffb03f345af2220, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 805 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_unicode_plain_coerce, PyObjectTemporary( MAKE_FUNCTION_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields(  ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_coerce );
        }
        frame_guard.setLineNumber( 806 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_unicode_plain_empty_value, _python_unicode_empty ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_empty_value );
        }
        frame_guard.setLineNumber( 807 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_TypedChoiceField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp4.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields );
           frame_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_val )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_val( _python_str_plain_val, _python_par_val );

    // Actual function code.
    static PyFrameObject *frame_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields );
        }

        frame_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_4a046cc398c40c6db0d6e27ad2fb8b91, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 805 );
        return _python_var_val.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_val.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields );
           frame_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_val = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_val == key )
            {
                if (unlikely( _python_par_val ))
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'val'" );
                    goto error_exit;
                }

                _python_par_val = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_val, key ) )
            {
                if (unlikely( _python_par_val ))
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'val'" );
                    goto error_exit;
                }

                _python_par_val = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "<lambda>() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "<lambda>() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_val != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'val'" );
             goto error_exit;
         }

        _python_par_val = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields( self, _python_par_val );

error_exit:;

    Py_XDECREF( _python_par_val );

    return NULL;
}

static PyObject *dparse_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields );
        }

        frame_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_e1ece18fc62da810f61306a52d5740a7, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 814 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            _python_var_value.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_TypedChoiceField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 815 );
        {
            PyObjectTempKeeper0 cmp5;
            PyObjectTempKeeper0 cmp7;
            if ( ( ( cmp5.assign( _python_var_value.asObject() ), RICH_COMPARE_BOOL_EQ( cmp5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_value ) ).asObject() ) ) || ( cmp7.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp7.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 816 );
            return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_value );
        }
        }
        frame_guard.setLineNumber( 817 );
        try
        {
            frame_guard.setLineNumber( 818 );
            {
                PyObjectTempKeeper1 call13;
                _python_var_value.assign1( ( call13.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_coerce ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_ValueError ) || _exception.matches( PyExc_TypeError ) || _exception.matches( _mvar_django__forms__fields_ValidationError.asObject0() ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 820 );
                {
                    PyObjectTempKeeper0 call11;
                    PyObjectTempKeeper1 op9;
                    {
                        PyObjectTemporary tmp_exception_type( ( call11.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), PyObjectTemporary( ( op9.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_choice ) ), BINARY_OPERATION_REMAINDER( op9.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_value.asObject(), _python_unicode_plain_value ) ).asObject() ) ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 821 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields );
           frame_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_19_MultipleChoiceField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_hidden_widget( _python_str_plain_hidden_widget );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_validate( _python_str_plain_validate );
    PyObjectLocalVariable _python_var__has_changed( _python_str_plain__has_changed );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_19_MultipleChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_19_MultipleChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_class_19_MultipleChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_19_MultipleChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_19_MultipleChoiceField_of_module_django__forms__fields );
        }

        frame_class_19_MultipleChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_5c4e40ce20cdd0370cf591f8753fbfc0, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_19_MultipleChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_19_MultipleChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 825 );
        _python_var_hidden_widget.assign0( _mvar_django__forms__fields_MultipleHiddenInput.asObject0() );
        frame_guard.setLineNumber( 826 );
        _python_var_widget.assign0( _mvar_django__forms__fields_SelectMultiple.asObject0() );
        frame_guard.setLineNumber( 827 );
        {
            PyObjectTempKeeper1 make_dict1;
            _python_var_default_error_messages.assign1( ( make_dict1.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_dc7e57c48d98c9d0f0372702f09e7ff2 ) ), MAKE_DICT2( make_dict1.asObject0(), _python_unicode_plain_invalid_choice, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_dca1926e8b7d0edcdb4d788e72ca4ddb ) ).asObject(), _python_unicode_plain_invalid_list ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var__has_changed.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var_hidden_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_19_MultipleChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_19_MultipleChoiceField_of_module_django__forms__fields );
           frame_class_19_MultipleChoiceField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var_to_python.assign1( MAKE_FUNCTION_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields(  ) );
    _python_var_validate.assign1( MAKE_FUNCTION_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields(  ) );
    _python_var__has_changed.assign1( MAKE_FUNCTION_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields(  ) );
    return _python_var__has_changed.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var_hidden_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );
}


static PyObject *impl_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_val( _python_str_plain_val );

    // Actual function code.
    static PyFrameObject *frame_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields );
        }

        frame_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_fd15973400c76e19b69c6019bd3c67e5, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 833 );
        if ( (!( CHECK_IF_TRUE( _python_var_value.asObject() ) )) )
        {
            return PyList_New( 0 );
        }
        else
        {
            frame_guard.setLineNumber( 835 );
            if ( (!( BUILTIN_ISINSTANCE_BOOL( _python_var_value.asObject(), PyObjectTemporary( MAKE_TUPLE2( LOOKUP_BUILTIN( _python_str_plain_list ), LOOKUP_BUILTIN( _python_str_plain_tuple ) ) ).asObject() ) )) )
            {
                frame_guard.setLineNumber( 836 );
                {
                    PyObjectTempKeeper0 call1;
                    {
                        PyObjectTemporary tmp_exception_type( ( call1.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_list ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
        }
        frame_guard.setLineNumber( 837 );
        return impl_listcontr_1_of_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields( MAKE_ITERATOR( _python_var_value.asObject() ), _python_var_val );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_val.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields );
           frame_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_val )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 837 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 837 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_val.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call1.assign( _mvar_django__forms__fields_smart_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), python_closure_val.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_val( _python_str_plain_val );

    // Actual function code.
    static PyFrameObject *frame_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields );
        }

        frame_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_5335a8db51d6b3a98470c2b0a045bb46, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 843 );
        if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_required ) ).asObject() ) && (!( CHECK_IF_TRUE( _python_var_value.asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 844 );
            {
                PyObjectTempKeeper0 call1;
                {
                    PyObjectTemporary tmp_exception_type( ( call1.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_required ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        {
            frame_guard.setLineNumber( 846 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_value.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 846 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_val.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 847 );
                {
                    PyObjectTempKeeper1 call7;
                    if ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_valid_value ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_val.asObject() ) ) ).asObject() ) )) )
                {
                    frame_guard.setLineNumber( 848 );
                    {
                        PyObjectTempKeeper0 call5;
                        PyObjectTempKeeper1 op3;
                        {
                            PyObjectTemporary tmp_exception_type( ( call5.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( ( op3.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_choice ) ), BINARY_OPERATION_REMAINDER( op3.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_val.asObject(), _python_unicode_plain_value ) ).asObject() ) ) ).asObject() ) ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_val.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields );
           frame_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "validate() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "validate() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "validate() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_initial, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalVariable _python_var_initial_set( _python_str_plain_initial_set );
    PyObjectLocalVariable _python_var_data_set( _python_str_plain_data_set );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );

    // Actual function code.
    static PyFrameObject *frame_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields );
        }

        frame_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_74bac244b69e3822c4a50bf8ddf11a3f, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 851 );
        if ( ( _python_var_initial.asObject() == Py_None ) )
        {
            _python_var_initial.assign1( PyList_New( 0 ) );
        }
        frame_guard.setLineNumber( 853 );
        if ( ( _python_var_data.asObject() == Py_None ) )
        {
            _python_var_data.assign1( PyList_New( 0 ) );
        }
        frame_guard.setLineNumber( 855 );
        {
            PyObjectTempKeeper1 cmp1;
            if ( ( cmp1.assign( BUILTIN_LEN( _python_var_initial.asObject() ) ), RICH_COMPARE_BOOL_NE( cmp1.asObject0(), PyObjectTemporary( BUILTIN_LEN( _python_var_data.asObject() ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( Py_True );
        }
        }
        frame_guard.setLineNumber( 857 );
        _python_var_initial_set.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( impl_listcontr_1_of_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields( MAKE_ITERATOR( _python_var_initial.asObject() ), _python_var_value ) ).asObject() ) );
        frame_guard.setLineNumber( 858 );
        _python_var_data_set.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_set ), PyObjectTemporary( impl_listcontr_2_of_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields( MAKE_ITERATOR( _python_var_data.asObject() ), _python_var_value ) ).asObject() ) );
        frame_guard.setLineNumber( 859 );
        {
            PyObjectTempKeeper0 cmp3;
            return ( cmp3.assign( _python_var_data_set.asObject() ), RICH_COMPARE_NE( cmp3.asObject0(), _python_var_initial_set.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data.updateLocalsDict( _python_var_initial.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_data_set.updateLocalsDict( _python_var_initial_set.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields );
           frame_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_initial = NULL;
    PyObject *_python_par_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_initial == key )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_initial, key ) )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_has_changed() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_has_changed() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields( self, _python_par_self, _python_par_initial, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_initial );
    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 857 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 857 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_value.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call1.assign( _mvar_django__forms__fields_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), python_closure_value.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 858 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 858 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_value.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call1.assign( _mvar_django__forms__fields_force_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), python_closure_value.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_class_20_TypedMultipleChoiceField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_validate( _python_str_plain_validate );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields(  ) );
    _python_var_validate.assign1( MAKE_FUNCTION_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields(  ) );
    return _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields );
        }

        frame_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_230b84d0965327a413d29d43779adf9c, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 864 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_unicode_plain_coerce, PyObjectTemporary( MAKE_FUNCTION_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields(  ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_coerce );
        }
        frame_guard.setLineNumber( 865 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_pop ) ).asObject(), _python_unicode_plain_empty_value, PyObjectTemporary( PyList_New( 0 ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_empty_value );
        }
        frame_guard.setLineNumber( 866 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_TypedMultipleChoiceField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp4.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields );
           frame_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_val )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_val( _python_str_plain_val, _python_par_val );

    // Actual function code.
    static PyFrameObject *frame_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields );
        }

        frame_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_7aadcb14e92e42b7d54e87f9c2d278cf, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 864 );
        return _python_var_val.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_val.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields );
           frame_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_val = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_val == key )
            {
                if (unlikely( _python_par_val ))
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'val'" );
                    goto error_exit;
                }

                _python_par_val = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_val, key ) )
            {
                if (unlikely( _python_par_val ))
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'val'" );
                    goto error_exit;
                }

                _python_par_val = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "<lambda>() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "<lambda>() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "<lambda>() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_val != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "<lambda>() got multiple values for keyword argument 'val'" );
             goto error_exit;
         }

        _python_par_val = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( self, _python_par_val );

error_exit:;

    Py_XDECREF( _python_par_val );

    return NULL;
}

static PyObject *dparse_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_new_value( _python_str_plain_new_value );
    PyObjectLocalVariable _python_var_choice( _python_str_plain_choice );

    // Actual function code.
    static PyFrameObject *frame_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields );
        }

        frame_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_90b7a910f5284eced53db574c6a59d1f, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 873 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            _python_var_value.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_TypedMultipleChoiceField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 874 );
        {
            PyObjectTempKeeper0 cmp5;
            PyObjectTempKeeper0 cmp7;
            if ( ( ( cmp5.assign( _python_var_value.asObject() ), RICH_COMPARE_BOOL_EQ( cmp5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_value ) ).asObject() ) ) || ( cmp7.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp7.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 875 );
            return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_value );
        }
        }
        _python_var_new_value.assign1( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 877 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_value.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 877 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_choice.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 878 );
                try
                {
                    frame_guard.setLineNumber( 879 );
                    {
                        PyObjectTempKeeper1 call13;
                        PyObjectTempKeeper1 call15;
                        DECREASE_REFCOUNT( ( call15.assign( LOOKUP_ATTRIBUTE( _python_var_new_value.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), PyObjectTemporary( ( call13.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_coerce ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), _python_var_choice.asObject() ) ) ).asObject() ) ) );
                    }
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( PyExc_ValueError ) || _exception.matches( PyExc_TypeError ) || _exception.matches( _mvar_django__forms__fields_ValidationError.asObject0() ) )
                    {
                        frame_guard.detachFrame();
                        frame_guard.setLineNumber( 881 );
                        {
                            PyObjectTempKeeper0 call11;
                            PyObjectTempKeeper1 op9;
                            {
                                PyObjectTemporary tmp_exception_type( ( call11.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), PyObjectTemporary( ( op9.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_choice ) ), BINARY_OPERATION_REMAINDER( op9.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_choice.asObject(), _python_unicode_plain_value ) ).asObject() ) ) ).asObject() ) ) );
                                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                        }
                        }
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 882 );
        return _python_var_new_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_choice.updateLocalsDict( _python_var_new_value.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields );
           frame_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields ) )
    {
        if ( frame_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields );
        }

        frame_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_835fec440715a9ff7626b73ea5af3501, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 885 );
        {
            PyObjectTempKeeper0 cmp7;
            if ( ( cmp7.assign( _python_var_value.asObject() ), RICH_COMPARE_BOOL_NE( cmp7.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_value ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 886 );
            {
                PyObjectTempKeeper1 call3;
                PyObjectTempKeeper0 super1;
                DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_TypedMultipleChoiceField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_validate ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 887 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_required ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 888 );
                {
                    PyObjectTempKeeper0 call5;
                    {
                        PyObjectTemporary tmp_exception_type( ( call5.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_required ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields );
           frame_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "validate() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "validate() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "validate() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_21_ComboField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_clean( _python_str_plain_clean );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var___doc__.assign0( _python_unicode_digest_4fe659fcc681cd6834bbc43846362f1c );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_21_ComboField_of_module_django__forms__fields(  ) );
    _python_var_clean.assign1( MAKE_FUNCTION_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields(  ) );
    return _python_var_clean.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_21_ComboField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_fields, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_21_ComboField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_21_ComboField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1___init___of_class_21_ComboField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_21_ComboField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_21_ComboField_of_module_django__forms__fields );
        }

        frame_function_1___init___of_class_21_ComboField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_a6762f406e277b809e53e14ca10f1a30, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_21_ComboField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_21_ComboField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 896 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_ComboField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp4.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        {
            frame_guard.setLineNumber( 900 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_fields.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 900 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 901 );
                SET_ATTRIBUTE( Py_False, _python_var_f.asObject(), _python_str_plain_required );

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 902 );
        {
                PyObject *tmp_identifier = _python_var_fields.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_fields );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_f.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_21_ComboField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_21_ComboField_of_module_django__forms__fields );
           frame_function_1___init___of_class_21_ComboField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_21_ComboField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_fields = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument fields was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_fields );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_fields == NULL );

            _python_par_fields = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_fields );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 2, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'fields'" );
             goto error_exit;
         }

        _python_par_fields = INCREASE_REFCOUNT( args[ 1 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 2 )
    {
        _python_par_args = PyTuple_New( args_size - 2 );

        for( Py_ssize_t i = 0; i < args_size - 2; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[2+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }
    // Assign values not given to defaults
    if ( _python_par_fields == NULL )
    {
        _python_par_fields = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_fields );
    }


    return impl_function_1___init___of_class_21_ComboField_of_module_django__forms__fields( self, _python_par_self, _python_par_fields, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_fields );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_21_ComboField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1___init___of_class_21_ComboField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), MAKE_TUPLE( &args[ 2 ], size > 2 ? size-2 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_21_ComboField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );

    // Actual function code.
    static PyFrameObject *frame_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_clean_of_class_21_ComboField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields );
        }

        frame_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_108204654e2bfbb555581be7dc8e6d0e, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 909 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_ComboField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_clean ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) ) );
        }
        {
            frame_guard.setLineNumber( 910 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fields ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 910 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_field.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 911 );
                {
                    PyObjectTempKeeper1 call5;
                    _python_var_value.assign1( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_clean ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_value.asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 912 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_field.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields );
           frame_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clean() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clean() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clean() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_22_MultiValueField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_validate( _python_str_plain_validate );
    PyObjectLocalVariable _python_var_clean( _python_str_plain_clean );
    PyObjectLocalVariable _python_var_compress( _python_str_plain_compress );
    PyObjectLocalVariable _python_var__has_changed( _python_str_plain__has_changed );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var___doc__.assign0( _python_unicode_digest_548076e0b448f663aab5a7a5020dd4d6 );
    static PyFrameObject *frame_class_22_MultiValueField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_22_MultiValueField_of_module_django__forms__fields ) )
    {
        if ( frame_class_22_MultiValueField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_22_MultiValueField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_22_MultiValueField_of_module_django__forms__fields );
        }

        frame_class_22_MultiValueField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_8028caf819848dbcfcbcbdfa1f3e4f3d, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_22_MultiValueField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_22_MultiValueField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 932 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_dca1926e8b7d0edcdb4d788e72ca4ddb ) ).asObject(), _python_unicode_plain_invalid ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var__has_changed.updateLocalsDict( _python_var_compress.updateLocalsDict( _python_var_clean.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_22_MultiValueField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_22_MultiValueField_of_module_django__forms__fields );
           frame_class_22_MultiValueField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields(  ) );
    _python_var_validate.assign1( MAKE_FUNCTION_function_2_validate_of_class_22_MultiValueField_of_module_django__forms__fields(  ) );
    _python_var_clean.assign1( MAKE_FUNCTION_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields(  ) );
    _python_var_compress.assign1( MAKE_FUNCTION_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields(  ) );
    _python_var__has_changed.assign1( MAKE_FUNCTION_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields(  ) );
    return _python_var__has_changed.updateLocalsDict( _python_var_compress.updateLocalsDict( _python_var_clean.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_fields, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_fields( _python_str_plain_fields, _python_par_fields );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields );
        }

        frame_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_2639ca69b2d3c8042c7519bc2a446313, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 937 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__forms__fields_MultiValueField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp4.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        {
            frame_guard.setLineNumber( 941 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_fields.asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 941 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 942 );
                SET_ATTRIBUTE( Py_False, _python_var_f.asObject(), _python_str_plain_required );

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 943 );
        {
                PyObject *tmp_identifier = _python_var_fields.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_fields );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_f.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields );
           frame_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_fields = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument fields was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_fields );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_fields == NULL );

            _python_par_fields = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_fields );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 2, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 2, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_fields != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'fields'" );
             goto error_exit;
         }

        _python_par_fields = INCREASE_REFCOUNT( args[ 1 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 2 )
    {
        _python_par_args = PyTuple_New( args_size - 2 );

        for( Py_ssize_t i = 0; i < args_size - 2; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[2+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }
    // Assign values not given to defaults
    if ( _python_par_fields == NULL )
    {
        _python_par_fields = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_fields );
    }


    return impl_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields( self, _python_par_self, _python_par_fields, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_fields );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), MAKE_TUPLE( &args[ 2 ], size > 2 ? size-2 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_validate_of_class_22_MultiValueField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_2_validate_of_class_22_MultiValueField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "validate() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "validate() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "validate() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_validate_of_class_22_MultiValueField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_validate_of_class_22_MultiValueField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_validate_of_class_22_MultiValueField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_validate_of_class_22_MultiValueField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_clean_data( _python_str_plain_clean_data );
    PyObjectLocalVariable _python_var_errors( _python_str_plain_errors );
    PyObjectLocalVariable _python_var_i( _python_str_plain_i );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_field_value( _python_str_plain_field_value );
    PyObjectLocalVariable _python_var_e( _python_str_plain_e );
    PyObjectLocalVariable _python_var_out( _python_str_plain_out );
    PyObjectLocalVariable _python_var_v( _python_str_plain_v );

    // Actual function code.
    _python_var_clean_data.assign1( PyList_New( 0 ) );
    static PyFrameObject *frame_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields ) )
    {
        if ( frame_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields );
        }

        frame_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_90d45c1917263ab4f0d95702689110be, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 958 );
        _python_var_errors.assign1( CALL_FUNCTION_NO_ARGS( _mvar_django__forms__fields_ErrorList.asObject0() ) );
        frame_guard.setLineNumber( 959 );
        if ( ( (!( CHECK_IF_TRUE( _python_var_value.asObject() ) )) || BUILTIN_ISINSTANCE_BOOL( _python_var_value.asObject(), PyObjectTemporary( MAKE_TUPLE2( LOOKUP_BUILTIN( _python_str_plain_list ), LOOKUP_BUILTIN( _python_str_plain_tuple ) ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 960 );
            if ( ( (!( CHECK_IF_TRUE( _python_var_value.asObject() ) )) || (!( CHECK_IF_TRUE( PyObjectTemporary( impl_listcontr_1_of_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields( MAKE_ITERATOR( _python_var_value.asObject() ), _python_var_self, _python_var_v ) ).asObject() ) )) ) )
            {
                frame_guard.setLineNumber( 961 );
                if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_required ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 962 );
                    {
                        PyObjectTempKeeper0 call1;
                        {
                            PyObjectTemporary tmp_exception_type( ( call1.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_required ) ).asObject() ) ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 964 );
                    return CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_compress ) ).asObject(), PyObjectTemporary( PyList_New( 0 ) ).asObject() );
                }
            }
        }
        else
        {
            frame_guard.setLineNumber( 966 );
            {
                PyObjectTempKeeper0 call3;
                {
                    PyObjectTemporary tmp_exception_type( ( call3.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        {
            frame_guard.setLineNumber( 967 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_enumerate ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fields ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 967 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 967 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_i.assign0( _python_tmp_element_1.asObject() );
                        _python_var_field.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 968 );
                try
                {
                    frame_guard.setLineNumber( 969 );
                    {
                        PyObjectTempKeeper0 subscr5;
                        _python_var_field_value.assign1( ( subscr5.assign( _python_var_value.asObject() ), LOOKUP_SUBSCRIPT( subscr5.asObject0(), _python_var_i.asObject() ) ) );
                    }
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( PyExc_IndexError ) )
                    {
                        frame_guard.detachFrame();
                        _python_var_field_value.assign0( Py_None );
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }
                frame_guard.setLineNumber( 972 );
                {
                    PyObjectTempKeeper0 cmp9;
                    if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_required ) ).asObject() ) && ( cmp9.assign( _python_var_field_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp9.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) ) )
                {
                    frame_guard.setLineNumber( 973 );
                    {
                        PyObjectTempKeeper0 call7;
                        {
                            PyObjectTemporary tmp_exception_type( ( call7.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_required ) ).asObject() ) ) );
                            RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                    }
                    }
                }
                }
                frame_guard.setLineNumber( 974 );
                try
                {
                    frame_guard.setLineNumber( 975 );
                    {
                        PyObjectTempKeeper1 call13;
                        PyObjectTempKeeper1 call15;
                        DECREASE_REFCOUNT( ( call15.assign( LOOKUP_ATTRIBUTE( _python_var_clean_data.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), PyObjectTemporary( ( call13.assign( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain_clean ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), _python_var_field_value.asObject() ) ) ).asObject() ) ) );
                    }
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( _mvar_django__forms__fields_ValidationError.asObject0() ) )
                    {
                        frame_guard.detachFrame();
                        _python_var_e.assign0( _exception.getValue() );
                        frame_guard.setLineNumber( 980 );
                        {
                            PyObjectTempKeeper1 call11;
                            DECREASE_REFCOUNT( ( call11.assign( LOOKUP_ATTRIBUTE( _python_var_errors.asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_e.asObject(), _python_str_plain_messages ) ).asObject() ) ) );
                        }
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 981 );
        if ( CHECK_IF_TRUE( _python_var_errors.asObject() ) )
        {
            frame_guard.setLineNumber( 982 );
            {
                PyObjectTempKeeper0 call17;
                {
                    PyObjectTemporary tmp_exception_type( ( call17.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), _python_var_errors.asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 984 );
        {
            PyObjectTempKeeper1 call19;
            _python_var_out.assign1( ( call19.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_compress ) ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), _python_var_clean_data.asObject() ) ) );
        }
        frame_guard.setLineNumber( 985 );
        {
            PyObjectTempKeeper1 call21;
            DECREASE_REFCOUNT( ( call21.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validate ) ), CALL_FUNCTION_WITH_ARGS( call21.asObject0(), _python_var_out.asObject() ) ) );
        }
        frame_guard.setLineNumber( 986 );
        {
            PyObjectTempKeeper1 call23;
            DECREASE_REFCOUNT( ( call23.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_run_validators ) ), CALL_FUNCTION_WITH_ARGS( call23.asObject0(), _python_var_out.asObject() ) ) );
        }
        frame_guard.setLineNumber( 987 );
        return _python_var_out.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_v.updateLocalsDict( _python_var_out.updateLocalsDict( _python_var_e.updateLocalsDict( _python_var_field_value.updateLocalsDict( _python_var_field.updateLocalsDict( _python_var_i.updateLocalsDict( _python_var_errors.updateLocalsDict( _python_var_clean_data.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields );
           frame_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clean() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clean() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clean() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields( PyObject *_python_par___iterator,PyObjectLocalParameterVariableNoDel &python_closure_self,PyObjectLocalVariable &python_closure_v )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 960 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 960 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_v.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 cmp1;
                    if ( ( cmp1.assign( python_closure_v.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
                {
                    frame_guard.setLineNumber( 960 );
                    APPEND_TO_LIST( _python_tmp_result.asObject(), python_closure_v.asObject() ), Py_None;
                }
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data_list )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data_list( _python_str_plain_data_list, _python_par_data_list );

    // Actual function code.
    static PyFrameObject *frame_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields ) )
    {
        if ( frame_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields );
        }

        frame_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_761ea01871e6f0af46a0e22acdb69168, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 998 );
        {
                PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_NotImplementedError, PyObjectTemporary( MAKE_TUPLE1( _python_unicode_digest_dece4130b01c435b3c2cb641609e7bdd ) ).asObject() ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data_list.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields );
           frame_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data_list = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "compress() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "compress() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data_list == key )
            {
                if (unlikely( _python_par_data_list ))
                {
                    PyErr_Format( PyExc_TypeError, "compress() got multiple values for keyword argument 'data_list'" );
                    goto error_exit;
                }

                _python_par_data_list = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "compress() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data_list, key ) )
            {
                if (unlikely( _python_par_data_list ))
                {
                    PyErr_Format( PyExc_TypeError, "compress() got multiple values for keyword argument 'data_list'" );
                    goto error_exit;
                }

                _python_par_data_list = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "compress() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "compress() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "compress() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "compress() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "compress() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "compress() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "compress() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "compress() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "compress() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "compress() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "compress() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "compress() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "compress() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "compress() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data_list != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "compress() got multiple values for keyword argument 'data_list'" );
             goto error_exit;
         }

        _python_par_data_list = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields( self, _python_par_self, _python_par_data_list );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data_list );

    return NULL;
}

static PyObject *dparse_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_initial, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );
    PyObjectLocalVariable _python_var_field( _python_str_plain_field );
    PyObjectLocalVariable _python_var_x( _python_str_plain_x );

    // Actual function code.
    static PyFrameObject *frame_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields ) )
    {
        if ( frame_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields );
        }

        frame_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_101cf6bf265db1c7b67459654f91ffd0, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1001 );
        if ( ( _python_var_initial.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 1002 );
            _python_var_initial.assign1( impl_listcontr_1_of_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields( MAKE_ITERATOR( PyObjectTemporary( BUILTIN_RANGE2( _python_int_0, PyObjectTemporary( BUILTIN_LEN( _python_var_data.asObject() ) ).asObject() ) ).asObject() ), _python_var_x ) );
        }
        else
        {
            frame_guard.setLineNumber( 1004 );
            if ( (!( BUILTIN_ISINSTANCE_BOOL( _python_var_initial.asObject(), LOOKUP_BUILTIN( _python_str_plain_list ) ) )) )
            {
                frame_guard.setLineNumber( 1005 );
                {
                    PyObjectTempKeeper1 call1;
                    _python_var_initial.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_widget ) ).asObject(), _python_str_plain_decompress ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_initial.asObject() ) ) );
                }
            }
        }
        {
            frame_guard.setLineNumber( 1006 );
            PyObject *_tmp_python_tmp_for_iterator;
            {
                PyObjectTempKeeper1 call4;
                PyObjectTempKeeper0 call5;
                _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_fields ) ), call5.assign( _python_var_initial.asObject() ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_zip ), call4.asObject0(), call5.asObject0(), _python_var_data.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 1006 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 1006 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 3 );
                        _python_var_field.assign0( _python_tmp_element_1.asObject() );
                        _python_var_initial.assign0( _python_tmp_element_2.asObject() );
                        _python_var_data.assign0( _python_tmp_element_3.asObject() );
                    }
                }
                frame_guard.setLineNumber( 1007 );
                {
                    PyObjectTempKeeper1 call7;
                    PyObjectTempKeeper0 call8;
                    if ( CHECK_IF_TRUE( PyObjectTemporary( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_field.asObject(), _python_str_plain__has_changed ) ), call8.assign( _python_var_initial.asObject() ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), call8.asObject0(), _python_var_data.asObject() ) ) ).asObject() ) )
                {
                    return INCREASE_REFCOUNT( Py_True );
                }
                }

               CONSIDER_THREADING();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data.updateLocalsDict( _python_var_initial.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_x.updateLocalsDict( _python_var_field.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields );
           frame_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_False );
}
static PyObject *fparse_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_initial = NULL;
    PyObject *_python_par_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_initial == key )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_initial, key ) )
            {
                if (unlikely( _python_par_initial ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
                    goto error_exit;
                }

                _python_par_initial = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_has_changed() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_has_changed() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_has_changed() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_has_changed() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields( self, _python_par_self, _python_par_initial, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_initial );
    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 1002 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 1002 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_x.assign0( _python_tmp_iter_value.asObject() );
                APPEND_TO_LIST( _python_tmp_result.asObject(), _python_unicode_empty ), Py_None;

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_class_23_FilePathField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields(  ) );
    return _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) );
}


static PyObject *impl_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_path, PyObject *_python_par_match, PyObject *_python_par_recursive, PyObject *_python_par_allow_files, PyObject *_python_par_allow_folders, PyObject *_python_par_required, PyObject *_python_par_widget, PyObject *_python_par_label, PyObject *_python_par_initial, PyObject *_python_par_help_text, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_path( _python_str_plain_path, _python_par_path );
    PyObjectLocalParameterVariableNoDel _python_var_match( _python_str_plain_match, _python_par_match );
    PyObjectLocalParameterVariableNoDel _python_var_recursive( _python_str_plain_recursive, _python_par_recursive );
    PyObjectLocalParameterVariableNoDel _python_var_allow_files( _python_str_plain_allow_files, _python_par_allow_files );
    PyObjectLocalParameterVariableNoDel _python_var_allow_folders( _python_str_plain_allow_folders, _python_par_allow_folders );
    PyObjectLocalParameterVariableNoDel _python_var_required( _python_str_plain_required, _python_par_required );
    PyObjectLocalParameterVariableNoDel _python_var_widget( _python_str_plain_widget, _python_par_widget );
    PyObjectLocalParameterVariableNoDel _python_var_label( _python_str_plain_label, _python_par_label );
    PyObjectLocalParameterVariableNoDel _python_var_initial( _python_str_plain_initial, _python_par_initial );
    PyObjectLocalParameterVariableNoDel _python_var_help_text( _python_str_plain_help_text, _python_par_help_text );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_root( _python_str_plain_root );
    PyObjectLocalVariable _python_var_dirs( _python_str_plain_dirs );
    PyObjectLocalVariable _python_var_files( _python_str_plain_files );
    PyObjectLocalVariable _python_var_f( _python_str_plain_f );
    PyObjectLocalVariable _python_var_full_file( _python_str_plain_full_file );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_23_FilePathField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields );
        }

        frame_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_64aea564fb2569b5b7849e9a08a9cc9b, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1016 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple1;
                PyObjectTempKeeper0 make_tuple2;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( _python_var_path.asObject() ), make_tuple2.assign( _python_var_match.asObject() ), MAKE_TUPLE3( make_tuple1.asObject0(), make_tuple2.asObject0(), _python_var_recursive.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 3 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_path );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_match );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_3.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_recursive );
            }
        }
        {
            frame_guard.setLineNumber( 1017 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple4;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple4.assign( _python_var_allow_files.asObject() ), MAKE_TUPLE2( make_tuple4.asObject0(), _python_var_allow_folders.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_allow_files );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_allow_folders );
            }
        }
        frame_guard.setLineNumber( 1018 );
        {
            PyObjectTempKeeper1 call_tmp20;
            PyObjectTempKeeper1 call_tmp21;
            PyObjectTempKeeper0 call_tmp22;
            PyObjectTempKeeper0 make_dict10;
            PyObjectTempKeeper0 make_dict12;
            PyObjectTempKeeper0 make_dict14;
            PyObjectTempKeeper0 make_dict16;
            PyObjectTempKeeper0 super6;
            DECREASE_REFCOUNT( ( call_tmp20.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super6.assign( _mvar_django__forms__fields_FilePathField.asObject0() ), BUILTIN_SUPER( super6.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp21.assign( ( make_dict10.assign( _python_var_required.asObject() ), make_dict12.assign( _python_var_widget.asObject() ), make_dict14.assign( _python_var_label.asObject() ), make_dict16.assign( _python_var_initial.asObject() ), MAKE_DICT6( _python_tuple_empty, _python_str_plain_choices, make_dict10.asObject0(), _python_str_plain_required, make_dict12.asObject0(), _python_str_plain_widget, make_dict14.asObject0(), _python_str_plain_label, make_dict16.asObject0(), _python_str_plain_initial, _python_var_help_text.asObject(), _python_str_plain_help_text ) ) ), call_tmp22.assign( _python_var_args.asObject() ), impl_function_10_complex_call_helper_keywords_star_list_star_dict_of_module___internal__( call_tmp20.asObject(), call_tmp21.asObject(), call_tmp22.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 1022 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_required ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 1023 );
            SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject(), _python_var_self.asObject(), _python_str_plain_choices );
        }
        else
        {
            frame_guard.setLineNumber( 1025 );
            SET_ATTRIBUTE( PyObjectTemporary( LIST_COPY( _python_list_tuple_df086d3836ea8bfa6bfa0e2b28491742_tuple_list ) ).asObject(), _python_var_self.asObject(), _python_str_plain_choices );
        }
        frame_guard.setLineNumber( 1027 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_match ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 1028 );
            {
                PyObjectTempKeeper1 call24;
                {
                    PyObjectTemporary tmp_identifier( ( call24.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_re.asObject0(), _python_str_plain_compile ) ), CALL_FUNCTION_WITH_ARGS( call24.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_match ) ).asObject() ) ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_match_re );
            }
            }
        }
        frame_guard.setLineNumber( 1030 );
        if ( CHECK_IF_TRUE( _python_var_recursive.asObject() ) )
        {
            {
                frame_guard.setLineNumber( 1031 );
                PyObject *_tmp_python_tmp_for_iterator;
                {
                    PyObjectTempKeeper1 call26;
                    _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_sorted ), PyObjectTemporary( ( call26.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_os.asObject0(), _python_str_plain_walk ) ), CALL_FUNCTION_WITH_ARGS( call26.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_path ) ).asObject() ) ) ).asObject() ) ).asObject() );
                }
                PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 1031 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        {
                            frame_guard.setLineNumber( 1031 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 3 );
                            _python_var_root.assign0( _python_tmp_element_1.asObject() );
                            _python_var_dirs.assign0( _python_tmp_element_2.asObject() );
                            _python_var_files.assign0( _python_tmp_element_3.asObject() );
                        }
                    }
                    frame_guard.setLineNumber( 1032 );
                    if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_allow_files ) ).asObject() ) )
                    {
                        {
                            frame_guard.setLineNumber( 1033 );
                            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_files.asObject() ) );
                            while( true )
                            {
                                {
                                    frame_guard.setLineNumber( 1033 );
                                    PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                    if ( _tmp_unpack_2 == NULL )
                                    {
                                        break;
                                    }
                                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                                    _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                                }
                                frame_guard.setLineNumber( 1034 );
                                {
                                    PyObjectTempKeeper1 call39;
                                    if ( ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_match ) ).asObject() == Py_None ) || CHECK_IF_TRUE( PyObjectTemporary( ( call39.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_match_re ) ).asObject(), _python_str_plain_search ) ), CALL_FUNCTION_WITH_ARGS( call39.asObject0(), _python_var_f.asObject() ) ) ).asObject() ) ) )
                                {
                                    frame_guard.setLineNumber( 1035 );
                                    {
                                        PyObjectTempKeeper1 call28;
                                        PyObjectTempKeeper0 call29;
                                        _python_var_f.assign1( ( call28.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_os.asObject0(), _python_str_plain_path ) ).asObject(), _python_str_plain_join ) ), call29.assign( _python_var_root.asObject() ), CALL_FUNCTION_WITH_ARGS( call28.asObject0(), call29.asObject0(), _python_var_f.asObject() ) ) );
                                    }
                                    frame_guard.setLineNumber( 1036 );
                                    {
                                        PyObjectTempKeeper1 call31;
                                        PyObjectTempKeeper1 call37;
                                        PyObjectTempKeeper0 make_tuple35;
                                        DECREASE_REFCOUNT( ( call37.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call37.asObject0(), PyObjectTemporary( ( make_tuple35.assign( _python_var_f.asObject() ), MAKE_TUPLE2( make_tuple35.asObject0(), PyObjectTemporary( ( call31.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_replace ) ), CALL_FUNCTION_WITH_ARGS( call31.asObject0(), _python_var_path.asObject(), _python_unicode_empty, _python_int_pos_1 ) ) ).asObject() ) ) ).asObject() ) ) );
                                    }
                                }
                                }

                               CONSIDER_THREADING();
                            }
                        }
                    }
                    frame_guard.setLineNumber( 1037 );
                    if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_allow_folders ) ).asObject() ) )
                    {
                        {
                            frame_guard.setLineNumber( 1038 );
                            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_dirs.asObject() ) );
                            while( true )
                            {
                                {
                                    frame_guard.setLineNumber( 1038 );
                                    PyObject *_tmp_unpack_3 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                    if ( _tmp_unpack_3 == NULL )
                                    {
                                        break;
                                    }
                                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_3 );
                                    _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                                }
                                frame_guard.setLineNumber( 1039 );
                                if ( RICH_COMPARE_BOOL_EQ( _python_var_f.asObject(), _python_unicode_plain___pycache__ ) )
                                {
                                    frame_guard.setLineNumber( 1040 );
                                    CONSIDER_THREADING(); continue;
                                }
                                frame_guard.setLineNumber( 1041 );
                                {
                                    PyObjectTempKeeper1 call52;
                                    if ( ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_match ) ).asObject() == Py_None ) || CHECK_IF_TRUE( PyObjectTemporary( ( call52.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_match_re ) ).asObject(), _python_str_plain_search ) ), CALL_FUNCTION_WITH_ARGS( call52.asObject0(), _python_var_f.asObject() ) ) ).asObject() ) ) )
                                {
                                    frame_guard.setLineNumber( 1042 );
                                    {
                                        PyObjectTempKeeper1 call41;
                                        PyObjectTempKeeper0 call42;
                                        _python_var_f.assign1( ( call41.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_os.asObject0(), _python_str_plain_path ) ).asObject(), _python_str_plain_join ) ), call42.assign( _python_var_root.asObject() ), CALL_FUNCTION_WITH_ARGS( call41.asObject0(), call42.asObject0(), _python_var_f.asObject() ) ) );
                                    }
                                    frame_guard.setLineNumber( 1043 );
                                    {
                                        PyObjectTempKeeper1 call44;
                                        PyObjectTempKeeper1 call50;
                                        PyObjectTempKeeper0 make_tuple48;
                                        DECREASE_REFCOUNT( ( call50.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call50.asObject0(), PyObjectTemporary( ( make_tuple48.assign( _python_var_f.asObject() ), MAKE_TUPLE2( make_tuple48.asObject0(), PyObjectTemporary( ( call44.assign( LOOKUP_ATTRIBUTE( _python_var_f.asObject(), _python_str_plain_replace ) ), CALL_FUNCTION_WITH_ARGS( call44.asObject0(), _python_var_path.asObject(), _python_unicode_empty, _python_int_pos_1 ) ) ).asObject() ) ) ).asObject() ) ) );
                                    }
                                }
                                }

                               CONSIDER_THREADING();
                            }
                        }
                    }

                   CONSIDER_THREADING();
                }
            }
        }
        else
        {
            frame_guard.setLineNumber( 1045 );
            try
            {
                {
                    frame_guard.setLineNumber( 1046 );
                    PyObject *_tmp_python_tmp_for_iterator;
                    {
                        PyObjectTempKeeper1 call54;
                        _tmp_python_tmp_for_iterator = MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_sorted ), PyObjectTemporary( ( call54.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_os.asObject0(), _python_str_plain_listdir ) ), CALL_FUNCTION_WITH_ARGS( call54.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_path ) ).asObject() ) ) ).asObject() ) ).asObject() );
                    }
                    PyObjectTemporary _python_tmp_for_iterator( _tmp_python_tmp_for_iterator );
                    while( true )
                    {
                        {
                            frame_guard.setLineNumber( 1046 );
                            PyObject *_tmp_unpack_4 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                            if ( _tmp_unpack_4 == NULL )
                            {
                                break;
                            }
                            PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_4 );
                            _python_var_f.assign0( _python_tmp_iter_value.asObject() );
                        }
                        frame_guard.setLineNumber( 1047 );
                        if ( RICH_COMPARE_BOOL_EQ( _python_var_f.asObject(), _python_unicode_plain___pycache__ ) )
                        {
                            frame_guard.setLineNumber( 1048 );
                            CONSIDER_THREADING(); continue;
                        }
                        frame_guard.setLineNumber( 1049 );
                        {
                            PyObjectTempKeeper1 call56;
                            PyObjectTempKeeper1 call57;
                            _python_var_full_file.assign1( ( call56.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_os.asObject0(), _python_str_plain_path ) ).asObject(), _python_str_plain_join ) ), call57.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_path ) ), CALL_FUNCTION_WITH_ARGS( call56.asObject0(), call57.asObject0(), _python_var_f.asObject() ) ) );
                        }
                        frame_guard.setLineNumber( 1050 );
                        {
                            PyObjectTempKeeper1 call63;
                            PyObjectTempKeeper1 call65;
                            PyObjectTempKeeper1 call67;
                            if ( ( ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_allow_files ) ).asObject() ) && CHECK_IF_TRUE( PyObjectTemporary( ( call63.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_os.asObject0(), _python_str_plain_path ) ).asObject(), _python_str_plain_isfile ) ), CALL_FUNCTION_WITH_ARGS( call63.asObject0(), _python_var_full_file.asObject() ) ) ).asObject() ) ) || ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_allow_folders ) ).asObject() ) && CHECK_IF_TRUE( PyObjectTemporary( ( call65.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_os.asObject0(), _python_str_plain_path ) ).asObject(), _python_str_plain_isdir ) ), CALL_FUNCTION_WITH_ARGS( call65.asObject0(), _python_var_full_file.asObject() ) ) ).asObject() ) ) ) && ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_match ) ).asObject() == Py_None ) || CHECK_IF_TRUE( PyObjectTemporary( ( call67.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_match_re ) ).asObject(), _python_str_plain_search ) ), CALL_FUNCTION_WITH_ARGS( call67.asObject0(), _python_var_f.asObject() ) ) ).asObject() ) ) ) )
                        {
                            frame_guard.setLineNumber( 1053 );
                            {
                                PyObjectTempKeeper1 call61;
                                PyObjectTempKeeper0 make_tuple59;
                                DECREASE_REFCOUNT( ( call61.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call61.asObject0(), PyObjectTemporary( ( make_tuple59.assign( _python_var_full_file.asObject() ), MAKE_TUPLE2( make_tuple59.asObject0(), _python_var_f.asObject() ) ) ).asObject() ) ) );
                            }
                        }
                        }

                       CONSIDER_THREADING();
                    }
                }
            }
            catch ( PythonException &_exception )
            {
                if ( !_exception.hasTraceback() )
                {
                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                }
                else
                {
                    _exception.addTraceback( frame_guard.getFrame0() );
                }

                frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                _exception.toExceptionHandler();

                if ( _exception.matches( PyExc_OSError ) )
                {

                }
                else
                {
                    PyTracebackObject *tb = _exception.getTraceback();
                    frame_guard.setLineNumber( tb->tb_lineno );
                    _exception.setTraceback( tb->tb_next );
                    tb->tb_next = NULL;

                    throw;
                }
            }
        }
        frame_guard.setLineNumber( 1057 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_widget ) ).asObject(), _python_str_plain_choices );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_help_text.updateLocalsDict( _python_var_initial.updateLocalsDict( _python_var_label.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var_required.updateLocalsDict( _python_var_allow_folders.updateLocalsDict( _python_var_allow_files.updateLocalsDict( _python_var_recursive.updateLocalsDict( _python_var_match.updateLocalsDict( _python_var_path.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_full_file.updateLocalsDict( _python_var_f.updateLocalsDict( _python_var_files.updateLocalsDict( _python_var_dirs.updateLocalsDict( _python_var_root.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields );
           frame_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_path = NULL;
    PyObject *_python_par_match = NULL;
    PyObject *_python_par_recursive = NULL;
    PyObject *_python_par_allow_files = NULL;
    PyObject *_python_par_allow_folders = NULL;
    PyObject *_python_par_required = NULL;
    PyObject *_python_par_widget = NULL;
    PyObject *_python_par_label = NULL;
    PyObject *_python_par_initial = NULL;
    PyObject *_python_par_help_text = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument path was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_path );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_path == NULL );

            _python_par_path = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_path );

            kw_found += 1;
        }
    }

    // Check if argument match was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_match );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_match == NULL );

            _python_par_match = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_match );

            kw_found += 1;
        }
    }

    // Check if argument recursive was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_recursive );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_recursive == NULL );

            _python_par_recursive = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_recursive );

            kw_found += 1;
        }
    }

    // Check if argument allow_files was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_allow_files );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_allow_files == NULL );

            _python_par_allow_files = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_allow_files );

            kw_found += 1;
        }
    }

    // Check if argument allow_folders was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_allow_folders );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_allow_folders == NULL );

            _python_par_allow_folders = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_allow_folders );

            kw_found += 1;
        }
    }

    // Check if argument required was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_required );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_required == NULL );

            _python_par_required = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_required );

            kw_found += 1;
        }
    }

    // Check if argument widget was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_widget );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_widget == NULL );

            _python_par_widget = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_widget );

            kw_found += 1;
        }
    }

    // Check if argument label was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_label );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_label == NULL );

            _python_par_label = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_label );

            kw_found += 1;
        }
    }

    // Check if argument initial was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_initial );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_initial == NULL );

            _python_par_initial = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_initial );

            kw_found += 1;
        }
    }

    // Check if argument help_text was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_help_text );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_help_text == NULL );

            _python_par_help_text = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_help_text );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 11 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 11, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 11, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 11 ? args_given : 11;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_path != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'path'" );
             goto error_exit;
         }

        _python_par_path = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_match != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'match'" );
             goto error_exit;
         }

        _python_par_match = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_recursive != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'recursive'" );
             goto error_exit;
         }

        _python_par_recursive = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_allow_files != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'allow_files'" );
             goto error_exit;
         }

        _python_par_allow_files = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_allow_folders != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'allow_folders'" );
             goto error_exit;
         }

        _python_par_allow_folders = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_required != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'required'" );
             goto error_exit;
         }

        _python_par_required = INCREASE_REFCOUNT( args[ 6 ] );
    }
    if (likely( 7 < args_usable_count ))
    {
         if (unlikely( _python_par_widget != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'widget'" );
             goto error_exit;
         }

        _python_par_widget = INCREASE_REFCOUNT( args[ 7 ] );
    }
    if (likely( 8 < args_usable_count ))
    {
         if (unlikely( _python_par_label != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'label'" );
             goto error_exit;
         }

        _python_par_label = INCREASE_REFCOUNT( args[ 8 ] );
    }
    if (likely( 9 < args_usable_count ))
    {
         if (unlikely( _python_par_initial != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'initial'" );
             goto error_exit;
         }

        _python_par_initial = INCREASE_REFCOUNT( args[ 9 ] );
    }
    if (likely( 10 < args_usable_count ))
    {
         if (unlikely( _python_par_help_text != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'help_text'" );
             goto error_exit;
         }

        _python_par_help_text = INCREASE_REFCOUNT( args[ 10 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 11 )
    {
        _python_par_args = PyTuple_New( args_size - 11 );

        for( Py_ssize_t i = 0; i < args_size - 11; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[11+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }
    // Assign values not given to defaults
    if ( _python_par_match == NULL )
    {
        _python_par_match = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_match );
    }
    if ( _python_par_recursive == NULL )
    {
        _python_par_recursive = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_recursive );
    }
    if ( _python_par_allow_files == NULL )
    {
        _python_par_allow_files = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_allow_files );
    }
    if ( _python_par_allow_folders == NULL )
    {
        _python_par_allow_folders = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_allow_folders );
    }
    if ( _python_par_required == NULL )
    {
        _python_par_required = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_required );
    }
    if ( _python_par_widget == NULL )
    {
        _python_par_widget = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 5 ) );
        assertObject( _python_par_widget );
    }
    if ( _python_par_label == NULL )
    {
        _python_par_label = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 6 ) );
        assertObject( _python_par_label );
    }
    if ( _python_par_initial == NULL )
    {
        _python_par_initial = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 7 ) );
        assertObject( _python_par_initial );
    }
    if ( _python_par_help_text == NULL )
    {
        _python_par_help_text = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 8 ) );
        assertObject( _python_par_help_text );
    }


    return impl_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields( self, _python_par_self, _python_par_path, _python_par_match, _python_par_recursive, _python_par_allow_files, _python_par_allow_folders, _python_par_required, _python_par_widget, _python_par_label, _python_par_initial, _python_par_help_text, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_path );
    Py_XDECREF( _python_par_match );
    Py_XDECREF( _python_par_recursive );
    Py_XDECREF( _python_par_allow_files );
    Py_XDECREF( _python_par_allow_folders );
    Py_XDECREF( _python_par_required );
    Py_XDECREF( _python_par_widget );
    Py_XDECREF( _python_par_label );
    Py_XDECREF( _python_par_initial );
    Py_XDECREF( _python_par_help_text );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 13)
    {
        return impl_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ), INCREASE_REFCOUNT( args[ 8 ] ), INCREASE_REFCOUNT( args[ 9 ] ), INCREASE_REFCOUNT( args[ 10 ] ), MAKE_TUPLE( &args[ 11 ], size > 11 ? size-11 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_24_SplitDateTimeField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_widget( _python_str_plain_widget );
    PyObjectLocalVariable _python_var_hidden_widget( _python_str_plain_hidden_widget );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_compress( _python_str_plain_compress );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_24_SplitDateTimeField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_24_SplitDateTimeField_of_module_django__forms__fields ) )
    {
        if ( frame_class_24_SplitDateTimeField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_24_SplitDateTimeField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_24_SplitDateTimeField_of_module_django__forms__fields );
        }

        frame_class_24_SplitDateTimeField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_399addf94376b460d7c23c7561943369, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_24_SplitDateTimeField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_24_SplitDateTimeField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1061 );
        _python_var_widget.assign0( _mvar_django__forms__fields_SplitDateTimeWidget.asObject0() );
        frame_guard.setLineNumber( 1062 );
        _python_var_hidden_widget.assign0( _mvar_django__forms__fields_SplitHiddenDateTimeWidget.asObject0() );
        frame_guard.setLineNumber( 1063 );
        {
            PyObjectTempKeeper1 make_dict1;
            _python_var_default_error_messages.assign1( ( make_dict1.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_cc3423894adcd935177f0c624410cb53 ) ), MAKE_DICT2( make_dict1.asObject0(), _python_unicode_plain_invalid_date, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__forms__fields__.asObject0(), _python_unicode_digest_0bac3511ee6d665901724954087e6c0a ) ).asObject(), _python_unicode_plain_invalid_time ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_compress.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_hidden_widget.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_24_SplitDateTimeField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_24_SplitDateTimeField_of_module_django__forms__fields );
           frame_class_24_SplitDateTimeField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields(  ) );
    _python_var_compress.assign1( MAKE_FUNCTION_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields(  ) );
    return _python_var_compress.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_hidden_widget.updateLocalsDict( _python_var_widget.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_input_date_formats, PyObject *_python_par_input_time_formats, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_input_date_formats( _python_str_plain_input_date_formats, _python_par_input_date_formats );
    PyObjectLocalParameterVariableNoDel _python_var_input_time_formats( _python_str_plain_input_time_formats, _python_par_input_time_formats );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_errors( _python_str_plain_errors );
    PyObjectLocalVariable _python_var_localize( _python_str_plain_localize );
    PyObjectLocalVariable _python_var_fields( _python_str_plain_fields );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields );
        }

        frame_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_57cc5ca983f2a521d7b91e9a096e2cbd, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1069 );
        _python_var_errors.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_default_error_messages ) ).asObject(), _python_str_plain_copy ) ).asObject() ) );
        frame_guard.setLineNumber( 1070 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_unicode_plain_error_messages, _python_var_kwargs.asObject() ) )
        {
            frame_guard.setLineNumber( 1071 );
            {
                PyObjectTempKeeper1 call1;
                DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_errors.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( _python_var_kwargs.asObject(), _python_unicode_plain_error_messages ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 1072 );
        _python_var_localize.assign1( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_get ) ).asObject(), _python_unicode_plain_localize, Py_False ) );
        frame_guard.setLineNumber( 1073 );
        {
            PyObjectTempKeeper0 call18;
            PyObjectTempKeeper0 call9;
            PyObjectTempKeeper0 make_dict12;
            PyObjectTempKeeper1 make_dict14;
            PyObjectTempKeeper0 make_dict3;
            PyObjectTempKeeper1 make_dict5;
            PyObjectTempKeeper1 make_tuple21;
            _python_var_fields.assign1( ( make_tuple21.assign( ( call9.assign( _mvar_django__forms__fields_DateField.asObject0() ), CALL_FUNCTION( call9.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict3.assign( _python_var_input_date_formats.asObject() ), make_dict5.assign( MAKE_DICT1( PyObjectTemporary( LOOKUP_SUBSCRIPT( _python_var_errors.asObject(), _python_unicode_plain_invalid_date ) ).asObject(), _python_unicode_plain_invalid ) ), MAKE_DICT3( make_dict3.asObject0(), _python_str_plain_input_formats, make_dict5.asObject0(), _python_str_plain_error_messages, _python_var_localize.asObject(), _python_str_plain_localize ) ) ).asObject() ) ) ), MAKE_TUPLE2( make_tuple21.asObject0(), PyObjectTemporary( ( call18.assign( _mvar_django__forms__fields_TimeField.asObject0() ), CALL_FUNCTION( call18.asObject0(), _python_tuple_empty, PyObjectTemporary( ( make_dict12.assign( _python_var_input_time_formats.asObject() ), make_dict14.assign( MAKE_DICT1( PyObjectTemporary( LOOKUP_SUBSCRIPT( _python_var_errors.asObject(), _python_unicode_plain_invalid_time ) ).asObject(), _python_unicode_plain_invalid ) ), MAKE_DICT3( make_dict12.asObject0(), _python_str_plain_input_formats, make_dict14.asObject0(), _python_str_plain_error_messages, _python_var_localize.asObject(), _python_str_plain_localize ) ) ).asObject() ) ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 1081 );
        {
            PyObjectTempKeeper1 call_tmp25;
            PyObjectTempKeeper1 call_tmp26;
            PyObjectTempKeeper0 call_tmp27;
            PyObjectTempKeeper0 super23;
            DECREASE_REFCOUNT( ( call_tmp25.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super23.assign( _mvar_django__forms__fields_SplitDateTimeField.asObject0() ), BUILTIN_SUPER( super23.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp26.assign( MAKE_TUPLE1( _python_var_fields.asObject() ) ), call_tmp27.assign( _python_var_args.asObject() ), impl_function_8_complex_call_helper_pos_star_list_star_dict_of_module___internal__( call_tmp25.asObject(), call_tmp26.asObject(), call_tmp27.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_input_time_formats.updateLocalsDict( _python_var_input_date_formats.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_fields.updateLocalsDict( _python_var_localize.updateLocalsDict( _python_var_errors.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields );
           frame_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_input_date_formats = NULL;
    PyObject *_python_par_input_time_formats = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument input_date_formats was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_input_date_formats );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_input_date_formats == NULL );

            _python_par_input_date_formats = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_input_date_formats );

            kw_found += 1;
        }
    }

    // Check if argument input_time_formats was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_input_time_formats );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_input_time_formats == NULL );

            _python_par_input_time_formats = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_input_time_formats );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 3, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 3, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_input_date_formats != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'input_date_formats'" );
             goto error_exit;
         }

        _python_par_input_date_formats = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_input_time_formats != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'input_time_formats'" );
             goto error_exit;
         }

        _python_par_input_time_formats = INCREASE_REFCOUNT( args[ 2 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 3 )
    {
        _python_par_args = PyTuple_New( args_size - 3 );

        for( Py_ssize_t i = 0; i < args_size - 3; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[3+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }
    // Assign values not given to defaults
    if ( _python_par_input_date_formats == NULL )
    {
        _python_par_input_date_formats = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_input_date_formats );
    }
    if ( _python_par_input_time_formats == NULL )
    {
        _python_par_input_time_formats = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_input_time_formats );
    }


    return impl_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields( self, _python_par_self, _python_par_input_date_formats, _python_par_input_time_formats, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_input_date_formats );
    Py_XDECREF( _python_par_input_time_formats );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), MAKE_TUPLE( &args[ 3 ], size > 3 ? size-3 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_data_list )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_data_list( _python_str_plain_data_list, _python_par_data_list );
    PyObjectLocalVariable _python_var_result( _python_str_plain_result );

    // Actual function code.
    static PyFrameObject *frame_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields );
        }

        frame_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_f5272f17a9b0d30a8450ce5cfc975ec4, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1084 );
        if ( CHECK_IF_TRUE( _python_var_data_list.asObject() ) )
        {
            frame_guard.setLineNumber( 1087 );
            {
                PyObjectTempKeeper1 cmp3;
                if ( ( cmp3.assign( LOOKUP_SUBSCRIPT_CONST( _python_var_data_list.asObject(), _python_int_0, 0 ) ), SEQUENCE_CONTAINS_BOOL( cmp3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
            {
                frame_guard.setLineNumber( 1088 );
                {
                    PyObjectTempKeeper0 call1;
                    {
                        PyObjectTemporary tmp_exception_type( ( call1.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_date ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            }
            frame_guard.setLineNumber( 1089 );
            {
                PyObjectTempKeeper1 cmp7;
                if ( ( cmp7.assign( LOOKUP_SUBSCRIPT_CONST( _python_var_data_list.asObject(), _python_int_pos_1, 1 ) ), SEQUENCE_CONTAINS_BOOL( cmp7.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
            {
                frame_guard.setLineNumber( 1090 );
                {
                    PyObjectTempKeeper0 call5;
                    {
                        PyObjectTemporary tmp_exception_type( ( call5.assign( _mvar_django__forms__fields_ValidationError.asObject0() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_time ) ).asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            }
            frame_guard.setLineNumber( 1091 );
            {
                PyObjectTempKeeper1 call_tmp9;
                _python_var_result.assign1( ( call_tmp9.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_datetime.asObject0(), _python_str_plain_datetime ) ).asObject(), _python_str_plain_combine ) ), impl_function_7_complex_call_helper_star_list_of_module___internal__( call_tmp9.asObject(), _python_var_data_list.asObject1() ) ) );
            }
            frame_guard.setLineNumber( 1092 );
            {
                PyObjectTempKeeper0 call11;
                return ( call11.assign( _mvar_django__forms__fields_from_current_timezone.asObject0() ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _python_var_result.asObject() ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data_list.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_result.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields );
           frame_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_data_list = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "compress() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "compress() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data_list == key )
            {
                if (unlikely( _python_par_data_list ))
                {
                    PyErr_Format( PyExc_TypeError, "compress() got multiple values for keyword argument 'data_list'" );
                    goto error_exit;
                }

                _python_par_data_list = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "compress() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data_list, key ) )
            {
                if (unlikely( _python_par_data_list ))
                {
                    PyErr_Format( PyExc_TypeError, "compress() got multiple values for keyword argument 'data_list'" );
                    goto error_exit;
                }

                _python_par_data_list = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "compress() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "compress() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "compress() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "compress() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "compress() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "compress() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "compress() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "compress() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "compress() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "compress() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "compress() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "compress() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "compress() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "compress() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_data_list != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "compress() got multiple values for keyword argument 'data_list'" );
             goto error_exit;
         }

        _python_par_data_list = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields( self, _python_par_self, _python_par_data_list );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_data_list );

    return NULL;
}

static PyObject *dparse_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_25_IPAddressField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_default_validators( _python_str_plain_default_validators );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_25_IPAddressField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_25_IPAddressField_of_module_django__forms__fields ) )
    {
        if ( frame_class_25_IPAddressField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_25_IPAddressField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_25_IPAddressField_of_module_django__forms__fields );
        }

        frame_class_25_IPAddressField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_a0e804b3543ea7ede234643d8c2b48c9, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_25_IPAddressField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_25_IPAddressField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1097 );
        _python_var_default_validators.assign1( MAKE_LIST1( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_validators.asObject0(), _python_str_plain_validate_ipv4_address ) ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_to_python.updateLocalsDict( _python_var_default_validators.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_class_25_IPAddressField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_25_IPAddressField_of_module_django__forms__fields );
           frame_class_25_IPAddressField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var_to_python.assign1( MAKE_FUNCTION_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields(  ) );
    return _python_var_to_python.updateLocalsDict( _python_var_default_validators.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields );
        }

        frame_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_1ec0cfbc9e5aebaeed3991467a89b01e, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1100 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( _python_unicode_empty );
        }
        }
        frame_guard.setLineNumber( 1102 );
        return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_strip ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields );
           frame_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_26_GenericIPAddressField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields(  ) );
    return _python_var_to_python.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_protocol, PyObject *_python_par_unpack_ipv4, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_protocol( _python_str_plain_protocol, _python_par_protocol );
    PyObjectLocalParameterVariableNoDel _python_var_unpack_ipv4( _python_str_plain_unpack_ipv4, _python_par_unpack_ipv4 );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields );
        }

        frame_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_8f317fd5c1f2a718abfaf4bbaa9c1d5f, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1107 );
        {
                PyObject *tmp_identifier = _python_var_unpack_ipv4.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_unpack_ipv4 );
        }
        frame_guard.setLineNumber( 1108 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            {
                PyObjectTemporary tmp_identifier( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_validators.asObject0(), _python_str_plain_ip_address_validators ) ), call2.assign( _python_var_protocol.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_unpack_ipv4.asObject() ) ) ).asObject(), _python_int_0, 0 ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_default_validators );
        }
        }
        frame_guard.setLineNumber( 1109 );
        {
            PyObjectTempKeeper1 call_tmp6;
            PyObjectTempKeeper0 call_tmp7;
            PyObjectTempKeeper0 super4;
            DECREASE_REFCOUNT( ( call_tmp6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super4.assign( _mvar_django__forms__fields_GenericIPAddressField.asObject0() ), BUILTIN_SUPER( super4.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp7.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp6.asObject(), call_tmp7.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_unpack_ipv4.updateLocalsDict( _python_var_protocol.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields );
           frame_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_protocol = NULL;
    PyObject *_python_par_unpack_ipv4 = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument protocol was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_protocol );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_protocol == NULL );

            _python_par_protocol = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_protocol );

            kw_found += 1;
        }
    }

    // Check if argument unpack_ipv4 was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_unpack_ipv4 );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_unpack_ipv4 == NULL );

            _python_par_unpack_ipv4 = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_unpack_ipv4 );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 3, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 3, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_protocol != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'protocol'" );
             goto error_exit;
         }

        _python_par_protocol = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_unpack_ipv4 != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'unpack_ipv4'" );
             goto error_exit;
         }

        _python_par_unpack_ipv4 = INCREASE_REFCOUNT( args[ 2 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 3 )
    {
        _python_par_args = PyTuple_New( args_size - 3 );

        for( Py_ssize_t i = 0; i < args_size - 3; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[3+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }
    // Assign values not given to defaults
    if ( _python_par_protocol == NULL )
    {
        _python_par_protocol = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_protocol );
    }
    if ( _python_par_unpack_ipv4 == NULL )
    {
        _python_par_unpack_ipv4 = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_unpack_ipv4 );
    }


    return impl_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields( self, _python_par_self, _python_par_protocol, _python_par_unpack_ipv4, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_protocol );
    Py_XDECREF( _python_par_unpack_ipv4 );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), MAKE_TUPLE( &args[ 3 ], size > 3 ? size-3 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields ) )
    {
        if ( frame_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields );
        }

        frame_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_a32cfe35730c1cebb34832c1ae93ff71, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1112 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( _python_unicode_empty );
        }
        }
        frame_guard.setLineNumber( 1114 );
        _python_var_value.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_strip ) ).asObject() ) );
        frame_guard.setLineNumber( 1115 );
        if ( ( CHECK_IF_TRUE( _python_var_value.asObject() ) && SEQUENCE_CONTAINS_BOOL( _python_unicode_chr_58, _python_var_value.asObject() ) ) )
        {
            frame_guard.setLineNumber( 1116 );
            {
                PyObjectTempKeeper0 call3;
                PyObjectTempKeeper0 call4;
                return ( call3.assign( _mvar_django__forms__fields_clean_ipv6_address.asObject0() ), call4.assign( _python_var_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_unpack_ipv4 ) ).asObject() ) );
            }
        }
        frame_guard.setLineNumber( 1117 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields );
           frame_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_27_SlugField_of_module_django__forms__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_default_validators( _python_str_plain_default_validators );
    PyObjectLocalVariable _python_var_clean( _python_str_plain_clean );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_27_SlugField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_class_27_SlugField_of_module_django__forms__fields ) )
    {
        if ( frame_class_27_SlugField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_27_SlugField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_class_27_SlugField_of_module_django__forms__fields );
        }

        frame_class_27_SlugField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_7f2b38832fbebf8532929ff46bc3de64, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_class_27_SlugField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_class_27_SlugField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1121 );
        _python_var_default_validators.assign1( MAKE_LIST1( LOOKUP_ATTRIBUTE( _mvar_django__forms__fields_validators.asObject0(), _python_str_plain_validate_slug ) ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_clean.updateLocalsDict( _python_var_default_validators.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_class_27_SlugField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_class_27_SlugField_of_module_django__forms__fields );
           frame_class_27_SlugField_of_module_django__forms__fields = NULL;
        }

        throw;
    }
    _python_var_clean.assign1( MAKE_FUNCTION_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields(  ) );
    return _python_var_clean.updateLocalsDict( _python_var_default_validators.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields = NULL;

    if ( isFrameUnusable( frame_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields ) )
    {
        if ( frame_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_clean_of_class_27_SlugField_of_module_django__forms__fields" );
#endif
            Py_DECREF( frame_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields );
        }

        frame_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields = MAKE_FRAME( _codeobj_d3be50afdac0497d2fd6e86399c54a7a, _module_django__forms__fields );
    }

    FrameGuard frame_guard( frame_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1124 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_value.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) ).asObject(), _python_str_plain_strip ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 1125 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper0 super3;
            return ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__forms__fields_SlugField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_clean ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields )
        {
           Py_DECREF( frame_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields );
           frame_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clean() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clean() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clean() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields( self, args, size, NULL );
        return result;
    }

}




static PyObject *MAKE_FUNCTION_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields,
        dparse_function_10___deepcopy___of_class_1_Field_of_module_django__forms__fields,
        _python_str_plain___deepcopy__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_14045b48e02a1465dfbe9eb1c1064209,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_10_RegexField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_10_RegexField_of_module_django__forms__fields,
        dparse_function_1___init___of_class_10_RegexField_of_module_django__forms__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1f5abfac3fd3cc892560097cd64b05f1,
        INCREASE_REFCOUNT( _python_tuple_none_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_2399ff6a7a25aa5a1ca593c948056898
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_12_FileField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_12_FileField_of_module_django__forms__fields,
        dparse_function_1___init___of_class_12_FileField_of_module_django__forms__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2fbc8c78af6b90f8a5bfcb68740e176b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_14_URLField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_14_URLField_of_module_django__forms__fields,
        dparse_function_1___init___of_class_14_URLField_of_module_django__forms__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_232668ecb2d8e0cd0f29bc09ad4c5323,
        INCREASE_REFCOUNT( _python_tuple_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields,
        dparse_function_1___init___of_class_17_ChoiceField_of_module_django__forms__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a099a02d7cf2e9967e15eff615c38f19,
        INCREASE_REFCOUNT( _python_tuple_tuple_empty_true_none_none_none_unicode_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields,
        dparse_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f2448c589930c3c84ffb03f345af2220,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_1_Field_of_module_django__forms__fields( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_1_Field_of_module_django__forms__fields,
        dparse_function_1___init___of_class_1_Field_of_module_django__forms__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_64eb608e60e87ed4b95d1d8265df3864,
        defaults,
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields,
        dparse_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_230b84d0965327a413d29d43779adf9c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_21_ComboField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_21_ComboField_of_module_django__forms__fields,
        dparse_function_1___init___of_class_21_ComboField_of_module_django__forms__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a6762f406e277b809e53e14ca10f1a30,
        INCREASE_REFCOUNT( _python_tuple_tuple_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields,
        dparse_function_1___init___of_class_22_MultiValueField_of_module_django__forms__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2639ca69b2d3c8042c7519bc2a446313,
        INCREASE_REFCOUNT( _python_tuple_tuple_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields,
        dparse_function_1___init___of_class_23_FilePathField_of_module_django__forms__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_64aea564fb2569b5b7849e9a08a9cc9b,
        INCREASE_REFCOUNT( _python_tuple_none_false_true_false_true_none_none_none_unicode_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields,
        dparse_function_1___init___of_class_24_SplitDateTimeField_of_module_django__forms__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_57cc5ca983f2a521d7b91e9a096e2cbd,
        INCREASE_REFCOUNT( _python_tuple_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields,
        dparse_function_1___init___of_class_26_GenericIPAddressField_of_module_django__forms__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8f317fd5c1f2a718abfaf4bbaa9c1d5f,
        INCREASE_REFCOUNT( _python_tuple_unicode_plain_both_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_2_CharField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_2_CharField_of_module_django__forms__fields,
        dparse_function_1___init___of_class_2_CharField_of_module_django__forms__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_df07df0bc025d636abba46fe37fd4f3d,
        INCREASE_REFCOUNT( _python_tuple_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields,
        dparse_function_1___init___of_class_3_IntegerField_of_module_django__forms__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_75b7b18e425d1b4092d3ed19db2014ec,
        INCREASE_REFCOUNT( _python_tuple_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields,
        dparse_function_1___init___of_class_5_DecimalField_of_module_django__forms__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4473c7f4f4b66fdab58c4831794e375f,
        INCREASE_REFCOUNT( _python_tuple_none_none_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields,
        dparse_function_1___init___of_class_6_BaseTemporalField_of_module_django__forms__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_12b587d6fb2956c53de1a7091cb4d5dd,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields,
        dparse_function_1_clean_of_class_11_EmailField_of_module_django__forms__fields,
        _python_str_plain_clean,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ba4d26f02a9d240b90dfdae52377feab,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields,
        dparse_function_1_clean_of_class_27_SlugField_of_module_django__forms__fields,
        _python_str_plain_clean,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d3be50afdac0497d2fd6e86399c54a7a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields,
        dparse_function_1_prepare_value_of_class_9_DateTimeField_of_module_django__forms__fields,
        _python_str_plain_prepare_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_da8b04a52f4754e21a0ddbcf55a39f8a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields( PyObjectSharedLocalVariable &python_closure_self )
{
    struct _context_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields_t *_python_context = new _context_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields_t;

    // Copy the parameter default values and closure values over.
    _python_context->python_closure_self.shareWith( python_closure_self );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields,
        dparse_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields,
        _python_str_plain_split_url,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_14e4a502d592aef7bcf53dc438373420,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_87a33eea441cf78ec9e1a374d9152be6,
        _python_context,
        _context_function_1_split_url_of_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields,
        dparse_function_1_to_python_of_class_13_ImageField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e15b9797b92241412e1df14fb48f6aad,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_6d577b5ba54a6944959723f42126b310
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields,
        dparse_function_1_to_python_of_class_15_BooleanField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4c02dd901f62563270475a2a6130a587,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_53d5821b97e6af10d8e1d94d31fd9ff3
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields,
        dparse_function_1_to_python_of_class_16_NullBooleanField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6863cd1541fcd27094a3c1e1908b6625,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_ce543749d2e4de3250a6d94f626d9571
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields,
        dparse_function_1_to_python_of_class_19_MultipleChoiceField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_fd15973400c76e19b69c6019bd3c67e5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields,
        dparse_function_1_to_python_of_class_25_IPAddressField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1ec0cfbc9e5aebaeed3991467a89b01e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields,
        dparse_function_1_to_python_of_class_4_FloatField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_53ace8e221a6f902a44b24be597b3ef4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_734b8a00923d9fa70e22eb4a5de1e80b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields,
        dparse_function_1_to_python_of_class_7_DateField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6b7e3e0ae7b2db410877212f59344bbd,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_21d386df48c06721235a9a65ed1c61c9
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields,
        dparse_function_1_to_python_of_class_8_TimeField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_fbd3a39cb7b3e471180e44596dc61972,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_fda08a8c8a56713bc486ddbdc77e07bc
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields,
        dparse_function_2___deepcopy___of_class_17_ChoiceField_of_module_django__forms__fields,
        _python_str_plain___deepcopy__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ed59254aa602c13bbaee9ecbde77ca89,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields,
        dparse_function_2__get_regex_of_class_10_RegexField_of_module_django__forms__fields,
        _python_str_plain__get_regex,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a4a2aeaf792dcb1aaed9b8dfefcdc1db,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields,
        dparse_function_2_clean_of_class_21_ComboField_of_module_django__forms__fields,
        _python_str_plain_clean,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_108204654e2bfbb555581be7dc8e6d0e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_783cea89461d427084d099984e2c9583
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields,
        dparse_function_2_compress_of_class_24_SplitDateTimeField_of_module_django__forms__fields,
        _python_str_plain_compress,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f5272f17a9b0d30a8450ce5cfc975ec4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields,
        dparse_function_2_prepare_value_of_class_1_Field_of_module_django__forms__fields,
        _python_str_plain_prepare_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4fb7bd151543320e1066b68badf11a4d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields,
        dparse_function_2_strptime_of_class_7_DateField_of_module_django__forms__fields,
        _python_str_plain_strptime,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_cb3c569f6c17cb09ac56c99f53e00da1,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields,
        dparse_function_2_strptime_of_class_8_TimeField_of_module_django__forms__fields,
        _python_str_plain_strptime,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f2e81b418678acda8627c0d55a6f52c6,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields,
        dparse_function_2_to_python_of_class_12_FileField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2b0d56dd355dcf8a40029fc9f71e841a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields,
        dparse_function_2_to_python_of_class_14_URLField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_453d9ee76fe12ecde493c3c60f49fdea,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields,
        dparse_function_2_to_python_of_class_18_TypedChoiceField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e1ece18fc62da810f61306a52d5740a7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_b0d1c176765c927c25c9dc7d55ba5c72
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields,
        dparse_function_2_to_python_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_90b7a910f5284eced53db574c6a59d1f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_342e84aa912f52461ee78415ea63d579
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields,
        dparse_function_2_to_python_of_class_26_GenericIPAddressField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a32cfe35730c1cebb34832c1ae93ff71,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields,
        dparse_function_2_to_python_of_class_2_CharField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c584c613fbb0115543ad9e477c1b6052,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_5005faaf64bded0f7427bbedecd8d920
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields,
        dparse_function_2_to_python_of_class_3_IntegerField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_081f4968f38aafc52502e6ca7fd17515,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_7ea71e23e0c76837790b7f6a7af75a49
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields,
        dparse_function_2_to_python_of_class_5_DecimalField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d1ba7aea158d2179eabf4b53933ccd77,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_7a57e94b695b185cfc278f13806c22cd
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields,
        dparse_function_2_to_python_of_class_6_BaseTemporalField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_530c8b911f010719eb6bbba51a855f39,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields,
        dparse_function_2_to_python_of_class_9_DateTimeField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_38f245fe8c6e7eaebbdbcc48d13dc0ab,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_4ba1696dee1efd0933b2da0a7c0e3372
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields,
        dparse_function_2_validate_of_class_15_BooleanField_of_module_django__forms__fields,
        _python_str_plain_validate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_db1dfff01056737d1fd23685a39f4fa5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_validate_of_class_16_NullBooleanField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_validate_of_class_16_NullBooleanField_of_module_django__forms__fields,
        dparse_function_2_validate_of_class_16_NullBooleanField_of_module_django__forms__fields,
        _python_str_plain_validate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_29dd25bafc97616e9412cb7606d50e6a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields,
        dparse_function_2_validate_of_class_19_MultipleChoiceField_of_module_django__forms__fields,
        _python_str_plain_validate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5335a8db51d6b3a98470c2b0a045bb46,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_d236504994ef134b8b0958e224691cd9
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_validate_of_class_22_MultiValueField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_validate_of_class_22_MultiValueField_of_module_django__forms__fields,
        dparse_function_2_validate_of_class_22_MultiValueField_of_module_django__forms__fields,
        _python_str_plain_validate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5bcddc51d80fc911a3602f45a921332c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields,
        dparse_function_2_widget_attrs_of_class_4_FloatField_of_module_django__forms__fields,
        _python_str_plain_widget_attrs,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6375b631a2ce1d98d155a004b38c3dce,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields,
        dparse_function_3__get_choices_of_class_17_ChoiceField_of_module_django__forms__fields,
        _python_str_plain__get_choices,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_542e682b71197b3e3e59920fb7f63468,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields,
        dparse_function_3__has_changed_of_class_15_BooleanField_of_module_django__forms__fields,
        _python_str_plain__has_changed,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6724af4eadb9224b65e125d56e237f69,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields,
        dparse_function_3__has_changed_of_class_16_NullBooleanField_of_module_django__forms__fields,
        _python_str_plain__has_changed,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2a0a62355d8140967b9a745db721d341,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields,
        dparse_function_3__has_changed_of_class_19_MultipleChoiceField_of_module_django__forms__fields,
        _python_str_plain__has_changed,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_74bac244b69e3822c4a50bf8ddf11a3f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields,
        dparse_function_3__set_regex_of_class_10_RegexField_of_module_django__forms__fields,
        _python_str_plain__set_regex,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5d2d94081b7691223c1b00665a23d861,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_clean_of_class_12_FileField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_clean_of_class_12_FileField_of_module_django__forms__fields,
        dparse_function_3_clean_of_class_12_FileField_of_module_django__forms__fields,
        _python_str_plain_clean,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_215a6d524c1e08d9177780898aaeeab7,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_clean_of_class_14_URLField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_clean_of_class_14_URLField_of_module_django__forms__fields,
        dparse_function_3_clean_of_class_14_URLField_of_module_django__forms__fields,
        _python_str_plain_clean,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f819756ad8037a96ecbb7565b5c1bf0e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields,
        dparse_function_3_clean_of_class_22_MultiValueField_of_module_django__forms__fields,
        _python_str_plain_clean,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_90d45c1917263ab4f0d95702689110be,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_cacd2ad3cfc3269944f075b640f26fbf
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields,
        dparse_function_3_strptime_of_class_6_BaseTemporalField_of_module_django__forms__fields,
        _python_str_plain_strptime,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d60964810624247cd95f2fc85115a2ad,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields,
        dparse_function_3_strptime_of_class_9_DateTimeField_of_module_django__forms__fields,
        _python_str_plain_strptime,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1ff167b0e3d73e3d2894267c2506e1ee,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_1_Field_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_to_python_of_class_1_Field_of_module_django__forms__fields,
        dparse_function_3_to_python_of_class_1_Field_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_12962f2f67c151425f963a9ed5d788f4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields,
        dparse_function_3_validate_of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields,
        _python_str_plain_validate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_835fec440715a9ff7626b73ea5af3501,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields,
        dparse_function_3_validate_of_class_5_DecimalField_of_module_django__forms__fields,
        _python_str_plain_validate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_67aaf8027d4c64648fca2d6aba89bcf7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields,
        dparse_function_3_widget_attrs_of_class_2_CharField_of_module_django__forms__fields,
        _python_str_plain_widget_attrs,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b76bdab5ef672844490f84253d4f0ddd,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields,
        dparse_function_3_widget_attrs_of_class_3_IntegerField_of_module_django__forms__fields,
        _python_str_plain_widget_attrs,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7bcc251fed8dea8551d5ffb86a098ba0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields,
        dparse_function_4__set_choices_of_class_17_ChoiceField_of_module_django__forms__fields,
        _python_str_plain__set_choices,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e3d2439e42c717ed71dc636f7964dbf4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields,
        dparse_function_4_bound_data_of_class_12_FileField_of_module_django__forms__fields,
        _python_str_plain_bound_data,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ee4ebc8592da7ea6395f737e0b8a0a23,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields,
        dparse_function_4_compress_of_class_22_MultiValueField_of_module_django__forms__fields,
        _python_str_plain_compress,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_761ea01871e6f0af46a0e22acdb69168,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_4612c935b08458f45d3e0507d87e4701
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_validate_of_class_1_Field_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_validate_of_class_1_Field_of_module_django__forms__fields,
        dparse_function_4_validate_of_class_1_Field_of_module_django__forms__fields,
        _python_str_plain_validate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_03fa83dbe78c95d13f33b2a8fce51570,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields,
        dparse_function_4_widget_attrs_of_class_5_DecimalField_of_module_django__forms__fields,
        _python_str_plain_widget_attrs,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0840d1507656dacc1704985843f630f5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields,
        dparse_function_5__has_changed_of_class_12_FileField_of_module_django__forms__fields,
        _python_str_plain__has_changed,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3dfc7f6047be827cd930d36275510a58,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields,
        dparse_function_5__has_changed_of_class_22_MultiValueField_of_module_django__forms__fields,
        _python_str_plain__has_changed,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_101cf6bf265db1c7b67459654f91ffd0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields,
        dparse_function_5_run_validators_of_class_1_Field_of_module_django__forms__fields,
        _python_str_plain_run_validators,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7ea90519ad92ea07d214f72aebd0638d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields,
        dparse_function_5_to_python_of_class_17_ChoiceField_of_module_django__forms__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8ea9e5ae98e5f68069b013b923d20fa0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_5005faaf64bded0f7427bbedecd8d920
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_clean_of_class_1_Field_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_clean_of_class_1_Field_of_module_django__forms__fields,
        dparse_function_6_clean_of_class_1_Field_of_module_django__forms__fields,
        _python_str_plain_clean,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_089dc4969ae432f3a85465776d9eafa0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_98745f66cc6171931a753fac7c75bf42
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields,
        dparse_function_6_validate_of_class_17_ChoiceField_of_module_django__forms__fields,
        _python_str_plain_validate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6302b285f3dbc140dc1de81b14ef9822,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_947ddf6c095a83277be3a89224e95409
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields,
        dparse_function_7_bound_data_of_class_1_Field_of_module_django__forms__fields,
        _python_str_plain_bound_data,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_db63f9217915f53a97da7b6533e5d185,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_db137b882d561ba8c6bf1c9bbdd6d515
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields,
        dparse_function_7_valid_value_of_class_17_ChoiceField_of_module_django__forms__fields,
        _python_str_plain_valid_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ac7d25a360633818d1571dcd2e4a31bd,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_a205b3bf3b6fbb9ce30d7b162ffee982
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_widget_attrs_of_class_1_Field_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_widget_attrs_of_class_1_Field_of_module_django__forms__fields,
        dparse_function_8_widget_attrs_of_class_1_Field_of_module_django__forms__fields,
        _python_str_plain_widget_attrs,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_38cb9ca7c8e9585ecd4972c7ecdcc71b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_d9639f134f5bbfe577c7d98da8477148
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields,
        dparse_function_9__has_changed_of_class_1_Field_of_module_django__forms__fields,
        _python_str_plain__has_changed,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b0eeea64f6a04702b25cf43e7615e124,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        _python_unicode_digest_2ddf1648d9b3f904f43bdaf13d4eb53a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields,
        dparse_lambda_1_lambda_of_function_1___init___of_class_18_TypedChoiceField_of_module_django__forms__fields,
        _python_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4a046cc398c40c6db0d6e27ad2fb8b91,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields,
        dparse_lambda_1_lambda_of_function_1___init___of_class_20_TypedMultipleChoiceField_of_module_django__forms__fields,
        _python_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7aadcb14e92e42b7d54e87f9c2d278cf,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__forms__fields,
        Py_None
    );

    return result;
}


#if PYTHON_VERSION >= 300
static struct PyModuleDef _moduledef =
{
    PyModuleDef_HEAD_INIT,
    "django.forms.fields",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#define _MODULE_UNFREEZER 0

#if _MODULE_UNFREEZER
// For embedded modules, to be unpacked. Used by main program/package only
extern void registerMetaPathBasedUnfreezer( struct _inittab *_frozen_modules );

// Our own inittab for lookup of "frozen" modules, i.e. the ones included in this binary.
static struct _inittab _frozen_modules[] =
{

    { NULL, NULL }
};

// For loader attribute.
#if PYTHON_VERSION >= 330
extern PyObject *loader_frozen_modules;
#endif

#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( django__forms__fields )
{

#if defined( _NUITKA_EXE ) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Packages can be imported recursively in deep executables.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( _module_django__forms__fields );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    _initConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );

    patchInspectModule();

    patchBuiltinModule();
#endif

#if _MODULE_UNFREEZER
    registerMetaPathBasedUnfreezer( _frozen_modules );
#endif

    // puts( "in initdjango__forms__fields" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    _module_django__forms__fields = Py_InitModule4(
        "django.forms.fields",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    _module_django__forms__fields = PyModule_Create( &_moduledef );
#endif

    _moduledict_django__forms__fields = (PyDictObject *)((PyModuleObject *)_module_django__forms__fields)->md_dict;

    assertObject( _module_django__forms__fields );

#ifndef _NUITKA_MODULE
// Seems to work for Python2.7 out of the box, but for Python3.2, the module
// doesn't automatically enter "sys.modules" with the object that it should, so
// do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), _python_str_digest_8c057bb609340e126205cffce924dfec, _module_django__forms__fields );

        assert( r != -1 );
    }
#endif
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( _module_django__forms__fields );

    if ( PyDict_GetItem( module_dict, _python_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = ( PyObject *)module_builtin;

#ifdef _NUITKA_EXE
        if ( _module_django__forms__fields != _module___main__ )
        {
#endif
            value = PyModule_GetDict( value );
#ifdef _NUITKA_EXE
        }
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, _python_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
#if _MODULE_UNFREEZER
    PyDict_SetItem( module_dict, _python_str_plain___loader__, loader_frozen_modules );
#else
    PyDict_SetItem( module_dict, _python_str_plain___loader__, Py_None );
#endif
#endif

    // Module code
    UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain___doc__, _python_unicode_digest_b085cfd2bca002de899596911398978a );
    UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain___file__, _python_str_digest_3f60bcc8f454789bd361f44ed5923e2d );
    PyFrameObject *frame_module_django__forms__fields = MAKE_FRAME( _codeobj_dcd4bd3a78e524b8c630bab04d195f54, _module_django__forms__fields );

    FrameGuard frame_guard( frame_module_django__forms__fields );
    try
    {
        assert( Py_REFCNT( frame_module_django__forms__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 5 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_absolute_import, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain___future__, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_absolute_import_str_plain_unicode_literals_list, _python_int_0 ) ).asObject(), _python_str_plain_absolute_import ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_unicode_literals, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain___future__, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_absolute_import_str_plain_unicode_literals_list, _python_int_0 ) ).asObject(), _python_str_plain_unicode_literals ) );
        frame_guard.setLineNumber( 7 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_copy, IMPORT_MODULE( _python_str_plain_copy, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, Py_None, _python_int_0 ) );
        frame_guard.setLineNumber( 8 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_datetime, IMPORT_MODULE( _python_str_plain_datetime, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, Py_None, _python_int_0 ) );
        frame_guard.setLineNumber( 9 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_os, IMPORT_MODULE( _python_str_plain_os, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, Py_None, _python_int_0 ) );
        frame_guard.setLineNumber( 10 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_re, IMPORT_MODULE( _python_str_plain_re, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, Py_None, _python_int_0 ) );
        frame_guard.setLineNumber( 11 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_sys, IMPORT_MODULE( _python_str_plain_sys, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, Py_None, _python_int_0 ) );
        frame_guard.setLineNumber( 12 );
        try
        {
            frame_guard.setLineNumber( 13 );
            UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_urlsplit, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_16d628fa9b79bd53ede39389589a2bbf, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_urlsplit_str_plain_urlunsplit_list, _python_int_0 ) ).asObject(), _python_str_plain_urlsplit ) );
            UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_urlunsplit, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_16d628fa9b79bd53ede39389589a2bbf, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_urlsplit_str_plain_urlunsplit_list, _python_int_0 ) ).asObject(), _python_str_plain_urlunsplit ) );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_ImportError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 15 );
                UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_urlsplit, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain_urlparse, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_urlsplit_str_plain_urlunsplit_list, _python_int_0 ) ).asObject(), _python_str_plain_urlsplit ) );
                UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_urlunsplit, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain_urlparse, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_urlsplit_str_plain_urlunsplit_list, _python_int_0 ) ).asObject(), _python_str_plain_urlunsplit ) );
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 16 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_Decimal, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain_decimal, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_Decimal_str_plain_DecimalException_list, _python_int_0 ) ).asObject(), _python_str_plain_Decimal ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_DecimalException, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain_decimal, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_Decimal_str_plain_DecimalException_list, _python_int_0 ) ).asObject(), _python_str_plain_DecimalException ) );
        frame_guard.setLineNumber( 17 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_BytesIO, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain_io, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_BytesIO_list, _python_int_0 ) ).asObject(), _python_str_plain_BytesIO ) );
        frame_guard.setLineNumber( 19 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_validators, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_7fde38a6b8ad78c8ebb1bdff593c9e48, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_validators_list, _python_int_0 ) ).asObject(), _python_str_plain_validators ) );
        frame_guard.setLineNumber( 20 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_ValidationError, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_d9333e07c409926fdd89a4c3c526d0b5, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_ValidationError_list, _python_int_0 ) ).asObject(), _python_str_plain_ValidationError ) );
        frame_guard.setLineNumber( 21 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_ErrorList, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_1b1c01abd93a1fdb33baf4e4eaa9ff68, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_753500ec1e18e4005d8e9a27963de67d_list, _python_int_0 ) ).asObject(), _python_str_plain_ErrorList ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_from_current_timezone, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_1b1c01abd93a1fdb33baf4e4eaa9ff68, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_753500ec1e18e4005d8e9a27963de67d_list, _python_int_0 ) ).asObject(), _python_str_plain_from_current_timezone ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_to_current_timezone, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_1b1c01abd93a1fdb33baf4e4eaa9ff68, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_753500ec1e18e4005d8e9a27963de67d_list, _python_int_0 ) ).asObject(), _python_str_plain_to_current_timezone ) );
        frame_guard.setLineNumber( 22 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_TextInput, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_TextInput ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_NumberInput, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_NumberInput ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_EmailInput, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_EmailInput ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_URLInput, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_URLInput ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_HiddenInput, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_HiddenInput ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_MultipleHiddenInput, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_MultipleHiddenInput ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_ClearableFileInput, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_ClearableFileInput ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_CheckboxInput, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_CheckboxInput ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_Select, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_Select ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_NullBooleanSelect, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_NullBooleanSelect ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_SelectMultiple, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_SelectMultiple ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_DateInput, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_DateInput ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_DateTimeInput, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_DateTimeInput ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_TimeInput, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_TimeInput ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_SplitDateTimeWidget, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_SplitDateTimeWidget ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_SplitHiddenDateTimeWidget, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_SplitHiddenDateTimeWidget ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_FILE_INPUT_CONTRADICTION, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_ebcfe8698ad1f8c100f227e6473faf3f, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_967fae51b82c1707210b4d8fd56d2158_list, _python_int_0 ) ).asObject(), _python_str_plain_FILE_INPUT_CONTRADICTION ) );
        frame_guard.setLineNumber( 28 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_formats, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_11a3eb3229bb1ce81f02aa3fc01149d5, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_formats_list, _python_int_0 ) ).asObject(), _python_str_plain_formats ) );
        frame_guard.setLineNumber( 29 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_smart_text, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_5c6adb5fc6275b5d2a085f73ed00809a, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_15c2383e3bea81ffa92d25911987642f_list, _python_int_0 ) ).asObject(), _python_str_plain_smart_text ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_force_str, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_5c6adb5fc6275b5d2a085f73ed00809a, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_15c2383e3bea81ffa92d25911987642f_list, _python_int_0 ) ).asObject(), _python_str_plain_force_str ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_force_text, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_5c6adb5fc6275b5d2a085f73ed00809a, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_15c2383e3bea81ffa92d25911987642f_list, _python_int_0 ) ).asObject(), _python_str_plain_force_text ) );
        frame_guard.setLineNumber( 30 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_clean_ipv6_address, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_90cf4892b45b061f358c9921c88e39d3, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_clean_ipv6_address_list, _python_int_0 ) ).asObject(), _python_str_plain_clean_ipv6_address ) );
        frame_guard.setLineNumber( 31 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_six, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_11a3eb3229bb1ce81f02aa3fc01149d5, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_six_list, _python_int_0 ) ).asObject(), _python_str_plain_six ) );
        frame_guard.setLineNumber( 32 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain__, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_695d25035a0d5e79b21b6e2fa3e00631, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_ugettext_lazy_str_plain_ungettext_lazy_list, _python_int_0 ) ).asObject(), _python_str_plain_ugettext_lazy ) );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_ungettext_lazy, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_695d25035a0d5e79b21b6e2fa3e00631, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_ugettext_lazy_str_plain_ungettext_lazy_list, _python_int_0 ) ).asObject(), _python_str_plain_ungettext_lazy ) );
        frame_guard.setLineNumber( 35 );
        UPDATE_STRING_DICT1( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_EMPTY_VALUES, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_317f7529d7732659ef74f324fd6716af, ((PyModuleObject *)_module_django__forms__fields)->md_dict, ((PyModuleObject *)_module_django__forms__fields)->md_dict, _python_list_str_plain_EMPTY_VALUES_list, _python_int_0 ) ).asObject(), _python_str_plain_EMPTY_VALUES ) );
        UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain___all__, _python_tuple_6faa3f5b8a1e9eb6ae2d85bacbc75ab4_tuple );
        {
            frame_guard.setLineNumber( 49 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_1_Field_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 call3;
                _tmp_python_tmp_class = ( call1.assign( _python_tmp_metaclass.asObject() ), call3.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_str_plain_Field, call3.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_Field, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 202 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_2_CharField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call5;
                PyObjectTempKeeper0 call7;
                _tmp_python_tmp_class = ( call5.assign( _python_tmp_metaclass.asObject() ), call7.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_str_plain_CharField, call7.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_CharField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 225 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_3_IntegerField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call11;
                PyObjectTempKeeper0 call9;
                _tmp_python_tmp_class = ( call9.assign( _python_tmp_metaclass.asObject() ), call11.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_str_plain_IntegerField, call11.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_IntegerField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 266 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_IntegerField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_4_FloatField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call13;
                PyObjectTempKeeper0 call15;
                _tmp_python_tmp_class = ( call13.assign( _python_tmp_metaclass.asObject() ), call15.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), _python_str_plain_FloatField, call15.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_FloatField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 294 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_IntegerField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_5_DecimalField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call17;
                PyObjectTempKeeper0 call19;
                _tmp_python_tmp_class = ( call17.assign( _python_tmp_metaclass.asObject() ), call19.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), _python_str_plain_DecimalField, call19.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_DecimalField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 379 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_6_BaseTemporalField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call21;
                PyObjectTempKeeper0 call23;
                _tmp_python_tmp_class = ( call21.assign( _python_tmp_metaclass.asObject() ), call23.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call21.asObject0(), _python_str_plain_BaseTemporalField, call23.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_BaseTemporalField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 404 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_BaseTemporalField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_7_DateField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call25;
                PyObjectTempKeeper0 call27;
                _tmp_python_tmp_class = ( call25.assign( _python_tmp_metaclass.asObject() ), call27.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call25.asObject0(), _python_str_plain_DateField, call27.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_DateField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 428 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_BaseTemporalField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_8_TimeField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call29;
                PyObjectTempKeeper0 call31;
                _tmp_python_tmp_class = ( call29.assign( _python_tmp_metaclass.asObject() ), call31.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call29.asObject0(), _python_str_plain_TimeField, call31.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_TimeField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 450 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_BaseTemporalField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_9_DateTimeField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call33;
                PyObjectTempKeeper0 call35;
                _tmp_python_tmp_class = ( call33.assign( _python_tmp_metaclass.asObject() ), call35.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call33.asObject0(), _python_str_plain_DateTimeField, call35.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_DateTimeField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 489 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_CharField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_10_RegexField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call37;
                PyObjectTempKeeper0 call39;
                _tmp_python_tmp_class = ( call37.assign( _python_tmp_metaclass.asObject() ), call39.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call37.asObject0(), _python_str_plain_RegexField, call39.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_RegexField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 519 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_CharField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_11_EmailField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call41;
                PyObjectTempKeeper0 call43;
                _tmp_python_tmp_class = ( call41.assign( _python_tmp_metaclass.asObject() ), call43.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call41.asObject0(), _python_str_plain_EmailField, call43.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_EmailField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 528 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_12_FileField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call45;
                PyObjectTempKeeper0 call47;
                _tmp_python_tmp_class = ( call45.assign( _python_tmp_metaclass.asObject() ), call47.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call45.asObject0(), _python_str_plain_FileField, call47.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_FileField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 597 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_FileField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_13_ImageField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call49;
                PyObjectTempKeeper0 call51;
                _tmp_python_tmp_class = ( call49.assign( _python_tmp_metaclass.asObject() ), call51.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call49.asObject0(), _python_str_plain_ImageField, call51.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_ImageField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 636 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_CharField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_14_URLField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call53;
                PyObjectTempKeeper0 call55;
                _tmp_python_tmp_class = ( call53.assign( _python_tmp_metaclass.asObject() ), call55.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call53.asObject0(), _python_str_plain_URLField, call55.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_URLField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 685 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_15_BooleanField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call57;
                PyObjectTempKeeper0 call59;
                _tmp_python_tmp_class = ( call57.assign( _python_tmp_metaclass.asObject() ), call59.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call57.asObject0(), _python_str_plain_BooleanField, call59.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_BooleanField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 713 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_BooleanField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_16_NullBooleanField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call61;
                PyObjectTempKeeper0 call63;
                _tmp_python_tmp_class = ( call61.assign( _python_tmp_metaclass.asObject() ), call63.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call61.asObject0(), _python_str_plain_NullBooleanField, call63.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_NullBooleanField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 746 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_17_ChoiceField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call65;
                PyObjectTempKeeper0 call67;
                _tmp_python_tmp_class = ( call65.assign( _python_tmp_metaclass.asObject() ), call67.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call65.asObject0(), _python_str_plain_ChoiceField, call67.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_ChoiceField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 803 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_ChoiceField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_18_TypedChoiceField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call69;
                PyObjectTempKeeper0 call71;
                _tmp_python_tmp_class = ( call69.assign( _python_tmp_metaclass.asObject() ), call71.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call69.asObject0(), _python_str_plain_TypedChoiceField, call71.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_TypedChoiceField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 824 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_ChoiceField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_19_MultipleChoiceField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call73;
                PyObjectTempKeeper0 call75;
                _tmp_python_tmp_class = ( call73.assign( _python_tmp_metaclass.asObject() ), call75.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call73.asObject0(), _python_str_plain_MultipleChoiceField, call75.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_MultipleChoiceField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 862 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_MultipleChoiceField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_20_TypedMultipleChoiceField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call77;
                PyObjectTempKeeper0 call79;
                _tmp_python_tmp_class = ( call77.assign( _python_tmp_metaclass.asObject() ), call79.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call77.asObject0(), _python_str_plain_TypedMultipleChoiceField, call79.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_TypedMultipleChoiceField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 891 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_21_ComboField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call81;
                PyObjectTempKeeper0 call83;
                _tmp_python_tmp_class = ( call81.assign( _python_tmp_metaclass.asObject() ), call83.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call81.asObject0(), _python_str_plain_ComboField, call83.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_ComboField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 915 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_22_MultiValueField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call85;
                PyObjectTempKeeper0 call87;
                _tmp_python_tmp_class = ( call85.assign( _python_tmp_metaclass.asObject() ), call87.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call85.asObject0(), _python_str_plain_MultiValueField, call87.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_MultiValueField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1012 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_ChoiceField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_23_FilePathField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call89;
                PyObjectTempKeeper0 call91;
                _tmp_python_tmp_class = ( call89.assign( _python_tmp_metaclass.asObject() ), call91.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call89.asObject0(), _python_str_plain_FilePathField, call91.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_FilePathField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1060 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_MultiValueField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_24_SplitDateTimeField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call93;
                PyObjectTempKeeper0 call95;
                _tmp_python_tmp_class = ( call93.assign( _python_tmp_metaclass.asObject() ), call95.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call93.asObject0(), _python_str_plain_SplitDateTimeField, call95.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_SplitDateTimeField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1096 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_CharField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_25_IPAddressField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call97;
                PyObjectTempKeeper0 call99;
                _tmp_python_tmp_class = ( call97.assign( _python_tmp_metaclass.asObject() ), call99.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call97.asObject0(), _python_str_plain_IPAddressField, call99.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_IPAddressField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1105 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_CharField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_26_GenericIPAddressField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call101;
                PyObjectTempKeeper0 call103;
                _tmp_python_tmp_class = ( call101.assign( _python_tmp_metaclass.asObject() ), call103.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call101.asObject0(), _python_str_plain_GenericIPAddressField, call103.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_GenericIPAddressField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1120 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__forms__fields_CharField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_27_SlugField_of_module_django__forms__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__forms__fields___metaclass__.isInitialized( false ) ? _mvar_django__forms__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call105;
                PyObjectTempKeeper0 call107;
                _tmp_python_tmp_class = ( call105.assign( _python_tmp_metaclass.asObject() ), call107.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call105.asObject0(), _python_str_plain_SlugField, call107.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__forms__fields, (Nuitka_StringObject *)_python_str_plain_SlugField, _python_tmp_class.asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

#if 0
    // TODO: Recognize the need for it
        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = INCREASE_REFCOUNT( ((PyModuleObject *)_module_django__forms__fields)->md_dict );
#endif

    // Return the error.
        _exception.toPython();
        return MOD_RETURN_VALUE( NULL );
    }

   return MOD_RETURN_VALUE( _module_django__forms__fields );
}
