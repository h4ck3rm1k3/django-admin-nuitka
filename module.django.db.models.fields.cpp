// Generated code for Python source for module 'django.db.models.fields'
// created by Nuitka version 0.4.4pre3

// This code is in part copyright 2013 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__modules.hpp"
#include "__constants.hpp"
#include "__helpers.hpp"

// The _module_django__db__models__fields is a Python object pointer of module type.

// Note: For full compatability with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *_module_django__db__models__fields;
PyDictObject *_moduledict_django__db__models__fields;

// The module level variables.
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_AutoField( &_module_django__db__models__fields, &_python_str_plain_AutoField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_BLANK_CHOICE_DASH( &_module_django__db__models__fields, &_python_str_plain_BLANK_CHOICE_DASH );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_BigIntegerField( &_module_django__db__models__fields, &_python_str_plain_BigIntegerField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_BinaryField( &_module_django__db__models__fields, &_python_str_plain_BinaryField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_BooleanField( &_module_django__db__models__fields, &_python_str_plain_BooleanField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_CharField( &_module_django__db__models__fields, &_python_str_plain_CharField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_CommaSeparatedIntegerField( &_module_django__db__models__fields, &_python_str_plain_CommaSeparatedIntegerField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_DateField( &_module_django__db__models__fields, &_python_str_plain_DateField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_DateTimeField( &_module_django__db__models__fields, &_python_str_plain_DateTimeField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_DecimalField( &_module_django__db__models__fields, &_python_str_plain_DecimalField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_DictWrapper( &_module_django__db__models__fields, &_python_str_plain_DictWrapper );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_EmailField( &_module_django__db__models__fields, &_python_str_plain_EmailField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_Empty( &_module_django__db__models__fields, &_python_str_plain_Empty );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_Field( &_module_django__db__models__fields, &_python_str_plain_Field );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_FilePathField( &_module_django__db__models__fields, &_python_str_plain_FilePathField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_FloatField( &_module_django__db__models__fields, &_python_str_plain_FloatField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_GenericIPAddressField( &_module_django__db__models__fields, &_python_str_plain_GenericIPAddressField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_IPAddressField( &_module_django__db__models__fields, &_python_str_plain_IPAddressField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_IntegerField( &_module_django__db__models__fields, &_python_str_plain_IntegerField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_NOT_PROVIDED( &_module_django__db__models__fields, &_python_str_plain_NOT_PROVIDED );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_NullBooleanField( &_module_django__db__models__fields, &_python_str_plain_NullBooleanField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_PositiveIntegerField( &_module_django__db__models__fields, &_python_str_plain_PositiveIntegerField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_PositiveSmallIntegerField( &_module_django__db__models__fields, &_python_str_plain_PositiveSmallIntegerField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_QueryWrapper( &_module_django__db__models__fields, &_python_str_plain_QueryWrapper );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_RuntimeWarning( &_module_django__db__models__fields, &_python_str_plain_RuntimeWarning );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_SlugField( &_module_django__db__models__fields, &_python_str_plain_SlugField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_TextField( &_module_django__db__models__fields, &_python_str_plain_TextField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_TimeField( &_module_django__db__models__fields, &_python_str_plain_TimeField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_URLField( &_module_django__db__models__fields, &_python_str_plain_URLField );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields__( &_module_django__db__models__fields, &_python_str_plain__ );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields___metaclass__( &_module_django__db__models__fields, &_python_str_plain___metaclass__ );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields__empty( &_module_django__db__models__fields, &_python_str_plain__empty );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields__load_field( &_module_django__db__models__fields, &_python_str_plain__load_field );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_b64decode( &_module_django__db__models__fields, &_python_str_plain_b64decode );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_b64encode( &_module_django__db__models__fields, &_python_str_plain_b64encode );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_capfirst( &_module_django__db__models__fields, &_python_str_plain_capfirst );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_clean_ipv6_address( &_module_django__db__models__fields, &_python_str_plain_clean_ipv6_address );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_connection( &_module_django__db__models__fields, &_python_str_plain_connection );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_copy( &_module_django__db__models__fields, &_python_str_plain_copy );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_curry( &_module_django__db__models__fields, &_python_str_plain_curry );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_datetime( &_module_django__db__models__fields, &_python_str_plain_datetime );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_decimal( &_module_django__db__models__fields, &_python_str_plain_decimal );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_exceptions( &_module_django__db__models__fields, &_python_str_plain_exceptions );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_force_bytes( &_module_django__db__models__fields, &_python_str_plain_force_bytes );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_force_text( &_module_django__db__models__fields, &_python_str_plain_force_text );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_forms( &_module_django__db__models__fields, &_python_str_plain_forms );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_get_model( &_module_django__db__models__fields, &_python_str_plain_get_model );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_is_iterator( &_module_django__db__models__fields, &_python_str_plain_is_iterator );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_math( &_module_django__db__models__fields, &_python_str_plain_math );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_parse_date( &_module_django__db__models__fields, &_python_str_plain_parse_date );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_parse_datetime( &_module_django__db__models__fields, &_python_str_plain_parse_datetime );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_parse_time( &_module_django__db__models__fields, &_python_str_plain_parse_time );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_settings( &_module_django__db__models__fields, &_python_str_plain_settings );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_six( &_module_django__db__models__fields, &_python_str_plain_six );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_smart_text( &_module_django__db__models__fields, &_python_str_plain_smart_text );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_tee( &_module_django__db__models__fields, &_python_str_plain_tee );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_timezone( &_module_django__db__models__fields, &_python_str_plain_timezone );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_total_ordering( &_module_django__db__models__fields, &_python_str_plain_total_ordering );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_validators( &_module_django__db__models__fields, &_python_str_plain_validators );
static PyObjectGlobalVariable_django__db__models__fields _mvar_django__db__models__fields_warnings( &_module_django__db__models__fields, &_python_str_plain_warnings );

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_Empty_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_2_NOT_PROVIDED_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_4_FieldDoesNotExist_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_6_Field_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &python_closure_self, PyObjectLocalVariable &python_closure_v );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &python_closure_connection, PyObjectLocalParameterVariableNoDel &python_closure_prepared, PyObjectLocalParameterVariableNoDel &python_closure_self, PyObjectLocalVariable &python_closure_v );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &python_closure_self, PyObjectLocalVariable &python_closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields( PyObject *_python_par___iterator, PyObjectLocalVariable &python_closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_class_7_AutoField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_8_BooleanField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_9_CharField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_11_DateField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_12_DateTimeField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_13_DecimalField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_14_EmailField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_15_FilePathField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_16_FloatField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_17_IntegerField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_18_BigIntegerField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_19_IPAddressField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_20_GenericIPAddressField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_21_NullBooleanField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_22_PositiveIntegerField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_24_SlugField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_25_SmallIntegerField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_26_TextField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_27_TimeField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_28_URLField_of_module_django__db__models__fields(  );


NUITKA_LOCAL_MODULE PyObject *impl_class_29_BinaryField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_11_validate_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_12_clean_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_14_unique_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_11_DateField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_28_URLField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_9_CharField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1__description_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1_get_internal_type_of_class_12_DateTimeField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1_get_internal_type_of_class_18_BigIntegerField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1_get_internal_type_of_class_22_PositiveIntegerField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1_get_internal_type_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1_get_internal_type_of_class_25_SmallIntegerField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1_get_internal_type_of_class_26_TextField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2___init___of_class_6_Field_of_module_django__db__models__fields( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_11_DateField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_13_DecimalField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_16_FloatField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_19_IPAddressField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_21_NullBooleanField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_24_SlugField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_27_TimeField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_29_BinaryField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_7_AutoField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_8_BooleanField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_9_CharField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_35_bind_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3___eq___of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3__load_field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3_get_internal_type_of_class_15_FilePathField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3_get_internal_type_of_class_17_IntegerField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_41___repr___of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_4___lt___of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_4_validate_of_class_7_AutoField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_5___hash___of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_5__empty_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_7___copy___of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_8_formfield_of_class_7_AutoField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields(  );


static PyObject *MAKE_FUNCTION_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields(  );


// The module function definitions.
NUITKA_LOCAL_MODULE PyObject *impl_class_1_Empty_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    return _python_var___module__.updateLocalsDict( PyDict_New() );
}


NUITKA_LOCAL_MODULE PyObject *impl_class_2_NOT_PROVIDED_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    return _python_var___module__.updateLocalsDict( PyDict_New() );
}


static PyObject *impl_function_3__load_field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_app_label, PyObject *_python_par_model_name, PyObject *_python_par_field_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_app_label( _python_str_plain_app_label, _python_par_app_label );
    PyObjectLocalParameterVariableNoDel _python_var_model_name( _python_str_plain_model_name, _python_par_model_name );
    PyObjectLocalParameterVariableNoDel _python_var_field_name( _python_str_plain_field_name, _python_par_field_name );

    // Actual function code.
    static PyFrameObject *frame_function_3__load_field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_3__load_field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_3__load_field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3__load_field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_3__load_field_of_module_django__db__models__fields );
        }

        frame_function_3__load_field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_44d3465747641f3842d3b8d4dc868ec2, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_3__load_field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3__load_field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 39 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            PyObjectTempKeeper1 call4;
            return LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( ( call4.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( _mvar_django__db__models__fields_get_model.asObject0() ), call2.assign( _python_var_app_label.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_model_name.asObject() ) ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_get_field_by_name ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_field_name.asObject() ) ) ).asObject(), _python_int_0, 0 );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_field_name.updateLocalsDict( _python_var_model_name.updateLocalsDict( _python_var_app_label.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3__load_field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_3__load_field_of_module_django__db__models__fields );
           frame_function_3__load_field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3__load_field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_app_label = NULL;
    PyObject *_python_par_model_name = NULL;
    PyObject *_python_par_field_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_load_field() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_app_label == key )
            {
                if (unlikely( _python_par_app_label ))
                {
                    PyErr_Format( PyExc_TypeError, "_load_field() got multiple values for keyword argument 'app_label'" );
                    goto error_exit;
                }

                _python_par_app_label = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model_name == key )
            {
                if (unlikely( _python_par_model_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_load_field() got multiple values for keyword argument 'model_name'" );
                    goto error_exit;
                }

                _python_par_model_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_field_name == key )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_load_field() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_app_label, key ) )
            {
                if (unlikely( _python_par_app_label ))
                {
                    PyErr_Format( PyExc_TypeError, "_load_field() got multiple values for keyword argument 'app_label'" );
                    goto error_exit;
                }

                _python_par_app_label = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model_name, key ) )
            {
                if (unlikely( _python_par_model_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_load_field() got multiple values for keyword argument 'model_name'" );
                    goto error_exit;
                }

                _python_par_model_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_field_name, key ) )
            {
                if (unlikely( _python_par_field_name ))
                {
                    PyErr_Format( PyExc_TypeError, "_load_field() got multiple values for keyword argument 'field_name'" );
                    goto error_exit;
                }

                _python_par_field_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_load_field() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_load_field() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_load_field() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_load_field() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_load_field() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_load_field() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_load_field() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "_load_field() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_load_field() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_load_field() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_load_field() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "_load_field() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_load_field() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_app_label != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_load_field() got multiple values for keyword argument 'app_label'" );
             goto error_exit;
         }

        _python_par_app_label = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_model_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_load_field() got multiple values for keyword argument 'model_name'" );
             goto error_exit;
         }

        _python_par_model_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_field_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_load_field() got multiple values for keyword argument 'field_name'" );
             goto error_exit;
         }

        _python_par_field_name = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_3__load_field_of_module_django__db__models__fields( self, _python_par_app_label, _python_par_model_name, _python_par_field_name );

error_exit:;

    Py_XDECREF( _python_par_app_label );
    Py_XDECREF( _python_par_model_name );
    Py_XDECREF( _python_par_field_name );

    return NULL;
}

static PyObject *dparse_function_3__load_field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_3__load_field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3__load_field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_4_FieldDoesNotExist_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    return _python_var___module__.updateLocalsDict( PyDict_New() );
}


static PyObject *impl_function_5__empty_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_of_cls )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_of_cls( _python_str_plain_of_cls, _python_par_of_cls );
    PyObjectLocalVariable _python_var_new( _python_str_plain_new );

    // Actual function code.
    static PyFrameObject *frame_function_5__empty_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_5__empty_of_module_django__db__models__fields ) )
    {
        if ( frame_function_5__empty_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5__empty_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_5__empty_of_module_django__db__models__fields );
        }

        frame_function_5__empty_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_ccd085ba95281099cfcc09010412360b, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_5__empty_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5__empty_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 60 );
        _python_var_new.assign1( CALL_FUNCTION_NO_ARGS( _mvar_django__db__models__fields_Empty.asObject0() ) );
        frame_guard.setLineNumber( 61 );
        {
                PyObject *tmp_identifier = _python_var_of_cls.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_new.asObject(), _python_str_plain___class__ );
        }
        frame_guard.setLineNumber( 62 );
        return _python_var_new.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_of_cls.updateLocalsDict( _python_var_new.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_5__empty_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_5__empty_of_module_django__db__models__fields );
           frame_function_5__empty_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5__empty_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_of_cls = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_empty() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_of_cls == key )
            {
                if (unlikely( _python_par_of_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "_empty() got multiple values for keyword argument 'of_cls'" );
                    goto error_exit;
                }

                _python_par_of_cls = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_of_cls, key ) )
            {
                if (unlikely( _python_par_of_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "_empty() got multiple values for keyword argument 'of_cls'" );
                    goto error_exit;
                }

                _python_par_of_cls = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_empty() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_empty() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_empty() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_empty() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_empty() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_empty() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_empty() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_empty() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_empty() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_empty() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_empty() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_empty() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_empty() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_of_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_empty() got multiple values for keyword argument 'of_cls'" );
             goto error_exit;
         }

        _python_par_of_cls = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5__empty_of_module_django__db__models__fields( self, _python_par_of_cls );

error_exit:;

    Py_XDECREF( _python_par_of_cls );

    return NULL;
}

static PyObject *dparse_function_5__empty_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5__empty_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5__empty_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_6_Field_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var___doc__( _python_str_plain___doc__ );
    PyObjectLocalVariable _python_var_empty_strings_allowed( _python_str_plain_empty_strings_allowed );
    PyObjectLocalVariable _python_var_empty_values( _python_str_plain_empty_values );
    PyObjectLocalVariable _python_var_creation_counter( _python_str_plain_creation_counter );
    PyObjectLocalVariable _python_var_auto_creation_counter( _python_str_plain_auto_creation_counter );
    PyObjectLocalVariable _python_var_default_validators( _python_str_plain_default_validators );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var__description( _python_str_plain__description );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var___eq__( _python_str_plain___eq__ );
    PyObjectLocalVariable _python_var___lt__( _python_str_plain___lt__ );
    PyObjectLocalVariable _python_var___hash__( _python_str_plain___hash__ );
    PyObjectLocalVariable _python_var___deepcopy__( _python_str_plain___deepcopy__ );
    PyObjectLocalVariable _python_var___copy__( _python_str_plain___copy__ );
    PyObjectLocalVariable _python_var___reduce__( _python_str_plain___reduce__ );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_run_validators( _python_str_plain_run_validators );
    PyObjectLocalVariable _python_var_validate( _python_str_plain_validate );
    PyObjectLocalVariable _python_var_clean( _python_str_plain_clean );
    PyObjectLocalVariable _python_var_db_type( _python_str_plain_db_type );
    PyObjectLocalVariable _python_var_unique( _python_str_plain_unique );
    PyObjectLocalVariable _python_var_set_attributes_from_name( _python_str_plain_set_attributes_from_name );
    PyObjectLocalVariable _python_var_contribute_to_class( _python_str_plain_contribute_to_class );
    PyObjectLocalVariable _python_var_get_attname( _python_str_plain_get_attname );
    PyObjectLocalVariable _python_var_get_attname_column( _python_str_plain_get_attname_column );
    PyObjectLocalVariable _python_var_get_cache_name( _python_str_plain_get_cache_name );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_pre_save( _python_str_plain_pre_save );
    PyObjectLocalVariable _python_var_get_prep_value( _python_str_plain_get_prep_value );
    PyObjectLocalVariable _python_var_get_db_prep_value( _python_str_plain_get_db_prep_value );
    PyObjectLocalVariable _python_var_get_db_prep_save( _python_str_plain_get_db_prep_save );
    PyObjectLocalVariable _python_var_get_prep_lookup( _python_str_plain_get_prep_lookup );
    PyObjectLocalVariable _python_var_get_db_prep_lookup( _python_str_plain_get_db_prep_lookup );
    PyObjectLocalVariable _python_var_has_default( _python_str_plain_has_default );
    PyObjectLocalVariable _python_var_get_default( _python_str_plain_get_default );
    PyObjectLocalVariable _python_var_get_validator_unique_lookup_type( _python_str_plain_get_validator_unique_lookup_type );
    PyObjectLocalVariable _python_var_get_choices( _python_str_plain_get_choices );
    PyObjectLocalVariable _python_var_get_choices_default( _python_str_plain_get_choices_default );
    PyObjectLocalVariable _python_var_get_flatchoices( _python_str_plain_get_flatchoices );
    PyObjectLocalVariable _python_var__get_val_from_obj( _python_str_plain__get_val_from_obj );
    PyObjectLocalVariable _python_var_value_to_string( _python_str_plain_value_to_string );
    PyObjectLocalVariable _python_var_bind( _python_str_plain_bind );
    PyObjectLocalVariable _python_var__get_choices( _python_str_plain__get_choices );
    PyObjectLocalVariable _python_var_choices( _python_str_plain_choices );
    PyObjectLocalVariable _python_var__get_flatchoices( _python_str_plain__get_flatchoices );
    PyObjectLocalVariable _python_var_flatchoices( _python_str_plain_flatchoices );
    PyObjectLocalVariable _python_var_save_form_data( _python_str_plain_save_form_data );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );
    PyObjectLocalVariable _python_var_value_from_object( _python_str_plain_value_from_object );
    PyObjectLocalVariable _python_var___repr__( _python_str_plain___repr__ );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var___doc__.assign0( _python_unicode_digest_e14af2eb2cc4eb36f33adec4cda4448b );
    _python_var_empty_strings_allowed.assign0( Py_True );
    static PyFrameObject *frame_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_6_Field_of_module_django__db__models__fields );
        }

        frame_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_0e9e72de018bb27096b061066c45b156, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 71 );
        _python_var_empty_values.assign1( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_validators.asObject0(), _python_str_plain_EMPTY_VALUES ) ).asObject() ) );
        _python_var_creation_counter.assign0( _python_int_0 );
        _python_var_auto_creation_counter.assign0( _python_int_neg_1 );
        _python_var_default_validators.assign1( PyList_New( 0 ) );
        frame_guard.setLineNumber( 79 );
        {
            PyObjectTempKeeper1 make_dict1;
            PyObjectTempKeeper1 make_dict3;
            PyObjectTempKeeper1 make_dict5;
            _python_var_default_error_messages.assign1( ( make_dict1.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_dca701458b399a5c0247d178b6c77e6b ) ), make_dict3.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_99a9106e7d72e6c62a7e2a0cc4abf7dd ) ), make_dict5.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_d77310f7a04aa39b9ed9afc3bedb15c1 ) ), MAKE_DICT4( make_dict1.asObject0(), _python_unicode_plain_invalid_choice, make_dict3.asObject0(), _python_unicode_plain_null, make_dict5.asObject0(), _python_unicode_plain_blank, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_6e5d390bd0b4bd60443d8cff715a1066 ) ).asObject(), _python_unicode_plain_unique ) ) );
        }
        _python_var__description.assign1( MAKE_FUNCTION_function_1__description_of_class_6_Field_of_module_django__db__models__fields(  ) );
        frame_guard.setLineNumber( 92 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), _python_var__description.asObject() ) );
        frame_guard.setLineNumber( 94 );
        _python_var___init__.assign1( MAKE_FUNCTION_function_2___init___of_class_6_Field_of_module_django__db__models__fields( MAKE_TUPLE22( Py_None, Py_None, Py_False, Py_None, Py_False, Py_False, Py_False, Py_False, Py_None, _mvar_django__db__models__fields_NOT_PROVIDED.asObject0(), Py_True, Py_True, Py_None, Py_None, Py_None, Py_None, _python_unicode_empty, Py_None, Py_None, Py_False, PyObjectTemporary( PyList_New( 0 ) ).asObject(), Py_None ) ) );
        _python_var___eq__.assign1( MAKE_FUNCTION_function_3___eq___of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var___lt__.assign1( MAKE_FUNCTION_function_4___lt___of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var___hash__.assign1( MAKE_FUNCTION_function_5___hash___of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var___deepcopy__.assign1( MAKE_FUNCTION_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var___copy__.assign1( MAKE_FUNCTION_function_7___copy___of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var___reduce__.assign1( MAKE_FUNCTION_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_to_python.assign1( MAKE_FUNCTION_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_run_validators.assign1( MAKE_FUNCTION_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_validate.assign1( MAKE_FUNCTION_function_11_validate_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_clean.assign1( MAKE_FUNCTION_function_12_clean_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_db_type.assign1( MAKE_FUNCTION_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields(  ) );
        frame_guard.setLineNumber( 286 );
        _python_var_unique.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_14_unique_of_class_6_Field_of_module_django__db__models__fields(  ) ).asObject() ) );
        _python_var_set_attributes_from_name.assign1( MAKE_FUNCTION_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_contribute_to_class.assign1( MAKE_FUNCTION_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_get_attname.assign1( MAKE_FUNCTION_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_get_attname_column.assign1( MAKE_FUNCTION_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_get_cache_name.assign1( MAKE_FUNCTION_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_pre_save.assign1( MAKE_FUNCTION_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_get_prep_value.assign1( MAKE_FUNCTION_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_get_db_prep_value.assign1( MAKE_FUNCTION_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_get_db_prep_save.assign1( MAKE_FUNCTION_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_get_prep_lookup.assign1( MAKE_FUNCTION_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_get_db_prep_lookup.assign1( MAKE_FUNCTION_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_has_default.assign1( MAKE_FUNCTION_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_get_default.assign1( MAKE_FUNCTION_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_get_validator_unique_lookup_type.assign1( MAKE_FUNCTION_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields(  ) );
        frame_guard.setLineNumber( 450 );
        _python_var_get_choices.assign1( MAKE_FUNCTION_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields( MAKE_TUPLE2( Py_True, _mvar_django__db__models__fields_BLANK_CHOICE_DASH.asObject0() ) ) );
        _python_var_get_choices_default.assign1( MAKE_FUNCTION_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields(  ) );
        frame_guard.setLineNumber( 471 );
        _python_var_get_flatchoices.assign1( MAKE_FUNCTION_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields( MAKE_TUPLE2( Py_True, _mvar_django__db__models__fields_BLANK_CHOICE_DASH.asObject0() ) ) );
        _python_var__get_val_from_obj.assign1( MAKE_FUNCTION_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_value_to_string.assign1( MAKE_FUNCTION_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var_bind.assign1( MAKE_FUNCTION_function_35_bind_of_class_6_Field_of_module_django__db__models__fields(  ) );
        _python_var__get_choices.assign1( MAKE_FUNCTION_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields(  ) );
        frame_guard.setLineNumber( 501 );
        _python_var_choices.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), _python_var__get_choices.asObject() ) );
        _python_var__get_flatchoices.assign1( MAKE_FUNCTION_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields(  ) );
        frame_guard.setLineNumber( 512 );
        _python_var_flatchoices.assign1( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_property ), _python_var__get_flatchoices.asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var___repr__.updateLocalsDict( _python_var_value_from_object.updateLocalsDict( _python_var_formfield.updateLocalsDict( _python_var_save_form_data.updateLocalsDict( _python_var_flatchoices.updateLocalsDict( _python_var__get_flatchoices.updateLocalsDict( _python_var_choices.updateLocalsDict( _python_var__get_choices.updateLocalsDict( _python_var_bind.updateLocalsDict( _python_var_value_to_string.updateLocalsDict( _python_var__get_val_from_obj.updateLocalsDict( _python_var_get_flatchoices.updateLocalsDict( _python_var_get_choices_default.updateLocalsDict( _python_var_get_choices.updateLocalsDict( _python_var_get_validator_unique_lookup_type.updateLocalsDict( _python_var_get_default.updateLocalsDict( _python_var_has_default.updateLocalsDict( _python_var_get_db_prep_lookup.updateLocalsDict( _python_var_get_prep_lookup.updateLocalsDict( _python_var_get_db_prep_save.updateLocalsDict( _python_var_get_db_prep_value.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_pre_save.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var_get_cache_name.updateLocalsDict( _python_var_get_attname_column.updateLocalsDict( _python_var_get_attname.updateLocalsDict( _python_var_contribute_to_class.updateLocalsDict( _python_var_set_attributes_from_name.updateLocalsDict( _python_var_unique.updateLocalsDict( _python_var_db_type.updateLocalsDict( _python_var_clean.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_run_validators.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var___reduce__.updateLocalsDict( _python_var___copy__.updateLocalsDict( _python_var___deepcopy__.updateLocalsDict( _python_var___hash__.updateLocalsDict( _python_var___lt__.updateLocalsDict( _python_var___eq__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var__description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_default_validators.updateLocalsDict( _python_var_auto_creation_counter.updateLocalsDict( _python_var_creation_counter.updateLocalsDict( _python_var_empty_values.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_6_Field_of_module_django__db__models__fields );
           frame_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var_save_form_data.assign1( MAKE_FUNCTION_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields(  ) );
    _python_var_value_from_object.assign1( MAKE_FUNCTION_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields(  ) );
    _python_var___repr__.assign1( MAKE_FUNCTION_function_41___repr___of_class_6_Field_of_module_django__db__models__fields(  ) );
    return _python_var___repr__.updateLocalsDict( _python_var_value_from_object.updateLocalsDict( _python_var_formfield.updateLocalsDict( _python_var_save_form_data.updateLocalsDict( _python_var_flatchoices.updateLocalsDict( _python_var__get_flatchoices.updateLocalsDict( _python_var_choices.updateLocalsDict( _python_var__get_choices.updateLocalsDict( _python_var_bind.updateLocalsDict( _python_var_value_to_string.updateLocalsDict( _python_var__get_val_from_obj.updateLocalsDict( _python_var_get_flatchoices.updateLocalsDict( _python_var_get_choices_default.updateLocalsDict( _python_var_get_choices.updateLocalsDict( _python_var_get_validator_unique_lookup_type.updateLocalsDict( _python_var_get_default.updateLocalsDict( _python_var_has_default.updateLocalsDict( _python_var_get_db_prep_lookup.updateLocalsDict( _python_var_get_prep_lookup.updateLocalsDict( _python_var_get_db_prep_save.updateLocalsDict( _python_var_get_db_prep_value.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_pre_save.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var_get_cache_name.updateLocalsDict( _python_var_get_attname_column.updateLocalsDict( _python_var_get_attname.updateLocalsDict( _python_var_contribute_to_class.updateLocalsDict( _python_var_set_attributes_from_name.updateLocalsDict( _python_var_unique.updateLocalsDict( _python_var_db_type.updateLocalsDict( _python_var_clean.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_run_validators.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var___reduce__.updateLocalsDict( _python_var___copy__.updateLocalsDict( _python_var___deepcopy__.updateLocalsDict( _python_var___hash__.updateLocalsDict( _python_var___lt__.updateLocalsDict( _python_var___eq__.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var__description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_default_validators.updateLocalsDict( _python_var_auto_creation_counter.updateLocalsDict( _python_var_creation_counter.updateLocalsDict( _python_var_empty_values.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___doc__.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1__description_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_1__description_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1__description_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1__description_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1__description_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1__description_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_1__description_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_59d48c8b25e3ed31d27124f726aa88b8, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1__description_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1__description_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 89 );
        {
            PyObjectTempKeeper1 op1;
            return ( op1.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_203ee4b828921d3d2122e1c7cce17e01 ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___name__ ) ).asObject(), _python_unicode_plain_field_type ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_1__description_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1__description_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_1__description_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1__description_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_description() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_description() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_description() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_description() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_description() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_description() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_description() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_description() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_description() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_description() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_description() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_description() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_description() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_description() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_description() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_description() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_description() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1__description_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_1__description_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1__description_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1__description_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___init___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_verbose_name, PyObject *_python_par_name, PyObject *_python_par_primary_key, PyObject *_python_par_max_length, PyObject *_python_par_unique, PyObject *_python_par_blank, PyObject *_python_par_null, PyObject *_python_par_db_index, PyObject *_python_par_rel, PyObject *_python_par_default, PyObject *_python_par_editable, PyObject *_python_par_serialize, PyObject *_python_par_unique_for_date, PyObject *_python_par_unique_for_month, PyObject *_python_par_unique_for_year, PyObject *_python_par_choices, PyObject *_python_par_help_text, PyObject *_python_par_db_column, PyObject *_python_par_db_tablespace, PyObject *_python_par_auto_created, PyObject *_python_par_validators, PyObject *_python_par_error_messages )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_verbose_name( _python_str_plain_verbose_name, _python_par_verbose_name );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_primary_key( _python_str_plain_primary_key, _python_par_primary_key );
    PyObjectLocalParameterVariableNoDel _python_var_max_length( _python_str_plain_max_length, _python_par_max_length );
    PyObjectLocalParameterVariableNoDel _python_var_unique( _python_str_plain_unique, _python_par_unique );
    PyObjectLocalParameterVariableNoDel _python_var_blank( _python_str_plain_blank, _python_par_blank );
    PyObjectLocalParameterVariableNoDel _python_var_null( _python_str_plain_null, _python_par_null );
    PyObjectLocalParameterVariableNoDel _python_var_db_index( _python_str_plain_db_index, _python_par_db_index );
    PyObjectLocalParameterVariableNoDel _python_var_rel( _python_str_plain_rel, _python_par_rel );
    PyObjectLocalParameterVariableNoDel _python_var_default( _python_str_plain_default, _python_par_default );
    PyObjectLocalParameterVariableNoDel _python_var_editable( _python_str_plain_editable, _python_par_editable );
    PyObjectLocalParameterVariableNoDel _python_var_serialize( _python_str_plain_serialize, _python_par_serialize );
    PyObjectLocalParameterVariableNoDel _python_var_unique_for_date( _python_str_plain_unique_for_date, _python_par_unique_for_date );
    PyObjectLocalParameterVariableNoDel _python_var_unique_for_month( _python_str_plain_unique_for_month, _python_par_unique_for_month );
    PyObjectLocalParameterVariableNoDel _python_var_unique_for_year( _python_str_plain_unique_for_year, _python_par_unique_for_year );
    PyObjectLocalParameterVariableNoDel _python_var_choices( _python_str_plain_choices, _python_par_choices );
    PyObjectLocalParameterVariableNoDel _python_var_help_text( _python_str_plain_help_text, _python_par_help_text );
    PyObjectLocalParameterVariableNoDel _python_var_db_column( _python_str_plain_db_column, _python_par_db_column );
    PyObjectLocalParameterVariableNoDel _python_var_db_tablespace( _python_str_plain_db_tablespace, _python_par_db_tablespace );
    PyObjectLocalParameterVariableNoDel _python_var_auto_created( _python_str_plain_auto_created, _python_par_auto_created );
    PyObjectLocalParameterVariableNoDel _python_var_validators( _python_str_plain_validators, _python_par_validators );
    PyObjectLocalParameterVariableNoDel _python_var_error_messages( _python_str_plain_error_messages, _python_par_error_messages );
    PyObjectLocalVariable _python_var_messages( _python_str_plain_messages );
    PyObjectLocalVariable _python_var_c( _python_str_plain_c );

    // Actual function code.
    static PyFrameObject *frame_function_2___init___of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_2___init___of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_2___init___of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2___init___of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_2___init___of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_2___init___of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_ba9c52a05d63eec3a2f4c2a8e1d798ad, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_2___init___of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2___init___of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 101 );
        {
                PyObject *tmp_identifier = _python_var_name.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_name );
        }
        frame_guard.setLineNumber( 102 );
        {
                PyObject *tmp_identifier = _python_var_verbose_name.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_verbose_name );
        }
        frame_guard.setLineNumber( 103 );
        {
                PyObject *tmp_identifier = _python_var_primary_key.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_primary_key );
        }
        {
            frame_guard.setLineNumber( 104 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( _python_var_max_length.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_unique.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_max_length );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain__unique );
            }
        }
        {
            frame_guard.setLineNumber( 105 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple3;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple3.assign( _python_var_blank.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), _python_var_null.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_blank );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_null );
            }
        }
        frame_guard.setLineNumber( 106 );
        {
                PyObject *tmp_identifier = _python_var_rel.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_rel );
        }
        frame_guard.setLineNumber( 107 );
        {
                PyObject *tmp_identifier = _python_var_default.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_default );
        }
        frame_guard.setLineNumber( 108 );
        {
                PyObject *tmp_identifier = _python_var_editable.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_editable );
        }
        frame_guard.setLineNumber( 109 );
        {
                PyObject *tmp_identifier = _python_var_serialize.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_serialize );
        }
        {
            frame_guard.setLineNumber( 110 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple5;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple5.assign( _python_var_unique_for_date.asObject() ), MAKE_TUPLE2( make_tuple5.asObject0(), _python_var_unique_for_month.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_unique_for_date );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_unique_for_month );
            }
        }
        frame_guard.setLineNumber( 112 );
        {
                PyObject *tmp_identifier = _python_var_unique_for_year.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_unique_for_year );
        }
        frame_guard.setLineNumber( 113 );
        {
            PyObjectTempKeeper0 keeper_0;
            {
                PyObjectTemporary tmp_identifier( ( CHECK_IF_TRUE( keeper_0.assign( _python_var_choices.asObject() ) ) ? INCREASE_REFCOUNT( keeper_0.asObject0() ) : PyList_New( 0 ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain__choices );
        }
        }
        frame_guard.setLineNumber( 114 );
        {
                PyObject *tmp_identifier = _python_var_help_text.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_help_text );
        }
        frame_guard.setLineNumber( 115 );
        {
                PyObject *tmp_identifier = _python_var_db_column.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_db_column );
        }
        frame_guard.setLineNumber( 116 );
        {
            PyObjectTempKeeper0 keeper_1;
            {
                PyObjectTemporary tmp_identifier( ( CHECK_IF_TRUE( keeper_1.assign( _python_var_db_tablespace.asObject() ) ) ? INCREASE_REFCOUNT( keeper_1.asObject0() ) : LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_settings.asObject0(), _python_str_plain_DEFAULT_INDEX_TABLESPACE ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_db_tablespace );
        }
        }
        frame_guard.setLineNumber( 117 );
        {
                PyObject *tmp_identifier = _python_var_auto_created.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_auto_created );
        }
        frame_guard.setLineNumber( 121 );
        {
                PyObject *tmp_identifier = _python_var_db_index.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_db_index );
        }
        frame_guard.setLineNumber( 124 );
        if ( CHECK_IF_TRUE( _python_var_auto_created.asObject() ) )
        {
            frame_guard.setLineNumber( 125 );
            {
                    PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_Field.asObject0(), _python_str_plain_auto_creation_counter ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_creation_counter );
            }
            {
                frame_guard.setLineNumber( 126 );
                PyObjectTemporary _python_tmp_inplace_start( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_Field.asObject0(), _python_str_plain_auto_creation_counter ) );
                PyObjectTemporary _python_tmp_inplace_end( BINARY_OPERATION( PyNumber_InPlaceSubtract, _python_tmp_inplace_start.asObject(), _python_int_pos_1 ) );
                if ( ( _python_tmp_inplace_start.asObject() != _python_tmp_inplace_end.asObject() ) )
                {
                    frame_guard.setLineNumber( 126 );
                    {
                            PyObject *tmp_identifier = _python_tmp_inplace_end.asObject();
                            SET_ATTRIBUTE( tmp_identifier, _mvar_django__db__models__fields_Field.asObject0(), _python_str_plain_auto_creation_counter );
                    }
                }
            }
        }
        else
        {
            frame_guard.setLineNumber( 128 );
            {
                    PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_Field.asObject0(), _python_str_plain_creation_counter ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_creation_counter );
            }
            {
                frame_guard.setLineNumber( 129 );
                PyObjectTemporary _python_tmp_inplace_start( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_Field.asObject0(), _python_str_plain_creation_counter ) );
                PyObjectTemporary _python_tmp_inplace_end( BINARY_OPERATION( PyNumber_InPlaceAdd, _python_tmp_inplace_start.asObject(), _python_int_pos_1 ) );
                if ( ( _python_tmp_inplace_start.asObject() != _python_tmp_inplace_end.asObject() ) )
                {
                    frame_guard.setLineNumber( 129 );
                    {
                            PyObject *tmp_identifier = _python_tmp_inplace_end.asObject();
                            SET_ATTRIBUTE( tmp_identifier, _mvar_django__db__models__fields_Field.asObject0(), _python_str_plain_creation_counter );
                    }
                }
            }
        }
        frame_guard.setLineNumber( 131 );
        {
            PyObjectTempKeeper1 op7;
            {
                PyObjectTemporary tmp_identifier( ( op7.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_default_validators ) ), BINARY_OPERATION_ADD( op7.asObject0(), _python_var_validators.asObject() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_validators );
        }
        }
        _python_var_messages.assign1( PyDict_New() );
        {
            frame_guard.setLineNumber( 134 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_reversed ), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___mro__ ) ).asObject() ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 134 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_c.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 135 );
                {
                    PyObjectTempKeeper1 call9;
                    DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_messages.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), PyObjectTemporary( BUILTIN_GETATTR( _python_var_c.asObject(), _python_unicode_plain_default_error_messages, PyObjectTemporary( PyDict_New() ).asObject() ) ).asObject() ) ) );
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 136 );
        {
            PyObjectTempKeeper1 call11;
            PyObjectTempKeeper0 keeper_2;
            DECREASE_REFCOUNT( ( call11.assign( LOOKUP_ATTRIBUTE( _python_var_messages.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), PyObjectTemporary( ( CHECK_IF_TRUE( keeper_2.assign( _python_var_error_messages.asObject() ) ) ? INCREASE_REFCOUNT( keeper_2.asObject0() ) : PyDict_New() ) ).asObject() ) ) );
        }
        frame_guard.setLineNumber( 137 );
        {
                PyObject *tmp_identifier = _python_var_messages.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_error_messages );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_error_messages.updateLocalsDict( _python_var_validators.updateLocalsDict( _python_var_auto_created.updateLocalsDict( _python_var_db_tablespace.updateLocalsDict( _python_var_db_column.updateLocalsDict( _python_var_help_text.updateLocalsDict( _python_var_choices.updateLocalsDict( _python_var_unique_for_year.updateLocalsDict( _python_var_unique_for_month.updateLocalsDict( _python_var_unique_for_date.updateLocalsDict( _python_var_serialize.updateLocalsDict( _python_var_editable.updateLocalsDict( _python_var_default.updateLocalsDict( _python_var_rel.updateLocalsDict( _python_var_db_index.updateLocalsDict( _python_var_null.updateLocalsDict( _python_var_blank.updateLocalsDict( _python_var_unique.updateLocalsDict( _python_var_max_length.updateLocalsDict( _python_var_primary_key.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_verbose_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_c.updateLocalsDict( _python_var_messages.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2___init___of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_2___init___of_class_6_Field_of_module_django__db__models__fields );
           frame_function_2___init___of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_2___init___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_verbose_name = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_primary_key = NULL;
    PyObject *_python_par_max_length = NULL;
    PyObject *_python_par_unique = NULL;
    PyObject *_python_par_blank = NULL;
    PyObject *_python_par_null = NULL;
    PyObject *_python_par_db_index = NULL;
    PyObject *_python_par_rel = NULL;
    PyObject *_python_par_default = NULL;
    PyObject *_python_par_editable = NULL;
    PyObject *_python_par_serialize = NULL;
    PyObject *_python_par_unique_for_date = NULL;
    PyObject *_python_par_unique_for_month = NULL;
    PyObject *_python_par_unique_for_year = NULL;
    PyObject *_python_par_choices = NULL;
    PyObject *_python_par_help_text = NULL;
    PyObject *_python_par_db_column = NULL;
    PyObject *_python_par_db_tablespace = NULL;
    PyObject *_python_par_auto_created = NULL;
    PyObject *_python_par_validators = NULL;
    PyObject *_python_par_error_messages = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_verbose_name == key )
            {
                if (unlikely( _python_par_verbose_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'verbose_name'" );
                    goto error_exit;
                }

                _python_par_verbose_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_primary_key == key )
            {
                if (unlikely( _python_par_primary_key ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'primary_key'" );
                    goto error_exit;
                }

                _python_par_primary_key = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_max_length == key )
            {
                if (unlikely( _python_par_max_length ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'max_length'" );
                    goto error_exit;
                }

                _python_par_max_length = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_unique == key )
            {
                if (unlikely( _python_par_unique ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'unique'" );
                    goto error_exit;
                }

                _python_par_unique = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_blank == key )
            {
                if (unlikely( _python_par_blank ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'blank'" );
                    goto error_exit;
                }

                _python_par_blank = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_null == key )
            {
                if (unlikely( _python_par_null ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'null'" );
                    goto error_exit;
                }

                _python_par_null = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_db_index == key )
            {
                if (unlikely( _python_par_db_index ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'db_index'" );
                    goto error_exit;
                }

                _python_par_db_index = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_rel == key )
            {
                if (unlikely( _python_par_rel ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'rel'" );
                    goto error_exit;
                }

                _python_par_rel = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_default == key )
            {
                if (unlikely( _python_par_default ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'default'" );
                    goto error_exit;
                }

                _python_par_default = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_editable == key )
            {
                if (unlikely( _python_par_editable ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'editable'" );
                    goto error_exit;
                }

                _python_par_editable = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_serialize == key )
            {
                if (unlikely( _python_par_serialize ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'serialize'" );
                    goto error_exit;
                }

                _python_par_serialize = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_unique_for_date == key )
            {
                if (unlikely( _python_par_unique_for_date ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'unique_for_date'" );
                    goto error_exit;
                }

                _python_par_unique_for_date = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_unique_for_month == key )
            {
                if (unlikely( _python_par_unique_for_month ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'unique_for_month'" );
                    goto error_exit;
                }

                _python_par_unique_for_month = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_unique_for_year == key )
            {
                if (unlikely( _python_par_unique_for_year ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'unique_for_year'" );
                    goto error_exit;
                }

                _python_par_unique_for_year = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_choices == key )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_help_text == key )
            {
                if (unlikely( _python_par_help_text ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'help_text'" );
                    goto error_exit;
                }

                _python_par_help_text = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_db_column == key )
            {
                if (unlikely( _python_par_db_column ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'db_column'" );
                    goto error_exit;
                }

                _python_par_db_column = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_db_tablespace == key )
            {
                if (unlikely( _python_par_db_tablespace ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'db_tablespace'" );
                    goto error_exit;
                }

                _python_par_db_tablespace = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_auto_created == key )
            {
                if (unlikely( _python_par_auto_created ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'auto_created'" );
                    goto error_exit;
                }

                _python_par_auto_created = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_validators == key )
            {
                if (unlikely( _python_par_validators ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'validators'" );
                    goto error_exit;
                }

                _python_par_validators = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_error_messages == key )
            {
                if (unlikely( _python_par_error_messages ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'error_messages'" );
                    goto error_exit;
                }

                _python_par_error_messages = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_verbose_name, key ) )
            {
                if (unlikely( _python_par_verbose_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'verbose_name'" );
                    goto error_exit;
                }

                _python_par_verbose_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_primary_key, key ) )
            {
                if (unlikely( _python_par_primary_key ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'primary_key'" );
                    goto error_exit;
                }

                _python_par_primary_key = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_max_length, key ) )
            {
                if (unlikely( _python_par_max_length ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'max_length'" );
                    goto error_exit;
                }

                _python_par_max_length = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_unique, key ) )
            {
                if (unlikely( _python_par_unique ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'unique'" );
                    goto error_exit;
                }

                _python_par_unique = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_blank, key ) )
            {
                if (unlikely( _python_par_blank ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'blank'" );
                    goto error_exit;
                }

                _python_par_blank = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_null, key ) )
            {
                if (unlikely( _python_par_null ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'null'" );
                    goto error_exit;
                }

                _python_par_null = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_db_index, key ) )
            {
                if (unlikely( _python_par_db_index ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'db_index'" );
                    goto error_exit;
                }

                _python_par_db_index = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_rel, key ) )
            {
                if (unlikely( _python_par_rel ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'rel'" );
                    goto error_exit;
                }

                _python_par_rel = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_default, key ) )
            {
                if (unlikely( _python_par_default ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'default'" );
                    goto error_exit;
                }

                _python_par_default = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_editable, key ) )
            {
                if (unlikely( _python_par_editable ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'editable'" );
                    goto error_exit;
                }

                _python_par_editable = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_serialize, key ) )
            {
                if (unlikely( _python_par_serialize ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'serialize'" );
                    goto error_exit;
                }

                _python_par_serialize = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_unique_for_date, key ) )
            {
                if (unlikely( _python_par_unique_for_date ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'unique_for_date'" );
                    goto error_exit;
                }

                _python_par_unique_for_date = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_unique_for_month, key ) )
            {
                if (unlikely( _python_par_unique_for_month ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'unique_for_month'" );
                    goto error_exit;
                }

                _python_par_unique_for_month = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_unique_for_year, key ) )
            {
                if (unlikely( _python_par_unique_for_year ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'unique_for_year'" );
                    goto error_exit;
                }

                _python_par_unique_for_year = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_choices, key ) )
            {
                if (unlikely( _python_par_choices ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choices'" );
                    goto error_exit;
                }

                _python_par_choices = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_help_text, key ) )
            {
                if (unlikely( _python_par_help_text ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'help_text'" );
                    goto error_exit;
                }

                _python_par_help_text = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_db_column, key ) )
            {
                if (unlikely( _python_par_db_column ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'db_column'" );
                    goto error_exit;
                }

                _python_par_db_column = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_db_tablespace, key ) )
            {
                if (unlikely( _python_par_db_tablespace ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'db_tablespace'" );
                    goto error_exit;
                }

                _python_par_db_tablespace = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_auto_created, key ) )
            {
                if (unlikely( _python_par_auto_created ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'auto_created'" );
                    goto error_exit;
                }

                _python_par_auto_created = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_validators, key ) )
            {
                if (unlikely( _python_par_validators ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'validators'" );
                    goto error_exit;
                }

                _python_par_validators = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_error_messages, key ) )
            {
                if (unlikely( _python_par_error_messages ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'error_messages'" );
                    goto error_exit;
                }

                _python_par_error_messages = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 23 ))
    {
        if ( 23 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 23, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 23 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 23, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 23, args_given + kw_only_found );
            }
#else
            if ( 23 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 23, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 23, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 23 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 23, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 23 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 23 ? args_given : 23;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_verbose_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'verbose_name'" );
             goto error_exit;
         }

        _python_par_verbose_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_primary_key != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'primary_key'" );
             goto error_exit;
         }

        _python_par_primary_key = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_max_length != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'max_length'" );
             goto error_exit;
         }

        _python_par_max_length = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_unique != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'unique'" );
             goto error_exit;
         }

        _python_par_unique = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_blank != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'blank'" );
             goto error_exit;
         }

        _python_par_blank = INCREASE_REFCOUNT( args[ 6 ] );
    }
    if (likely( 7 < args_usable_count ))
    {
         if (unlikely( _python_par_null != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'null'" );
             goto error_exit;
         }

        _python_par_null = INCREASE_REFCOUNT( args[ 7 ] );
    }
    if (likely( 8 < args_usable_count ))
    {
         if (unlikely( _python_par_db_index != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'db_index'" );
             goto error_exit;
         }

        _python_par_db_index = INCREASE_REFCOUNT( args[ 8 ] );
    }
    if (likely( 9 < args_usable_count ))
    {
         if (unlikely( _python_par_rel != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'rel'" );
             goto error_exit;
         }

        _python_par_rel = INCREASE_REFCOUNT( args[ 9 ] );
    }
    if (likely( 10 < args_usable_count ))
    {
         if (unlikely( _python_par_default != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'default'" );
             goto error_exit;
         }

        _python_par_default = INCREASE_REFCOUNT( args[ 10 ] );
    }
    if (likely( 11 < args_usable_count ))
    {
         if (unlikely( _python_par_editable != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'editable'" );
             goto error_exit;
         }

        _python_par_editable = INCREASE_REFCOUNT( args[ 11 ] );
    }
    if (likely( 12 < args_usable_count ))
    {
         if (unlikely( _python_par_serialize != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'serialize'" );
             goto error_exit;
         }

        _python_par_serialize = INCREASE_REFCOUNT( args[ 12 ] );
    }
    if (likely( 13 < args_usable_count ))
    {
         if (unlikely( _python_par_unique_for_date != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'unique_for_date'" );
             goto error_exit;
         }

        _python_par_unique_for_date = INCREASE_REFCOUNT( args[ 13 ] );
    }
    if (likely( 14 < args_usable_count ))
    {
         if (unlikely( _python_par_unique_for_month != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'unique_for_month'" );
             goto error_exit;
         }

        _python_par_unique_for_month = INCREASE_REFCOUNT( args[ 14 ] );
    }
    if (likely( 15 < args_usable_count ))
    {
         if (unlikely( _python_par_unique_for_year != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'unique_for_year'" );
             goto error_exit;
         }

        _python_par_unique_for_year = INCREASE_REFCOUNT( args[ 15 ] );
    }
    if (likely( 16 < args_usable_count ))
    {
         if (unlikely( _python_par_choices != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'choices'" );
             goto error_exit;
         }

        _python_par_choices = INCREASE_REFCOUNT( args[ 16 ] );
    }
    if (likely( 17 < args_usable_count ))
    {
         if (unlikely( _python_par_help_text != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'help_text'" );
             goto error_exit;
         }

        _python_par_help_text = INCREASE_REFCOUNT( args[ 17 ] );
    }
    if (likely( 18 < args_usable_count ))
    {
         if (unlikely( _python_par_db_column != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'db_column'" );
             goto error_exit;
         }

        _python_par_db_column = INCREASE_REFCOUNT( args[ 18 ] );
    }
    if (likely( 19 < args_usable_count ))
    {
         if (unlikely( _python_par_db_tablespace != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'db_tablespace'" );
             goto error_exit;
         }

        _python_par_db_tablespace = INCREASE_REFCOUNT( args[ 19 ] );
    }
    if (likely( 20 < args_usable_count ))
    {
         if (unlikely( _python_par_auto_created != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'auto_created'" );
             goto error_exit;
         }

        _python_par_auto_created = INCREASE_REFCOUNT( args[ 20 ] );
    }
    if (likely( 21 < args_usable_count ))
    {
         if (unlikely( _python_par_validators != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'validators'" );
             goto error_exit;
         }

        _python_par_validators = INCREASE_REFCOUNT( args[ 21 ] );
    }
    if (likely( 22 < args_usable_count ))
    {
         if (unlikely( _python_par_error_messages != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'error_messages'" );
             goto error_exit;
         }

        _python_par_error_messages = INCREASE_REFCOUNT( args[ 22 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_verbose_name == NULL )
    {
        _python_par_verbose_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_verbose_name );
    }
    if ( _python_par_name == NULL )
    {
        _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_name );
    }
    if ( _python_par_primary_key == NULL )
    {
        _python_par_primary_key = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_primary_key );
    }
    if ( _python_par_max_length == NULL )
    {
        _python_par_max_length = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_max_length );
    }
    if ( _python_par_unique == NULL )
    {
        _python_par_unique = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_unique );
    }
    if ( _python_par_blank == NULL )
    {
        _python_par_blank = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 5 ) );
        assertObject( _python_par_blank );
    }
    if ( _python_par_null == NULL )
    {
        _python_par_null = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 6 ) );
        assertObject( _python_par_null );
    }
    if ( _python_par_db_index == NULL )
    {
        _python_par_db_index = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 7 ) );
        assertObject( _python_par_db_index );
    }
    if ( _python_par_rel == NULL )
    {
        _python_par_rel = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 8 ) );
        assertObject( _python_par_rel );
    }
    if ( _python_par_default == NULL )
    {
        _python_par_default = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 9 ) );
        assertObject( _python_par_default );
    }
    if ( _python_par_editable == NULL )
    {
        _python_par_editable = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 10 ) );
        assertObject( _python_par_editable );
    }
    if ( _python_par_serialize == NULL )
    {
        _python_par_serialize = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 11 ) );
        assertObject( _python_par_serialize );
    }
    if ( _python_par_unique_for_date == NULL )
    {
        _python_par_unique_for_date = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 12 ) );
        assertObject( _python_par_unique_for_date );
    }
    if ( _python_par_unique_for_month == NULL )
    {
        _python_par_unique_for_month = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 13 ) );
        assertObject( _python_par_unique_for_month );
    }
    if ( _python_par_unique_for_year == NULL )
    {
        _python_par_unique_for_year = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 14 ) );
        assertObject( _python_par_unique_for_year );
    }
    if ( _python_par_choices == NULL )
    {
        _python_par_choices = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 15 ) );
        assertObject( _python_par_choices );
    }
    if ( _python_par_help_text == NULL )
    {
        _python_par_help_text = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 16 ) );
        assertObject( _python_par_help_text );
    }
    if ( _python_par_db_column == NULL )
    {
        _python_par_db_column = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 17 ) );
        assertObject( _python_par_db_column );
    }
    if ( _python_par_db_tablespace == NULL )
    {
        _python_par_db_tablespace = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 18 ) );
        assertObject( _python_par_db_tablespace );
    }
    if ( _python_par_auto_created == NULL )
    {
        _python_par_auto_created = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 19 ) );
        assertObject( _python_par_auto_created );
    }
    if ( _python_par_validators == NULL )
    {
        _python_par_validators = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 20 ) );
        assertObject( _python_par_validators );
    }
    if ( _python_par_error_messages == NULL )
    {
        _python_par_error_messages = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 21 ) );
        assertObject( _python_par_error_messages );
    }


    return impl_function_2___init___of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_verbose_name, _python_par_name, _python_par_primary_key, _python_par_max_length, _python_par_unique, _python_par_blank, _python_par_null, _python_par_db_index, _python_par_rel, _python_par_default, _python_par_editable, _python_par_serialize, _python_par_unique_for_date, _python_par_unique_for_month, _python_par_unique_for_year, _python_par_choices, _python_par_help_text, _python_par_db_column, _python_par_db_tablespace, _python_par_auto_created, _python_par_validators, _python_par_error_messages );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_verbose_name );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_primary_key );
    Py_XDECREF( _python_par_max_length );
    Py_XDECREF( _python_par_unique );
    Py_XDECREF( _python_par_blank );
    Py_XDECREF( _python_par_null );
    Py_XDECREF( _python_par_db_index );
    Py_XDECREF( _python_par_rel );
    Py_XDECREF( _python_par_default );
    Py_XDECREF( _python_par_editable );
    Py_XDECREF( _python_par_serialize );
    Py_XDECREF( _python_par_unique_for_date );
    Py_XDECREF( _python_par_unique_for_month );
    Py_XDECREF( _python_par_unique_for_year );
    Py_XDECREF( _python_par_choices );
    Py_XDECREF( _python_par_help_text );
    Py_XDECREF( _python_par_db_column );
    Py_XDECREF( _python_par_db_tablespace );
    Py_XDECREF( _python_par_auto_created );
    Py_XDECREF( _python_par_validators );
    Py_XDECREF( _python_par_error_messages );

    return NULL;
}

static PyObject *dparse_function_2___init___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 23)
    {
        return impl_function_2___init___of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ), INCREASE_REFCOUNT( args[ 8 ] ), INCREASE_REFCOUNT( args[ 9 ] ), INCREASE_REFCOUNT( args[ 10 ] ), INCREASE_REFCOUNT( args[ 11 ] ), INCREASE_REFCOUNT( args[ 12 ] ), INCREASE_REFCOUNT( args[ 13 ] ), INCREASE_REFCOUNT( args[ 14 ] ), INCREASE_REFCOUNT( args[ 15 ] ), INCREASE_REFCOUNT( args[ 16 ] ), INCREASE_REFCOUNT( args[ 17 ] ), INCREASE_REFCOUNT( args[ 18 ] ), INCREASE_REFCOUNT( args[ 19 ] ), INCREASE_REFCOUNT( args[ 20 ] ), INCREASE_REFCOUNT( args[ 21 ] ), INCREASE_REFCOUNT( args[ 22 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___init___of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3___eq___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_other )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_other( _python_str_plain_other, _python_par_other );

    // Actual function code.
    static PyFrameObject *frame_function_3___eq___of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_3___eq___of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_3___eq___of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3___eq___of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_3___eq___of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_3___eq___of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_14a242802acc692a9e0b825cb0d0cb2a, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_3___eq___of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3___eq___of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 141 );
        {
            PyObjectTempKeeper0 isinstance3;
            if ( ( isinstance3.assign( _python_var_other.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance3.asObject0(), _mvar_django__db__models__fields_Field.asObject0() ) ) )
        {
            frame_guard.setLineNumber( 142 );
            {
                PyObjectTempKeeper1 cmp1;
                return ( cmp1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_creation_counter ) ), RICH_COMPARE_EQ( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_other.asObject(), _python_str_plain_creation_counter ) ).asObject() ) );
            }
        }
        }
        frame_guard.setLineNumber( 143 );
        return INCREASE_REFCOUNT( Py_NotImplemented );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_other.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_3___eq___of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_3___eq___of_class_6_Field_of_module_django__db__models__fields );
           frame_function_3___eq___of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3___eq___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_other = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__eq__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__eq__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_other == key )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "__eq__() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__eq__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_other, key ) )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "__eq__() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__eq__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__eq__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__eq__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__eq__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__eq__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__eq__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__eq__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__eq__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__eq__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__eq__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__eq__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__eq__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__eq__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__eq__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_other != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__eq__() got multiple values for keyword argument 'other'" );
             goto error_exit;
         }

        _python_par_other = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3___eq___of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_other );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_other );

    return NULL;
}

static PyObject *dparse_function_3___eq___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3___eq___of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3___eq___of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4___lt___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_other )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_other( _python_str_plain_other, _python_par_other );

    // Actual function code.
    static PyFrameObject *frame_function_4___lt___of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_4___lt___of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_4___lt___of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4___lt___of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_4___lt___of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_4___lt___of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_507436661722e8a47060916101d617e2, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_4___lt___of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4___lt___of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 147 );
        {
            PyObjectTempKeeper0 isinstance3;
            if ( ( isinstance3.assign( _python_var_other.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance3.asObject0(), _mvar_django__db__models__fields_Field.asObject0() ) ) )
        {
            frame_guard.setLineNumber( 148 );
            {
                PyObjectTempKeeper1 cmp1;
                return ( cmp1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_creation_counter ) ), RICH_COMPARE_LT( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_other.asObject(), _python_str_plain_creation_counter ) ).asObject() ) );
            }
        }
        }
        frame_guard.setLineNumber( 149 );
        return INCREASE_REFCOUNT( Py_NotImplemented );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_other.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_4___lt___of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_4___lt___of_class_6_Field_of_module_django__db__models__fields );
           frame_function_4___lt___of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4___lt___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_other = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__lt__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__lt__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_other == key )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "__lt__() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__lt__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_other, key ) )
            {
                if (unlikely( _python_par_other ))
                {
                    PyErr_Format( PyExc_TypeError, "__lt__() got multiple values for keyword argument 'other'" );
                    goto error_exit;
                }

                _python_par_other = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__lt__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__lt__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__lt__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__lt__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__lt__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__lt__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__lt__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__lt__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__lt__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__lt__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__lt__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__lt__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__lt__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__lt__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_other != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__lt__() got multiple values for keyword argument 'other'" );
             goto error_exit;
         }

        _python_par_other = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4___lt___of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_other );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_other );

    return NULL;
}

static PyObject *dparse_function_4___lt___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4___lt___of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4___lt___of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5___hash___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_5___hash___of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_5___hash___of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_5___hash___of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5___hash___of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_5___hash___of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_5___hash___of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_cbaab4d8ee505fb580b906b8dd3dbd0b, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_5___hash___of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5___hash___of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 152 );
        return CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_hash ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_creation_counter ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_5___hash___of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_5___hash___of_class_6_Field_of_module_django__db__models__fields );
           frame_function_5___hash___of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5___hash___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__hash__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__hash__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__hash__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__hash__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__hash__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__hash__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__hash__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__hash__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__hash__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__hash__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__hash__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__hash__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__hash__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__hash__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__hash__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__hash__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__hash__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5___hash___of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5___hash___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_5___hash___of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5___hash___of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_memodict )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_memodict( _python_str_plain_memodict, _python_par_memodict );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_09c40de3a7645278244768cbad3efd42, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 157 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_obj.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_copy.asObject0(), _python_str_plain_copy ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_self.asObject() ) ) );
        }
        frame_guard.setLineNumber( 158 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 159 );
            {
                PyObjectTempKeeper1 call3;
                {
                    PyObjectTemporary tmp_identifier( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_copy.asObject0(), _python_str_plain_copy ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject() ) ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain_rel );
            }
            }
            frame_guard.setLineNumber( 160 );
            if ( ( HAS_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_unicode_plain_field ) && ( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_field ) ).asObject() == _python_var_self.asObject() ) ) )
            {
                frame_guard.setLineNumber( 161 );
                {
                        PyObject *tmp_identifier = _python_var_obj.asObject();
                        SET_ATTRIBUTE( tmp_identifier, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_obj.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_field );
                }
            }
        }
        frame_guard.setLineNumber( 162 );
        {
                PyObject *tmp_identifier = _python_var_obj.asObject();
                PyObject *tmp_subscribed = _python_var_memodict.asObject();
                SET_SUBSCRIPT( tmp_identifier, tmp_subscribed, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_id ), _python_var_self.asObject() ) ).asObject() );
        }
        frame_guard.setLineNumber( 163 );
        return _python_var_obj.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_memodict.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_obj.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields );
           frame_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_memodict = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_memodict == key )
            {
                if (unlikely( _python_par_memodict ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memodict'" );
                    goto error_exit;
                }

                _python_par_memodict = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_memodict, key ) )
            {
                if (unlikely( _python_par_memodict ))
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memodict'" );
                    goto error_exit;
                }

                _python_par_memodict = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__deepcopy__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__deepcopy__() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_memodict != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__deepcopy__() got multiple values for keyword argument 'memodict'" );
             goto error_exit;
         }

        _python_par_memodict = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_memodict );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_memodict );

    return NULL;
}

static PyObject *dparse_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7___copy___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_obj( _python_str_plain_obj );

    // Actual function code.
    static PyFrameObject *frame_function_7___copy___of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_7___copy___of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_7___copy___of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7___copy___of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_7___copy___of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_7___copy___of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_61625916b8eaff25c36c5d158c088230, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_7___copy___of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_7___copy___of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 168 );
        _python_var_obj.assign1( CALL_FUNCTION_NO_ARGS( _mvar_django__db__models__fields_Empty.asObject0() ) );
        frame_guard.setLineNumber( 169 );
        {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain___class__ );
        }
        frame_guard.setLineNumber( 170 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___dict__ ) ).asObject(), _python_str_plain_copy ) ).asObject() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_obj.asObject(), _python_str_plain___dict__ );
        }
        frame_guard.setLineNumber( 171 );
        return _python_var_obj.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_obj.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_7___copy___of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_7___copy___of_class_6_Field_of_module_django__db__models__fields );
           frame_function_7___copy___of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7___copy___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__copy__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__copy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__copy__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__copy__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__copy__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__copy__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__copy__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__copy__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__copy__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__copy__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__copy__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__copy__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__copy__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__copy__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__copy__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__copy__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__copy__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_7___copy___of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_7___copy___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_7___copy___of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7___copy___of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8___reduce___of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_f1c3554fae26df384399f6b57e110ec0, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 179 );
        if ( (!( HAS_ATTRIBUTE( _python_var_self.asObject(), _python_unicode_plain_model ) )) )
        {
            frame_guard.setLineNumber( 185 );
            {
                PyObjectTempKeeper0 make_tuple1;
                PyObjectTempKeeper1 make_tuple2;
                return ( make_tuple1.assign( _mvar_django__db__models__fields__empty.asObject0() ), make_tuple2.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject() ) ), MAKE_TUPLE3( make_tuple1.asObject0(), make_tuple2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___dict__ ) ).asObject() ) );
            }
        }
        frame_guard.setLineNumber( 186 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__deferred ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 189 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_RuntimeError, PyObjectTemporary( MAKE_TUPLE1( _python_unicode_digest_d49715bca0e2f3a25e5ebdd70b36dab2 ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 190 );
        {
            PyObjectTempKeeper1 make_tuple4;
            PyObjectTempKeeper1 make_tuple5;
            PyObjectTempKeeper0 make_tuple7;
            return ( make_tuple7.assign( _mvar_django__db__models__fields__load_field.asObject0() ), MAKE_TUPLE2( make_tuple7.asObject0(), PyObjectTemporary( ( make_tuple4.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_app_label ) ), make_tuple5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_model ) ).asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_object_name ) ), MAKE_TUPLE3( make_tuple4.asObject0(), make_tuple5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ).asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields );
           frame_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__reduce__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__reduce__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__reduce__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__reduce__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__reduce__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__reduce__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__reduce__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__reduce__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__reduce__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__reduce__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__reduce__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__reduce__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__reduce__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__reduce__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__reduce__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__reduce__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__reduce__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9_to_python_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_8fdf3942ad5a72482ec373155c0c648b, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 199 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_errors( _python_str_plain_errors );
    PyObjectLocalVariable _python_var_v( _python_str_plain_v );
    PyObjectLocalVariable _python_var_e( _python_str_plain_e );
    PyObjectLocalVariable _python_var_message( _python_str_plain_message );

    // Actual function code.
    static PyFrameObject *frame_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_c36e62c8a4715a334ab6baa7cbcd1bae, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 202 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        }
        _python_var_errors.assign1( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 206 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validators ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 206 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    _python_var_v.assign0( _python_tmp_iter_value.asObject() );
                }
                frame_guard.setLineNumber( 207 );
                try
                {
                    frame_guard.setLineNumber( 208 );
                    {
                        PyObjectTempKeeper0 call13;
                        DECREASE_REFCOUNT( ( call13.assign( _python_var_v.asObject() ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), _python_var_value.asObject() ) ) );
                    }
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ).asObject() ) )
                    {
                        frame_guard.detachFrame();
                        _python_var_e.assign0( _exception.getValue() );
                        frame_guard.setLineNumber( 210 );
                        {
                            PyObjectTempKeeper1 cmp11;
                            if ( ( HAS_ATTRIBUTE( _python_var_e.asObject(), _python_unicode_plain_code ) && ( cmp11.assign( LOOKUP_ATTRIBUTE( _python_var_e.asObject(), _python_str_plain_code ) ), SEQUENCE_CONTAINS_BOOL( cmp11.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject() ) ) ) )
                        {
                            frame_guard.setLineNumber( 211 );
                            {
                                PyObjectTempKeeper1 subscr3;
                                _python_var_message.assign1( ( subscr3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ), LOOKUP_SUBSCRIPT( subscr3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_e.asObject(), _python_str_plain_code ) ).asObject() ) ) );
                            }
                            frame_guard.setLineNumber( 212 );
                            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_e.asObject(), _python_str_plain_params ) ).asObject() ) )
                            {
                                frame_guard.setLineNumber( 213 );
                                {
                                    PyObjectTempKeeper0 op5;
                                    _python_var_message.assign1( ( op5.assign( _python_var_message.asObject() ), BINARY_OPERATION_REMAINDER( op5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_e.asObject(), _python_str_plain_params ) ).asObject() ) ) );
                                }
                            }
                            frame_guard.setLineNumber( 214 );
                            {
                                PyObjectTempKeeper1 call7;
                                DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_errors.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_message.asObject() ) ) );
                            }
                        }
                        else
                        {
                            frame_guard.setLineNumber( 216 );
                            {
                                PyObjectTempKeeper1 call9;
                                DECREASE_REFCOUNT( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_errors.asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_e.asObject(), _python_str_plain_messages ) ).asObject() ) ) );
                            }
                        }
                        }
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 217 );
        if ( CHECK_IF_TRUE( _python_var_errors.asObject() ) )
        {
            frame_guard.setLineNumber( 218 );
            {
                PyObjectTempKeeper1 call15;
                {
                    PyObjectTemporary tmp_exception_type( ( call15.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), _python_var_errors.asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_message.updateLocalsDict( _python_var_e.updateLocalsDict( _python_var_v.updateLocalsDict( _python_var_errors.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "run_validators() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "run_validators() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "run_validators() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "run_validators() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "run_validators() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "run_validators() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "run_validators() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "run_validators() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "run_validators() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "run_validators() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "run_validators() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "run_validators() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "run_validators() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "run_validators() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "run_validators() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "run_validators() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "run_validators() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "run_validators() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "run_validators() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "run_validators() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_11_validate_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_model_instance )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_model_instance( _python_str_plain_model_instance, _python_par_model_instance );
    PyObjectLocalVariable _python_var_option_key( _python_str_plain_option_key );
    PyObjectLocalVariable _python_var_option_value( _python_str_plain_option_value );
    PyObjectLocalVariable _python_var_optgroup_key( _python_str_plain_optgroup_key );
    PyObjectLocalVariable _python_var_optgroup_value( _python_str_plain_optgroup_value );
    PyObjectLocalVariable _python_var_msg( _python_str_plain_msg );

    // Actual function code.
    static PyFrameObject *frame_function_11_validate_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_11_validate_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_11_validate_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_11_validate_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_11_validate_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_11_validate_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_366972e7991b62c73d80e9e1a808b46e, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_11_validate_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_11_validate_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 225 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_editable ) ).asObject() ) )) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 229 );
        {
            PyObjectTempKeeper0 cmp9;
            if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__choices ) ).asObject() ) && ( cmp9.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp9.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) ) )
        {
            {
                frame_guard.setLineNumber( 230 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 230 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        {
                            frame_guard.setLineNumber( 230 );
                            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                            _python_var_option_key.assign0( _python_tmp_element_1.asObject() );
                            _python_var_option_value.assign0( _python_tmp_element_2.asObject() );
                        }
                    }
                    frame_guard.setLineNumber( 231 );
                    if ( BUILTIN_ISINSTANCE_BOOL( _python_var_option_value.asObject(), PyObjectTemporary( MAKE_TUPLE2( LOOKUP_BUILTIN( _python_str_plain_list ), LOOKUP_BUILTIN( _python_str_plain_tuple ) ) ).asObject() ) )
                    {
                        {
                            frame_guard.setLineNumber( 234 );
                            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( _python_var_option_value.asObject() ) );
                            while( true )
                            {
                                {
                                    frame_guard.setLineNumber( 234 );
                                    PyObject *_tmp_unpack_2 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                                    if ( _tmp_unpack_2 == NULL )
                                    {
                                        break;
                                    }
                                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_2 );
                                    {
                                        frame_guard.setLineNumber( 234 );
                                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                                        _python_var_optgroup_key.assign0( _python_tmp_element_1.asObject() );
                                        _python_var_optgroup_value.assign0( _python_tmp_element_2.asObject() );
                                    }
                                }
                                frame_guard.setLineNumber( 235 );
                                {
                                    PyObjectTempKeeper0 cmp1;
                                    if ( ( cmp1.assign( _python_var_value.asObject() ), RICH_COMPARE_BOOL_EQ( cmp1.asObject0(), _python_var_optgroup_key.asObject() ) ) )
                                {
                                    return INCREASE_REFCOUNT( Py_None );
                                }
                                }

                               CONSIDER_THREADING();
                            }
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 237 );
                        {
                            PyObjectTempKeeper0 cmp3;
                            if ( ( cmp3.assign( _python_var_value.asObject() ), RICH_COMPARE_BOOL_EQ( cmp3.asObject0(), _python_var_option_key.asObject() ) ) )
                        {
                            return INCREASE_REFCOUNT( Py_None );
                        }
                        }
                    }

                   CONSIDER_THREADING();
                }
            }
            frame_guard.setLineNumber( 239 );
            {
                PyObjectTempKeeper1 op5;
                _python_var_msg.assign1( ( op5.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_choice ) ), BINARY_OPERATION_REMAINDER( op5.asObject0(), _python_var_value.asObject() ) ) );
            }
            frame_guard.setLineNumber( 240 );
            {
                PyObjectTempKeeper1 call7;
                {
                    PyObjectTemporary tmp_exception_type( ( call7.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_msg.asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        }
        frame_guard.setLineNumber( 242 );
        if ( ( ( _python_var_value.asObject() == Py_None ) && (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_null ) ).asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 243 );
            {
                PyObjectTempKeeper1 call11;
                {
                    PyObjectTemporary tmp_exception_type( ( call11.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_null ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        frame_guard.setLineNumber( 245 );
        {
            PyObjectTempKeeper0 cmp15;
            if ( ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_blank ) ).asObject() ) )) && ( cmp15.assign( _python_var_value.asObject() ), SEQUENCE_CONTAINS_BOOL( cmp15.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_values ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 246 );
            {
                PyObjectTempKeeper1 call13;
                {
                    PyObjectTemporary tmp_exception_type( ( call13.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_blank ) ).asObject() ) ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
            }
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_model_instance.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_msg.updateLocalsDict( _python_var_optgroup_value.updateLocalsDict( _python_var_optgroup_key.updateLocalsDict( _python_var_option_value.updateLocalsDict( _python_var_option_key.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_11_validate_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_11_validate_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_11_validate_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_11_validate_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_model_instance = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "validate() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model_instance == key )
            {
                if (unlikely( _python_par_model_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'model_instance'" );
                    goto error_exit;
                }

                _python_par_model_instance = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model_instance, key ) )
            {
                if (unlikely( _python_par_model_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'model_instance'" );
                    goto error_exit;
                }

                _python_par_model_instance = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "validate() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "validate() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_model_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'model_instance'" );
             goto error_exit;
         }

        _python_par_model_instance = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_11_validate_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_value, _python_par_model_instance );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_model_instance );

    return NULL;
}

static PyObject *dparse_function_11_validate_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_11_validate_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_11_validate_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_12_clean_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_model_instance )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_model_instance( _python_str_plain_model_instance, _python_par_model_instance );

    // Actual function code.
    static PyFrameObject *frame_function_12_clean_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_12_clean_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_12_clean_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_12_clean_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_12_clean_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_12_clean_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_9f72fb5d32ca5d99c7833cdbd4538670, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_12_clean_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_12_clean_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 254 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_value.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 255 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validate ) ), call4.assign( _python_var_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_model_instance.asObject() ) ) );
        }
        frame_guard.setLineNumber( 256 );
        {
            PyObjectTempKeeper1 call6;
            DECREASE_REFCOUNT( ( call6.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_run_validators ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 257 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_model_instance.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_12_clean_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_12_clean_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_12_clean_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_12_clean_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_model_instance = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "clean() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model_instance == key )
            {
                if (unlikely( _python_par_model_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'model_instance'" );
                    goto error_exit;
                }

                _python_par_model_instance = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model_instance, key ) )
            {
                if (unlikely( _python_par_model_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'model_instance'" );
                    goto error_exit;
                }

                _python_par_model_instance = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "clean() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "clean() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "clean() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "clean() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "clean() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "clean() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_model_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "clean() got multiple values for keyword argument 'model_instance'" );
             goto error_exit;
         }

        _python_par_model_instance = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_12_clean_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_value, _python_par_model_instance );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_model_instance );

    return NULL;
}

static PyObject *dparse_function_12_clean_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_12_clean_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_12_clean_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_connection )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );
    PyObjectLocalVariable _python_var_data( _python_str_plain_data );

    // Actual function code.
    static PyFrameObject *frame_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_13_db_type_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_b9a57fd99a3e710f4d8b1927990d5ca1, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 279 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 call2;
            _python_var_data.assign1( ( call1.assign( _mvar_django__db__models__fields_DictWrapper.asObject0() ), call2.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___dict__ ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_quote_name ) ).asObject(), _python_unicode_plain_qn_ ) ) );
        }
        frame_guard.setLineNumber( 280 );
        try
        {
            frame_guard.setLineNumber( 281 );
            {
                PyObjectTempKeeper1 op7;
                PyObjectTempKeeper1 subscr5;
                return ( op7.assign( ( subscr5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_creation ) ).asObject(), _python_str_plain_data_types ) ), LOOKUP_SUBSCRIPT( subscr5.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_internal_type ) ).asObject() ) ).asObject() ) ) ), BINARY_OPERATION_REMAINDER( op7.asObject0(), _python_var_data.asObject() ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_KeyError ) )
            {
                frame_guard.detachFrame();
                return INCREASE_REFCOUNT( Py_None );
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_connection.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_data.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_connection = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "db_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "db_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "db_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "db_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "db_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "db_type() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "db_type() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "db_type() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "db_type() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "db_type() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "db_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "db_type() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "db_type() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "db_type() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "db_type() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_connection );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_connection );

    return NULL;
}

static PyObject *dparse_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_14_unique_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_14_unique_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_14_unique_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_14_unique_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_14_unique_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_14_unique_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_14_unique_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_18213a2b951bd38efe2c18ce68cb3f99, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_14_unique_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_14_unique_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 288 );
        {
            PyObjectTempKeeper1 keeper_0;
            return ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__unique ) ) ) ? keeper_0.asObject() : LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_primary_key ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_14_unique_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_14_unique_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_14_unique_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_14_unique_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "unique() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "unique() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "unique() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "unique() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "unique() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "unique() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "unique() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "unique() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "unique() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "unique() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "unique() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "unique() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "unique() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "unique() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "unique() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "unique() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "unique() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_14_unique_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_14_unique_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_14_unique_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_14_unique_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );

    // Actual function code.
    static PyFrameObject *frame_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_e2ef2352108bbbbac1b6fc983826bc93, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 291 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 292 );
            {
                    PyObject *tmp_identifier = _python_var_name.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_name );
            }
        }
        {
            frame_guard.setLineNumber( 293 );
            PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_attname_column ) ).asObject() ) ).asObject() ) );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_attname );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_column );
            }
        }
        frame_guard.setLineNumber( 294 );
        if ( ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_verbose_name ) ).asObject() == Py_None ) && CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 295 );
            {
                    PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ).asObject(), _python_str_plain_replace ) ).asObject(), _python_unicode_plain__, _python_unicode_space ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject(), _python_var_self.asObject(), _python_str_plain_verbose_name );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_name() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_attributes_from_name() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "set_attributes_from_name() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "set_attributes_from_name() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "set_attributes_from_name() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "set_attributes_from_name() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_attributes_from_name() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "set_attributes_from_name() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "set_attributes_from_name() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "set_attributes_from_name() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_name() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_name() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_name() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_name() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "set_attributes_from_name() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "set_attributes_from_name() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "set_attributes_from_name() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "set_attributes_from_name() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_attributes_from_name() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "set_attributes_from_name() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_cls, PyObject *_python_par_name, PyObject *_python_par_virtual_only )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_virtual_only( _python_str_plain_virtual_only, _python_par_virtual_only );

    // Actual function code.
    static PyFrameObject *frame_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_8b8df65f6b7ddee7b0f2239e400f57f0, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 298 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_set_attributes_from_name ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_name.asObject() ) ) );
        }
        frame_guard.setLineNumber( 299 );
        {
                PyObject *tmp_identifier = _python_var_cls.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_model );
        }
        frame_guard.setLineNumber( 300 );
        if ( CHECK_IF_TRUE( _python_var_virtual_only.asObject() ) )
        {
            frame_guard.setLineNumber( 301 );
            {
                PyObjectTempKeeper1 call3;
                DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_add_virtual_field ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_self.asObject() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 303 );
            {
                PyObjectTempKeeper1 call5;
                DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_add_field ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_self.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 304 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 305 );
            {
                PyObjectTempKeeper0 call7;
                PyObjectTempKeeper1 call8;
                PyObjectTempKeeper0 setattr10;
                PyObjectTempKeeper1 setattr11;
                ( ( setattr10.assign( _python_var_cls.asObject() ), setattr11.assign( BINARY_OPERATION_REMAINDER( _python_unicode_digest_b662704c33028df98d28f887dcac8086, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ).asObject() ) ), BUILTIN_SETATTR( setattr10.asObject0(), setattr11.asObject0(), PyObjectTemporary( ( call7.assign( _mvar_django__db__models__fields_curry.asObject0() ), call8.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__get_FIELD_display ) ).asObject() ) ), CALL_FUNCTION( call7.asObject0(), call8.asObject0(), PyObjectTemporary( MAKE_DICT1( _python_var_self.asObject(), _python_str_plain_field ) ).asObject() ) ) ).asObject() ) ), Py_None );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_virtual_only.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_cls.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_cls = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_virtual_only = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_virtual_only == key )
            {
                if (unlikely( _python_par_virtual_only ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'virtual_only'" );
                    goto error_exit;
                }

                _python_par_virtual_only = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_virtual_only, key ) )
            {
                if (unlikely( _python_par_virtual_only ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'virtual_only'" );
                    goto error_exit;
                }

                _python_par_virtual_only = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "contribute_to_class() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_virtual_only != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'virtual_only'" );
             goto error_exit;
         }

        _python_par_virtual_only = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_virtual_only == NULL )
    {
        _python_par_virtual_only = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_virtual_only );
    }


    return impl_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_cls, _python_par_name, _python_par_virtual_only );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_cls );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_virtual_only );

    return NULL;
}

static PyObject *dparse_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_071dc4aa51da4e389b4b9e59ecf6481e, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 309 );
        return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_attname() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_attname() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_attname() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_attname() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_attname() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_attname() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_attname() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_attname() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_attname() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_attname() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_attname() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_attname() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_attname() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_attname() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_attname() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_attname() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_attname() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_attname( _python_str_plain_attname );
    PyObjectLocalVariable _python_var_column( _python_str_plain_column );

    // Actual function code.
    static PyFrameObject *frame_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_3ddf752b0c83d0056a8cd63e1bf9f7a5, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 312 );
        _python_var_attname.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_attname ) ).asObject() ) );
        frame_guard.setLineNumber( 313 );
        {
            PyObjectTempKeeper1 keeper_0;
            _python_var_column.assign0( ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_db_column ) ) ) ? PyObjectTemporary( keeper_0.asObject() ).asObject() : _python_var_attname.asObject() ) );
        }
        frame_guard.setLineNumber( 314 );
        {
            PyObjectTempKeeper0 make_tuple1;
            return ( make_tuple1.assign( _python_var_attname.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_column.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_column.updateLocalsDict( _python_var_attname.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_attname_column() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_attname_column() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_attname_column() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_attname_column() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_attname_column() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_attname_column() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_attname_column() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_0916b0975b5f4b6104971cd35b79540b, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 317 );
        return BINARY_OPERATION_REMAINDER( _python_unicode_digest_a201d935d015c1b1ae515d11d2c39035, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_cache_name() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_cache_name() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_cache_name() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_cache_name() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_cache_name() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_cache_name() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_cache_name() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_cache_name() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_cache_name() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_cache_name() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_cache_name() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_cache_name() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_cache_name() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_cache_name() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_cache_name() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_cache_name() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_cache_name() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_ef1314a66b8f76273f1ced9f26c0980b, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 320 );
        return LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___name__ );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_model_instance, PyObject *_python_par_add )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_model_instance( _python_str_plain_model_instance, _python_par_model_instance );
    PyObjectLocalParameterVariableNoDel _python_var_add( _python_str_plain_add, _python_par_add );

    // Actual function code.
    static PyFrameObject *frame_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_7b71ada9689dcc0100cc92ca8d30152d, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 326 );
        {
            PyObjectTempKeeper0 getattr1;
            return ( getattr1.assign( _python_var_model_instance.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attname ) ).asObject(), NULL ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_add.updateLocalsDict( _python_var_model_instance.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_model_instance = NULL;
    PyObject *_python_par_add = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "pre_save() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model_instance == key )
            {
                if (unlikely( _python_par_model_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'model_instance'" );
                    goto error_exit;
                }

                _python_par_model_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_add == key )
            {
                if (unlikely( _python_par_add ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'add'" );
                    goto error_exit;
                }

                _python_par_add = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model_instance, key ) )
            {
                if (unlikely( _python_par_model_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'model_instance'" );
                    goto error_exit;
                }

                _python_par_model_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_add, key ) )
            {
                if (unlikely( _python_par_add ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'add'" );
                    goto error_exit;
                }

                _python_par_add = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "pre_save() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "pre_save() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "pre_save() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "pre_save() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "pre_save() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "pre_save() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_model_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'model_instance'" );
             goto error_exit;
         }

        _python_par_model_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_add != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'add'" );
             goto error_exit;
         }

        _python_par_add = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_model_instance, _python_par_add );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_model_instance );
    Py_XDECREF( _python_par_add );

    return NULL;
}

static PyObject *dparse_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_b60fe1e66379f56cac0609d83a89e671, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 332 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_connection, PyObject *_python_par_prepared )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );
    PyObjectLocalParameterVariableNoDel _python_var_prepared( _python_str_plain_prepared, _python_par_prepared );

    // Actual function code.
    static PyFrameObject *frame_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_930794451bfaf5c1398a0daa4a71fbcb, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 341 );
        if ( (!( CHECK_IF_TRUE( _python_var_prepared.asObject() ) )) )
        {
            frame_guard.setLineNumber( 342 );
            {
                PyObjectTempKeeper1 call1;
                _python_var_value.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_prep_value ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 343 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_prepared.updateLocalsDict( _python_var_connection.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_connection = NULL;
    PyObject *_python_par_prepared = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_prepared == key )
            {
                if (unlikely( _python_par_prepared ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
                    goto error_exit;
                }

                _python_par_prepared = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_prepared, key ) )
            {
                if (unlikely( _python_par_prepared ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
                    goto error_exit;
                }

                _python_par_prepared = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_db_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_prepared != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
             goto error_exit;
         }

        _python_par_prepared = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_prepared == NULL )
    {
        _python_par_prepared = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_prepared );
    }


    return impl_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_value, _python_par_connection, _python_par_prepared );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_connection );
    Py_XDECREF( _python_par_prepared );

    return NULL;
}

static PyObject *dparse_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_connection )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );

    // Actual function code.
    static PyFrameObject *frame_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_7e5ae86eea7ee594297653a2f14fa842, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 349 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call2;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_db_prep_value ) ), call2.assign( MAKE_TUPLE1( _python_var_value.asObject() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( MAKE_DICT2( _python_var_connection.asObject(), _python_str_plain_connection, Py_False, _python_str_plain_prepared ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_connection.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_connection = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_db_prep_save() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_value, _python_par_connection );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_connection );

    return NULL;
}

static PyObject *dparse_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_lookup_type, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_lookup_type( _python_str_plain_lookup_type, _python_par_lookup_type );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_v( _python_str_plain_v );

    // Actual function code.
    static PyFrameObject *frame_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_d46ad6c3b78bfc4bd0cf88ce89fce0de, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 356 );
        if ( HAS_ATTRIBUTE( _python_var_value.asObject(), _python_unicode_plain_prepare ) )
        {
            frame_guard.setLineNumber( 357 );
            return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_prepare ) ).asObject() );
        }
        frame_guard.setLineNumber( 358 );
        if ( HAS_ATTRIBUTE( _python_var_value.asObject(), _python_unicode_plain__prepare ) )
        {
            frame_guard.setLineNumber( 359 );
            return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain__prepare ) ).asObject() );
        }
        frame_guard.setLineNumber( 361 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_var_lookup_type.asObject(), _python_tuple_86e48bddef2919bc78ec8a66e28642b8_tuple ) )
        {
            frame_guard.setLineNumber( 367 );
            return _python_var_value.asObject1();
        }
        else
        {
            frame_guard.setLineNumber( 368 );
            if ( SEQUENCE_CONTAINS_BOOL( _python_var_lookup_type.asObject(), _python_tuple_017391da0c2c0b2646011b4a27f82fb2_tuple ) )
            {
                frame_guard.setLineNumber( 369 );
                {
                    PyObjectTempKeeper1 call1;
                    return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_prep_value ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 370 );
                if ( SEQUENCE_CONTAINS_BOOL( _python_var_lookup_type.asObject(), _python_tuple_unicode_plain_range_unicode_plain_in_tuple ) )
                {
                    frame_guard.setLineNumber( 371 );
                    return impl_listcontr_1_of_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( MAKE_ITERATOR( _python_var_value.asObject() ), _python_var_self, _python_var_v );
                }
                else
                {
                    frame_guard.setLineNumber( 372 );
                    if ( RICH_COMPARE_BOOL_EQ( _python_var_lookup_type.asObject(), _python_unicode_plain_year ) )
                    {
                        frame_guard.setLineNumber( 373 );
                        try
                        {
                            frame_guard.setLineNumber( 374 );
                            return TO_INT( _python_var_value.asObject() );
                        }
                        catch ( PythonException &_exception )
                        {
                            if ( !_exception.hasTraceback() )
                            {
                                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                            }
                            else
                            {
                                _exception.addTraceback( frame_guard.getFrame0() );
                            }

                            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                            _exception.toExceptionHandler();

                            if ( _exception.matches( PyExc_ValueError ) )
                            {
                                frame_guard.detachFrame();
                                frame_guard.setLineNumber( 376 );
                                {
                                        PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( _python_unicode_digest_b66846e13d63e0a45ab5372bb5ce10ca ) ).asObject() ) );
                                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                                }
                            }
                            else
                            {
                                PyTracebackObject *tb = _exception.getTraceback();
                                frame_guard.setLineNumber( tb->tb_lineno );
                                _exception.setTraceback( tb->tb_next );
                                tb->tb_next = NULL;

                                throw;
                            }
                        }
                    }
                }
            }
        }
        frame_guard.setLineNumber( 379 );
        {
                PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_TypeError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_78fe1dfe2574e4d7dd95c0b8963562db, _python_var_lookup_type.asObject() ) ).asObject() ) ).asObject() ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_lookup_type.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_v.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_lookup_type = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_lookup_type == key )
            {
                if (unlikely( _python_par_lookup_type ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
                    goto error_exit;
                }

                _python_par_lookup_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_lookup_type, key ) )
            {
                if (unlikely( _python_par_lookup_type ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
                    goto error_exit;
                }

                _python_par_lookup_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_lookup() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_lookup_type != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
             goto error_exit;
         }

        _python_par_lookup_type = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_lookup_type, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_lookup_type );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( PyObject *_python_par___iterator,PyObjectLocalParameterVariableNoDel &python_closure_self,PyObjectLocalVariable &python_closure_v )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 371 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 371 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_v.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper1 call1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( python_closure_self.asObject(), _python_str_plain_get_prep_value ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), python_closure_v.asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_lookup_type, PyObject *_python_par_value, PyObject *_python_par_connection, PyObject *_python_par_prepared )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_lookup_type( _python_str_plain_lookup_type, _python_par_lookup_type );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );
    PyObjectLocalParameterVariableNoDel _python_var_prepared( _python_str_plain_prepared, _python_par_prepared );
    PyObjectLocalVariable _python_var_sql( _python_str_plain_sql );
    PyObjectLocalVariable _python_var_params( _python_str_plain_params );
    PyObjectLocalVariable _python_var_v( _python_str_plain_v );

    // Actual function code.
    static PyFrameObject *frame_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_a0f5af4f885299e1b59aa48472767981, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 386 );
        if ( (!( CHECK_IF_TRUE( _python_var_prepared.asObject() ) )) )
        {
            frame_guard.setLineNumber( 387 );
            {
                PyObjectTempKeeper1 call1;
                PyObjectTempKeeper0 call2;
                _python_var_value.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_prep_lookup ) ), call2.assign( _python_var_lookup_type.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 388 );
        if ( HAS_ATTRIBUTE( _python_var_value.asObject(), _python_unicode_plain_get_compiler ) )
        {
            frame_guard.setLineNumber( 389 );
            {
                PyObjectTempKeeper1 call4;
                _python_var_value.assign1( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_get_compiler ) ), CALL_FUNCTION( call4.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_connection.asObject(), _python_str_plain_connection ) ).asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 390 );
        if ( ( HAS_ATTRIBUTE( _python_var_value.asObject(), _python_unicode_plain_as_sql ) || HAS_ATTRIBUTE( _python_var_value.asObject(), _python_unicode_plain__as_sql ) ) )
        {
            frame_guard.setLineNumber( 393 );
            if ( HAS_ATTRIBUTE( _python_var_value.asObject(), _python_unicode_plain_relabeled_clone ) )
            {
                frame_guard.setLineNumber( 394 );
                return _python_var_value.asObject1();
            }
            frame_guard.setLineNumber( 395 );
            if ( HAS_ATTRIBUTE( _python_var_value.asObject(), _python_unicode_plain_as_sql ) )
            {
                {
                    frame_guard.setLineNumber( 396 );
                    PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_as_sql ) ).asObject() ) ).asObject() ) );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                    _python_var_sql.assign0( _python_tmp_element_1.asObject() );
                    _python_var_params.assign0( _python_tmp_element_2.asObject() );
                }
            }
            else
            {
                {
                    frame_guard.setLineNumber( 398 );
                    PyObject *_tmp_python_tmp_source_iter;
                    {
                        PyObjectTempKeeper1 call7;
                        _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain__as_sql ) ), CALL_FUNCTION( call7.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_connection.asObject(), _python_str_plain_connection ) ).asObject() ) ) ).asObject() );
                    }
                    PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                    PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                    PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                    UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                    _python_var_sql.assign0( _python_tmp_element_1.asObject() );
                    _python_var_params.assign0( _python_tmp_element_2.asObject() );
                }
            }
            frame_guard.setLineNumber( 399 );
            {
                PyObjectTempKeeper0 call10;
                PyObjectTempKeeper1 call11;
                return ( call10.assign( _mvar_django__db__models__fields_QueryWrapper.asObject0() ), call11.assign( BINARY_OPERATION_REMAINDER( _python_unicode_digest_614103b76fd0d9de068d69034fb6f987, _python_var_sql.asObject() ) ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), call11.asObject0(), _python_var_params.asObject() ) );
            }
        }
        frame_guard.setLineNumber( 401 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_var_lookup_type.asObject(), _python_tuple_f4e21e70015d350246ecd6a4431a0205_tuple ) )
        {
            frame_guard.setLineNumber( 403 );
            return MAKE_LIST1( _python_var_value.asObject1() );
        }
        else
        {
            frame_guard.setLineNumber( 404 );
            if ( SEQUENCE_CONTAINS_BOOL( _python_var_lookup_type.asObject(), _python_tuple_017391da0c2c0b2646011b4a27f82fb2_tuple ) )
            {
                frame_guard.setLineNumber( 405 );
                {
                    PyObjectTempKeeper1 call17;
                    PyObjectTempKeeper1 call18;
                    PyObjectTempKeeper0 make_dict13;
                    return MAKE_LIST1( ( call17.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_db_prep_value ) ), call18.assign( MAKE_TUPLE1( _python_var_value.asObject() ) ), CALL_FUNCTION( call17.asObject0(), call18.asObject0(), PyObjectTemporary( ( make_dict13.assign( _python_var_connection.asObject() ), MAKE_DICT2( make_dict13.asObject0(), _python_str_plain_connection, _python_var_prepared.asObject(), _python_str_plain_prepared ) ) ).asObject() ) ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 407 );
                if ( SEQUENCE_CONTAINS_BOOL( _python_var_lookup_type.asObject(), _python_tuple_unicode_plain_range_unicode_plain_in_tuple ) )
                {
                    frame_guard.setLineNumber( 408 );
                    return impl_listcontr_1_of_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( MAKE_ITERATOR( _python_var_value.asObject() ), _python_var_connection, _python_var_prepared, _python_var_self, _python_var_v );
                }
                else
                {
                    frame_guard.setLineNumber( 410 );
                    if ( SEQUENCE_CONTAINS_BOOL( _python_var_lookup_type.asObject(), _python_tuple_unicode_plain_contains_unicode_plain_icontains_tuple ) )
                    {
                        frame_guard.setLineNumber( 411 );
                        {
                            PyObjectTempKeeper1 call20;
                            return MAKE_LIST1( BINARY_OPERATION_REMAINDER( _python_unicode_digest_a42150d6de35d6b05e75448aef3e8fd9, PyObjectTemporary( ( call20.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_prep_for_like_query ) ), CALL_FUNCTION_WITH_ARGS( call20.asObject0(), _python_var_value.asObject() ) ) ).asObject() ) );
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 412 );
                        if ( RICH_COMPARE_BOOL_EQ( _python_var_lookup_type.asObject(), _python_unicode_plain_iexact ) )
                        {
                            frame_guard.setLineNumber( 413 );
                            {
                                PyObjectTempKeeper1 call22;
                                return MAKE_LIST1( ( call22.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_prep_for_iexact_query ) ), CALL_FUNCTION_WITH_ARGS( call22.asObject0(), _python_var_value.asObject() ) ) );
                            }
                        }
                        else
                        {
                            frame_guard.setLineNumber( 414 );
                            if ( SEQUENCE_CONTAINS_BOOL( _python_var_lookup_type.asObject(), _python_tuple_unicode_plain_startswith_unicode_plain_istartswith_tuple ) )
                            {
                                frame_guard.setLineNumber( 415 );
                                {
                                    PyObjectTempKeeper1 call24;
                                    return MAKE_LIST1( BINARY_OPERATION_REMAINDER( _python_unicode_digest_b54bda3afa1b41a5019dcacc63347119, PyObjectTemporary( ( call24.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_prep_for_like_query ) ), CALL_FUNCTION_WITH_ARGS( call24.asObject0(), _python_var_value.asObject() ) ) ).asObject() ) );
                                }
                            }
                            else
                            {
                                frame_guard.setLineNumber( 416 );
                                if ( SEQUENCE_CONTAINS_BOOL( _python_var_lookup_type.asObject(), _python_tuple_unicode_plain_endswith_unicode_plain_iendswith_tuple ) )
                                {
                                    frame_guard.setLineNumber( 417 );
                                    {
                                        PyObjectTempKeeper1 call26;
                                        return MAKE_LIST1( BINARY_OPERATION_REMAINDER( _python_unicode_digest_43573355c1e67821d32a366895f07072, PyObjectTemporary( ( call26.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_prep_for_like_query ) ), CALL_FUNCTION_WITH_ARGS( call26.asObject0(), _python_var_value.asObject() ) ) ).asObject() ) );
                                    }
                                }
                                else
                                {
                                    frame_guard.setLineNumber( 418 );
                                    if ( RICH_COMPARE_BOOL_EQ( _python_var_lookup_type.asObject(), _python_unicode_plain_isnull ) )
                                    {
                                        return PyList_New( 0 );
                                    }
                                    else
                                    {
                                        frame_guard.setLineNumber( 420 );
                                        if ( RICH_COMPARE_BOOL_EQ( _python_var_lookup_type.asObject(), _python_unicode_plain_year ) )
                                        {
                                            frame_guard.setLineNumber( 421 );
                                            {
                                                PyObjectTempKeeper0 isinstance34;
                                                if ( ( isinstance34.assign( _python_var_self.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance34.asObject0(), _mvar_django__db__models__fields_DateTimeField.asObject0() ) ) )
                                            {
                                                frame_guard.setLineNumber( 422 );
                                                {
                                                    PyObjectTempKeeper1 call28;
                                                    return ( call28.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_year_lookup_bounds_for_datetime_field ) ), CALL_FUNCTION_WITH_ARGS( call28.asObject0(), _python_var_value.asObject() ) );
                                                }
                                            }
                                            else
                                            {
                                                frame_guard.setLineNumber( 423 );
                                                {
                                                    PyObjectTempKeeper0 isinstance32;
                                                    if ( ( isinstance32.assign( _python_var_self.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance32.asObject0(), _mvar_django__db__models__fields_DateField.asObject0() ) ) )
                                                {
                                                    frame_guard.setLineNumber( 424 );
                                                    {
                                                        PyObjectTempKeeper1 call30;
                                                        return ( call30.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_year_lookup_bounds_for_date_field ) ), CALL_FUNCTION_WITH_ARGS( call30.asObject0(), _python_var_value.asObject() ) );
                                                    }
                                                }
                                                else
                                                {
                                                    frame_guard.setLineNumber( 426 );
                                                    return MAKE_LIST1( _python_var_value.asObject1() );
                                                }
                                                }
                                            }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_prepared.updateLocalsDict( _python_var_connection.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_lookup_type.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_v.updateLocalsDict( _python_var_params.updateLocalsDict( _python_var_sql.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_lookup_type = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_connection = NULL;
    PyObject *_python_par_prepared = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_lookup_type == key )
            {
                if (unlikely( _python_par_lookup_type ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
                    goto error_exit;
                }

                _python_par_lookup_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_prepared == key )
            {
                if (unlikely( _python_par_prepared ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() got multiple values for keyword argument 'prepared'" );
                    goto error_exit;
                }

                _python_par_prepared = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_lookup_type, key ) )
            {
                if (unlikely( _python_par_lookup_type ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
                    goto error_exit;
                }

                _python_par_lookup_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_prepared, key ) )
            {
                if (unlikely( _python_par_prepared ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() got multiple values for keyword argument 'prepared'" );
                    goto error_exit;
                }

                _python_par_prepared = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_db_prep_lookup() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_lookup_type != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
             goto error_exit;
         }

        _python_par_lookup_type = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_prepared != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_lookup() got multiple values for keyword argument 'prepared'" );
             goto error_exit;
         }

        _python_par_prepared = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_prepared == NULL )
    {
        _python_par_prepared = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_prepared );
    }


    return impl_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_lookup_type, _python_par_value, _python_par_connection, _python_par_prepared );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_lookup_type );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_connection );
    Py_XDECREF( _python_par_prepared );

    return NULL;
}

static PyObject *dparse_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 5)
    {
        return impl_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields( PyObject *_python_par___iterator,PyObjectLocalParameterVariableNoDel &python_closure_connection,PyObjectLocalParameterVariableNoDel &python_closure_prepared,PyObjectLocalParameterVariableNoDel &python_closure_self,PyObjectLocalVariable &python_closure_v )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 408 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 408 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_v.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper1 call5;
                    PyObjectTempKeeper1 call6;
                    PyObjectTempKeeper0 make_dict1;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( call5.assign( LOOKUP_ATTRIBUTE( python_closure_self.asObject(), _python_str_plain_get_db_prep_value ) ), call6.assign( MAKE_TUPLE1( python_closure_v.asObject() ) ), CALL_FUNCTION( call5.asObject0(), call6.asObject0(), PyObjectTemporary( ( make_dict1.assign( python_closure_connection.asObject() ), MAKE_DICT2( make_dict1.asObject0(), _python_str_plain_connection, python_closure_prepared.asObject(), _python_str_plain_prepared ) ) ).asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_27_has_default_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_725c916405658a128c559960e5ab621a, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 432 );
        return INCREASE_REFCOUNT( BOOL_FROM( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_default ) ).asObject() != _mvar_django__db__models__fields_NOT_PROVIDED.asObject0() ) ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "has_default() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "has_default() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "has_default() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "has_default() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "has_default() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "has_default() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "has_default() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "has_default() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "has_default() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "has_default() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "has_default() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "has_default() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "has_default() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "has_default() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "has_default() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "has_default() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "has_default() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_28_get_default_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_25de3c05785c80f486e6ebc2313fa72d, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 438 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_has_default ) ).asObject() ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 439 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_callable ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_default ) ).asObject() ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 440 );
                return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_default ) ).asObject() );
            }
            frame_guard.setLineNumber( 441 );
            {
                PyObjectTempKeeper0 call1;
                return ( call1.assign( _mvar_django__db__models__fields_force_text.asObject0() ), CALL_FUNCTION( call1.asObject0(), PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_default ) ).asObject() ) ).asObject(), PyObjectTemporary( PyDict_Copy( _python_dict_e3f0fef39fbf6dbec750d2896d62ce03 ) ).asObject() ) );
            }
        }
        frame_guard.setLineNumber( 442 );
        if ( ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_empty_strings_allowed ) ).asObject() ) )) || ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_null ) ).asObject() ) && (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_connection.asObject0(), _python_str_plain_features ) ).asObject(), _python_str_plain_interprets_empty_strings_as_nulls ) ).asObject() ) )) ) ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( _python_unicode_empty );
}
static PyObject *fparse_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_default() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_default() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_default() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_default() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_default() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_default() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_default() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_default() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_default() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_default() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_default() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_default() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_default() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_default() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_default() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_default() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_default() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_01153d6ebe8ccec987ee7ed26c91f080, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 448 );
        return BINARY_OPERATION_REMAINDER( _python_unicode_digest_7204e91cb2282091548313740b2aae07, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_validator_unique_lookup_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_validator_unique_lookup_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_include_blank, PyObject *_python_par_blank_choice )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_include_blank( _python_str_plain_include_blank, _python_par_include_blank );
    PyObjectLocalParameterVariableNoDel _python_var_blank_choice( _python_str_plain_blank_choice, _python_par_blank_choice );
    PyObjectLocalVariable _python_var_first_choice( _python_str_plain_first_choice );
    PyObjectLocalVariable _python_var_rel_model( _python_str_plain_rel_model );
    PyObjectLocalVariable _python_var_lst( _python_str_plain_lst );
    PyObjectLocalVariable _python_var_x( _python_str_plain_x );

    // Actual function code.
    static PyFrameObject *frame_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_9758e8140eeb1ede2f7850303052a2ad, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 453 );
        _python_var_first_choice.assign1( ( CHECK_IF_TRUE( _python_var_include_blank.asObject() ) ? _python_var_blank_choice.asObject1() : PyList_New( 0 ) ) );
        frame_guard.setLineNumber( 454 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 455 );
            {
                PyObjectTempKeeper0 op1;
                return ( op1.assign( _python_var_first_choice.asObject() ), BINARY_OPERATION_ADD( op1.asObject0(), PyObjectTemporary( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ).asObject() ) ).asObject() ) );
            }
        }
        frame_guard.setLineNumber( 456 );
        _python_var_rel_model.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_to ) );
        frame_guard.setLineNumber( 457 );
        if ( HAS_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_unicode_plain_get_related_field ) )
        {
            frame_guard.setLineNumber( 458 );
            {
                PyObjectTempKeeper1 call3;
                _python_var_lst.assign1( impl_listcontr_1_of_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields( MAKE_ITERATOR( PyObjectTemporary( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rel_model.asObject(), _python_str_plain__default_manager ) ).asObject(), _python_str_plain_complex_filter ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_limit_choices_to ) ).asObject() ) ) ).asObject() ), _python_var_self, _python_var_x ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 463 );
            {
                PyObjectTempKeeper1 call5;
                _python_var_lst.assign1( impl_listcontr_2_of_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields( MAKE_ITERATOR( PyObjectTemporary( ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_rel_model.asObject(), _python_str_plain__default_manager ) ).asObject(), _python_str_plain_complex_filter ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_limit_choices_to ) ).asObject() ) ) ).asObject() ), _python_var_x ) );
            }
        }
        frame_guard.setLineNumber( 466 );
        {
            PyObjectTempKeeper0 op7;
            return ( op7.assign( _python_var_first_choice.asObject() ), BINARY_OPERATION_ADD( op7.asObject0(), _python_var_lst.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_blank_choice.updateLocalsDict( _python_var_include_blank.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_x.updateLocalsDict( _python_var_lst.updateLocalsDict( _python_var_rel_model.updateLocalsDict( _python_var_first_choice.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_include_blank = NULL;
    PyObject *_python_par_blank_choice = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_choices() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_choices() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_include_blank == key )
            {
                if (unlikely( _python_par_include_blank ))
                {
                    PyErr_Format( PyExc_TypeError, "get_choices() got multiple values for keyword argument 'include_blank'" );
                    goto error_exit;
                }

                _python_par_include_blank = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_blank_choice == key )
            {
                if (unlikely( _python_par_blank_choice ))
                {
                    PyErr_Format( PyExc_TypeError, "get_choices() got multiple values for keyword argument 'blank_choice'" );
                    goto error_exit;
                }

                _python_par_blank_choice = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_choices() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_include_blank, key ) )
            {
                if (unlikely( _python_par_include_blank ))
                {
                    PyErr_Format( PyExc_TypeError, "get_choices() got multiple values for keyword argument 'include_blank'" );
                    goto error_exit;
                }

                _python_par_include_blank = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_blank_choice, key ) )
            {
                if (unlikely( _python_par_blank_choice ))
                {
                    PyErr_Format( PyExc_TypeError, "get_choices() got multiple values for keyword argument 'blank_choice'" );
                    goto error_exit;
                }

                _python_par_blank_choice = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_choices() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_choices() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_choices() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_choices() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_choices() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_choices() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_choices() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_choices() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_choices() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_choices() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_choices() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_choices() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_choices() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_choices() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_include_blank != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_choices() got multiple values for keyword argument 'include_blank'" );
             goto error_exit;
         }

        _python_par_include_blank = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_blank_choice != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_choices() got multiple values for keyword argument 'blank_choice'" );
             goto error_exit;
         }

        _python_par_blank_choice = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_include_blank == NULL )
    {
        _python_par_include_blank = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_include_blank );
    }
    if ( _python_par_blank_choice == NULL )
    {
        _python_par_blank_choice = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_blank_choice );
    }


    return impl_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_include_blank, _python_par_blank_choice );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_include_blank );
    Py_XDECREF( _python_par_blank_choice );

    return NULL;
}

static PyObject *dparse_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields( PyObject *_python_par___iterator,PyObjectLocalParameterVariableNoDel &python_closure_self,PyObjectLocalVariable &python_closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 458 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 458 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_x.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call4;
                    PyObjectTempKeeper0 getattr1;
                    PyObjectTempKeeper1 make_tuple6;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( make_tuple6.assign( ( getattr1.assign( python_closure_x.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_self.asObject(), _python_str_plain_rel ) ).asObject(), _python_str_plain_get_related_field ) ).asObject() ) ).asObject(), _python_str_plain_attname ) ).asObject(), NULL ) ) ), MAKE_TUPLE2( make_tuple6.asObject0(), PyObjectTemporary( ( call4.assign( _mvar_django__db__models__fields_smart_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), python_closure_x.asObject() ) ) ).asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields( PyObject *_python_par___iterator,PyObjectLocalVariable &python_closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var___iterator( _python_str_plain___iterator, _python_par___iterator );

    // Actual function code.
    FrameGuardVeryLight frame_guard;

    {
        PyObjectTemporary _python_tmp_result( PyList_New( 0 ) );
        {
            frame_guard.setLineNumber( 463 );
            PyObject *_python_tmp_contraction_iter = _python_var___iterator.asObject();
            while( true )
            {
                frame_guard.setLineNumber( 463 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_contraction_iter );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                python_closure_x.assign0( _python_tmp_iter_value.asObject() );
                {
                    PyObjectTempKeeper0 call1;
                    PyObjectTempKeeper1 make_tuple3;
                    APPEND_TO_LIST( _python_tmp_result.asObject(), PyObjectTemporary( ( make_tuple3.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( python_closure_x.asObject(), _python_str_plain__get_pk_val ) ).asObject() ) ), MAKE_TUPLE2( make_tuple3.asObject0(), PyObjectTemporary( ( call1.assign( _mvar_django__db__models__fields_smart_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), python_closure_x.asObject() ) ) ).asObject() ) ) ).asObject() ), Py_None;
                }

               CONSIDER_THREADING();
            }
        }
        return INCREASE_REFCOUNT( _python_tmp_result.asObject() );
    }
}


static PyObject *impl_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_53b0e468a05f1eed8c815eecb63dfe6b, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 469 );
        return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_choices ) ).asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_choices_default() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_choices_default() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_choices_default() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_choices_default() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_choices_default() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_choices_default() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_choices_default() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_choices_default() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_choices_default() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_choices_default() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_choices_default() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_choices_default() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_choices_default() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_choices_default() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_choices_default() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_choices_default() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_choices_default() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_include_blank, PyObject *_python_par_blank_choice )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_include_blank( _python_str_plain_include_blank, _python_par_include_blank );
    PyObjectLocalParameterVariableNoDel _python_var_blank_choice( _python_str_plain_blank_choice, _python_par_blank_choice );
    PyObjectLocalVariable _python_var_first_choice( _python_str_plain_first_choice );

    // Actual function code.
    static PyFrameObject *frame_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_6a57cd7d735a6bcec68fe56cbf88741d, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 476 );
        _python_var_first_choice.assign1( ( CHECK_IF_TRUE( _python_var_include_blank.asObject() ) ? _python_var_blank_choice.asObject1() : PyList_New( 0 ) ) );
        frame_guard.setLineNumber( 477 );
        {
            PyObjectTempKeeper0 op1;
            return ( op1.assign( _python_var_first_choice.asObject() ), BINARY_OPERATION_ADD( op1.asObject0(), PyObjectTemporary( TO_LIST( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_flatchoices ) ).asObject() ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_blank_choice.updateLocalsDict( _python_var_include_blank.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_first_choice.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_include_blank = NULL;
    PyObject *_python_par_blank_choice = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_flatchoices() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_flatchoices() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_include_blank == key )
            {
                if (unlikely( _python_par_include_blank ))
                {
                    PyErr_Format( PyExc_TypeError, "get_flatchoices() got multiple values for keyword argument 'include_blank'" );
                    goto error_exit;
                }

                _python_par_include_blank = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_blank_choice == key )
            {
                if (unlikely( _python_par_blank_choice ))
                {
                    PyErr_Format( PyExc_TypeError, "get_flatchoices() got multiple values for keyword argument 'blank_choice'" );
                    goto error_exit;
                }

                _python_par_blank_choice = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_flatchoices() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_include_blank, key ) )
            {
                if (unlikely( _python_par_include_blank ))
                {
                    PyErr_Format( PyExc_TypeError, "get_flatchoices() got multiple values for keyword argument 'include_blank'" );
                    goto error_exit;
                }

                _python_par_include_blank = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_blank_choice, key ) )
            {
                if (unlikely( _python_par_blank_choice ))
                {
                    PyErr_Format( PyExc_TypeError, "get_flatchoices() got multiple values for keyword argument 'blank_choice'" );
                    goto error_exit;
                }

                _python_par_blank_choice = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_flatchoices() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_flatchoices() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_flatchoices() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_flatchoices() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_flatchoices() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_flatchoices() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_flatchoices() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_flatchoices() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_flatchoices() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_flatchoices() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_flatchoices() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_flatchoices() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_flatchoices() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_flatchoices() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_include_blank != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_flatchoices() got multiple values for keyword argument 'include_blank'" );
             goto error_exit;
         }

        _python_par_include_blank = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_blank_choice != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_flatchoices() got multiple values for keyword argument 'blank_choice'" );
             goto error_exit;
         }

        _python_par_blank_choice = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_include_blank == NULL )
    {
        _python_par_include_blank = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_include_blank );
    }
    if ( _python_par_blank_choice == NULL )
    {
        _python_par_blank_choice = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_blank_choice );
    }


    return impl_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_include_blank, _python_par_blank_choice );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_include_blank );
    Py_XDECREF( _python_par_blank_choice );

    return NULL;
}

static PyObject *dparse_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_obj( _python_str_plain_obj, _python_par_obj );

    // Actual function code.
    static PyFrameObject *frame_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_e82941893280971db64d271b6df2b442, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 480 );
        if ( ( _python_var_obj.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 481 );
            {
                PyObjectTempKeeper0 getattr1;
                return ( getattr1.assign( _python_var_obj.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attname ) ).asObject(), NULL ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 483 );
            return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_default ) ).asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_obj.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_obj = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_val_from_obj() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_val_from_obj() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_obj == key )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_val_from_obj() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_val_from_obj() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_obj, key ) )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_val_from_obj() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_val_from_obj() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_val_from_obj() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_get_val_from_obj() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_get_val_from_obj() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_val_from_obj() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_get_val_from_obj() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_val_from_obj() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_get_val_from_obj() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_val_from_obj() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_get_val_from_obj() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_get_val_from_obj() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_get_val_from_obj() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_get_val_from_obj() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_val_from_obj() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_val_from_obj() got multiple values for keyword argument 'obj'" );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_obj( _python_str_plain_obj, _python_par_obj );

    // Actual function code.
    static PyFrameObject *frame_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_adb7c1cf4fc3745f14ab53550c16e470, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 490 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call3;
            return ( call3.assign( _mvar_django__db__models__fields_smart_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_val_from_obj ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_obj.asObject() ) ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_obj.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_obj = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_obj == key )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_obj, key ) )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_to_string() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_to_string() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_35_bind_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_fieldmapping, PyObject *_python_par_original, PyObject *_python_par_bound_field_class )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_fieldmapping( _python_str_plain_fieldmapping, _python_par_fieldmapping );
    PyObjectLocalParameterVariableNoDel _python_var_original( _python_str_plain_original, _python_par_original );
    PyObjectLocalParameterVariableNoDel _python_var_bound_field_class( _python_str_plain_bound_field_class, _python_par_bound_field_class );

    // Actual function code.
    static PyFrameObject *frame_function_35_bind_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_35_bind_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_35_bind_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_35_bind_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_35_bind_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_35_bind_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_83f44c72c3e71535e00168e0698042d2, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_35_bind_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_35_bind_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 493 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            PyObjectTempKeeper0 call3;
            return ( call1.assign( _python_var_bound_field_class.asObject() ), call2.assign( _python_var_self.asObject() ), call3.assign( _python_var_fieldmapping.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), _python_var_original.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_bound_field_class.updateLocalsDict( _python_var_original.updateLocalsDict( _python_var_fieldmapping.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_35_bind_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_35_bind_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_35_bind_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_35_bind_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_fieldmapping = NULL;
    PyObject *_python_par_original = NULL;
    PyObject *_python_par_bound_field_class = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "bind() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "bind() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_fieldmapping == key )
            {
                if (unlikely( _python_par_fieldmapping ))
                {
                    PyErr_Format( PyExc_TypeError, "bind() got multiple values for keyword argument 'fieldmapping'" );
                    goto error_exit;
                }

                _python_par_fieldmapping = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_original == key )
            {
                if (unlikely( _python_par_original ))
                {
                    PyErr_Format( PyExc_TypeError, "bind() got multiple values for keyword argument 'original'" );
                    goto error_exit;
                }

                _python_par_original = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_bound_field_class == key )
            {
                if (unlikely( _python_par_bound_field_class ))
                {
                    PyErr_Format( PyExc_TypeError, "bind() got multiple values for keyword argument 'bound_field_class'" );
                    goto error_exit;
                }

                _python_par_bound_field_class = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "bind() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_fieldmapping, key ) )
            {
                if (unlikely( _python_par_fieldmapping ))
                {
                    PyErr_Format( PyExc_TypeError, "bind() got multiple values for keyword argument 'fieldmapping'" );
                    goto error_exit;
                }

                _python_par_fieldmapping = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_original, key ) )
            {
                if (unlikely( _python_par_original ))
                {
                    PyErr_Format( PyExc_TypeError, "bind() got multiple values for keyword argument 'original'" );
                    goto error_exit;
                }

                _python_par_original = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_bound_field_class, key ) )
            {
                if (unlikely( _python_par_bound_field_class ))
                {
                    PyErr_Format( PyExc_TypeError, "bind() got multiple values for keyword argument 'bound_field_class'" );
                    goto error_exit;
                }

                _python_par_bound_field_class = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "bind() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "bind() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "bind() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "bind() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "bind() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "bind() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "bind() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 4 )
            {
                PyErr_Format( PyExc_TypeError, "bind() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "bind() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 4 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "bind() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "bind() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 4 )
                {
                    PyErr_Format( PyExc_TypeError, "bind() takes exactly %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "bind() takes at least %d arguments (%zd given)", 4, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "bind() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_fieldmapping != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "bind() got multiple values for keyword argument 'fieldmapping'" );
             goto error_exit;
         }

        _python_par_fieldmapping = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_original != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "bind() got multiple values for keyword argument 'original'" );
             goto error_exit;
         }

        _python_par_original = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_bound_field_class != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "bind() got multiple values for keyword argument 'bound_field_class'" );
             goto error_exit;
         }

        _python_par_bound_field_class = INCREASE_REFCOUNT( args[ 3 ] );
    }


    return impl_function_35_bind_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_fieldmapping, _python_par_original, _python_par_bound_field_class );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_fieldmapping );
    Py_XDECREF( _python_par_original );
    Py_XDECREF( _python_par_bound_field_class );

    return NULL;
}

static PyObject *dparse_function_35_bind_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_35_bind_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_35_bind_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_choices( _python_str_plain_choices );

    // Actual function code.
    static PyFrameObject *frame_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_d6ac0b6ef56b9aecedb046bfcea2af60, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 496 );
        {
            PyObjectTempKeeper0 call3;
            if ( CHECK_IF_TRUE( PyObjectTemporary( ( call3.assign( _mvar_django__db__models__fields_is_iterator.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__choices ) ).asObject() ) ) ).asObject() ) )
        {
            {
                frame_guard.setLineNumber( 497 );
                PyObject *_tmp_python_tmp_source_iter;
                {
                    PyObjectTempKeeper0 call1;
                    _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( _mvar_django__db__models__fields_tee.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__choices ) ).asObject() ) ) ).asObject() );
                }
                PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
                PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                _python_var_choices.assign0( _python_tmp_element_1.asObject() );
                {
                        PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                        SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain__choices );
                }
            }
            frame_guard.setLineNumber( 498 );
            return _python_var_choices.asObject1();
        }
        else
        {
            frame_guard.setLineNumber( 500 );
            return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__choices );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_choices.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_choices() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_choices() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_choices() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_get_choices() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_get_choices() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_get_choices() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_choices() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_flat( _python_str_plain_flat );
    PyObjectLocalVariable _python_var_choice( _python_str_plain_choice );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );

    // Actual function code.
    _python_var_flat.assign1( PyList_New( 0 ) );
    static PyFrameObject *frame_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_13810ee9acc14efd86f97a7b540036c7, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 506 );
            PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ).asObject() ) );
            while( true )
            {
                {
                    frame_guard.setLineNumber( 506 );
                    PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                    if ( _tmp_unpack_1 == NULL )
                    {
                        break;
                    }
                    PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                    {
                        frame_guard.setLineNumber( 506 );
                        PyObjectTemporary _python_tmp_source_iter( MAKE_ITERATOR( _python_tmp_iter_value.asObject() ) );
                        PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
                        PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
                        UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
                        _python_var_choice.assign0( _python_tmp_element_1.asObject() );
                        _python_var_value.assign0( _python_tmp_element_2.asObject() );
                    }
                }
                frame_guard.setLineNumber( 507 );
                if ( BUILTIN_ISINSTANCE_BOOL( _python_var_value.asObject(), PyObjectTemporary( MAKE_TUPLE2( LOOKUP_BUILTIN( _python_str_plain_list ), LOOKUP_BUILTIN( _python_str_plain_tuple ) ) ).asObject() ) )
                {
                    frame_guard.setLineNumber( 508 );
                    {
                        PyObjectTempKeeper1 call1;
                        DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_flat.asObject(), _python_str_plain_extend ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 510 );
                    {
                        PyObjectTempKeeper1 call5;
                        PyObjectTempKeeper0 make_tuple3;
                        DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_flat.asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( ( make_tuple3.assign( _python_var_choice.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), _python_var_value.asObject() ) ) ).asObject() ) ) );
                    }
                }

               CONSIDER_THREADING();
            }
        }
        frame_guard.setLineNumber( 511 );
        return _python_var_flat.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_choice.updateLocalsDict( _python_var_flat.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_flatchoices() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_flatchoices() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_get_flatchoices() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_flatchoices() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_flatchoices() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_get_flatchoices() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_get_flatchoices() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_get_flatchoices() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_flatchoices() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_flatchoices() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "_get_flatchoices() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_get_flatchoices() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_get_flatchoices() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_get_flatchoices() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "_get_flatchoices() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_get_flatchoices() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_get_flatchoices() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_instance, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_instance( _python_str_plain_instance, _python_par_instance );
    PyObjectLocalParameterVariableNoDel _python_var_data( _python_str_plain_data, _python_par_data );

    // Actual function code.
    static PyFrameObject *frame_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_6e0559f04c75454fa32fabeb253dc67d, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 515 );
        {
            PyObjectTempKeeper0 setattr1;
            PyObjectTempKeeper1 setattr2;
            ( ( setattr1.assign( _python_var_instance.asObject() ), setattr2.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ), BUILTIN_SETATTR( setattr1.asObject0(), setattr2.asObject0(), _python_var_data.asObject() ) ), Py_None );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_data.updateLocalsDict( _python_var_instance.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_instance = NULL;
    PyObject *_python_par_data = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_instance == key )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_data == key )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_instance, key ) )
            {
                if (unlikely( _python_par_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'instance'" );
                    goto error_exit;
                }

                _python_par_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_data, key ) )
            {
                if (unlikely( _python_par_data ))
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'data'" );
                    goto error_exit;
                }

                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "save_form_data() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "save_form_data() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "save_form_data() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'instance'" );
             goto error_exit;
         }

        _python_par_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "save_form_data() got multiple values for keyword argument 'data'" );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_instance, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_instance );
    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_form_class, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_form_class( _python_str_plain_form_class, _python_par_form_class );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );
    PyObjectLocalVariable _python_var_include_blank( _python_str_plain_include_blank );
    PyObjectLocalVariable _python_var_k( _python_str_plain_k );

    // Actual function code.
    static PyFrameObject *frame_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_39_formfield_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_38b16db4a820cddc76512deb299b0f87, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 521 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 make_dict3;
            PyObjectTempKeeper1 make_dict5;
            _python_var_defaults.assign1( ( make_dict3.assign( UNARY_OPERATION( UNARY_NOT, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_blank ) ).asObject() ) ), make_dict5.assign( ( call1.assign( _mvar_django__db__models__fields_capfirst.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_verbose_name ) ).asObject() ) ) ), MAKE_DICT3( make_dict3.asObject0(), _python_unicode_plain_required, make_dict5.asObject0(), _python_unicode_plain_label, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_help_text ) ).asObject(), _python_unicode_plain_help_text ) ) );
        }
        frame_guard.setLineNumber( 524 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_has_default ) ).asObject() ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 525 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_callable ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_default ) ).asObject() ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 526 );
                {
                        PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_default ) );
                        SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_defaults.asObject(), _python_unicode_plain_initial );
                }
                frame_guard.setLineNumber( 527 );
                SET_SUBSCRIPT( Py_True, _python_var_defaults.asObject(), _python_unicode_plain_show_hidden_initial );
            }
            else
            {
                frame_guard.setLineNumber( 529 );
                {
                        PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_default ) ).asObject() ) );
                        SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_defaults.asObject(), _python_unicode_plain_initial );
                }
            }
        }
        frame_guard.setLineNumber( 530 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 532 );
            {
                PyObjectTempKeeper1 keeper_0;
                PyObjectTempKeeper1 keeper_1;
                _python_var_include_blank.assign0( ( CHECK_IF_TRUE( keeper_1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_blank ) ) ) ? PyObjectTemporary( keeper_1.asObject() ).asObject() : UNARY_OPERATION( UNARY_NOT, ( CHECK_IF_TRUE( keeper_0.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_has_default ) ).asObject() ) ) ) ? PyObjectTemporary( keeper_0.asObject() ).asObject() : SEQUENCE_CONTAINS( _python_unicode_plain_initial, _python_var_kwargs.asObject() ) ) ) ) );
            }
            frame_guard.setLineNumber( 534 );
            {
                PyObjectTempKeeper1 call9;
                {
                    PyObjectTemporary tmp_identifier( ( call9.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_choices ) ), CALL_FUNCTION( call9.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_include_blank.asObject(), _python_str_plain_include_blank ) ).asObject() ) ) );
                    SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_defaults.asObject(), _python_unicode_plain_choices );
            }
            }
            frame_guard.setLineNumber( 535 );
            {
                    PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_python ) );
                    SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_defaults.asObject(), _python_unicode_plain_coerce );
            }
            frame_guard.setLineNumber( 536 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_null ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 537 );
                SET_SUBSCRIPT( Py_None, _python_var_defaults.asObject(), _python_unicode_plain_empty_value );
            }
            frame_guard.setLineNumber( 538 );
            {
                PyObjectTempKeeper0 call13;
                if ( ( ( _python_var_form_class.asObject() == Py_None ) || (!( CHECK_IF_TRUE( PyObjectTemporary( ( call13.assign( _python_var_form_class.asObject() ), CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_issubclass ), call13.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_TypedChoiceField ) ).asObject() ) ) ).asObject() ) )) ) )
            {
                frame_guard.setLineNumber( 539 );
                _python_var_form_class.assign1( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_TypedChoiceField ) );
            }
            }
            {
                frame_guard.setLineNumber( 543 );
                PyObjectTemporary _python_tmp_for_iterator( MAKE_ITERATOR( PyObjectTemporary( TO_LIST( _python_var_kwargs.asObject() ) ).asObject() ) );
                while( true )
                {
                    {
                        frame_guard.setLineNumber( 543 );
                        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( _python_tmp_for_iterator.asObject() );

                        if ( _tmp_unpack_1 == NULL )
                        {
                            break;
                        }
                        PyObjectTemporary _python_tmp_iter_value( _tmp_unpack_1 );
                        _python_var_k.assign0( _python_tmp_iter_value.asObject() );
                    }
                    frame_guard.setLineNumber( 544 );
                    if ( SEQUENCE_CONTAINS_NOT_BOOL( _python_var_k.asObject(), _python_tuple_62e3bb4e4214a6f49c8da42ffd5ea58d_tuple ) )
                    {
                        frame_guard.setLineNumber( 547 );
                        {
                                PyObject *tmp_subscribed = _python_var_kwargs.asObject();
                                DEL_SUBSCRIPT( tmp_subscribed, _python_var_k.asObject() );
                        }
                    }

                   CONSIDER_THREADING();
                }
            }
        }
        frame_guard.setLineNumber( 548 );
        {
            PyObjectTempKeeper1 call15;
            DECREASE_REFCOUNT( ( call15.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call15.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 549 );
        if ( ( _python_var_form_class.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 550 );
            _python_var_form_class.assign1( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_CharField ) );
        }
        frame_guard.setLineNumber( 551 );
        {
            PyObjectTempKeeper0 call_tmp17;
            return ( call_tmp17.assign( _python_var_form_class.asObject() ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp17.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_form_class.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_k.updateLocalsDict( _python_var_include_blank.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_form_class = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument form_class was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_form_class );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_form_class == NULL );

            _python_par_form_class = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_form_class );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_form_class != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'form_class'" );
             goto error_exit;
         }

        _python_par_form_class = INCREASE_REFCOUNT( args[ 1 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_form_class == NULL )
    {
        _python_par_form_class = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_form_class );
    }


    return impl_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_form_class, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_form_class );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_obj( _python_str_plain_obj, _python_par_obj );

    // Actual function code.
    static PyFrameObject *frame_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_cdd29e09bfd475994ed352a199a70375, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 557 );
        {
            PyObjectTempKeeper0 getattr1;
            return ( getattr1.assign( _python_var_obj.asObject() ), BUILTIN_GETATTR( getattr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attname ) ).asObject(), NULL ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_obj.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields );
           frame_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_obj = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_from_object() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_object() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_obj == key )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_object() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_object() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_obj, key ) )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_from_object() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_from_object() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_object() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_from_object() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_from_object() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_from_object() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_object() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_object() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_object() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_from_object() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_from_object() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_from_object() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "value_from_object() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_from_object() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_object() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_from_object() got multiple values for keyword argument 'obj'" );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_41___repr___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_path( _python_str_plain_path );
    PyObjectLocalVariable _python_var_name( _python_str_plain_name );

    // Actual function code.
    static PyFrameObject *frame_function_41___repr___of_class_6_Field_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_41___repr___of_class_6_Field_of_module_django__db__models__fields ) )
    {
        if ( frame_function_41___repr___of_class_6_Field_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_41___repr___of_class_6_Field_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_41___repr___of_class_6_Field_of_module_django__db__models__fields );
        }

        frame_function_41___repr___of_class_6_Field_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_ebe227ffb91ca73bb7d46fa25619974d, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_41___repr___of_class_6_Field_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_41___repr___of_class_6_Field_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 563 );
        {
            PyObjectTempKeeper1 make_tuple1;
            _python_var_path.assign1( BINARY_OPERATION_REMAINDER( _python_unicode_digest_fffb2b4b5e45eb8109d63f2497fbdbc1, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___module__ ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___name__ ) ).asObject() ) ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 564 );
        _python_var_name.assign1( BUILTIN_GETATTR( _python_var_self.asObject(), _python_unicode_plain_name, Py_None ) );
        frame_guard.setLineNumber( 565 );
        if ( ( _python_var_name.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 566 );
            {
                PyObjectTempKeeper0 make_tuple3;
                return BINARY_OPERATION_REMAINDER( _python_unicode_digest_2cd859f75f1f8232c125cc11124965d8, PyObjectTemporary( ( make_tuple3.assign( _python_var_path.asObject() ), MAKE_TUPLE2( make_tuple3.asObject0(), _python_var_name.asObject() ) ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 567 );
        return BINARY_OPERATION_REMAINDER( _python_unicode_digest_973fbd8da95581dbcc49cc036b565a31, _python_var_path.asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_path.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_41___repr___of_class_6_Field_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_41___repr___of_class_6_Field_of_module_django__db__models__fields );
           frame_function_41___repr___of_class_6_Field_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_41___repr___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__repr__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__repr__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__repr__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__repr__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__repr__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__repr__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_41___repr___of_class_6_Field_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_41___repr___of_class_6_Field_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_41___repr___of_class_6_Field_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_41___repr___of_class_6_Field_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_7_AutoField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var_empty_strings_allowed( _python_str_plain_empty_strings_allowed );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_validate( _python_str_plain_validate );
    PyObjectLocalVariable _python_var_get_db_prep_value( _python_str_plain_get_db_prep_value );
    PyObjectLocalVariable _python_var_get_prep_value( _python_str_plain_get_prep_value );
    PyObjectLocalVariable _python_var_contribute_to_class( _python_str_plain_contribute_to_class );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_7_AutoField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_7_AutoField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_7_AutoField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_7_AutoField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_7_AutoField_of_module_django__db__models__fields );
        }

        frame_class_7_AutoField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_2ef67aebc0c015030687c587189882c8, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_7_AutoField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_7_AutoField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 570 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_plain_Integer ) );
        _python_var_empty_strings_allowed.assign0( Py_False );
        frame_guard.setLineNumber( 573 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_0a4eecefe1293a506cb661ac3f32cce2 ) ).asObject(), _python_unicode_plain_invalid ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_contribute_to_class.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_get_db_prep_value.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_7_AutoField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_7_AutoField_of_module_django__db__models__fields );
           frame_class_7_AutoField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields(  ) );
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_2_get_internal_type_of_class_7_AutoField_of_module_django__db__models__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields(  ) );
    _python_var_validate.assign1( MAKE_FUNCTION_function_4_validate_of_class_7_AutoField_of_module_django__db__models__fields(  ) );
    _python_var_get_db_prep_value.assign1( MAKE_FUNCTION_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields(  ) );
    _python_var_get_prep_value.assign1( MAKE_FUNCTION_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields(  ) );
    _python_var_contribute_to_class.assign1( MAKE_FUNCTION_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_8_formfield_of_class_7_AutoField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_contribute_to_class.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_get_db_prep_value.updateLocalsDict( _python_var_validate.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_7_AutoField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields );
        }

        frame_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_08bf85a8c89006c3c9082ed58839b599, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 578 );
        if ( ( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_get ) ).asObject(), _python_unicode_plain_primary_key, Py_False ) ).asObject() != Py_True ) )
        {
            frame_guard.setLineNumber( 578 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( _python_unicode_digest_abe39d9d23a5348304ff3fa682bca932, PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain___class__ ) ).asObject(), _python_str_plain___name__ ) ).asObject() ) ).asObject() ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 580 );
        SET_SUBSCRIPT( Py_True, _python_var_kwargs.asObject(), _python_unicode_plain_blank );
        frame_guard.setLineNumber( 581 );
        {
            PyObjectTempKeeper1 call_tmp1;
            PyObjectTempKeeper1 call_tmp2;
            PyObjectTempKeeper0 call_tmp3;
            DECREASE_REFCOUNT( ( call_tmp1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_Field.asObject0(), _python_str_plain___init__ ) ), call_tmp2.assign( MAKE_TUPLE1( _python_var_self.asObject() ) ), call_tmp3.assign( _python_var_args.asObject() ), impl_function_8_complex_call_helper_pos_star_list_star_dict_of_module___internal__( call_tmp1.asObject(), call_tmp2.asObject(), call_tmp3.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields );
           frame_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_internal_type_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_AutoField );
}
static PyObject *fparse_function_2_get_internal_type_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_get_internal_type_of_class_7_AutoField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_get_internal_type_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_get_internal_type_of_class_7_AutoField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_internal_type_of_class_7_AutoField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_msg( _python_str_plain_msg );

    // Actual function code.
    static PyFrameObject *frame_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields );
        }

        frame_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_d69fd1de6a6f089493b1be1080bef1a7, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 587 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 588 );
            return _python_var_value.asObject1();
        }
        frame_guard.setLineNumber( 589 );
        try
        {
            frame_guard.setLineNumber( 590 );
            return TO_INT( _python_var_value.asObject() );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_TypeError ) || _exception.matches( PyExc_ValueError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 592 );
                {
                    PyObjectTempKeeper1 op1;
                    _python_var_msg.assign1( ( op1.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), _python_var_value.asObject() ) ) );
                }
                frame_guard.setLineNumber( 593 );
                {
                    PyObjectTempKeeper1 call3;
                    {
                        PyObjectTemporary tmp_exception_type( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_msg.asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_msg.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields );
           frame_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_validate_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_model_instance )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_model_instance( _python_str_plain_model_instance, _python_par_model_instance );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_4_validate_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_model_instance = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "validate() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model_instance == key )
            {
                if (unlikely( _python_par_model_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'model_instance'" );
                    goto error_exit;
                }

                _python_par_model_instance = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model_instance, key ) )
            {
                if (unlikely( _python_par_model_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'model_instance'" );
                    goto error_exit;
                }

                _python_par_model_instance = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "validate() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "validate() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "validate() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "validate() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "validate() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "validate() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_model_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "validate() got multiple values for keyword argument 'model_instance'" );
             goto error_exit;
         }

        _python_par_model_instance = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_4_validate_of_class_7_AutoField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value, _python_par_model_instance );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_model_instance );

    return NULL;
}

static PyObject *dparse_function_4_validate_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_4_validate_of_class_7_AutoField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_validate_of_class_7_AutoField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_connection, PyObject *_python_par_prepared )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );
    PyObjectLocalParameterVariableNoDel _python_var_prepared( _python_str_plain_prepared, _python_par_prepared );

    // Actual function code.
    static PyFrameObject *frame_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields );
        }

        frame_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_0b130f3d80fda93a2063fae18b78d329, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 599 );
        if ( (!( CHECK_IF_TRUE( _python_var_prepared.asObject() ) )) )
        {
            frame_guard.setLineNumber( 600 );
            {
                PyObjectTempKeeper1 call1;
                _python_var_value.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_prep_value ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) );
            }
            frame_guard.setLineNumber( 601 );
            {
                PyObjectTempKeeper1 call3;
                _python_var_value.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_validate_autopk_value ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 602 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_prepared.updateLocalsDict( _python_var_connection.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields );
           frame_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_connection = NULL;
    PyObject *_python_par_prepared = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_prepared == key )
            {
                if (unlikely( _python_par_prepared ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
                    goto error_exit;
                }

                _python_par_prepared = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_prepared, key ) )
            {
                if (unlikely( _python_par_prepared ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
                    goto error_exit;
                }

                _python_par_prepared = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_db_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_prepared != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
             goto error_exit;
         }

        _python_par_prepared = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_prepared == NULL )
    {
        _python_par_prepared = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_prepared );
    }


    return impl_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value, _python_par_connection, _python_par_prepared );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_connection );
    Py_XDECREF( _python_par_prepared );

    return NULL;
}

static PyObject *dparse_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields );
        }

        frame_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_fcc83b20dd47c0ca185eaa15f55f6922, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 605 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 607 );
        return TO_INT( _python_var_value.asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields );
           frame_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_cls, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );

    // Actual function code.
    static PyFrameObject *frame_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields );
        }

        frame_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_3edf09880368280c8c1991c7e0a2eee8, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 610 );
        if ( (!( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_has_auto_field ) ).asObject() ) )) )) )
        {
            frame_guard.setLineNumber( 610 );
            {
                    PyObjectTemporary tmp_exception_type( CALL_FUNCTION_WITH_POSARGS( PyExc_AssertionError, PyObjectTemporary( MAKE_TUPLE1( _python_unicode_digest_f4947f4b845fe19a5f71c6a512ce8f6a ) ).asObject() ) );
                    RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
            }
        }
        frame_guard.setLineNumber( 612 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields_AutoField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_contribute_to_class ) ), call4.assign( _python_var_cls.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_name.asObject() ) ) );
        }
        frame_guard.setLineNumber( 613 );
        SET_ATTRIBUTE( Py_True, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_has_auto_field );
        frame_guard.setLineNumber( 614 );
        {
                PyObject *tmp_identifier = _python_var_self.asObject();
                SET_ATTRIBUTE( tmp_identifier, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__meta ) ).asObject(), _python_str_plain_auto_field );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_cls.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields );
           frame_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_cls = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "contribute_to_class() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields( self, _python_par_self, _python_par_cls, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_cls );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_formfield_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_8_formfield_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_8_formfield_of_class_7_AutoField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_8_formfield_of_class_7_AutoField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_8_formfield_of_class_7_AutoField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_8_formfield_of_class_7_AutoField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_8_BooleanField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_empty_strings_allowed( _python_str_plain_empty_strings_allowed );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_get_prep_lookup( _python_str_plain_get_prep_lookup );
    PyObjectLocalVariable _python_var_get_prep_value( _python_str_plain_get_prep_value );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var_empty_strings_allowed.assign0( Py_False );
    static PyFrameObject *frame_class_8_BooleanField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_8_BooleanField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_8_BooleanField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_8_BooleanField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_8_BooleanField_of_module_django__db__models__fields );
        }

        frame_class_8_BooleanField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_51d3228b3088000de04082e09a57dc83, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_8_BooleanField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_8_BooleanField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 621 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_e406dfde8c73be6207ec21bf7a3ed531 ) ).asObject(), _python_unicode_plain_invalid ) );
        frame_guard.setLineNumber( 624 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_32beab4aa7f7a6a8c6646ef47d72ed9e ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_get_prep_lookup.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_8_BooleanField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_8_BooleanField_of_module_django__db__models__fields );
           frame_class_8_BooleanField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields(  ) );
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_2_get_internal_type_of_class_8_BooleanField_of_module_django__db__models__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields(  ) );
    _python_var_get_prep_lookup.assign1( MAKE_FUNCTION_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields(  ) );
    _python_var_get_prep_value.assign1( MAKE_FUNCTION_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_get_prep_lookup.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields );
        }

        frame_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_3db5bff02073470ba8d5d23d1f8ce9cb, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 627 );
        SET_SUBSCRIPT( Py_True, _python_var_kwargs.asObject(), _python_unicode_plain_blank );
        frame_guard.setLineNumber( 628 );
        {
            PyObjectTempKeeper1 call_tmp1;
            PyObjectTempKeeper1 call_tmp2;
            PyObjectTempKeeper0 call_tmp3;
            DECREASE_REFCOUNT( ( call_tmp1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_Field.asObject0(), _python_str_plain___init__ ) ), call_tmp2.assign( MAKE_TUPLE1( _python_var_self.asObject() ) ), call_tmp3.assign( _python_var_args.asObject() ), impl_function_8_complex_call_helper_pos_star_list_star_dict_of_module___internal__( call_tmp1.asObject(), call_tmp2.asObject(), call_tmp3.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields );
           frame_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_internal_type_of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_BooleanField );
}
static PyObject *fparse_function_2_get_internal_type_of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_get_internal_type_of_class_8_BooleanField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_get_internal_type_of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_get_internal_type_of_class_8_BooleanField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_internal_type_of_class_8_BooleanField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_msg( _python_str_plain_msg );

    // Actual function code.
    static PyFrameObject *frame_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields );
        }

        frame_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_ae2e8c2782b034b992a7fc8268e5a823, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 634 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_var_value.asObject(), _python_tuple_true_false_tuple ) )
        {
            frame_guard.setLineNumber( 637 );
            return INCREASE_REFCOUNT( TO_BOOL( _python_var_value.asObject() ) );
        }
        frame_guard.setLineNumber( 638 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_var_value.asObject(), _python_tuple_unicode_plain_t_unicode_plain_True_unicode_plain_1_tuple ) )
        {
            return INCREASE_REFCOUNT( Py_True );
        }
        frame_guard.setLineNumber( 640 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_var_value.asObject(), _python_tuple_unicode_plain_f_unicode_plain_False_unicode_plain_0_tuple ) )
        {
            return INCREASE_REFCOUNT( Py_False );
        }
        frame_guard.setLineNumber( 642 );
        {
            PyObjectTempKeeper1 op1;
            _python_var_msg.assign1( ( op1.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 643 );
        {
            PyObjectTempKeeper1 call3;
            {
                PyObjectTemporary tmp_exception_type( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_msg.asObject() ) ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_msg.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields );
           frame_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_lookup_type, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_lookup_type( _python_str_plain_lookup_type, _python_par_lookup_type );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields );
        }

        frame_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_28fd7b8833e3064e6c5ce169490a6603, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 650 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_var_value.asObject(), _python_tuple_unicode_plain_1_unicode_plain_0_tuple ) )
        {
            frame_guard.setLineNumber( 651 );
            _python_var_value.assign0( TO_BOOL( PyObjectTemporary( TO_INT( _python_var_value.asObject() ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 652 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 super1;
            return ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields_BooleanField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_get_prep_lookup ) ), call4.assign( _python_var_lookup_type.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_lookup_type.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields );
           frame_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_lookup_type = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_lookup_type == key )
            {
                if (unlikely( _python_par_lookup_type ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
                    goto error_exit;
                }

                _python_par_lookup_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_lookup_type, key ) )
            {
                if (unlikely( _python_par_lookup_type ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
                    goto error_exit;
                }

                _python_par_lookup_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_lookup() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_lookup_type != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
             goto error_exit;
         }

        _python_par_lookup_type = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields( self, _python_par_self, _python_par_lookup_type, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_lookup_type );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields );
        }

        frame_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_43acd58e7afae6d29b416fa38bb7e516, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 655 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 657 );
        return INCREASE_REFCOUNT( TO_BOOL( _python_var_value.asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields );
           frame_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_include_blank( _python_str_plain_include_blank );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields );
        }

        frame_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_d79bdddd0cad65a0cbccfe0e304aa044, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 662 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_choices ) ).asObject() ) )
        {
            frame_guard.setLineNumber( 663 );
            {
                PyObjectTempKeeper1 keeper_0;
                PyObjectTempKeeper1 keeper_1;
                _python_var_include_blank.assign0( ( CHECK_IF_TRUE( keeper_1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_null ) ) ) ? PyObjectTemporary( keeper_1.asObject() ).asObject() : UNARY_OPERATION( UNARY_NOT, ( CHECK_IF_TRUE( keeper_0.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_has_default ) ).asObject() ) ) ) ? PyObjectTemporary( keeper_0.asObject() ).asObject() : SEQUENCE_CONTAINS( _python_unicode_plain_initial, _python_var_kwargs.asObject() ) ) ) ) );
            }
            frame_guard.setLineNumber( 665 );
            {
                PyObjectTempKeeper1 call1;
                _python_var_defaults.assign1( MAKE_DICT1( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_choices ) ), CALL_FUNCTION( call1.asObject0(), _python_tuple_empty, PyObjectTemporary( MAKE_DICT1( _python_var_include_blank.asObject(), _python_str_plain_include_blank ) ).asObject() ) ) ).asObject(), _python_unicode_plain_choices ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 668 );
            _python_var_defaults.assign1( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_BooleanField ) ).asObject(), _python_unicode_plain_form_class ) );
        }
        frame_guard.setLineNumber( 669 );
        {
            PyObjectTempKeeper1 call4;
            DECREASE_REFCOUNT( ( call4.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 670 );
        {
            PyObjectTempKeeper1 call_tmp8;
            PyObjectTempKeeper0 super6;
            return ( call_tmp8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super6.assign( _mvar_django__db__models__fields_BooleanField.asObject0() ), BUILTIN_SUPER( super6.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp8.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( _python_var_include_blank.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields );
           frame_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_9_CharField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_get_prep_value( _python_str_plain_get_prep_value );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_9_CharField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_9_CharField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_9_CharField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_9_CharField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_9_CharField_of_module_django__db__models__fields );
        }

        frame_class_9_CharField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_1f2e2d7f738c35d2290403b65f863772, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_9_CharField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_9_CharField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 673 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_39e5d56e6a4219d2404969597b10502b ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_9_CharField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_9_CharField_of_module_django__db__models__fields );
           frame_class_9_CharField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_9_CharField_of_module_django__db__models__fields(  ) );
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_2_get_internal_type_of_class_9_CharField_of_module_django__db__models__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields(  ) );
    _python_var_get_prep_value.assign1( MAKE_FUNCTION_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_9_CharField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_9_CharField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_9_CharField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1___init___of_class_9_CharField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_9_CharField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_9_CharField_of_module_django__db__models__fields );
        }

        frame_function_1___init___of_class_9_CharField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_5cb8717b6c3c90374ced836277e90f78, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_9_CharField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_9_CharField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 676 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields_CharField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp4.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 677 );
        {
            PyObjectTempKeeper1 call6;
            PyObjectTempKeeper1 call8;
            DECREASE_REFCOUNT( ( call8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validators ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), PyObjectTemporary( ( call6.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_validators.asObject0(), _python_str_plain_MaxLengthValidator ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_length ) ).asObject() ) ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_9_CharField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_9_CharField_of_module_django__db__models__fields );
           frame_function_1___init___of_class_9_CharField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_9_CharField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_9_CharField_of_module_django__db__models__fields( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_9_CharField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_9_CharField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_9_CharField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_internal_type_of_class_9_CharField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_CharField );
}
static PyObject *fparse_function_2_get_internal_type_of_class_9_CharField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_get_internal_type_of_class_9_CharField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_get_internal_type_of_class_9_CharField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_get_internal_type_of_class_9_CharField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_internal_type_of_class_9_CharField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields );
        }

        frame_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_a74618cd92744126e7471e166d7b3c1f, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 683 );
        {
            PyObjectTempKeeper0 isinstance1;
            if ( ( ( isinstance1.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) || ( _python_var_value.asObject() == Py_None ) ) )
        {
            frame_guard.setLineNumber( 684 );
            return _python_var_value.asObject1();
        }
        }
        frame_guard.setLineNumber( 685 );
        {
            PyObjectTempKeeper0 call3;
            return ( call3.assign( _mvar_django__db__models__fields_smart_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields );
           frame_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields );
        }

        frame_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_f1c767cbcb9670a573620610a04809b9, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 688 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields );
           frame_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields );
        }

        frame_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_abc2a6cdd817a8bc5fa5263c49583601, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 694 );
        _python_var_defaults.assign1( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_length ) ).asObject(), _python_unicode_plain_max_length ) );
        frame_guard.setLineNumber( 695 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 696 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 super3;
            return ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields_CharField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp5.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields );
           frame_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_default_validators( _python_str_plain_default_validators );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields );
        }

        frame_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_05b1b9bf37e8ba97fa737d34307a70dd, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 700 );
        _python_var_default_validators.assign1( MAKE_LIST1( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_validators.asObject0(), _python_str_plain_validate_comma_separated_integer_list ) ) );
        frame_guard.setLineNumber( 701 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_933611dffdcb832fe25ab3e8eb8befa6 ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_validators.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields );
           frame_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var_formfield.assign1( MAKE_FUNCTION_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_validators.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields );
        }

        frame_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_64717b7aab6f58e31543a0c5ccbf3963, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 704 );
        _python_var_defaults.assign1( MAKE_DICT1( PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_7e117772a5a209b833b0629b4a2264f1 ) ).asObject(), _python_unicode_plain_invalid ) ).asObject(), _python_unicode_plain_error_messages ) );
        frame_guard.setLineNumber( 709 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 710 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 super3;
            return ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields_CommaSeparatedIntegerField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp5.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields );
           frame_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_11_DateField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_empty_strings_allowed( _python_str_plain_empty_strings_allowed );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_pre_save( _python_str_plain_pre_save );
    PyObjectLocalVariable _python_var_contribute_to_class( _python_str_plain_contribute_to_class );
    PyObjectLocalVariable _python_var_get_prep_lookup( _python_str_plain_get_prep_lookup );
    PyObjectLocalVariable _python_var_get_prep_value( _python_str_plain_get_prep_value );
    PyObjectLocalVariable _python_var_get_db_prep_value( _python_str_plain_get_db_prep_value );
    PyObjectLocalVariable _python_var_value_to_string( _python_str_plain_value_to_string );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var_empty_strings_allowed.assign0( Py_False );
    static PyFrameObject *frame_class_11_DateField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_11_DateField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_11_DateField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_11_DateField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_11_DateField_of_module_django__db__models__fields );
        }

        frame_class_11_DateField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_665628a600caf8830b806ae7afe6a82a, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_11_DateField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_11_DateField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 714 );
        {
            PyObjectTempKeeper1 make_dict1;
            _python_var_default_error_messages.assign1( ( make_dict1.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_b51b47a06b0a812287959e63ffaaea73 ) ), MAKE_DICT2( make_dict1.asObject0(), _python_unicode_plain_invalid, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_5344ace176fb2e97b6b279c46943d7d6 ) ).asObject(), _python_unicode_plain_invalid_date ) ) );
        }
        frame_guard.setLineNumber( 720 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_321ef154d2c0ad1c8360bb7e7383d8c4 ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_value_to_string.updateLocalsDict( _python_var_get_db_prep_value.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_get_prep_lookup.updateLocalsDict( _python_var_contribute_to_class.updateLocalsDict( _python_var_pre_save.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_11_DateField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_11_DateField_of_module_django__db__models__fields );
           frame_class_11_DateField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_11_DateField_of_module_django__db__models__fields(  ) );
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_2_get_internal_type_of_class_11_DateField_of_module_django__db__models__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields(  ) );
    _python_var_pre_save.assign1( MAKE_FUNCTION_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields(  ) );
    _python_var_contribute_to_class.assign1( MAKE_FUNCTION_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields(  ) );
    _python_var_get_prep_lookup.assign1( MAKE_FUNCTION_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields(  ) );
    _python_var_get_prep_value.assign1( MAKE_FUNCTION_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields(  ) );
    _python_var_get_db_prep_value.assign1( MAKE_FUNCTION_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields(  ) );
    _python_var_value_to_string.assign1( MAKE_FUNCTION_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_value_to_string.updateLocalsDict( _python_var_get_db_prep_value.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_get_prep_lookup.updateLocalsDict( _python_var_contribute_to_class.updateLocalsDict( _python_var_pre_save.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_verbose_name, PyObject *_python_par_name, PyObject *_python_par_auto_now, PyObject *_python_par_auto_now_add, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_verbose_name( _python_str_plain_verbose_name, _python_par_verbose_name );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_auto_now( _python_str_plain_auto_now, _python_par_auto_now );
    PyObjectLocalParameterVariableNoDel _python_var_auto_now_add( _python_str_plain_auto_now_add, _python_par_auto_now_add );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_11_DateField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_11_DateField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1___init___of_class_11_DateField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_11_DateField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_11_DateField_of_module_django__db__models__fields );
        }

        frame_function_1___init___of_class_11_DateField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_663a0a792ffb47bbbe1f4a76c7a9d0c4, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_11_DateField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_11_DateField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 724 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( _python_var_auto_now.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_auto_now_add.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_auto_now );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_auto_now_add );
            }
        }
        frame_guard.setLineNumber( 725 );
        if ( ( CHECK_IF_TRUE( _python_var_auto_now.asObject() ) || CHECK_IF_TRUE( _python_var_auto_now_add.asObject() ) ) )
        {
            frame_guard.setLineNumber( 726 );
            SET_SUBSCRIPT( Py_False, _python_var_kwargs.asObject(), _python_unicode_plain_editable );
            frame_guard.setLineNumber( 727 );
            SET_SUBSCRIPT( Py_True, _python_var_kwargs.asObject(), _python_unicode_plain_blank );
        }
        frame_guard.setLineNumber( 728 );
        {
            PyObjectTempKeeper1 call_tmp6;
            PyObjectTempKeeper1 call_tmp7;
            PyObjectTempKeeper0 make_tuple3;
            PyObjectTempKeeper0 make_tuple4;
            DECREASE_REFCOUNT( ( call_tmp6.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_Field.asObject0(), _python_str_plain___init__ ) ), call_tmp7.assign( ( make_tuple3.assign( _python_var_self.asObject() ), make_tuple4.assign( _python_var_verbose_name.asObject() ), MAKE_TUPLE3( make_tuple3.asObject0(), make_tuple4.asObject0(), _python_var_name.asObject() ) ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp6.asObject(), call_tmp7.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_auto_now_add.updateLocalsDict( _python_var_auto_now.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_verbose_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_11_DateField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_11_DateField_of_module_django__db__models__fields );
           frame_function_1___init___of_class_11_DateField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_verbose_name = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_auto_now = NULL;
    PyObject *_python_par_auto_now_add = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument verbose_name was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_verbose_name );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_verbose_name == NULL );

            _python_par_verbose_name = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_verbose_name );

            kw_found += 1;
        }
    }

    // Check if argument name was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_name );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_name == NULL );

            _python_par_name = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_name );

            kw_found += 1;
        }
    }

    // Check if argument auto_now was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_auto_now );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_auto_now == NULL );

            _python_par_auto_now = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_auto_now );

            kw_found += 1;
        }
    }

    // Check if argument auto_now_add was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_auto_now_add );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_auto_now_add == NULL );

            _python_par_auto_now_add = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_auto_now_add );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_verbose_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'verbose_name'" );
             goto error_exit;
         }

        _python_par_verbose_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_auto_now != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'auto_now'" );
             goto error_exit;
         }

        _python_par_auto_now = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_auto_now_add != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'auto_now_add'" );
             goto error_exit;
         }

        _python_par_auto_now_add = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_verbose_name == NULL )
    {
        _python_par_verbose_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_verbose_name );
    }
    if ( _python_par_name == NULL )
    {
        _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_name );
    }
    if ( _python_par_auto_now == NULL )
    {
        _python_par_auto_now = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_auto_now );
    }
    if ( _python_par_auto_now_add == NULL )
    {
        _python_par_auto_now_add = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_auto_now_add );
    }


    return impl_function_1___init___of_class_11_DateField_of_module_django__db__models__fields( self, _python_par_self, _python_par_verbose_name, _python_par_name, _python_par_auto_now, _python_par_auto_now_add, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_verbose_name );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_auto_now );
    Py_XDECREF( _python_par_auto_now_add );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6)
    {
        return impl_function_1___init___of_class_11_DateField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_11_DateField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_internal_type_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_DateField );
}
static PyObject *fparse_function_2_get_internal_type_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_get_internal_type_of_class_11_DateField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_get_internal_type_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_get_internal_type_of_class_11_DateField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_internal_type_of_class_11_DateField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_default_timezone( _python_str_plain_default_timezone );
    PyObjectLocalVariable _python_var_parsed( _python_str_plain_parsed );
    PyObjectLocalVariable _python_var_msg( _python_str_plain_msg );

    // Actual function code.
    static PyFrameObject *frame_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields );
        }

        frame_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_dd493bdd8f1f46fa3a35fc097bcfedb4, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 734 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 735 );
            return _python_var_value.asObject1();
        }
        frame_guard.setLineNumber( 736 );
        {
            PyObjectTempKeeper0 isinstance6;
            if ( ( isinstance6.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_datetime.asObject0(), _python_str_plain_datetime ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 737 );
            {
                PyObjectTempKeeper1 call4;
                if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_settings.asObject0(), _python_str_plain_USE_TZ ) ).asObject() ) && CHECK_IF_TRUE( PyObjectTemporary( ( call4.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_timezone.asObject0(), _python_str_plain_is_aware ) ), CALL_FUNCTION_WITH_ARGS( call4.asObject0(), _python_var_value.asObject() ) ) ).asObject() ) ) )
            {
                frame_guard.setLineNumber( 740 );
                _python_var_default_timezone.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_timezone.asObject0(), _python_str_plain_get_default_timezone ) ).asObject() ) );
                frame_guard.setLineNumber( 741 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper0 call2;
                    _python_var_value.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_timezone.asObject0(), _python_str_plain_make_naive ) ), call2.assign( _python_var_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_default_timezone.asObject() ) ) );
                }
            }
            }
            frame_guard.setLineNumber( 742 );
            return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_date ) ).asObject() );
        }
        }
        frame_guard.setLineNumber( 743 );
        {
            PyObjectTempKeeper0 isinstance8;
            if ( ( isinstance8.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance8.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_datetime.asObject0(), _python_str_plain_date ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 744 );
            return _python_var_value.asObject1();
        }
        }
        frame_guard.setLineNumber( 746 );
        try
        {
            frame_guard.setLineNumber( 747 );
            {
                PyObjectTempKeeper0 call14;
                _python_var_parsed.assign1( ( call14.assign( _mvar_django__db__models__fields_parse_date.asObject0() ), CALL_FUNCTION_WITH_ARGS( call14.asObject0(), _python_var_value.asObject() ) ) );
            }
            frame_guard.setLineNumber( 748 );
            if ( ( _python_var_parsed.asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 749 );
                return _python_var_parsed.asObject1();
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_ValueError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 751 );
                {
                    PyObjectTempKeeper1 op10;
                    _python_var_msg.assign1( ( op10.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_date ) ), BINARY_OPERATION_REMAINDER( op10.asObject0(), _python_var_value.asObject() ) ) );
                }
                frame_guard.setLineNumber( 752 );
                {
                    PyObjectTempKeeper1 call12;
                    {
                        PyObjectTemporary tmp_exception_type( ( call12.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call12.asObject0(), _python_var_msg.asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 754 );
        {
            PyObjectTempKeeper1 op16;
            _python_var_msg.assign1( ( op16.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ), BINARY_OPERATION_REMAINDER( op16.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 755 );
        {
            PyObjectTempKeeper1 call18;
            {
                PyObjectTemporary tmp_exception_type( ( call18.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call18.asObject0(), _python_var_msg.asObject() ) ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_msg.updateLocalsDict( _python_var_parsed.updateLocalsDict( _python_var_default_timezone.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields );
           frame_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_model_instance, PyObject *_python_par_add )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_model_instance( _python_str_plain_model_instance, _python_par_model_instance );
    PyObjectLocalParameterVariableNoDel _python_var_add( _python_str_plain_add, _python_par_add );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );

    // Actual function code.
    static PyFrameObject *frame_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields );
        }

        frame_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_4d53d41ba3a028eed0ac0d9f71c95b96, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 758 );
        if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_auto_now ) ).asObject() ) || ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_auto_now_add ) ).asObject() ) && CHECK_IF_TRUE( _python_var_add.asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 759 );
            _python_var_value.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_datetime.asObject0(), _python_str_plain_date ) ).asObject(), _python_str_plain_today ) ).asObject() ) );
            frame_guard.setLineNumber( 760 );
            {
                PyObjectTempKeeper0 setattr1;
                PyObjectTempKeeper1 setattr2;
                ( ( setattr1.assign( _python_var_model_instance.asObject() ), setattr2.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attname ) ), BUILTIN_SETATTR( setattr1.asObject0(), setattr2.asObject0(), _python_var_value.asObject() ) ), Py_None );
            }
            frame_guard.setLineNumber( 761 );
            return _python_var_value.asObject1();
        }
        else
        {
            frame_guard.setLineNumber( 763 );
            {
                PyObjectTempKeeper1 call6;
                PyObjectTempKeeper0 call7;
                PyObjectTempKeeper0 super4;
                return ( call6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super4.assign( _mvar_django__db__models__fields_DateField.asObject0() ), BUILTIN_SUPER( super4.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_pre_save ) ), call7.assign( _python_var_model_instance.asObject() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), call7.asObject0(), _python_var_add.asObject() ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_add.updateLocalsDict( _python_var_model_instance.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_value.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields );
           frame_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_model_instance = NULL;
    PyObject *_python_par_add = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "pre_save() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model_instance == key )
            {
                if (unlikely( _python_par_model_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'model_instance'" );
                    goto error_exit;
                }

                _python_par_model_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_add == key )
            {
                if (unlikely( _python_par_add ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'add'" );
                    goto error_exit;
                }

                _python_par_add = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model_instance, key ) )
            {
                if (unlikely( _python_par_model_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'model_instance'" );
                    goto error_exit;
                }

                _python_par_model_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_add, key ) )
            {
                if (unlikely( _python_par_add ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'add'" );
                    goto error_exit;
                }

                _python_par_add = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "pre_save() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "pre_save() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "pre_save() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "pre_save() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "pre_save() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "pre_save() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_model_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'model_instance'" );
             goto error_exit;
         }

        _python_par_model_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_add != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'add'" );
             goto error_exit;
         }

        _python_par_add = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields( self, _python_par_self, _python_par_model_instance, _python_par_add );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_model_instance );
    Py_XDECREF( _python_par_add );

    return NULL;
}

static PyObject *dparse_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_cls, PyObject *_python_par_name )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_cls( _python_str_plain_cls, _python_par_cls );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );

    // Actual function code.
    static PyFrameObject *frame_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields );
        }

        frame_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_a9d1bbffe5ae5816766eb20d23f68d7f, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 766 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields_DateField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_contribute_to_class ) ), call4.assign( _python_var_cls.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_name.asObject() ) ) );
        }
        frame_guard.setLineNumber( 767 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_null ) ).asObject() ) )) )
        {
            frame_guard.setLineNumber( 768 );
            {
                PyObjectTempKeeper0 call6;
                PyObjectTempKeeper1 call7;
                PyObjectTempKeeper1 setattr10;
                PyObjectTempKeeper0 setattr9;
                ( ( setattr9.assign( _python_var_cls.asObject() ), setattr10.assign( BINARY_OPERATION_REMAINDER( _python_unicode_digest_cc9366e20f3b8710a5ca6238dca2af55, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ).asObject() ) ), BUILTIN_SETATTR( setattr9.asObject0(), setattr10.asObject0(), PyObjectTemporary( ( call6.assign( _mvar_django__db__models__fields_curry.asObject0() ), call7.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__get_next_or_previous_by_FIELD ) ).asObject() ) ), CALL_FUNCTION( call6.asObject0(), call7.asObject0(), PyObjectTemporary( MAKE_DICT2( _python_var_self.asObject(), _python_str_plain_field, Py_True, _python_str_plain_is_next ) ).asObject() ) ) ).asObject() ) ), Py_None );
            }
            frame_guard.setLineNumber( 771 );
            {
                PyObjectTempKeeper0 call12;
                PyObjectTempKeeper1 call13;
                PyObjectTempKeeper0 setattr15;
                PyObjectTempKeeper1 setattr16;
                ( ( setattr15.assign( _python_var_cls.asObject() ), setattr16.assign( BINARY_OPERATION_REMAINDER( _python_unicode_digest_103f02988510228edd20780941722018, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_name ) ).asObject() ) ), BUILTIN_SETATTR( setattr15.asObject0(), setattr16.asObject0(), PyObjectTemporary( ( call12.assign( _mvar_django__db__models__fields_curry.asObject0() ), call13.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_cls.asObject(), _python_str_plain__get_next_or_previous_by_FIELD ) ).asObject() ) ), CALL_FUNCTION( call12.asObject0(), call13.asObject0(), PyObjectTemporary( MAKE_DICT2( _python_var_self.asObject(), _python_str_plain_field, Py_False, _python_str_plain_is_next ) ).asObject() ) ) ).asObject() ) ), Py_None );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_name.updateLocalsDict( _python_var_cls.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields );
           frame_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_cls = NULL;
    PyObject *_python_par_name = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_cls == key )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_name == key )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_cls, key ) )
            {
                if (unlikely( _python_par_cls ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
                    goto error_exit;
                }

                _python_par_cls = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_name, key ) )
            {
                if (unlikely( _python_par_name ))
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
                    goto error_exit;
                }

                _python_par_name = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "contribute_to_class() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "contribute_to_class() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_cls != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'cls'" );
             goto error_exit;
         }

        _python_par_cls = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "contribute_to_class() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields( self, _python_par_self, _python_par_cls, _python_par_name );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_cls );
    Py_XDECREF( _python_par_name );

    return NULL;
}

static PyObject *dparse_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_lookup_type, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_lookup_type( _python_str_plain_lookup_type, _python_par_lookup_type );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields );
        }

        frame_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_473c8734fd03af8a60998a7c6041a92c, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 778 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_var_lookup_type.asObject(), _python_tuple_9edc7afe7024754c1977dfcf93933da8_tuple ) )
        {
            frame_guard.setLineNumber( 779 );
            return TO_INT( _python_var_value.asObject() );
        }
        frame_guard.setLineNumber( 780 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 super1;
            return ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields_DateField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_get_prep_lookup ) ), call4.assign( _python_var_lookup_type.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_lookup_type.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields );
           frame_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_lookup_type = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_lookup_type == key )
            {
                if (unlikely( _python_par_lookup_type ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
                    goto error_exit;
                }

                _python_par_lookup_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_lookup_type, key ) )
            {
                if (unlikely( _python_par_lookup_type ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
                    goto error_exit;
                }

                _python_par_lookup_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_lookup() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_lookup_type != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
             goto error_exit;
         }

        _python_par_lookup_type = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields( self, _python_par_self, _python_par_lookup_type, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_lookup_type );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields );
        }

        frame_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_de9ebdd8036fd61baeba87dce1e2e7db, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 783 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields );
           frame_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_connection, PyObject *_python_par_prepared )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );
    PyObjectLocalParameterVariableNoDel _python_var_prepared( _python_str_plain_prepared, _python_par_prepared );

    // Actual function code.
    static PyFrameObject *frame_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields );
        }

        frame_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_d80e0eee12127286e372ec509251c6cf, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 787 );
        if ( (!( CHECK_IF_TRUE( _python_var_prepared.asObject() ) )) )
        {
            frame_guard.setLineNumber( 788 );
            {
                PyObjectTempKeeper1 call1;
                _python_var_value.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_prep_value ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 789 );
        {
            PyObjectTempKeeper1 call3;
            return ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_value_to_db_date ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_prepared.updateLocalsDict( _python_var_connection.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields );
           frame_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_connection = NULL;
    PyObject *_python_par_prepared = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_prepared == key )
            {
                if (unlikely( _python_par_prepared ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
                    goto error_exit;
                }

                _python_par_prepared = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_prepared, key ) )
            {
                if (unlikely( _python_par_prepared ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
                    goto error_exit;
                }

                _python_par_prepared = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_db_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_prepared != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
             goto error_exit;
         }

        _python_par_prepared = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_prepared == NULL )
    {
        _python_par_prepared = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_prepared );
    }


    return impl_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value, _python_par_connection, _python_par_prepared );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_connection );
    Py_XDECREF( _python_par_prepared );

    return NULL;
}

static PyObject *dparse_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_obj( _python_str_plain_obj, _python_par_obj );
    PyObjectLocalVariable _python_var_val( _python_str_plain_val );

    // Actual function code.
    static PyFrameObject *frame_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields );
        }

        frame_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_955be522ee30b9b4f9b49cb9fdcb1e36, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 792 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_val.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_val_from_obj ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_obj.asObject() ) ) );
        }
        frame_guard.setLineNumber( 793 );
        return ( ( _python_var_val.asObject() == Py_None ) ? INCREASE_REFCOUNT( _python_unicode_empty ) : CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_val.asObject(), _python_str_plain_isoformat ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_obj.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_val.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields );
           frame_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_obj = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_obj == key )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_obj, key ) )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_to_string() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_to_string() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields( self, _python_par_self, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields );
        }

        frame_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_8338f5427f5fa91d39e68fc6a8c9d17d, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 796 );
        _python_var_defaults.assign1( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_DateField ) ).asObject(), _python_unicode_plain_form_class ) );
        frame_guard.setLineNumber( 797 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 798 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 super3;
            return ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields_DateField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp5.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields );
           frame_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_12_DateTimeField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_empty_strings_allowed( _python_str_plain_empty_strings_allowed );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_pre_save( _python_str_plain_pre_save );
    PyObjectLocalVariable _python_var_get_prep_value( _python_str_plain_get_prep_value );
    PyObjectLocalVariable _python_var_get_db_prep_value( _python_str_plain_get_db_prep_value );
    PyObjectLocalVariable _python_var_value_to_string( _python_str_plain_value_to_string );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var_empty_strings_allowed.assign0( Py_False );
    static PyFrameObject *frame_class_12_DateTimeField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_12_DateTimeField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_12_DateTimeField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_12_DateTimeField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_12_DateTimeField_of_module_django__db__models__fields );
        }

        frame_class_12_DateTimeField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_8c467fe9e34f0a194673bf5a74c67ffe, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_12_DateTimeField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_12_DateTimeField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 802 );
        {
            PyObjectTempKeeper1 make_dict1;
            PyObjectTempKeeper1 make_dict3;
            _python_var_default_error_messages.assign1( ( make_dict1.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_fe29e384f6b0bd64f91620be85bba561 ) ), make_dict3.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_5344ace176fb2e97b6b279c46943d7d6 ) ), MAKE_DICT3( make_dict1.asObject0(), _python_unicode_plain_invalid, make_dict3.asObject0(), _python_unicode_plain_invalid_date, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_2e960e6a49d5282fec07d765168d2c88 ) ).asObject(), _python_unicode_plain_invalid_datetime ) ) );
        }
        frame_guard.setLineNumber( 811 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_1d437509cd21d234c432be8cf8f8c7f2 ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_value_to_string.updateLocalsDict( _python_var_get_db_prep_value.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_pre_save.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_12_DateTimeField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_12_DateTimeField_of_module_django__db__models__fields );
           frame_class_12_DateTimeField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_1_get_internal_type_of_class_12_DateTimeField_of_module_django__db__models__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields(  ) );
    _python_var_pre_save.assign1( MAKE_FUNCTION_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields(  ) );
    _python_var_get_prep_value.assign1( MAKE_FUNCTION_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields(  ) );
    _python_var_get_db_prep_value.assign1( MAKE_FUNCTION_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields(  ) );
    _python_var_value_to_string.assign1( MAKE_FUNCTION_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_value_to_string.updateLocalsDict( _python_var_get_db_prep_value.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_pre_save.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1_get_internal_type_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_DateTimeField );
}
static PyObject *fparse_function_1_get_internal_type_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_get_internal_type_of_class_12_DateTimeField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_1_get_internal_type_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_get_internal_type_of_class_12_DateTimeField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_get_internal_type_of_class_12_DateTimeField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_default_timezone( _python_str_plain_default_timezone );
    PyObjectLocalVariable _python_var_parsed( _python_str_plain_parsed );
    PyObjectLocalVariable _python_var_msg( _python_str_plain_msg );

    // Actual function code.
    static PyFrameObject *frame_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields );
        }

        frame_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_c873534edf2e16dce181fa09de0328b0, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 819 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 820 );
            return _python_var_value.asObject1();
        }
        frame_guard.setLineNumber( 821 );
        {
            PyObjectTempKeeper0 isinstance1;
            if ( ( isinstance1.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_datetime.asObject0(), _python_str_plain_datetime ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 822 );
            return _python_var_value.asObject1();
        }
        }
        frame_guard.setLineNumber( 823 );
        {
            PyObjectTempKeeper0 isinstance13;
            if ( ( isinstance13.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance13.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_datetime.asObject0(), _python_str_plain_date ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 824 );
            {
                PyObjectTempKeeper1 call3;
                PyObjectTempKeeper1 call4;
                PyObjectTempKeeper1 call5;
                _python_var_value.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_datetime.asObject0(), _python_str_plain_datetime ) ), call4.assign( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_year ) ), call5.assign( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_month ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), call5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_day ) ).asObject() ) ) );
            }
            frame_guard.setLineNumber( 825 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_settings.asObject0(), _python_str_plain_USE_TZ ) ).asObject() ) )
            {
                frame_guard.setLineNumber( 830 );
                {
                    PyObjectTempKeeper1 call7;
                    PyObjectTempKeeper1 call8;
                    DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_warnings.asObject0(), _python_str_plain_warn ) ), call8.assign( BINARY_OPERATION_REMAINDER( _python_unicode_digest_089d78966f61a0e93d1efaa119afbb77, _python_var_value.asObject() ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), call8.asObject0(), _mvar_django__db__models__fields_RuntimeWarning.asObject0() ) ) );
                }
                frame_guard.setLineNumber( 833 );
                _python_var_default_timezone.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_timezone.asObject0(), _python_str_plain_get_default_timezone ) ).asObject() ) );
                frame_guard.setLineNumber( 834 );
                {
                    PyObjectTempKeeper1 call10;
                    PyObjectTempKeeper0 call11;
                    _python_var_value.assign1( ( call10.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_timezone.asObject0(), _python_str_plain_make_aware ) ), call11.assign( _python_var_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call10.asObject0(), call11.asObject0(), _python_var_default_timezone.asObject() ) ) );
                }
            }
            frame_guard.setLineNumber( 835 );
            return _python_var_value.asObject1();
        }
        }
        frame_guard.setLineNumber( 837 );
        try
        {
            frame_guard.setLineNumber( 838 );
            {
                PyObjectTempKeeper0 call19;
                _python_var_parsed.assign1( ( call19.assign( _mvar_django__db__models__fields_parse_datetime.asObject0() ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), _python_var_value.asObject() ) ) );
            }
            frame_guard.setLineNumber( 839 );
            if ( ( _python_var_parsed.asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 840 );
                return _python_var_parsed.asObject1();
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_ValueError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 842 );
                {
                    PyObjectTempKeeper1 op15;
                    _python_var_msg.assign1( ( op15.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_datetime ) ), BINARY_OPERATION_REMAINDER( op15.asObject0(), _python_var_value.asObject() ) ) );
                }
                frame_guard.setLineNumber( 843 );
                {
                    PyObjectTempKeeper1 call17;
                    {
                        PyObjectTemporary tmp_exception_type( ( call17.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), _python_var_msg.asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 845 );
        try
        {
            frame_guard.setLineNumber( 846 );
            {
                PyObjectTempKeeper0 call25;
                _python_var_parsed.assign1( ( call25.assign( _mvar_django__db__models__fields_parse_date.asObject0() ), CALL_FUNCTION_WITH_ARGS( call25.asObject0(), _python_var_value.asObject() ) ) );
            }
            frame_guard.setLineNumber( 847 );
            if ( ( _python_var_parsed.asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 848 );
                {
                    PyObjectTempKeeper1 call27;
                    PyObjectTempKeeper1 call28;
                    PyObjectTempKeeper1 call29;
                    return ( call27.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_datetime.asObject0(), _python_str_plain_datetime ) ), call28.assign( LOOKUP_ATTRIBUTE( _python_var_parsed.asObject(), _python_str_plain_year ) ), call29.assign( LOOKUP_ATTRIBUTE( _python_var_parsed.asObject(), _python_str_plain_month ) ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), call28.asObject0(), call29.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_parsed.asObject(), _python_str_plain_day ) ).asObject() ) );
                }
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_ValueError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 850 );
                {
                    PyObjectTempKeeper1 op21;
                    _python_var_msg.assign1( ( op21.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_date ) ), BINARY_OPERATION_REMAINDER( op21.asObject0(), _python_var_value.asObject() ) ) );
                }
                frame_guard.setLineNumber( 851 );
                {
                    PyObjectTempKeeper1 call23;
                    {
                        PyObjectTemporary tmp_exception_type( ( call23.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call23.asObject0(), _python_var_msg.asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 853 );
        {
            PyObjectTempKeeper1 op31;
            _python_var_msg.assign1( ( op31.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ), BINARY_OPERATION_REMAINDER( op31.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 854 );
        {
            PyObjectTempKeeper1 call33;
            {
                PyObjectTemporary tmp_exception_type( ( call33.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call33.asObject0(), _python_var_msg.asObject() ) ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_msg.updateLocalsDict( _python_var_parsed.updateLocalsDict( _python_var_default_timezone.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields );
           frame_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_model_instance, PyObject *_python_par_add )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_model_instance( _python_str_plain_model_instance, _python_par_model_instance );
    PyObjectLocalParameterVariableNoDel _python_var_add( _python_str_plain_add, _python_par_add );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );

    // Actual function code.
    static PyFrameObject *frame_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields );
        }

        frame_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_621abc31ae8c45a76f1b98a6f665ea2c, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 857 );
        if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_auto_now ) ).asObject() ) || ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_auto_now_add ) ).asObject() ) && CHECK_IF_TRUE( _python_var_add.asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 858 );
            _python_var_value.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_timezone.asObject0(), _python_str_plain_now ) ).asObject() ) );
            frame_guard.setLineNumber( 859 );
            {
                PyObjectTempKeeper0 setattr1;
                PyObjectTempKeeper1 setattr2;
                ( ( setattr1.assign( _python_var_model_instance.asObject() ), setattr2.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attname ) ), BUILTIN_SETATTR( setattr1.asObject0(), setattr2.asObject0(), _python_var_value.asObject() ) ), Py_None );
            }
            frame_guard.setLineNumber( 860 );
            return _python_var_value.asObject1();
        }
        else
        {
            frame_guard.setLineNumber( 862 );
            {
                PyObjectTempKeeper1 call6;
                PyObjectTempKeeper0 call7;
                PyObjectTempKeeper0 super4;
                return ( call6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super4.assign( _mvar_django__db__models__fields_DateTimeField.asObject0() ), BUILTIN_SUPER( super4.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_pre_save ) ), call7.assign( _python_var_model_instance.asObject() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), call7.asObject0(), _python_var_add.asObject() ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_add.updateLocalsDict( _python_var_model_instance.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_value.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields );
           frame_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_model_instance = NULL;
    PyObject *_python_par_add = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "pre_save() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model_instance == key )
            {
                if (unlikely( _python_par_model_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'model_instance'" );
                    goto error_exit;
                }

                _python_par_model_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_add == key )
            {
                if (unlikely( _python_par_add ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'add'" );
                    goto error_exit;
                }

                _python_par_add = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model_instance, key ) )
            {
                if (unlikely( _python_par_model_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'model_instance'" );
                    goto error_exit;
                }

                _python_par_model_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_add, key ) )
            {
                if (unlikely( _python_par_add ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'add'" );
                    goto error_exit;
                }

                _python_par_add = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "pre_save() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "pre_save() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "pre_save() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "pre_save() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "pre_save() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "pre_save() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_model_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'model_instance'" );
             goto error_exit;
         }

        _python_par_model_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_add != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'add'" );
             goto error_exit;
         }

        _python_par_add = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields( self, _python_par_self, _python_par_model_instance, _python_par_add );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_model_instance );
    Py_XDECREF( _python_par_add );

    return NULL;
}

static PyObject *dparse_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_default_timezone( _python_str_plain_default_timezone );

    // Actual function code.
    static PyFrameObject *frame_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields );
        }

        frame_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_9c22672c23f8b64c07ad96e3749d2fa4, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 870 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_value.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 871 );
        {
            PyObjectTempKeeper1 call9;
            if ( ( ( _python_var_value.asObject() != Py_None ) && ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_settings.asObject0(), _python_str_plain_USE_TZ ) ).asObject() ) && CHECK_IF_TRUE( PyObjectTemporary( ( call9.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_timezone.asObject0(), _python_str_plain_is_naive ) ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_var_value.asObject() ) ) ).asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 875 );
            {
                PyObjectTempKeeper1 call3;
                PyObjectTempKeeper1 call4;
                DECREASE_REFCOUNT( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_warnings.asObject0(), _python_str_plain_warn ) ), call4.assign( BINARY_OPERATION_REMAINDER( _python_unicode_digest_089d78966f61a0e93d1efaa119afbb77, _python_var_value.asObject() ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _mvar_django__db__models__fields_RuntimeWarning.asObject0() ) ) );
            }
            frame_guard.setLineNumber( 878 );
            _python_var_default_timezone.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_timezone.asObject0(), _python_str_plain_get_default_timezone ) ).asObject() ) );
            frame_guard.setLineNumber( 879 );
            {
                PyObjectTempKeeper1 call6;
                PyObjectTempKeeper0 call7;
                _python_var_value.assign1( ( call6.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_timezone.asObject0(), _python_str_plain_make_aware ) ), call7.assign( _python_var_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), call7.asObject0(), _python_var_default_timezone.asObject() ) ) );
            }
        }
        }
        frame_guard.setLineNumber( 880 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_default_timezone.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields );
           frame_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_connection, PyObject *_python_par_prepared )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );
    PyObjectLocalParameterVariableNoDel _python_var_prepared( _python_str_plain_prepared, _python_par_prepared );

    // Actual function code.
    static PyFrameObject *frame_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields );
        }

        frame_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_e438766274e5fb8f7ad34145d7b61535, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 884 );
        if ( (!( CHECK_IF_TRUE( _python_var_prepared.asObject() ) )) )
        {
            frame_guard.setLineNumber( 885 );
            {
                PyObjectTempKeeper1 call1;
                _python_var_value.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_prep_value ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 886 );
        {
            PyObjectTempKeeper1 call3;
            return ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_value_to_db_datetime ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_prepared.updateLocalsDict( _python_var_connection.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields );
           frame_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_connection = NULL;
    PyObject *_python_par_prepared = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_prepared == key )
            {
                if (unlikely( _python_par_prepared ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
                    goto error_exit;
                }

                _python_par_prepared = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_prepared, key ) )
            {
                if (unlikely( _python_par_prepared ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
                    goto error_exit;
                }

                _python_par_prepared = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_db_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_prepared != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
             goto error_exit;
         }

        _python_par_prepared = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_prepared == NULL )
    {
        _python_par_prepared = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_prepared );
    }


    return impl_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value, _python_par_connection, _python_par_prepared );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_connection );
    Py_XDECREF( _python_par_prepared );

    return NULL;
}

static PyObject *dparse_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_obj( _python_str_plain_obj, _python_par_obj );
    PyObjectLocalVariable _python_var_val( _python_str_plain_val );

    // Actual function code.
    static PyFrameObject *frame_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields );
        }

        frame_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_2f86972d58482040d98bff3682c98874, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 889 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_val.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_val_from_obj ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_obj.asObject() ) ) );
        }
        frame_guard.setLineNumber( 890 );
        return ( ( _python_var_val.asObject() == Py_None ) ? INCREASE_REFCOUNT( _python_unicode_empty ) : CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_val.asObject(), _python_str_plain_isoformat ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_obj.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_val.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields );
           frame_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_obj = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_obj == key )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_obj, key ) )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_to_string() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_to_string() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields( self, _python_par_self, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields );
        }

        frame_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_c02379ae79f39ebf76163850fc0d7a97, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 893 );
        _python_var_defaults.assign1( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_DateTimeField ) ).asObject(), _python_unicode_plain_form_class ) );
        frame_guard.setLineNumber( 894 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 895 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 super3;
            return ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields_DateTimeField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp5.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields );
           frame_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_13_DecimalField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_empty_strings_allowed( _python_str_plain_empty_strings_allowed );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var__format( _python_str_plain__format );
    PyObjectLocalVariable _python_var_format_number( _python_str_plain_format_number );
    PyObjectLocalVariable _python_var_get_db_prep_save( _python_str_plain_get_db_prep_save );
    PyObjectLocalVariable _python_var_get_prep_value( _python_str_plain_get_prep_value );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var_empty_strings_allowed.assign0( Py_False );
    static PyFrameObject *frame_class_13_DecimalField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_13_DecimalField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_13_DecimalField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_13_DecimalField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_13_DecimalField_of_module_django__db__models__fields );
        }

        frame_class_13_DecimalField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_61ae1a8088d4cd7a997c5282bf88c601, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_13_DecimalField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_13_DecimalField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 899 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_f8280f3d2869a9ba74b0de81136ddd25 ) ).asObject(), _python_unicode_plain_invalid ) );
        frame_guard.setLineNumber( 902 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_4809ec389794a02494d23f837bb39ce7 ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_get_db_prep_save.updateLocalsDict( _python_var_format_number.updateLocalsDict( _python_var__format.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_13_DecimalField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_13_DecimalField_of_module_django__db__models__fields );
           frame_class_13_DecimalField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields(  ) );
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_2_get_internal_type_of_class_13_DecimalField_of_module_django__db__models__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields(  ) );
    _python_var__format.assign1( MAKE_FUNCTION_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields(  ) );
    _python_var_format_number.assign1( MAKE_FUNCTION_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields(  ) );
    _python_var_get_db_prep_save.assign1( MAKE_FUNCTION_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields(  ) );
    _python_var_get_prep_value.assign1( MAKE_FUNCTION_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_get_db_prep_save.updateLocalsDict( _python_var_format_number.updateLocalsDict( _python_var__format.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_verbose_name, PyObject *_python_par_name, PyObject *_python_par_max_digits, PyObject *_python_par_decimal_places, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_verbose_name( _python_str_plain_verbose_name, _python_par_verbose_name );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_max_digits( _python_str_plain_max_digits, _python_par_max_digits );
    PyObjectLocalParameterVariableNoDel _python_var_decimal_places( _python_str_plain_decimal_places, _python_par_decimal_places );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields );
        }

        frame_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_fe59394164359233ab2603576d9c994f, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 906 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( _python_var_max_digits.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_decimal_places.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_max_digits );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_decimal_places );
            }
        }
        frame_guard.setLineNumber( 907 );
        {
            PyObjectTempKeeper1 call_tmp6;
            PyObjectTempKeeper1 call_tmp7;
            PyObjectTempKeeper0 make_tuple3;
            PyObjectTempKeeper0 make_tuple4;
            DECREASE_REFCOUNT( ( call_tmp6.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_Field.asObject0(), _python_str_plain___init__ ) ), call_tmp7.assign( ( make_tuple3.assign( _python_var_self.asObject() ), make_tuple4.assign( _python_var_verbose_name.asObject() ), MAKE_TUPLE3( make_tuple3.asObject0(), make_tuple4.asObject0(), _python_var_name.asObject() ) ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp6.asObject(), call_tmp7.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_decimal_places.updateLocalsDict( _python_var_max_digits.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_verbose_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields );
           frame_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_verbose_name = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_max_digits = NULL;
    PyObject *_python_par_decimal_places = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument verbose_name was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_verbose_name );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_verbose_name == NULL );

            _python_par_verbose_name = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_verbose_name );

            kw_found += 1;
        }
    }

    // Check if argument name was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_name );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_name == NULL );

            _python_par_name = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_name );

            kw_found += 1;
        }
    }

    // Check if argument max_digits was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_max_digits );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_max_digits == NULL );

            _python_par_max_digits = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_max_digits );

            kw_found += 1;
        }
    }

    // Check if argument decimal_places was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_decimal_places );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_decimal_places == NULL );

            _python_par_decimal_places = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_decimal_places );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_verbose_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'verbose_name'" );
             goto error_exit;
         }

        _python_par_verbose_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_max_digits != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'max_digits'" );
             goto error_exit;
         }

        _python_par_max_digits = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_decimal_places != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'decimal_places'" );
             goto error_exit;
         }

        _python_par_decimal_places = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_verbose_name == NULL )
    {
        _python_par_verbose_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_verbose_name );
    }
    if ( _python_par_name == NULL )
    {
        _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_name );
    }
    if ( _python_par_max_digits == NULL )
    {
        _python_par_max_digits = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_max_digits );
    }
    if ( _python_par_decimal_places == NULL )
    {
        _python_par_decimal_places = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_decimal_places );
    }


    return impl_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields( self, _python_par_self, _python_par_verbose_name, _python_par_name, _python_par_max_digits, _python_par_decimal_places, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_verbose_name );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_max_digits );
    Py_XDECREF( _python_par_decimal_places );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6)
    {
        return impl_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_internal_type_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_DecimalField );
}
static PyObject *fparse_function_2_get_internal_type_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_get_internal_type_of_class_13_DecimalField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_get_internal_type_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_get_internal_type_of_class_13_DecimalField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_internal_type_of_class_13_DecimalField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_msg( _python_str_plain_msg );

    // Actual function code.
    static PyFrameObject *frame_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields );
        }

        frame_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_8efcfc8e4d8160a2b84a96be3459c194, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 913 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 914 );
            return _python_var_value.asObject1();
        }
        frame_guard.setLineNumber( 915 );
        try
        {
            frame_guard.setLineNumber( 916 );
            {
                PyObjectTempKeeper1 call5;
                return ( call5.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_decimal.asObject0(), _python_str_plain_Decimal ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_value.asObject() ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_decimal.asObject0(), _python_str_plain_InvalidOperation ) ).asObject() ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 918 );
                {
                    PyObjectTempKeeper1 op1;
                    _python_var_msg.assign1( ( op1.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), _python_var_value.asObject() ) ) );
                }
                frame_guard.setLineNumber( 919 );
                {
                    PyObjectTempKeeper1 call3;
                    {
                        PyObjectTemporary tmp_exception_type( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_msg.asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_msg.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields );
           frame_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields );
        }

        frame_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_4bc7306c3a9c2885c52385fbf6d7932f, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 922 );
        {
            PyObjectTempKeeper0 isinstance3;
            if ( ( ( isinstance3.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) || ( _python_var_value.asObject() == Py_None ) ) )
        {
            frame_guard.setLineNumber( 923 );
            return _python_var_value.asObject1();
        }
        else
        {
            frame_guard.setLineNumber( 925 );
            {
                PyObjectTempKeeper1 call1;
                return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_format_number ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) );
            }
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields );
           frame_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_format() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_format() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "_format() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "_format() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "_format() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_format() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_format() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "_format() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "_format() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "_format() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_format() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_format() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "_format() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "_format() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "_format() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "_format() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "_format() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "_format() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_format() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "_format() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_util( _python_str_plain_util );

    // Actual function code.
    static PyFrameObject *frame_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields );
        }

        frame_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_970ea58fa4b7b5733ed81f80fc6e17b9, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 938 );
        _python_var_util.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_67631acd3c65ad614c0beb0db7bbe60a, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, PyObjectTemporary( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_util.updateLocalsDict( PyDict_New() ) ) ) ).asObject(), _python_list_str_plain_util_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_util ) );
        frame_guard.setLineNumber( 939 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            PyObjectTempKeeper1 call3;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_util.asObject(), _python_str_plain_format_number ) ), call2.assign( _python_var_value.asObject() ), call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_digits ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_decimal_places ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_util.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields );
           frame_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "format_number() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "format_number() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "format_number() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "format_number() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "format_number() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "format_number() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "format_number() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "format_number() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "format_number() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "format_number() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "format_number() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "format_number() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "format_number() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "format_number() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "format_number() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "format_number() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "format_number() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "format_number() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "format_number() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "format_number() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_connection )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );

    // Actual function code.
    static PyFrameObject *frame_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields );
        }

        frame_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_71de33e86552c34d2250d06e496a08fc, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 942 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 call4;
            PyObjectTempKeeper1 call5;
            return ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_value_to_db_decimal ) ), call4.assign( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) ), call5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_digits ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), call5.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_decimal_places ) ).asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_connection.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields );
           frame_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_connection = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_db_prep_save() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_save() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_save() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value, _python_par_connection );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_connection );

    return NULL;
}

static PyObject *dparse_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields );
        }

        frame_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_68e0dac763f2f862dd62ae27429e1a3d, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 946 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields );
           frame_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields );
        }

        frame_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_8c0940fce80a830ce87f1e4140ece81f, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 949 );
        {
            PyObjectTempKeeper1 make_dict1;
            PyObjectTempKeeper1 make_dict3;
            _python_var_defaults.assign1( ( make_dict1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_digits ) ), make_dict3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_decimal_places ) ), MAKE_DICT3( make_dict1.asObject0(), _python_unicode_plain_max_digits, make_dict3.asObject0(), _python_unicode_plain_decimal_places, PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_DecimalField ) ).asObject(), _python_unicode_plain_form_class ) ) );
        }
        frame_guard.setLineNumber( 954 );
        {
            PyObjectTempKeeper1 call7;
            DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 955 );
        {
            PyObjectTempKeeper1 call_tmp11;
            PyObjectTempKeeper0 super9;
            return ( call_tmp11.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super9.assign( _mvar_django__db__models__fields_DecimalField.asObject0() ), BUILTIN_SUPER( super9.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp11.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields );
           frame_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_14_EmailField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_default_validators( _python_str_plain_default_validators );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_14_EmailField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_14_EmailField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_14_EmailField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_14_EmailField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_14_EmailField_of_module_django__db__models__fields );
        }

        frame_class_14_EmailField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_b6a29e0acc9dfeef0a1f0746890b8e60, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_14_EmailField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_14_EmailField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 958 );
        _python_var_default_validators.assign1( MAKE_LIST1( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_validators.asObject0(), _python_str_plain_validate_email ) ) );
        frame_guard.setLineNumber( 959 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_b357b524e740bc85b9790a0712d84a30 ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_validators.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_14_EmailField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_14_EmailField_of_module_django__db__models__fields );
           frame_class_14_EmailField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_validators.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_14_EmailField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields );
        }

        frame_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_2227abf9e19267679661625c72a2e1ca, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 965 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_get ) ).asObject(), _python_unicode_plain_max_length, _python_int_pos_75 ) );
                SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_kwargs.asObject(), _python_unicode_plain_max_length );
        }
        frame_guard.setLineNumber( 966 );
        {
            PyObjectTempKeeper1 call_tmp1;
            PyObjectTempKeeper1 call_tmp2;
            PyObjectTempKeeper0 call_tmp3;
            DECREASE_REFCOUNT( ( call_tmp1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_CharField.asObject0(), _python_str_plain___init__ ) ), call_tmp2.assign( MAKE_TUPLE1( _python_var_self.asObject() ) ), call_tmp3.assign( _python_var_args.asObject() ), impl_function_8_complex_call_helper_pos_star_list_star_dict_of_module___internal__( call_tmp1.asObject(), call_tmp2.asObject(), call_tmp3.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields );
           frame_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields );
        }

        frame_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_076f8cc3df82699a57522a60d5ae3366, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 971 );
        _python_var_defaults.assign1( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_EmailField ) ).asObject(), _python_unicode_plain_form_class ) );
        frame_guard.setLineNumber( 974 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 975 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 super3;
            return ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields_EmailField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp5.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields );
           frame_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_15_FilePathField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_15_FilePathField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_15_FilePathField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_15_FilePathField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_15_FilePathField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_15_FilePathField_of_module_django__db__models__fields );
        }

        frame_class_15_FilePathField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_a3523919e438dd8b9b16eedd490224e3, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_15_FilePathField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_15_FilePathField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 978 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_f7585dca02f941492ce2a56cecf7b71f ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_get_internal_type.updateLocalsDict( _python_var_formfield.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_15_FilePathField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_15_FilePathField_of_module_django__db__models__fields );
           frame_class_15_FilePathField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields(  ) );
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_3_get_internal_type_of_class_15_FilePathField_of_module_django__db__models__fields(  ) );
    return _python_var_get_internal_type.updateLocalsDict( _python_var_formfield.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_verbose_name, PyObject *_python_par_name, PyObject *_python_par_path, PyObject *_python_par_match, PyObject *_python_par_recursive, PyObject *_python_par_allow_files, PyObject *_python_par_allow_folders, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_verbose_name( _python_str_plain_verbose_name, _python_par_verbose_name );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_path( _python_str_plain_path, _python_par_path );
    PyObjectLocalParameterVariableNoDel _python_var_match( _python_str_plain_match, _python_par_match );
    PyObjectLocalParameterVariableNoDel _python_var_recursive( _python_str_plain_recursive, _python_par_recursive );
    PyObjectLocalParameterVariableNoDel _python_var_allow_files( _python_str_plain_allow_files, _python_par_allow_files );
    PyObjectLocalParameterVariableNoDel _python_var_allow_folders( _python_str_plain_allow_folders, _python_par_allow_folders );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields );
        }

        frame_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_19d87f56c2902362c148ff644f135f12, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 982 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple1;
                PyObjectTempKeeper0 make_tuple2;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( _python_var_path.asObject() ), make_tuple2.assign( _python_var_match.asObject() ), MAKE_TUPLE3( make_tuple1.asObject0(), make_tuple2.asObject0(), _python_var_recursive.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            PyObjectTemporary _python_tmp_element_3( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 2 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 3 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_path );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_match );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_3.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_recursive );
            }
        }
        {
            frame_guard.setLineNumber( 983 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple4;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple4.assign( _python_var_allow_files.asObject() ), MAKE_TUPLE2( make_tuple4.asObject0(), _python_var_allow_folders.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_allow_files );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_allow_folders );
            }
        }
        frame_guard.setLineNumber( 984 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_get ) ).asObject(), _python_unicode_plain_max_length, _python_int_pos_100 ) );
                SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_kwargs.asObject(), _python_unicode_plain_max_length );
        }
        frame_guard.setLineNumber( 985 );
        {
            PyObjectTempKeeper1 call_tmp10;
            PyObjectTempKeeper1 call_tmp9;
            PyObjectTempKeeper0 make_tuple6;
            PyObjectTempKeeper0 make_tuple7;
            DECREASE_REFCOUNT( ( call_tmp9.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_Field.asObject0(), _python_str_plain___init__ ) ), call_tmp10.assign( ( make_tuple6.assign( _python_var_self.asObject() ), make_tuple7.assign( _python_var_verbose_name.asObject() ), MAKE_TUPLE3( make_tuple6.asObject0(), make_tuple7.asObject0(), _python_var_name.asObject() ) ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp9.asObject(), call_tmp10.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_allow_folders.updateLocalsDict( _python_var_allow_files.updateLocalsDict( _python_var_recursive.updateLocalsDict( _python_var_match.updateLocalsDict( _python_var_path.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_verbose_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields );
           frame_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_verbose_name = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_path = NULL;
    PyObject *_python_par_match = NULL;
    PyObject *_python_par_recursive = NULL;
    PyObject *_python_par_allow_files = NULL;
    PyObject *_python_par_allow_folders = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument verbose_name was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_verbose_name );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_verbose_name == NULL );

            _python_par_verbose_name = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_verbose_name );

            kw_found += 1;
        }
    }

    // Check if argument name was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_name );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_name == NULL );

            _python_par_name = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_name );

            kw_found += 1;
        }
    }

    // Check if argument path was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_path );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_path == NULL );

            _python_par_path = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_path );

            kw_found += 1;
        }
    }

    // Check if argument match was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_match );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_match == NULL );

            _python_par_match = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_match );

            kw_found += 1;
        }
    }

    // Check if argument recursive was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_recursive );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_recursive == NULL );

            _python_par_recursive = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_recursive );

            kw_found += 1;
        }
    }

    // Check if argument allow_files was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_allow_files );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_allow_files == NULL );

            _python_par_allow_files = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_allow_files );

            kw_found += 1;
        }
    }

    // Check if argument allow_folders was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_allow_folders );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_allow_folders == NULL );

            _python_par_allow_folders = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_allow_folders );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 8 ))
    {
        if ( 8 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 8, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 8 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 8, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 8, args_given + kw_only_found );
            }
#else
            if ( 8 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 8, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 8, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 8 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 8, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 8 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 8 ? args_given : 8;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_verbose_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'verbose_name'" );
             goto error_exit;
         }

        _python_par_verbose_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_path != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'path'" );
             goto error_exit;
         }

        _python_par_path = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_match != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'match'" );
             goto error_exit;
         }

        _python_par_match = INCREASE_REFCOUNT( args[ 4 ] );
    }
    if (likely( 5 < args_usable_count ))
    {
         if (unlikely( _python_par_recursive != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'recursive'" );
             goto error_exit;
         }

        _python_par_recursive = INCREASE_REFCOUNT( args[ 5 ] );
    }
    if (likely( 6 < args_usable_count ))
    {
         if (unlikely( _python_par_allow_files != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'allow_files'" );
             goto error_exit;
         }

        _python_par_allow_files = INCREASE_REFCOUNT( args[ 6 ] );
    }
    if (likely( 7 < args_usable_count ))
    {
         if (unlikely( _python_par_allow_folders != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'allow_folders'" );
             goto error_exit;
         }

        _python_par_allow_folders = INCREASE_REFCOUNT( args[ 7 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_verbose_name == NULL )
    {
        _python_par_verbose_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_verbose_name );
    }
    if ( _python_par_name == NULL )
    {
        _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_name );
    }
    if ( _python_par_path == NULL )
    {
        _python_par_path = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_path );
    }
    if ( _python_par_match == NULL )
    {
        _python_par_match = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_match );
    }
    if ( _python_par_recursive == NULL )
    {
        _python_par_recursive = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 4 ) );
        assertObject( _python_par_recursive );
    }
    if ( _python_par_allow_files == NULL )
    {
        _python_par_allow_files = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 5 ) );
        assertObject( _python_par_allow_files );
    }
    if ( _python_par_allow_folders == NULL )
    {
        _python_par_allow_folders = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 6 ) );
        assertObject( _python_par_allow_folders );
    }


    return impl_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields( self, _python_par_self, _python_par_verbose_name, _python_par_name, _python_par_path, _python_par_match, _python_par_recursive, _python_par_allow_files, _python_par_allow_folders, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_verbose_name );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_path );
    Py_XDECREF( _python_par_match );
    Py_XDECREF( _python_par_recursive );
    Py_XDECREF( _python_par_allow_files );
    Py_XDECREF( _python_par_allow_folders );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 9)
    {
        return impl_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ), INCREASE_REFCOUNT( args[ 7 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields );
        }

        frame_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_104385c781e56778a65c327315e6c313, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 988 );
        {
            PyObjectTempKeeper1 make_dict1;
            PyObjectTempKeeper1 make_dict3;
            PyObjectTempKeeper1 make_dict5;
            PyObjectTempKeeper1 make_dict7;
            PyObjectTempKeeper1 make_dict9;
            _python_var_defaults.assign1( ( make_dict1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_path ) ), make_dict3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_match ) ), make_dict5.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_recursive ) ), make_dict7.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_FilePathField ) ), make_dict9.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_allow_files ) ), MAKE_DICT6( make_dict1.asObject0(), _python_unicode_plain_path, make_dict3.asObject0(), _python_unicode_plain_match, make_dict5.asObject0(), _python_unicode_plain_recursive, make_dict7.asObject0(), _python_unicode_plain_form_class, make_dict9.asObject0(), _python_unicode_plain_allow_files, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_allow_folders ) ).asObject(), _python_unicode_plain_allow_folders ) ) );
        }
        frame_guard.setLineNumber( 996 );
        {
            PyObjectTempKeeper1 call13;
            DECREASE_REFCOUNT( ( call13.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 997 );
        {
            PyObjectTempKeeper1 call_tmp17;
            PyObjectTempKeeper0 super15;
            return ( call_tmp17.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super15.assign( _mvar_django__db__models__fields_FilePathField.asObject0() ), BUILTIN_SUPER( super15.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp17.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields );
           frame_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_get_internal_type_of_class_15_FilePathField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_FilePathField );
}
static PyObject *fparse_function_3_get_internal_type_of_class_15_FilePathField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_get_internal_type_of_class_15_FilePathField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_get_internal_type_of_class_15_FilePathField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_get_internal_type_of_class_15_FilePathField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_get_internal_type_of_class_15_FilePathField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_16_FloatField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_empty_strings_allowed( _python_str_plain_empty_strings_allowed );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var_get_prep_value( _python_str_plain_get_prep_value );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var_empty_strings_allowed.assign0( Py_False );
    static PyFrameObject *frame_class_16_FloatField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_16_FloatField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_16_FloatField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_16_FloatField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_16_FloatField_of_module_django__db__models__fields );
        }

        frame_class_16_FloatField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_01e88b859197abf5ace3591bb5255893, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_16_FloatField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_16_FloatField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1004 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_d3237d10561dfed859f0430098749819 ) ).asObject(), _python_unicode_plain_invalid ) );
        frame_guard.setLineNumber( 1007 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_5e508eeae029184248809d218c2b38dc ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_16_FloatField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_16_FloatField_of_module_django__db__models__fields );
           frame_class_16_FloatField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var_get_prep_value.assign1( MAKE_FUNCTION_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields(  ) );
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_2_get_internal_type_of_class_16_FloatField_of_module_django__db__models__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields );
        }

        frame_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_b5e6599b01a4a937d2715691bf873090, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1010 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 1012 );
        return TO_FLOAT( _python_var_value.asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields );
           frame_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_internal_type_of_class_16_FloatField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_FloatField );
}
static PyObject *fparse_function_2_get_internal_type_of_class_16_FloatField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_get_internal_type_of_class_16_FloatField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_get_internal_type_of_class_16_FloatField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_get_internal_type_of_class_16_FloatField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_internal_type_of_class_16_FloatField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_msg( _python_str_plain_msg );

    // Actual function code.
    static PyFrameObject *frame_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields );
        }

        frame_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_85d6f28116700171a1ce087485af9abd, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1018 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 1019 );
            return _python_var_value.asObject1();
        }
        frame_guard.setLineNumber( 1020 );
        try
        {
            frame_guard.setLineNumber( 1021 );
            return TO_FLOAT( _python_var_value.asObject() );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_TypeError ) || _exception.matches( PyExc_ValueError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 1023 );
                {
                    PyObjectTempKeeper1 op1;
                    _python_var_msg.assign1( ( op1.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), _python_var_value.asObject() ) ) );
                }
                frame_guard.setLineNumber( 1024 );
                {
                    PyObjectTempKeeper1 call3;
                    {
                        PyObjectTemporary tmp_exception_type( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_msg.asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_msg.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields );
           frame_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields );
        }

        frame_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_6a53d92f6baacfbe02e1db10c3621279, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1027 );
        _python_var_defaults.assign1( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_FloatField ) ).asObject(), _python_unicode_plain_form_class ) );
        frame_guard.setLineNumber( 1028 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1029 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 super3;
            return ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields_FloatField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp5.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields );
           frame_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_17_IntegerField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_empty_strings_allowed( _python_str_plain_empty_strings_allowed );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var_get_prep_value( _python_str_plain_get_prep_value );
    PyObjectLocalVariable _python_var_get_prep_lookup( _python_str_plain_get_prep_lookup );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var_empty_strings_allowed.assign0( Py_False );
    static PyFrameObject *frame_class_17_IntegerField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_17_IntegerField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_17_IntegerField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_17_IntegerField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_17_IntegerField_of_module_django__db__models__fields );
        }

        frame_class_17_IntegerField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_accf77f529eda848e48ad04eaf5068e0, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_17_IntegerField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_17_IntegerField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1033 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_0a4eecefe1293a506cb661ac3f32cce2 ) ).asObject(), _python_unicode_plain_invalid ) );
        frame_guard.setLineNumber( 1036 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_plain_Integer ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var_get_prep_lookup.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_17_IntegerField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_17_IntegerField_of_module_django__db__models__fields );
           frame_class_17_IntegerField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var_get_prep_value.assign1( MAKE_FUNCTION_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields(  ) );
    _python_var_get_prep_lookup.assign1( MAKE_FUNCTION_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields(  ) );
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_3_get_internal_type_of_class_17_IntegerField_of_module_django__db__models__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var_get_prep_lookup.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields );
        }

        frame_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_f1247a5df2b327237edba6ff81a65490, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1039 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 1041 );
        return TO_INT( _python_var_value.asObject() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields );
           frame_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_lookup_type, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_lookup_type( _python_str_plain_lookup_type, _python_par_lookup_type );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields );
        }

        frame_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_d66d929a41447155d37442cd260bc60e, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1044 );
        if ( ( ( RICH_COMPARE_BOOL_EQ( _python_var_lookup_type.asObject(), _python_unicode_plain_gte ) || RICH_COMPARE_BOOL_EQ( _python_var_lookup_type.asObject(), _python_unicode_plain_lt ) ) && BUILTIN_ISINSTANCE_BOOL( _python_var_value.asObject(), LOOKUP_BUILTIN( _python_str_plain_float ) ) ) )
        {
            frame_guard.setLineNumber( 1046 );
            {
                PyObjectTempKeeper1 call1;
                _python_var_value.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_math.asObject0(), _python_str_plain_ceil ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 1047 );
        {
            PyObjectTempKeeper1 call5;
            PyObjectTempKeeper0 call6;
            PyObjectTempKeeper0 super3;
            return ( call5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields_IntegerField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_get_prep_lookup ) ), call6.assign( _python_var_lookup_type.asObject() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), call6.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_lookup_type.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields );
           frame_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_lookup_type = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_lookup_type == key )
            {
                if (unlikely( _python_par_lookup_type ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
                    goto error_exit;
                }

                _python_par_lookup_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_lookup_type, key ) )
            {
                if (unlikely( _python_par_lookup_type ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
                    goto error_exit;
                }

                _python_par_lookup_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_lookup() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_lookup_type != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
             goto error_exit;
         }

        _python_par_lookup_type = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields( self, _python_par_self, _python_par_lookup_type, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_lookup_type );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_get_internal_type_of_class_17_IntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_IntegerField );
}
static PyObject *fparse_function_3_get_internal_type_of_class_17_IntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_get_internal_type_of_class_17_IntegerField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_get_internal_type_of_class_17_IntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_get_internal_type_of_class_17_IntegerField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_get_internal_type_of_class_17_IntegerField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_msg( _python_str_plain_msg );

    // Actual function code.
    static PyFrameObject *frame_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields );
        }

        frame_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_65dc60fb16a410018ea2b7c2159cee56, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1053 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            frame_guard.setLineNumber( 1054 );
            return _python_var_value.asObject1();
        }
        frame_guard.setLineNumber( 1055 );
        try
        {
            frame_guard.setLineNumber( 1056 );
            return TO_INT( _python_var_value.asObject() );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_TypeError ) || _exception.matches( PyExc_ValueError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 1058 );
                {
                    PyObjectTempKeeper1 op1;
                    _python_var_msg.assign1( ( op1.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), _python_var_value.asObject() ) ) );
                }
                frame_guard.setLineNumber( 1059 );
                {
                    PyObjectTempKeeper1 call3;
                    {
                        PyObjectTemporary tmp_exception_type( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_msg.asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_msg.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields );
           frame_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields );
        }

        frame_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_4304a4865af778ce34e23d5fc52eaeab, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1062 );
        _python_var_defaults.assign1( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_IntegerField ) ).asObject(), _python_unicode_plain_form_class ) );
        frame_guard.setLineNumber( 1063 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1064 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 super3;
            return ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields_IntegerField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp5.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields );
           frame_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_18_BigIntegerField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_empty_strings_allowed( _python_str_plain_empty_strings_allowed );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var_MAX_BIGINT( _python_str_plain_MAX_BIGINT );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var_empty_strings_allowed.assign0( Py_False );
    static PyFrameObject *frame_class_18_BigIntegerField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_18_BigIntegerField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_18_BigIntegerField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_18_BigIntegerField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_18_BigIntegerField_of_module_django__db__models__fields );
        }

        frame_class_18_BigIntegerField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_b922a5117ba827b5f9939845c4297368, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_18_BigIntegerField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_18_BigIntegerField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1068 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_a31a8ab16bf1d247092c9a04846eccb4 ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var_MAX_BIGINT.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_18_BigIntegerField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_18_BigIntegerField_of_module_django__db__models__fields );
           frame_class_18_BigIntegerField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var_MAX_BIGINT.assign0( _python_804c1a9433406c49272e1c871dfa8feb );
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_1_get_internal_type_of_class_18_BigIntegerField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var_MAX_BIGINT.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );
}


static PyObject *impl_function_1_get_internal_type_of_class_18_BigIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_BigIntegerField );
}
static PyObject *fparse_function_1_get_internal_type_of_class_18_BigIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_get_internal_type_of_class_18_BigIntegerField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_1_get_internal_type_of_class_18_BigIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_get_internal_type_of_class_18_BigIntegerField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_get_internal_type_of_class_18_BigIntegerField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields );
        }

        frame_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_fec7cd8df8b1b2e29dc7adbd89e00563, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1075 );
        {
            PyObjectTempKeeper1 make_dict1;
            _python_var_defaults.assign1( ( make_dict1.assign( BINARY_OPERATION_SUB( PyObjectTemporary( UNARY_OPERATION( PyNumber_Negative, PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_BigIntegerField.asObject0(), _python_str_plain_MAX_BIGINT ) ).asObject() ) ).asObject(), _python_int_pos_1 ) ), MAKE_DICT2( make_dict1.asObject0(), _python_unicode_plain_min_value, PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_BigIntegerField.asObject0(), _python_str_plain_MAX_BIGINT ) ).asObject(), _python_unicode_plain_max_value ) ) );
        }
        frame_guard.setLineNumber( 1077 );
        {
            PyObjectTempKeeper1 call5;
            DECREASE_REFCOUNT( ( call5.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1078 );
        {
            PyObjectTempKeeper1 call_tmp9;
            PyObjectTempKeeper0 super7;
            return ( call_tmp9.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super7.assign( _mvar_django__db__models__fields_BigIntegerField.asObject0() ), BUILTIN_SUPER( super7.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp9.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields );
           frame_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_19_IPAddressField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_empty_strings_allowed( _python_str_plain_empty_strings_allowed );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var_empty_strings_allowed.assign0( Py_False );
    static PyFrameObject *frame_class_19_IPAddressField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_19_IPAddressField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_19_IPAddressField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_19_IPAddressField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_19_IPAddressField_of_module_django__db__models__fields );
        }

        frame_class_19_IPAddressField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_2c8d0918bd91164a9310d31d59a3b4e4, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_19_IPAddressField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_19_IPAddressField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1082 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_3c40e603ab1c9e14602a6a53d041de45 ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_19_IPAddressField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_19_IPAddressField_of_module_django__db__models__fields );
           frame_class_19_IPAddressField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields(  ) );
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_2_get_internal_type_of_class_19_IPAddressField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields );
        }

        frame_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_2efb317a1ef1c27ac6203fd5c25ed559, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1085 );
        SET_SUBSCRIPT( _python_int_pos_15, _python_var_kwargs.asObject(), _python_unicode_plain_max_length );
        frame_guard.setLineNumber( 1086 );
        {
            PyObjectTempKeeper1 call_tmp1;
            PyObjectTempKeeper1 call_tmp2;
            PyObjectTempKeeper0 call_tmp3;
            DECREASE_REFCOUNT( ( call_tmp1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_Field.asObject0(), _python_str_plain___init__ ) ), call_tmp2.assign( MAKE_TUPLE1( _python_var_self.asObject() ) ), call_tmp3.assign( _python_var_args.asObject() ), impl_function_8_complex_call_helper_pos_star_list_star_dict_of_module___internal__( call_tmp1.asObject(), call_tmp2.asObject(), call_tmp3.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields );
           frame_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_internal_type_of_class_19_IPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_IPAddressField );
}
static PyObject *fparse_function_2_get_internal_type_of_class_19_IPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_get_internal_type_of_class_19_IPAddressField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_get_internal_type_of_class_19_IPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_get_internal_type_of_class_19_IPAddressField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_internal_type_of_class_19_IPAddressField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields );
        }

        frame_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_162ae7350d18cc8a4fb5d90658ac83ca, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1092 );
        _python_var_defaults.assign1( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_IPAddressField ) ).asObject(), _python_unicode_plain_form_class ) );
        frame_guard.setLineNumber( 1093 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1094 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 super3;
            return ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields_IPAddressField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp5.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields );
           frame_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_20_GenericIPAddressField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_empty_strings_allowed( _python_str_plain_empty_strings_allowed );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_get_db_prep_value( _python_str_plain_get_db_prep_value );
    PyObjectLocalVariable _python_var_get_prep_value( _python_str_plain_get_prep_value );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var_empty_strings_allowed.assign0( Py_True );
    static PyFrameObject *frame_class_20_GenericIPAddressField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_20_GenericIPAddressField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_20_GenericIPAddressField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_20_GenericIPAddressField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_20_GenericIPAddressField_of_module_django__db__models__fields );
        }

        frame_class_20_GenericIPAddressField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_8ed1b20f6516e1fdf581c098b86b45f7, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_20_GenericIPAddressField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_20_GenericIPAddressField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1098 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_75ba8d70e3692ba200f0e0df37b4d2ae ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_get_db_prep_value.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_20_GenericIPAddressField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_20_GenericIPAddressField_of_module_django__db__models__fields );
           frame_class_20_GenericIPAddressField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var_default_error_messages.assign1( PyDict_New() );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  ) );
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_2_get_internal_type_of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  ) );
    _python_var_get_db_prep_value.assign1( MAKE_FUNCTION_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  ) );
    _python_var_get_prep_value.assign1( MAKE_FUNCTION_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_get_db_prep_value.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_verbose_name, PyObject *_python_par_name, PyObject *_python_par_protocol, PyObject *_python_par_unpack_ipv4, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_verbose_name( _python_str_plain_verbose_name, _python_par_verbose_name );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_protocol( _python_str_plain_protocol, _python_par_protocol );
    PyObjectLocalParameterVariableNoDel _python_var_unpack_ipv4( _python_str_plain_unpack_ipv4, _python_par_unpack_ipv4 );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_invalid_error_message( _python_str_plain_invalid_error_message );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields );
        }

        frame_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_18cece774e2f239b44d588e191bbd8c3, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1103 );
        {
                PyObject *tmp_identifier = _python_var_unpack_ipv4.asObject();
                SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_unpack_ipv4 );
        }
        {
            frame_guard.setLineNumber( 1104 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper1 call1;
                PyObjectTempKeeper0 call2;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_validators.asObject0(), _python_str_plain_ip_address_validators ) ), call2.assign( _python_var_protocol.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), _python_var_unpack_ipv4.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_default_validators );
            }
            _python_var_invalid_error_message.assign0( _python_tmp_element_2.asObject() );
        }
        frame_guard.setLineNumber( 1106 );
        {
                PyObject *tmp_identifier = _python_var_invalid_error_message.asObject();
                SET_SUBSCRIPT( tmp_identifier, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_default_error_messages ) ).asObject(), _python_unicode_plain_invalid );
        }
        frame_guard.setLineNumber( 1107 );
        SET_SUBSCRIPT( _python_int_pos_39, _python_var_kwargs.asObject(), _python_unicode_plain_max_length );
        frame_guard.setLineNumber( 1108 );
        {
            PyObjectTempKeeper1 call_tmp7;
            PyObjectTempKeeper1 call_tmp8;
            PyObjectTempKeeper0 call_tmp9;
            PyObjectTempKeeper0 make_tuple4;
            PyObjectTempKeeper0 make_tuple5;
            DECREASE_REFCOUNT( ( call_tmp7.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_Field.asObject0(), _python_str_plain___init__ ) ), call_tmp8.assign( ( make_tuple4.assign( _python_var_self.asObject() ), make_tuple5.assign( _python_var_verbose_name.asObject() ), MAKE_TUPLE3( make_tuple4.asObject0(), make_tuple5.asObject0(), _python_var_name.asObject() ) ) ), call_tmp9.assign( _python_var_args.asObject() ), impl_function_8_complex_call_helper_pos_star_list_star_dict_of_module___internal__( call_tmp7.asObject(), call_tmp8.asObject(), call_tmp9.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_unpack_ipv4.updateLocalsDict( _python_var_protocol.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_verbose_name.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_invalid_error_message.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields );
           frame_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_verbose_name = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_protocol = NULL;
    PyObject *_python_par_unpack_ipv4 = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument verbose_name was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_verbose_name );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_verbose_name == NULL );

            _python_par_verbose_name = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_verbose_name );

            kw_found += 1;
        }
    }

    // Check if argument name was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_name );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_name == NULL );

            _python_par_name = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_name );

            kw_found += 1;
        }
    }

    // Check if argument protocol was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_protocol );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_protocol == NULL );

            _python_par_protocol = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_protocol );

            kw_found += 1;
        }
    }

    // Check if argument unpack_ipv4 was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_unpack_ipv4 );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_unpack_ipv4 == NULL );

            _python_par_unpack_ipv4 = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_unpack_ipv4 );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 5, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 5, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_verbose_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'verbose_name'" );
             goto error_exit;
         }

        _python_par_verbose_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_protocol != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'protocol'" );
             goto error_exit;
         }

        _python_par_protocol = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_unpack_ipv4 != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'unpack_ipv4'" );
             goto error_exit;
         }

        _python_par_unpack_ipv4 = INCREASE_REFCOUNT( args[ 4 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 5 )
    {
        _python_par_args = PyTuple_New( args_size - 5 );

        for( Py_ssize_t i = 0; i < args_size - 5; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[5+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }
    // Assign values not given to defaults
    if ( _python_par_verbose_name == NULL )
    {
        _python_par_verbose_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_verbose_name );
    }
    if ( _python_par_name == NULL )
    {
        _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_name );
    }
    if ( _python_par_protocol == NULL )
    {
        _python_par_protocol = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_protocol );
    }
    if ( _python_par_unpack_ipv4 == NULL )
    {
        _python_par_unpack_ipv4 = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_unpack_ipv4 );
    }


    return impl_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, _python_par_self, _python_par_verbose_name, _python_par_name, _python_par_protocol, _python_par_unpack_ipv4, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_verbose_name );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_protocol );
    Py_XDECREF( _python_par_unpack_ipv4 );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 7)
    {
        return impl_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), MAKE_TUPLE( &args[ 5 ], size > 5 ? size-5 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_internal_type_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_GenericIPAddressField );
}
static PyObject *fparse_function_2_get_internal_type_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_get_internal_type_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_get_internal_type_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_get_internal_type_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_internal_type_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields );
        }

        frame_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_0a5b4de1a97d7d385b43e0a8e4ca2e9b, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1114 );
        if ( ( CHECK_IF_TRUE( _python_var_value.asObject() ) && SEQUENCE_CONTAINS_BOOL( _python_unicode_chr_58, _python_var_value.asObject() ) ) )
        {
            frame_guard.setLineNumber( 1115 );
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 call2;
                PyObjectTempKeeper1 call3;
                return ( call1.assign( _mvar_django__db__models__fields_clean_ipv6_address.asObject0() ), call2.assign( _python_var_value.asObject() ), call3.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_unpack_ipv4 ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), call3.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ).asObject() ) );
            }
        }
        frame_guard.setLineNumber( 1117 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields );
           frame_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_connection, PyObject *_python_par_prepared )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );
    PyObjectLocalParameterVariableNoDel _python_var_prepared( _python_str_plain_prepared, _python_par_prepared );

    // Actual function code.
    static PyFrameObject *frame_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields );
        }

        frame_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_defb5366634028d12981a7a9ccd30d50, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1120 );
        if ( (!( CHECK_IF_TRUE( _python_var_prepared.asObject() ) )) )
        {
            frame_guard.setLineNumber( 1121 );
            {
                PyObjectTempKeeper1 call1;
                _python_var_value.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_prep_value ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 1122 );
        {
            PyObjectTempKeeper0 keeper_0;
            return INCREASE_REFCOUNT( ( CHECK_IF_TRUE( keeper_0.assign( _python_var_value.asObject() ) ) ? keeper_0.asObject0() : Py_None ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_prepared.updateLocalsDict( _python_var_connection.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields );
           frame_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_connection = NULL;
    PyObject *_python_par_prepared = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_prepared == key )
            {
                if (unlikely( _python_par_prepared ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
                    goto error_exit;
                }

                _python_par_prepared = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_prepared, key ) )
            {
                if (unlikely( _python_par_prepared ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
                    goto error_exit;
                }

                _python_par_prepared = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_db_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_prepared != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
             goto error_exit;
         }

        _python_par_prepared = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_prepared == NULL )
    {
        _python_par_prepared = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_prepared );
    }


    return impl_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value, _python_par_connection, _python_par_prepared );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_connection );
    Py_XDECREF( _python_par_prepared );

    return NULL;
}

static PyObject *dparse_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields );
        }

        frame_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_712d5fcedd36f4cc7b9eed999e9fe1a9, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1125 );
        if ( ( CHECK_IF_TRUE( _python_var_value.asObject() ) && SEQUENCE_CONTAINS_BOOL( _python_unicode_chr_58, _python_var_value.asObject() ) ) )
        {
            frame_guard.setLineNumber( 1126 );
            try
            {
                frame_guard.setLineNumber( 1127 );
                {
                    PyObjectTempKeeper0 call1;
                    PyObjectTempKeeper0 call2;
                    return ( call1.assign( _mvar_django__db__models__fields_clean_ipv6_address.asObject0() ), call2.assign( _python_var_value.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_unpack_ipv4 ) ).asObject() ) );
                }
            }
            catch ( PythonException &_exception )
            {
                if ( !_exception.hasTraceback() )
                {
                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                }
                else
                {
                    _exception.addTraceback( frame_guard.getFrame0() );
                }

                frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                _exception.toExceptionHandler();

                if ( _exception.matches( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ).asObject() ) )
                {

                }
                else
                {
                    PyTracebackObject *tb = _exception.getTraceback();
                    frame_guard.setLineNumber( tb->tb_lineno );
                    _exception.setTraceback( tb->tb_next );
                    tb->tb_next = NULL;

                    throw;
                }
            }
        }
        frame_guard.setLineNumber( 1130 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields );
           frame_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields );
        }

        frame_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_02e59b83b9fe98bd535f9e64716d486e, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1133 );
        _python_var_defaults.assign1( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_GenericIPAddressField ) ).asObject(), _python_unicode_plain_form_class ) );
        frame_guard.setLineNumber( 1134 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1135 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 super3;
            return ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields_GenericIPAddressField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp5.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields );
           frame_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_21_NullBooleanField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_empty_strings_allowed( _python_str_plain_empty_strings_allowed );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_get_prep_lookup( _python_str_plain_get_prep_lookup );
    PyObjectLocalVariable _python_var_get_prep_value( _python_str_plain_get_prep_value );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var_empty_strings_allowed.assign0( Py_False );
    static PyFrameObject *frame_class_21_NullBooleanField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_21_NullBooleanField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_21_NullBooleanField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_21_NullBooleanField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_21_NullBooleanField_of_module_django__db__models__fields );
        }

        frame_class_21_NullBooleanField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_86e94ccf2085f6b0e98c4ac0f23bd074, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_21_NullBooleanField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_21_NullBooleanField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1140 );
        _python_var_default_error_messages.assign1( MAKE_DICT1( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_4810093646716766e63168fe3c72f555 ) ).asObject(), _python_unicode_plain_invalid ) );
        frame_guard.setLineNumber( 1143 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_39d768083d18d75dc73aa87ea9b73f51 ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_get_prep_lookup.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_21_NullBooleanField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_21_NullBooleanField_of_module_django__db__models__fields );
           frame_class_21_NullBooleanField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields(  ) );
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_2_get_internal_type_of_class_21_NullBooleanField_of_module_django__db__models__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields(  ) );
    _python_var_get_prep_lookup.assign1( MAKE_FUNCTION_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields(  ) );
    _python_var_get_prep_value.assign1( MAKE_FUNCTION_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_get_prep_lookup.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields );
        }

        frame_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_7f0526517b40a080ba17f7dafdc16e35, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1146 );
        SET_SUBSCRIPT( Py_True, _python_var_kwargs.asObject(), _python_unicode_plain_null );
        frame_guard.setLineNumber( 1147 );
        SET_SUBSCRIPT( Py_True, _python_var_kwargs.asObject(), _python_unicode_plain_blank );
        frame_guard.setLineNumber( 1148 );
        {
            PyObjectTempKeeper1 call_tmp1;
            PyObjectTempKeeper1 call_tmp2;
            PyObjectTempKeeper0 call_tmp3;
            DECREASE_REFCOUNT( ( call_tmp1.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_Field.asObject0(), _python_str_plain___init__ ) ), call_tmp2.assign( MAKE_TUPLE1( _python_var_self.asObject() ) ), call_tmp3.assign( _python_var_args.asObject() ), impl_function_8_complex_call_helper_pos_star_list_star_dict_of_module___internal__( call_tmp1.asObject(), call_tmp2.asObject(), call_tmp3.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields );
           frame_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_internal_type_of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_NullBooleanField );
}
static PyObject *fparse_function_2_get_internal_type_of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_get_internal_type_of_class_21_NullBooleanField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_get_internal_type_of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_get_internal_type_of_class_21_NullBooleanField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_internal_type_of_class_21_NullBooleanField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_msg( _python_str_plain_msg );

    // Actual function code.
    static PyFrameObject *frame_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields );
        }

        frame_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_88330b321afb74de400fbae42c21755b, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1154 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 1156 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_var_value.asObject(), _python_tuple_true_false_tuple ) )
        {
            frame_guard.setLineNumber( 1157 );
            return INCREASE_REFCOUNT( TO_BOOL( _python_var_value.asObject() ) );
        }
        frame_guard.setLineNumber( 1158 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_var_value.asObject(), _python_tuple_unicode_plain_None_tuple ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 1160 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_var_value.asObject(), _python_tuple_unicode_plain_t_unicode_plain_True_unicode_plain_1_tuple ) )
        {
            return INCREASE_REFCOUNT( Py_True );
        }
        frame_guard.setLineNumber( 1162 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_var_value.asObject(), _python_tuple_unicode_plain_f_unicode_plain_False_unicode_plain_0_tuple ) )
        {
            return INCREASE_REFCOUNT( Py_False );
        }
        frame_guard.setLineNumber( 1164 );
        {
            PyObjectTempKeeper1 op1;
            _python_var_msg.assign1( ( op1.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1165 );
        {
            PyObjectTempKeeper1 call3;
            {
                PyObjectTemporary tmp_exception_type( ( call3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_msg.asObject() ) ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_msg.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields );
           frame_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_lookup_type, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_lookup_type( _python_str_plain_lookup_type, _python_par_lookup_type );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields );
        }

        frame_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_9911675801bd8353e63ad4b420346ff5, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1172 );
        if ( SEQUENCE_CONTAINS_BOOL( _python_var_value.asObject(), _python_tuple_unicode_plain_1_unicode_plain_0_tuple ) )
        {
            frame_guard.setLineNumber( 1173 );
            _python_var_value.assign0( TO_BOOL( PyObjectTemporary( TO_INT( _python_var_value.asObject() ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 1174 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 super1;
            return ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields_NullBooleanField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_get_prep_lookup ) ), call4.assign( _python_var_lookup_type.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_lookup_type.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields );
           frame_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_lookup_type = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_lookup_type == key )
            {
                if (unlikely( _python_par_lookup_type ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
                    goto error_exit;
                }

                _python_par_lookup_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_lookup_type, key ) )
            {
                if (unlikely( _python_par_lookup_type ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
                    goto error_exit;
                }

                _python_par_lookup_type = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_lookup() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_lookup() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_lookup_type != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'lookup_type'" );
             goto error_exit;
         }

        _python_par_lookup_type = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_lookup() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields( self, _python_par_self, _python_par_lookup_type, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_lookup_type );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields );
        }

        frame_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_fa308797c005fd5dd2e6c771b121ae0e, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1178 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 1180 );
        return INCREASE_REFCOUNT( TO_BOOL( _python_var_value.asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields );
           frame_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields );
        }

        frame_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_f921c74c01c845a7a1203a09acfc3212, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1183 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 make_dict3;
            PyObjectTempKeeper0 make_dict5;
            PyObjectTempKeeper1 make_dict7;
            _python_var_defaults.assign1( ( make_dict3.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_NullBooleanField ) ), make_dict5.assign( UNARY_OPERATION( UNARY_NOT, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_blank ) ).asObject() ) ), make_dict7.assign( ( call1.assign( _mvar_django__db__models__fields_capfirst.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_verbose_name ) ).asObject() ) ) ), MAKE_DICT4( make_dict3.asObject0(), _python_unicode_plain_form_class, make_dict5.asObject0(), _python_unicode_plain_required, make_dict7.asObject0(), _python_unicode_plain_label, PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_help_text ) ).asObject(), _python_unicode_plain_help_text ) ) );
        }
        frame_guard.setLineNumber( 1188 );
        {
            PyObjectTempKeeper1 call11;
            DECREASE_REFCOUNT( ( call11.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call11.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1189 );
        {
            PyObjectTempKeeper1 call_tmp15;
            PyObjectTempKeeper0 super13;
            return ( call_tmp15.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super13.assign( _mvar_django__db__models__fields_NullBooleanField.asObject0() ), BUILTIN_SUPER( super13.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp15.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields );
           frame_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_22_PositiveIntegerField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_22_PositiveIntegerField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_22_PositiveIntegerField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_22_PositiveIntegerField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_22_PositiveIntegerField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_22_PositiveIntegerField_of_module_django__db__models__fields );
        }

        frame_class_22_PositiveIntegerField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_6545414217b68fe86153806adbdd9466, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_22_PositiveIntegerField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_22_PositiveIntegerField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1192 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_4c17f7fb6613b8de755387e71c774444 ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_22_PositiveIntegerField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_22_PositiveIntegerField_of_module_django__db__models__fields );
           frame_class_22_PositiveIntegerField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_1_get_internal_type_of_class_22_PositiveIntegerField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1_get_internal_type_of_class_22_PositiveIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_PositiveIntegerField );
}
static PyObject *fparse_function_1_get_internal_type_of_class_22_PositiveIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_get_internal_type_of_class_22_PositiveIntegerField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_1_get_internal_type_of_class_22_PositiveIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_get_internal_type_of_class_22_PositiveIntegerField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_get_internal_type_of_class_22_PositiveIntegerField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    _python_var_defaults.assign1( PyDict_Copy( _python_dict_2ddd9328b8c3ced4d432b476007a2e1f ) );
    static PyFrameObject *frame_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields );
        }

        frame_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_b10e1406a8fce6d7b2847ecf547f32b7, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1199 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1200 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 super3;
            return ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields_PositiveIntegerField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp5.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields );
           frame_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_23_PositiveSmallIntegerField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields );
        }

        frame_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_b825655ed5cb68bc7ccf1463f0c0d56a, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1203 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_3f2ad6c0fbbdf0ce725d0d13b3d12732 ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields );
           frame_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_1_get_internal_type_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1_get_internal_type_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_PositiveSmallIntegerField );
}
static PyObject *fparse_function_1_get_internal_type_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_get_internal_type_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_1_get_internal_type_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_get_internal_type_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_get_internal_type_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    _python_var_defaults.assign1( PyDict_Copy( _python_dict_2ddd9328b8c3ced4d432b476007a2e1f ) );
    static PyFrameObject *frame_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields );
        }

        frame_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_2f35fa2ca3a20b69e9380c8d8a93af3a, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1210 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1211 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 super3;
            return ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields_PositiveSmallIntegerField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp5.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields );
           frame_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_24_SlugField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_24_SlugField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_24_SlugField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_24_SlugField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_24_SlugField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_24_SlugField_of_module_django__db__models__fields );
        }

        frame_class_24_SlugField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_b1633ce52e943228019a8bb6c2439824, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_24_SlugField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_24_SlugField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1214 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_559cd6bc07f9a9497a471f984c0464ce ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_24_SlugField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_24_SlugField_of_module_django__db__models__fields );
           frame_class_24_SlugField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields(  ) );
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_2_get_internal_type_of_class_24_SlugField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_24_SlugField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields );
        }

        frame_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_98d819358ab10e4e0193314a5616d058, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1217 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_get ) ).asObject(), _python_unicode_plain_max_length, _python_int_pos_50 ) );
                SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_kwargs.asObject(), _python_unicode_plain_max_length );
        }
        frame_guard.setLineNumber( 1219 );
        if ( SEQUENCE_CONTAINS_NOT_BOOL( _python_unicode_plain_db_index, _python_var_kwargs.asObject() ) )
        {
            frame_guard.setLineNumber( 1220 );
            SET_SUBSCRIPT( Py_True, _python_var_kwargs.asObject(), _python_unicode_plain_db_index );
        }
        frame_guard.setLineNumber( 1221 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields_SlugField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp4.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields );
           frame_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_internal_type_of_class_24_SlugField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_SlugField );
}
static PyObject *fparse_function_2_get_internal_type_of_class_24_SlugField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_get_internal_type_of_class_24_SlugField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_get_internal_type_of_class_24_SlugField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_get_internal_type_of_class_24_SlugField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_internal_type_of_class_24_SlugField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields );
        }

        frame_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_816a3a61a233856c6f55ccf29fa1ea4b, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1227 );
        _python_var_defaults.assign1( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_SlugField ) ).asObject(), _python_unicode_plain_form_class ) );
        frame_guard.setLineNumber( 1228 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1229 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 super3;
            return ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields_SlugField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp5.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields );
           frame_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_25_SmallIntegerField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_25_SmallIntegerField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_25_SmallIntegerField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_25_SmallIntegerField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_25_SmallIntegerField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_25_SmallIntegerField_of_module_django__db__models__fields );
        }

        frame_class_25_SmallIntegerField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_dfea379dbaa075981b0272465f8d62ca, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_25_SmallIntegerField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_25_SmallIntegerField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1232 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_8978ecd1852147668b3422e81ff56027 ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_get_internal_type.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_class_25_SmallIntegerField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_25_SmallIntegerField_of_module_django__db__models__fields );
           frame_class_25_SmallIntegerField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_1_get_internal_type_of_class_25_SmallIntegerField_of_module_django__db__models__fields(  ) );
    return _python_var_get_internal_type.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) );
}


static PyObject *impl_function_1_get_internal_type_of_class_25_SmallIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_SmallIntegerField );
}
static PyObject *fparse_function_1_get_internal_type_of_class_25_SmallIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_get_internal_type_of_class_25_SmallIntegerField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_1_get_internal_type_of_class_25_SmallIntegerField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_get_internal_type_of_class_25_SmallIntegerField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_get_internal_type_of_class_25_SmallIntegerField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_26_TextField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_get_prep_value( _python_str_plain_get_prep_value );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_26_TextField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_26_TextField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_26_TextField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_26_TextField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_26_TextField_of_module_django__db__models__fields );
        }

        frame_class_26_TextField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_cc14bb7ed87d08233b8ab2ab0f9d208d, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_26_TextField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_26_TextField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1238 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_plain_Text ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_26_TextField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_26_TextField_of_module_django__db__models__fields );
           frame_class_26_TextField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_1_get_internal_type_of_class_26_TextField_of_module_django__db__models__fields(  ) );
    _python_var_get_prep_value.assign1( MAKE_FUNCTION_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) );
}


static PyObject *impl_function_1_get_internal_type_of_class_26_TextField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_TextField );
}
static PyObject *fparse_function_1_get_internal_type_of_class_26_TextField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_1_get_internal_type_of_class_26_TextField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_1_get_internal_type_of_class_26_TextField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_1_get_internal_type_of_class_26_TextField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_get_internal_type_of_class_26_TextField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields );
        }

        frame_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_4b8c84b04c0bdfabcd84f01c213b3c27, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1244 );
        {
            PyObjectTempKeeper0 isinstance1;
            if ( ( ( isinstance1.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_six.asObject0(), _python_str_plain_string_types ) ).asObject() ) ) || ( _python_var_value.asObject() == Py_None ) ) )
        {
            frame_guard.setLineNumber( 1245 );
            return _python_var_value.asObject1();
        }
        }
        frame_guard.setLineNumber( 1246 );
        {
            PyObjectTempKeeper0 call3;
            return ( call3.assign( _mvar_django__db__models__fields_smart_text.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields );
           frame_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields );
        }

        frame_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_ea659c0e8392fb31f0eb4ecca92a44d6, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1249 );
        _python_var_defaults.assign1( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_Textarea ) ).asObject(), _python_unicode_plain_widget ) );
        frame_guard.setLineNumber( 1250 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1251 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 super3;
            return ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields_TextField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp5.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields );
           frame_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_27_TimeField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_empty_strings_allowed( _python_str_plain_empty_strings_allowed );
    PyObjectLocalVariable _python_var_default_error_messages( _python_str_plain_default_error_messages );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );
    PyObjectLocalVariable _python_var_pre_save( _python_str_plain_pre_save );
    PyObjectLocalVariable _python_var_get_prep_value( _python_str_plain_get_prep_value );
    PyObjectLocalVariable _python_var_get_db_prep_value( _python_str_plain_get_db_prep_value );
    PyObjectLocalVariable _python_var_value_to_string( _python_str_plain_value_to_string );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    _python_var_empty_strings_allowed.assign0( Py_False );
    static PyFrameObject *frame_class_27_TimeField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_27_TimeField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_27_TimeField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_27_TimeField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_27_TimeField_of_module_django__db__models__fields );
        }

        frame_class_27_TimeField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_587e0ab85b919122d679d1d1aa9aa14b, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_27_TimeField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_27_TimeField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1255 );
        {
            PyObjectTempKeeper1 make_dict1;
            _python_var_default_error_messages.assign1( ( make_dict1.assign( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_1d28ce290f3e932fbc22abb52ff4b301 ) ), MAKE_DICT2( make_dict1.asObject0(), _python_unicode_plain_invalid, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_ebe0f0129b3b11e5ea8ad7b511d49b10 ) ).asObject(), _python_unicode_plain_invalid_time ) ) );
        }
        frame_guard.setLineNumber( 1261 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_plain_Time ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var_value_to_string.updateLocalsDict( _python_var_get_db_prep_value.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_pre_save.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_27_TimeField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_27_TimeField_of_module_django__db__models__fields );
           frame_class_27_TimeField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields(  ) );
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_2_get_internal_type_of_class_27_TimeField_of_module_django__db__models__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields(  ) );
    _python_var_pre_save.assign1( MAKE_FUNCTION_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields(  ) );
    _python_var_get_prep_value.assign1( MAKE_FUNCTION_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields(  ) );
    _python_var_get_db_prep_value.assign1( MAKE_FUNCTION_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields(  ) );
    _python_var_value_to_string.assign1( MAKE_FUNCTION_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var_value_to_string.updateLocalsDict( _python_var_get_db_prep_value.updateLocalsDict( _python_var_get_prep_value.updateLocalsDict( _python_var_pre_save.updateLocalsDict( _python_var_to_python.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var_default_error_messages.updateLocalsDict( _python_var_empty_strings_allowed.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_verbose_name, PyObject *_python_par_name, PyObject *_python_par_auto_now, PyObject *_python_par_auto_now_add, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_verbose_name( _python_str_plain_verbose_name, _python_par_verbose_name );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_auto_now( _python_str_plain_auto_now, _python_par_auto_now );
    PyObjectLocalParameterVariableNoDel _python_var_auto_now_add( _python_str_plain_auto_now_add, _python_par_auto_now_add );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_27_TimeField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields );
        }

        frame_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_940d1a96e348b2c80bea60c2cadd0138, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        {
            frame_guard.setLineNumber( 1265 );
            PyObject *_tmp_python_tmp_source_iter;
            {
                PyObjectTempKeeper0 make_tuple1;
                _tmp_python_tmp_source_iter = MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( _python_var_auto_now.asObject() ), MAKE_TUPLE2( make_tuple1.asObject0(), _python_var_auto_now_add.asObject() ) ) ).asObject() );
            }
            PyObjectTemporary _python_tmp_source_iter( _tmp_python_tmp_source_iter );
            PyObjectTemporary _python_tmp_element_1( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 0 ) );
            PyObjectTemporary _python_tmp_element_2( UNPACK_NEXT( _python_tmp_source_iter.asObject(), 1 ) );
            UNPACK_ITERATOR_CHECK( _python_tmp_source_iter.asObject(), 2 );
            {
                    PyObject *tmp_identifier = _python_tmp_element_1.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_auto_now );
            }
            {
                    PyObject *tmp_identifier = _python_tmp_element_2.asObject();
                    SET_ATTRIBUTE( tmp_identifier, _python_var_self.asObject(), _python_str_plain_auto_now_add );
            }
        }
        frame_guard.setLineNumber( 1266 );
        if ( ( CHECK_IF_TRUE( _python_var_auto_now.asObject() ) || CHECK_IF_TRUE( _python_var_auto_now_add.asObject() ) ) )
        {
            frame_guard.setLineNumber( 1267 );
            SET_SUBSCRIPT( Py_False, _python_var_kwargs.asObject(), _python_unicode_plain_editable );
            frame_guard.setLineNumber( 1268 );
            SET_SUBSCRIPT( Py_True, _python_var_kwargs.asObject(), _python_unicode_plain_blank );
        }
        frame_guard.setLineNumber( 1269 );
        {
            PyObjectTempKeeper1 call_tmp6;
            PyObjectTempKeeper1 call_tmp7;
            PyObjectTempKeeper0 make_tuple3;
            PyObjectTempKeeper0 make_tuple4;
            DECREASE_REFCOUNT( ( call_tmp6.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_Field.asObject0(), _python_str_plain___init__ ) ), call_tmp7.assign( ( make_tuple3.assign( _python_var_self.asObject() ), make_tuple4.assign( _python_var_verbose_name.asObject() ), MAKE_TUPLE3( make_tuple3.asObject0(), make_tuple4.asObject0(), _python_var_name.asObject() ) ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp6.asObject(), call_tmp7.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_auto_now_add.updateLocalsDict( _python_var_auto_now.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_verbose_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields );
           frame_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_verbose_name = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_auto_now = NULL;
    PyObject *_python_par_auto_now_add = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument verbose_name was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_verbose_name );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_verbose_name == NULL );

            _python_par_verbose_name = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_verbose_name );

            kw_found += 1;
        }
    }

    // Check if argument name was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_name );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_name == NULL );

            _python_par_name = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_name );

            kw_found += 1;
        }
    }

    // Check if argument auto_now was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_auto_now );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_auto_now == NULL );

            _python_par_auto_now = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_auto_now );

            kw_found += 1;
        }
    }

    // Check if argument auto_now_add was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_auto_now_add );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_auto_now_add == NULL );

            _python_par_auto_now_add = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_auto_now_add );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 5 ))
    {
        if ( 5 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 5, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 5 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#else
            if ( 5 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 5, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 5, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 5 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 5, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 5 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 5 ? args_given : 5;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_verbose_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'verbose_name'" );
             goto error_exit;
         }

        _python_par_verbose_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_auto_now != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'auto_now'" );
             goto error_exit;
         }

        _python_par_auto_now = INCREASE_REFCOUNT( args[ 3 ] );
    }
    if (likely( 4 < args_usable_count ))
    {
         if (unlikely( _python_par_auto_now_add != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'auto_now_add'" );
             goto error_exit;
         }

        _python_par_auto_now_add = INCREASE_REFCOUNT( args[ 4 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_verbose_name == NULL )
    {
        _python_par_verbose_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_verbose_name );
    }
    if ( _python_par_name == NULL )
    {
        _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_name );
    }
    if ( _python_par_auto_now == NULL )
    {
        _python_par_auto_now = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 2 ) );
        assertObject( _python_par_auto_now );
    }
    if ( _python_par_auto_now_add == NULL )
    {
        _python_par_auto_now_add = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 3 ) );
        assertObject( _python_par_auto_now_add );
    }


    return impl_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields( self, _python_par_self, _python_par_verbose_name, _python_par_name, _python_par_auto_now, _python_par_auto_now_add, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_verbose_name );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_auto_now );
    Py_XDECREF( _python_par_auto_now_add );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6)
    {
        return impl_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_internal_type_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_TimeField );
}
static PyObject *fparse_function_2_get_internal_type_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_get_internal_type_of_class_27_TimeField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_get_internal_type_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_get_internal_type_of_class_27_TimeField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_internal_type_of_class_27_TimeField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalVariable _python_var_parsed( _python_str_plain_parsed );
    PyObjectLocalVariable _python_var_msg( _python_str_plain_msg );

    // Actual function code.
    static PyFrameObject *frame_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields );
        }

        frame_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_1cb4e26e09ee2197cc9f27d9229afdec, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1275 );
        if ( ( _python_var_value.asObject() == Py_None ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 1277 );
        {
            PyObjectTempKeeper0 isinstance1;
            if ( ( isinstance1.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_datetime.asObject0(), _python_str_plain_time ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 1278 );
            return _python_var_value.asObject1();
        }
        }
        frame_guard.setLineNumber( 1279 );
        {
            PyObjectTempKeeper0 isinstance3;
            if ( ( isinstance3.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance3.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_datetime.asObject0(), _python_str_plain_datetime ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 1283 );
            return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_value.asObject(), _python_str_plain_time ) ).asObject() );
        }
        }
        frame_guard.setLineNumber( 1285 );
        try
        {
            frame_guard.setLineNumber( 1286 );
            {
                PyObjectTempKeeper0 call9;
                _python_var_parsed.assign1( ( call9.assign( _mvar_django__db__models__fields_parse_time.asObject0() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_var_value.asObject() ) ) );
            }
            frame_guard.setLineNumber( 1287 );
            if ( ( _python_var_parsed.asObject() != Py_None ) )
            {
                frame_guard.setLineNumber( 1288 );
                return _python_var_parsed.asObject1();
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if ( _exception.matches( PyExc_ValueError ) )
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 1290 );
                {
                    PyObjectTempKeeper1 op5;
                    _python_var_msg.assign1( ( op5.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid_time ) ), BINARY_OPERATION_REMAINDER( op5.asObject0(), _python_var_value.asObject() ) ) );
                }
                frame_guard.setLineNumber( 1291 );
                {
                    PyObjectTempKeeper1 call7;
                    {
                        PyObjectTemporary tmp_exception_type( ( call7.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_msg.asObject() ) ) );
                        RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
                }
                }
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 1293 );
        {
            PyObjectTempKeeper1 op11;
            _python_var_msg.assign1( ( op11.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_error_messages ) ).asObject(), _python_unicode_plain_invalid ) ), BINARY_OPERATION_REMAINDER( op11.asObject0(), _python_var_value.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1294 );
        {
            PyObjectTempKeeper1 call13;
            {
                PyObjectTemporary tmp_exception_type( ( call13.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_exceptions.asObject0(), _python_str_plain_ValidationError ) ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), _python_var_msg.asObject() ) ) );
                RAISE_EXCEPTION_WITH_TYPE( tmp_exception_type.asObject(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject() );
        }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_msg.updateLocalsDict( _python_var_parsed.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields );
           frame_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_model_instance, PyObject *_python_par_add )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_model_instance( _python_str_plain_model_instance, _python_par_model_instance );
    PyObjectLocalParameterVariableNoDel _python_var_add( _python_str_plain_add, _python_par_add );
    PyObjectLocalVariable _python_var_value( _python_str_plain_value );

    // Actual function code.
    static PyFrameObject *frame_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields );
        }

        frame_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_a35ed4cef516dbd8e59bc0e083bc922c, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1297 );
        if ( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_auto_now ) ).asObject() ) || ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_auto_now_add ) ).asObject() ) && CHECK_IF_TRUE( _python_var_add.asObject() ) ) ) )
        {
            frame_guard.setLineNumber( 1298 );
            _python_var_value.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_datetime.asObject0(), _python_str_plain_datetime ) ).asObject(), _python_str_plain_now ) ).asObject() ) ).asObject(), _python_str_plain_time ) ).asObject() ) );
            frame_guard.setLineNumber( 1299 );
            {
                PyObjectTempKeeper0 setattr1;
                PyObjectTempKeeper1 setattr2;
                ( ( setattr1.assign( _python_var_model_instance.asObject() ), setattr2.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_attname ) ), BUILTIN_SETATTR( setattr1.asObject0(), setattr2.asObject0(), _python_var_value.asObject() ) ), Py_None );
            }
            frame_guard.setLineNumber( 1300 );
            return _python_var_value.asObject1();
        }
        else
        {
            frame_guard.setLineNumber( 1302 );
            {
                PyObjectTempKeeper1 call6;
                PyObjectTempKeeper0 call7;
                PyObjectTempKeeper0 super4;
                return ( call6.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super4.assign( _mvar_django__db__models__fields_TimeField.asObject0() ), BUILTIN_SUPER( super4.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_pre_save ) ), call7.assign( _python_var_model_instance.asObject() ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), call7.asObject0(), _python_var_add.asObject() ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_add.updateLocalsDict( _python_var_model_instance.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_value.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields );
           frame_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_model_instance = NULL;
    PyObject *_python_par_add = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "pre_save() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_model_instance == key )
            {
                if (unlikely( _python_par_model_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'model_instance'" );
                    goto error_exit;
                }

                _python_par_model_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_add == key )
            {
                if (unlikely( _python_par_add ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'add'" );
                    goto error_exit;
                }

                _python_par_add = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_model_instance, key ) )
            {
                if (unlikely( _python_par_model_instance ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'model_instance'" );
                    goto error_exit;
                }

                _python_par_model_instance = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_add, key ) )
            {
                if (unlikely( _python_par_add ))
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'add'" );
                    goto error_exit;
                }

                _python_par_add = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "pre_save() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "pre_save() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "pre_save() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "pre_save() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "pre_save() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "pre_save() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "pre_save() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "pre_save() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_model_instance != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'model_instance'" );
             goto error_exit;
         }

        _python_par_model_instance = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_add != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "pre_save() got multiple values for keyword argument 'add'" );
             goto error_exit;
         }

        _python_par_add = INCREASE_REFCOUNT( args[ 2 ] );
    }


    return impl_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields( self, _python_par_self, _python_par_model_instance, _python_par_add );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_model_instance );
    Py_XDECREF( _python_par_add );

    return NULL;
}

static PyObject *dparse_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields );
        }

        frame_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_1729637833f2462b26ee52952950914f, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1305 );
        {
            PyObjectTempKeeper1 call1;
            return ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_to_python ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields );
           frame_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_prep_value() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_connection, PyObject *_python_par_prepared )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );
    PyObjectLocalParameterVariableNoDel _python_var_prepared( _python_str_plain_prepared, _python_par_prepared );

    // Actual function code.
    static PyFrameObject *frame_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields );
        }

        frame_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_e439f58810bced36e70b464bd2a73f82, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1309 );
        if ( (!( CHECK_IF_TRUE( _python_var_prepared.asObject() ) )) )
        {
            frame_guard.setLineNumber( 1310 );
            {
                PyObjectTempKeeper1 call1;
                _python_var_value.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_get_prep_value ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) );
            }
        }
        frame_guard.setLineNumber( 1311 );
        {
            PyObjectTempKeeper1 call3;
            return ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_ops ) ).asObject(), _python_str_plain_value_to_db_time ) ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), _python_var_value.asObject() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_prepared.updateLocalsDict( _python_var_connection.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields );
           frame_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_connection = NULL;
    PyObject *_python_par_prepared = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_prepared == key )
            {
                if (unlikely( _python_par_prepared ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
                    goto error_exit;
                }

                _python_par_prepared = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_prepared, key ) )
            {
                if (unlikely( _python_par_prepared ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
                    goto error_exit;
                }

                _python_par_prepared = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_db_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_prepared != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
             goto error_exit;
         }

        _python_par_prepared = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_prepared == NULL )
    {
        _python_par_prepared = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_prepared );
    }


    return impl_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value, _python_par_connection, _python_par_prepared );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_connection );
    Py_XDECREF( _python_par_prepared );

    return NULL;
}

static PyObject *dparse_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_obj( _python_str_plain_obj, _python_par_obj );
    PyObjectLocalVariable _python_var_val( _python_str_plain_val );

    // Actual function code.
    static PyFrameObject *frame_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields );
        }

        frame_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_4079460cc504446fa278c8c2c9e29f4e, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1314 );
        {
            PyObjectTempKeeper1 call1;
            _python_var_val.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_val_from_obj ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_obj.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1315 );
        return ( ( _python_var_val.asObject() == Py_None ) ? INCREASE_REFCOUNT( _python_unicode_empty ) : CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_val.asObject(), _python_str_plain_isoformat ) ).asObject() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_obj.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_val.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields );
           frame_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_obj = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_obj == key )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_obj, key ) )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_to_string() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_to_string() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields( self, _python_par_self, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields );
        }

        frame_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_fecb79b667c5bc122836047ba0c902a6, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1318 );
        _python_var_defaults.assign1( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_TimeField ) ).asObject(), _python_unicode_plain_form_class ) );
        frame_guard.setLineNumber( 1319 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1320 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 super3;
            return ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields_TimeField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp5.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields );
           frame_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_28_URLField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_formfield( _python_str_plain_formfield );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_28_URLField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_28_URLField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_28_URLField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_28_URLField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_28_URLField_of_module_django__db__models__fields );
        }

        frame_class_28_URLField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_8826b30909de0dbf75d4ea697406ba1b, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_28_URLField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_28_URLField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1323 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_plain_URL ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_formfield.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_28_URLField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_28_URLField_of_module_django__db__models__fields );
           frame_class_28_URLField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_28_URLField_of_module_django__db__models__fields(  ) );
    _python_var_formfield.assign1( MAKE_FUNCTION_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields(  ) );
    return _python_var_formfield.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) );
}


static PyObject *impl_function_1___init___of_class_28_URLField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_verbose_name, PyObject *_python_par_name, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_verbose_name( _python_str_plain_verbose_name, _python_par_verbose_name );
    PyObjectLocalParameterVariableNoDel _python_var_name( _python_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_28_URLField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_28_URLField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1___init___of_class_28_URLField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_28_URLField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_28_URLField_of_module_django__db__models__fields );
        }

        frame_function_1___init___of_class_28_URLField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_376f5dbe1c31fa7f5d9786857cab6f22, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_28_URLField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_28_URLField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1326 );
        {
                PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_kwargs.asObject(), _python_str_plain_get ) ).asObject(), _python_unicode_plain_max_length, _python_int_pos_200 ) );
                SET_SUBSCRIPT( tmp_identifier.asObject(), _python_var_kwargs.asObject(), _python_unicode_plain_max_length );
        }
        frame_guard.setLineNumber( 1327 );
        {
            PyObjectTempKeeper1 call_tmp4;
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 make_tuple1;
            PyObjectTempKeeper0 make_tuple2;
            DECREASE_REFCOUNT( ( call_tmp4.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_CharField.asObject0(), _python_str_plain___init__ ) ), call_tmp5.assign( ( make_tuple1.assign( _python_var_self.asObject() ), make_tuple2.assign( _python_var_verbose_name.asObject() ), MAKE_TUPLE3( make_tuple1.asObject0(), make_tuple2.asObject0(), _python_var_name.asObject() ) ) ), impl_function_3_complex_call_helper_pos_star_dict_of_module___internal__( call_tmp4.asObject(), call_tmp5.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 1328 );
        {
            PyObjectTempKeeper1 call7;
            DECREASE_REFCOUNT( ( call7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validators ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_validators.asObject0(), _python_str_plain_URLValidator ) ).asObject() ) ).asObject() ) ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_name.updateLocalsDict( _python_var_verbose_name.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_28_URLField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_28_URLField_of_module_django__db__models__fields );
           frame_function_1___init___of_class_28_URLField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_28_URLField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_verbose_name = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if argument verbose_name was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_verbose_name );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_verbose_name == NULL );

            _python_par_verbose_name = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_verbose_name );

            kw_found += 1;
        }
    }

    // Check if argument name was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_name );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_name == NULL );

            _python_par_name = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_name );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
        if ( 3 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "__init__() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 3, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#else
            if ( 3 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes %d positional arguments but %zd were given", 3, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at most %d positional arguments (%zd given)", 3, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 3 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d non-keyword arguments (%zd given)", 3, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 3 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 3 ? args_given : 3;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_verbose_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'verbose_name'" );
             goto error_exit;
         }

        _python_par_verbose_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'name'" );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 2 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_verbose_name == NULL )
    {
        _python_par_verbose_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_verbose_name );
    }
    if ( _python_par_name == NULL )
    {
        _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 1 ) );
        assertObject( _python_par_name );
    }


    return impl_function_1___init___of_class_28_URLField_of_module_django__db__models__fields( self, _python_par_self, _python_par_verbose_name, _python_par_name, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_verbose_name );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_28_URLField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_1___init___of_class_28_URLField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_28_URLField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );
    PyObjectLocalVariable _python_var_defaults( _python_str_plain_defaults );

    // Actual function code.
    static PyFrameObject *frame_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields );
        }

        frame_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_ba1c9b7191afad3e8620f834bee93a7e, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1333 );
        _python_var_defaults.assign1( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_forms.asObject0(), _python_str_plain_URLField ) ).asObject(), _python_unicode_plain_form_class ) );
        frame_guard.setLineNumber( 1336 );
        {
            PyObjectTempKeeper1 call1;
            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_defaults.asObject(), _python_str_plain_update ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_kwargs.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1337 );
        {
            PyObjectTempKeeper1 call_tmp5;
            PyObjectTempKeeper0 super3;
            return ( call_tmp5.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super3.assign( _mvar_django__db__models__fields_URLField.asObject0() ), BUILTIN_SUPER( super3.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_formfield ) ), impl_function_4_complex_call_helper_star_dict_of_module___internal__( call_tmp5.asObject(), _python_var_defaults.asObject1() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_self.updateLocalsDict( _python_var_defaults.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields );
           frame_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "formfield() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "formfield() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "formfield() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "formfield() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "formfield() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields( self, _python_par_self, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_29_BinaryField_of_module_django__db__models__fields(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable _python_var___module__( _python_str_plain___module__ );
    PyObjectLocalVariable _python_var_description( _python_str_plain_description );
    PyObjectLocalVariable _python_var_empty_values( _python_str_plain_empty_values );
    PyObjectLocalVariable _python_var___init__( _python_str_plain___init__ );
    PyObjectLocalVariable _python_var_get_internal_type( _python_str_plain_get_internal_type );
    PyObjectLocalVariable _python_var_get_default( _python_str_plain_get_default );
    PyObjectLocalVariable _python_var_get_db_prep_value( _python_str_plain_get_db_prep_value );
    PyObjectLocalVariable _python_var_value_to_string( _python_str_plain_value_to_string );
    PyObjectLocalVariable _python_var_to_python( _python_str_plain_to_python );

    // Actual function code.
    _python_var___module__.assign0( _python_str_plain_fields );
    static PyFrameObject *frame_class_29_BinaryField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_class_29_BinaryField_of_module_django__db__models__fields ) )
    {
        if ( frame_class_29_BinaryField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_29_BinaryField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_class_29_BinaryField_of_module_django__db__models__fields );
        }

        frame_class_29_BinaryField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_d91fc95e810f1afda2c1ab6d34ff2318, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_class_29_BinaryField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_class_29_BinaryField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1340 );
        _python_var_description.assign1( CALL_FUNCTION_WITH_ARGS( _mvar_django__db__models__fields__.asObject0(), _python_unicode_digest_84e86c3551a4dea85141cc77ae5eac63 ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_to_python.updateLocalsDict( _python_var_value_to_string.updateLocalsDict( _python_var_get_db_prep_value.updateLocalsDict( _python_var_get_default.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_empty_values.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_29_BinaryField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_class_29_BinaryField_of_module_django__db__models__fields );
           frame_class_29_BinaryField_of_module_django__db__models__fields = NULL;
        }

        throw;
    }
    _python_var_empty_values.assign1( LIST_COPY( _python_list_none_str_empty_list ) );
    _python_var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields(  ) );
    _python_var_get_internal_type.assign1( MAKE_FUNCTION_function_2_get_internal_type_of_class_29_BinaryField_of_module_django__db__models__fields(  ) );
    _python_var_get_default.assign1( MAKE_FUNCTION_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields(  ) );
    _python_var_get_db_prep_value.assign1( MAKE_FUNCTION_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields(  ) );
    _python_var_value_to_string.assign1( MAKE_FUNCTION_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields(  ) );
    _python_var_to_python.assign1( MAKE_FUNCTION_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields(  ) );
    return _python_var_to_python.updateLocalsDict( _python_var_value_to_string.updateLocalsDict( _python_var_get_db_prep_value.updateLocalsDict( _python_var_get_default.updateLocalsDict( _python_var_get_internal_type.updateLocalsDict( _python_var___init__.updateLocalsDict( _python_var_empty_values.updateLocalsDict( _python_var_description.updateLocalsDict( _python_var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_args, PyObject *_python_par_kwargs )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_args( _python_str_plain_args, _python_par_args );
    PyObjectLocalParameterVariableNoDel _python_var_kwargs( _python_str_plain_kwargs, _python_par_kwargs );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields );
        }

        frame_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_c2108a7d52513b7d66c5d94e5984b8b6, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1344 );
        SET_SUBSCRIPT( Py_False, _python_var_kwargs.asObject(), _python_unicode_plain_editable );
        frame_guard.setLineNumber( 1345 );
        {
            PyObjectTempKeeper1 call_tmp3;
            PyObjectTempKeeper0 call_tmp4;
            PyObjectTempKeeper0 super1;
            DECREASE_REFCOUNT( ( call_tmp3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields_BinaryField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain___init__ ) ), call_tmp4.assign( _python_var_args.asObject() ), impl_function_1_complex_call_helper_star_list_star_dict_of_module___internal__( call_tmp3.asObject(), call_tmp4.asObject(), _python_var_kwargs.asObject1() ) ) );
        }
        frame_guard.setLineNumber( 1346 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_length ) ).asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 1347 );
            {
                PyObjectTempKeeper1 call6;
                PyObjectTempKeeper1 call8;
                DECREASE_REFCOUNT( ( call8.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_validators ) ).asObject(), _python_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS( call8.asObject0(), PyObjectTemporary( ( call6.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_validators.asObject0(), _python_str_plain_MaxLengthValidator ) ), CALL_FUNCTION_WITH_ARGS( call6.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_max_length ) ).asObject() ) ) ).asObject() ) ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_kwargs.updateLocalsDict( _python_var_args.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields );
           frame_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_args = NULL;
    PyObject *_python_par_kwargs = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:

    if ( kw == NULL )
    {
        _python_par_kwargs = PyDict_New();
    }
    else
    {
        if ( ((PyDictObject *)kw)->ma_used > 0 )
        {
#if PYTHON_VERSION < 330
            _python_par_kwargs = _PyDict_NewPresized( ((PyDictObject *)kw)->ma_used  );

            for ( int i = 0; i <= ((PyDictObject *)kw)->ma_mask; i++ )
            {
                PyDictEntry *entry = &((PyDictObject *)kw)->ma_table[ i ];

                if ( entry->me_value != NULL )
                {

#if PYTHON_VERSION < 300
                    if (unlikely( !PyString_Check( entry->me_key ) && !PyUnicode_Check( entry->me_key ) ))
#else
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
#endif
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, entry->me_value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
#else
        if ( _PyDict_HasSplitTable( ((PyDictObject *)kw) ) )
        {
            PyDictObject *mp = (PyDictObject *)kw;

            PyObject **newvalues = PyMem_NEW( PyObject *, mp->ma_keys->dk_size );
            assert (newvalues != NULL);

            PyDictObject *split_copy = PyObject_GC_New( PyDictObject, &PyDict_Type );
            assert( split_copy != NULL );

            split_copy->ma_values = newvalues;
            split_copy->ma_keys = mp->ma_keys;
            split_copy->ma_used = mp->ma_used;

            mp->ma_keys->dk_refcnt += 1;

            Nuitka_GC_Track( split_copy );

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &split_copy->ma_keys->dk_entries[ i ];

                if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                {
                    PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                    goto error_exit;
                }

                split_copy->ma_values[ i ] = INCREASE_REFCOUNT_X( mp->ma_values[ i ] );
            }

            _python_par_kwargs = (PyObject *)split_copy;
        }
        else
        {
            _python_par_kwargs = PyDict_New();

            PyDictObject *mp = (PyDictObject *)kw;

            int size = mp->ma_keys->dk_size;
            for ( int i = 0; i < size; i++ )
            {
                PyDictKeyEntry *entry = &mp->ma_keys->dk_entries[i];

                // TODO: One of these cases has been dealt with above.
                PyObject *value;
                if ( mp->ma_values )
                {
                    value = mp->ma_values[ i ];
                }
                else
                {
                    value = entry->me_value;
                }

                if ( value != NULL )
                {
                    if (unlikely( !PyUnicode_Check( entry->me_key ) ))
                    {
                        PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                        goto error_exit;
                    }

                    int res = PyDict_SetItem( _python_par_kwargs, entry->me_key, value );

                    if (unlikely( res == -1 ))
                    {
                        goto error_exit;
                    }
                }
            }
        }
#endif
        }
        else
        {
            _python_par_kwargs = PyDict_New();
        }
    }

    // Check if argument self was given as keyword argument
    if ( kw_size > 0 )
    {
        PyObject *kw_arg_value = PyDict_GetItem( _python_par_kwargs, _python_str_plain_self );

        if ( kw_arg_value != NULL )
        {
            assert( _python_par_self == NULL );

            _python_par_self = INCREASE_REFCOUNT( kw_arg_value );
            PyDict_DelItem( _python_par_kwargs, _python_str_plain_self );

            kw_found += 1;
        }
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "__init__() takes at least 1 argument (%zd given)", args_given + kw_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d non-keyword arguments (%zd given)", 1, args_given + kw_found );
            }
            else
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() takes at least %d arguments (%zd given)", 1, args_given + kw_found );
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "__init__() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 1 )
    {
        _python_par_args = PyTuple_New( args_size - 1 );

        for( Py_ssize_t i = 0; i < args_size - 1; i++ )
        {
           PyTuple_SET_ITEM( _python_par_args, i, INCREASE_REFCOUNT( args[1+i] ) );
        }
    }
    else
    {
        _python_par_args = INCREASE_REFCOUNT( _python_tuple_empty );
    }


    return impl_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields( self, _python_par_self, _python_par_args, _python_par_kwargs );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_args );
    Py_XDECREF( _python_par_kwargs );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3)
    {
        return impl_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), MAKE_TUPLE( &args[ 1 ], size > 1 ? size-1 : 0 ), PyDict_New() );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2_get_internal_type_of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );

    // Actual function code.
    return INCREASE_REFCOUNT( _python_unicode_plain_BinaryField );
}
static PyObject *fparse_function_2_get_internal_type_of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_internal_type() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_internal_type() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_internal_type() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_2_get_internal_type_of_class_29_BinaryField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_2_get_internal_type_of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_2_get_internal_type_of_class_29_BinaryField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_get_internal_type_of_class_29_BinaryField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalVariable _python_var_default( _python_str_plain_default );

    // Actual function code.
    static PyFrameObject *frame_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields );
        }

        frame_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_279b837b1a0380649fe2757d14078393, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1353 );
        if ( ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_has_default ) ).asObject() ) ).asObject() ) && (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS( LOOKUP_BUILTIN( _python_str_plain_callable ), PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_default ) ).asObject() ) ).asObject() ) )) ) )
        {
            frame_guard.setLineNumber( 1354 );
            return LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain_default );
        }
        frame_guard.setLineNumber( 1355 );
        {
            PyObjectTempKeeper0 super1;
            _python_var_default.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields_BinaryField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_get_default ) ).asObject() ) );
        }
        frame_guard.setLineNumber( 1356 );
        if ( RICH_COMPARE_BOOL_EQ( _python_var_default.asObject(), _python_unicode_empty ) )
        {
            return INCREASE_REFCOUNT( _python_str_empty );
        }
        frame_guard.setLineNumber( 1358 );
        return _python_var_default.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_self.updateLocalsDict( _python_var_default.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields );
           frame_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_default() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_default() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_default() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_default() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
        if ( 1 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_default() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_default() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_default() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_default() takes exactly %d arguments (%zd given)", 1, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_default() takes exactly %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_default() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#else
            if ( 1 == 1 )
            {
                PyErr_Format( PyExc_TypeError, "get_default() takes %d positional arguments but %zd were given", 1, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_default() takes at most %d positional arguments (%zd given)", 1, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 1 ))
    {
        if ( 1 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_default() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_default() takes exactly %d non-keyword arguments (%zd given)", 1, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 1 == 1 )
                {
                    PyErr_Format( PyExc_TypeError, "get_default() takes exactly %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_default() takes at least %d arguments (%zd given)", 1, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 1 ? args_given : 1;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_default() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }


    return impl_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1)
    {
        return impl_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value, PyObject *_python_par_connection, PyObject *_python_par_prepared )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );
    PyObjectLocalParameterVariableNoDel _python_var_connection( _python_str_plain_connection, _python_par_connection );
    PyObjectLocalParameterVariableNoDel _python_var_prepared( _python_str_plain_prepared, _python_par_prepared );

    // Actual function code.
    static PyFrameObject *frame_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields );
        }

        frame_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_8611386a643fffd887dc5b6315d735af, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1361 );
        {
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 call5;
            PyObjectTempKeeper0 super1;
            _python_var_value.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( super1.assign( _mvar_django__db__models__fields_BinaryField.asObject0() ), BUILTIN_SUPER( super1.asObject0(), _python_var_self.asObject() ) ) ).asObject(), _python_str_plain_get_db_prep_value ) ), call4.assign( _python_var_value.asObject() ), call5.assign( _python_var_connection.asObject() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), call4.asObject0(), call5.asObject0(), _python_var_prepared.asObject() ) ) );
        }
        frame_guard.setLineNumber( 1363 );
        if ( ( _python_var_value.asObject() != Py_None ) )
        {
            frame_guard.setLineNumber( 1364 );
            {
                PyObjectTempKeeper1 call7;
                return ( call7.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( _python_var_connection.asObject(), _python_str_plain_Database ) ).asObject(), _python_str_plain_Binary ) ), CALL_FUNCTION_WITH_ARGS( call7.asObject0(), _python_var_value.asObject() ) );
            }
        }
        frame_guard.setLineNumber( 1365 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_prepared.updateLocalsDict( _python_var_connection.updateLocalsDict( _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields );
           frame_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    PyObject *_python_par_connection = NULL;
    PyObject *_python_par_prepared = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_connection == key )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_prepared == key )
            {
                if (unlikely( _python_par_prepared ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
                    goto error_exit;
                }

                _python_par_prepared = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_connection, key ) )
            {
                if (unlikely( _python_par_connection ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
                    goto error_exit;
                }

                _python_par_connection = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_prepared, key ) )
            {
                if (unlikely( _python_par_prepared ))
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
                    goto error_exit;
                }

                _python_par_prepared = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_db_prep_value() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
        if ( 4 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d arguments (%zd given)", 4, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#else
            if ( 4 == 3 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes %d positional arguments but %zd were given", 4, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at most %d positional arguments (%zd given)", 4, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 3 ))
    {
        if ( 4 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d non-keyword arguments (%zd given)", 4, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 4 == 3 )
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes exactly %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "get_db_prep_value() takes at least %d arguments (%zd given)", 3, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 4 ? args_given : 4;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }
    if (likely( 2 < args_usable_count ))
    {
         if (unlikely( _python_par_connection != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'connection'" );
             goto error_exit;
         }

        _python_par_connection = INCREASE_REFCOUNT( args[ 2 ] );
    }
    if (likely( 3 < args_usable_count ))
    {
         if (unlikely( _python_par_prepared != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "get_db_prep_value() got multiple values for keyword argument 'prepared'" );
             goto error_exit;
         }

        _python_par_prepared = INCREASE_REFCOUNT( args[ 3 ] );
    }
    // Assign values not given to defaults
    if ( _python_par_prepared == NULL )
    {
        _python_par_prepared = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, 0 ) );
        assertObject( _python_par_prepared );
    }


    return impl_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value, _python_par_connection, _python_par_prepared );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );
    Py_XDECREF( _python_par_connection );
    Py_XDECREF( _python_par_prepared );

    return NULL;
}

static PyObject *dparse_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4)
    {
        return impl_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_obj )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_obj( _python_str_plain_obj, _python_par_obj );

    // Actual function code.
    static PyFrameObject *frame_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields );
        }

        frame_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_618c4fd50d0fa89ac6344888793fc5d3, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1369 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call3;
            PyObjectTempKeeper0 call5;
            return CALL_FUNCTION_WITH_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call5.assign( _mvar_django__db__models__fields_b64encode.asObject0() ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( ( call3.assign( _mvar_django__db__models__fields_force_bytes.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_var_self.asObject(), _python_str_plain__get_val_from_obj ) ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_obj.asObject() ) ) ).asObject() ) ) ).asObject() ) ) ).asObject(), _python_str_plain_decode ) ).asObject(), _python_unicode_plain_ascii );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_obj.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields );
           frame_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_obj = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_obj == key )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_obj, key ) )
            {
                if (unlikely( _python_par_obj ))
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
                    goto error_exit;
                }

                _python_par_obj = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "value_to_string() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "value_to_string() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "value_to_string() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_obj != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "value_to_string() got multiple values for keyword argument 'obj'" );
             goto error_exit;
         }

        _python_par_obj = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields( self, _python_par_self, _python_par_obj );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_obj );

    return NULL;
}

static PyObject *dparse_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_value )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel _python_var_self( _python_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel _python_var_value( _python_str_plain_value, _python_par_value );

    // Actual function code.
    static PyFrameObject *frame_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields = NULL;

    if ( isFrameUnusable( frame_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields ) )
    {
        if ( frame_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields" );
#endif
            Py_DECREF( frame_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields );
        }

        frame_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields = MAKE_FRAME( _codeobj_2beed20e29920eef924d3b0111af8616, _module_django__db__models__fields );
    }

    FrameGuard frame_guard( frame_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1373 );
        {
            PyObjectTempKeeper0 isinstance7;
            if ( ( isinstance7.assign( _python_var_value.asObject() ), BUILTIN_ISINSTANCE_BOOL( isinstance7.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_six.asObject0(), _python_str_plain_text_type ) ).asObject() ) ) )
        {
            frame_guard.setLineNumber( 1374 );
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 call3;
                PyObjectTempKeeper1 call5;
                return ( call5.assign( LOOKUP_ATTRIBUTE( _mvar_django__db__models__fields_six.asObject0(), _python_str_plain_memoryview ) ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), PyObjectTemporary( ( call3.assign( _mvar_django__db__models__fields_b64decode.asObject0() ), CALL_FUNCTION_WITH_ARGS( call3.asObject0(), PyObjectTemporary( ( call1.assign( _mvar_django__db__models__fields_force_bytes.asObject0() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_var_value.asObject() ) ) ).asObject() ) ) ).asObject() ) );
            }
        }
        }
        frame_guard.setLineNumber( 1375 );
        return _python_var_value.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = _python_var_value.updateLocalsDict( _python_var_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields )
        {
           Py_DECREF( frame_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields );
           frame_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_value = NULL;
    Py_ssize_t args_usable_count;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "to_python() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && _python_str_plain_self == key )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && _python_str_plain_value == key )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_self, key ) )
            {
                if (unlikely( _python_par_self ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
                    goto error_exit;
                }

                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( _python_str_plain_value, key ) )
            {
                if (unlikely( _python_par_value ))
                {
                    PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
                    goto error_exit;
                }

                _python_par_value = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "to_python() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
        if ( 2 == 1 )
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found );
#elif PYTHON_VERSION < 330
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 positional argument (%zd given)", args_given + kw_only_found );
#else
            PyErr_Format( PyExc_TypeError, "to_python() takes 1 positional argument but %zd were given", args_given + kw_only_found );
#endif
        }
        else
        {
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_size );
#elif PYTHON_VERSION < 330
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#else
            if ( 2 == 2 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes %d positional arguments but %zd were given", 2, args_given + kw_only_found );
            }
            else
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes at most %d positional arguments (%zd given)", 2, args_given + kw_only_found );
            }
#endif
        }

        goto error_exit;
    }

    // Check if too little arguments were given.
    if (unlikely( args_given + kw_found - kw_only_found < 2 ))
    {
        if ( 2 == 1 )
        {
            PyErr_Format( PyExc_TypeError, "to_python() takes exactly 1 argument (%zd given)", args_given + kw_found - kw_only_found );
        }
        else
        {
#if PYTHON_VERSION < 270
            if ( kw_size > 0 )
            {
                PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d non-keyword arguments (%zd given)", 2, args_given + kw_found  );
            }
            else
#endif
            {
                if ( 2 == 2 )
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes exactly %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
                else
                {
                    PyErr_Format( PyExc_TypeError, "to_python() takes at least %d arguments (%zd given)", 2, args_given + kw_found - kw_only_found );
                }
            }
        }

        goto error_exit;
    }

    // Copy normal parameter values given as part of the args list to the respective variables:
    args_usable_count = args_given < 2 ? args_given : 2;

    if (likely( 0 < args_usable_count ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'self'" );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    if (likely( 1 < args_usable_count ))
    {
         if (unlikely( _python_par_value != NULL ))
         {
             PyErr_Format( PyExc_TypeError, "to_python() got multiple values for keyword argument 'value'" );
             goto error_exit;
         }

        _python_par_value = INCREASE_REFCOUNT( args[ 1 ] );
    }


    return impl_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields( self, _python_par_self, _python_par_value );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_value );

    return NULL;
}

static PyObject *dparse_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2)
    {
        return impl_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields( self, args, size, NULL );
        return result;
    }

}




static PyObject *MAKE_FUNCTION_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields,
        dparse_function_10_formfield_of_class_11_DateField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8338f5427f5fa91d39e68fc6a8c9d17d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_10_run_validators_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_run_validators,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c36e62c8a4715a334ab6baa7cbcd1bae,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11_validate_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_11_validate_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_11_validate_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_validate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_366972e7991b62c73d80e9e1a808b46e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_c7842114585765102c02ff2fa4cae70b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_12_clean_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_12_clean_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_12_clean_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_clean,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9f72fb5d32ca5d99c7833cdbd4538670,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_155c4d87aafaf3016bee980f1b6f848d
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_13_db_type_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_db_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b9a57fd99a3e710f4d8b1927990d5ca1,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_2a4ec72bcc3c20b09d21fb3a0c11db54
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_14_unique_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_14_unique_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_14_unique_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_unique,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_18213a2b951bd38efe2c18ce68cb3f99,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_15_set_attributes_from_name_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_set_attributes_from_name,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e2ef2352108bbbbac1b6fc983826bc93,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_16_contribute_to_class_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_contribute_to_class,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8b8df65f6b7ddee7b0f2239e400f57f0,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_17_get_attname_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_get_attname,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_071dc4aa51da4e389b4b9e59ecf6481e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_18_get_attname_column_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_get_attname_column,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3ddf752b0c83d0056a8cd63e1bf9f7a5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_19_get_cache_name_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_get_cache_name,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0916b0975b5f4b6104971cd35b79540b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_11_DateField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_11_DateField_of_module_django__db__models__fields,
        dparse_function_1___init___of_class_11_DateField_of_module_django__db__models__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_663a0a792ffb47bbbe1f4a76c7a9d0c4,
        INCREASE_REFCOUNT( _python_tuple_none_none_false_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields,
        dparse_function_1___init___of_class_13_DecimalField_of_module_django__db__models__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_fe59394164359233ab2603576d9c994f,
        INCREASE_REFCOUNT( _python_tuple_none_none_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields,
        dparse_function_1___init___of_class_14_EmailField_of_module_django__db__models__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2227abf9e19267679661625c72a2e1ca,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields,
        dparse_function_1___init___of_class_15_FilePathField_of_module_django__db__models__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_19d87f56c2902362c148ff644f135f12,
        INCREASE_REFCOUNT( _python_tuple_none_none_unicode_empty_none_false_true_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields,
        dparse_function_1___init___of_class_19_IPAddressField_of_module_django__db__models__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2efb317a1ef1c27ac6203fd5c25ed559,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields,
        dparse_function_1___init___of_class_20_GenericIPAddressField_of_module_django__db__models__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_18cece774e2f239b44d588e191bbd8c3,
        INCREASE_REFCOUNT( _python_tuple_none_none_unicode_plain_both_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields,
        dparse_function_1___init___of_class_21_NullBooleanField_of_module_django__db__models__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7f0526517b40a080ba17f7dafdc16e35,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields,
        dparse_function_1___init___of_class_24_SlugField_of_module_django__db__models__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_98d819358ab10e4e0193314a5616d058,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields,
        dparse_function_1___init___of_class_27_TimeField_of_module_django__db__models__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_940d1a96e348b2c80bea60c2cadd0138,
        INCREASE_REFCOUNT( _python_tuple_none_none_false_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_28_URLField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_28_URLField_of_module_django__db__models__fields,
        dparse_function_1___init___of_class_28_URLField_of_module_django__db__models__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_376f5dbe1c31fa7f5d9786857cab6f22,
        INCREASE_REFCOUNT( _python_tuple_none_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields,
        dparse_function_1___init___of_class_29_BinaryField_of_module_django__db__models__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c2108a7d52513b7d66c5d94e5984b8b6,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields,
        dparse_function_1___init___of_class_7_AutoField_of_module_django__db__models__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_08bf85a8c89006c3c9082ed58839b599,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields,
        dparse_function_1___init___of_class_8_BooleanField_of_module_django__db__models__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3db5bff02073470ba8d5d23d1f8ce9cb,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_9_CharField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_9_CharField_of_module_django__db__models__fields,
        dparse_function_1___init___of_class_9_CharField_of_module_django__db__models__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_5cb8717b6c3c90374ced836277e90f78,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1__description_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1__description_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_1__description_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain__description,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_59d48c8b25e3ed31d27124f726aa88b8,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields,
        dparse_function_1_formfield_of_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_64717b7aab6f58e31543a0c5ccbf3963,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_get_internal_type_of_class_12_DateTimeField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_get_internal_type_of_class_12_DateTimeField_of_module_django__db__models__fields,
        dparse_function_1_get_internal_type_of_class_12_DateTimeField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_df6a5af8e5f704c028505df9ae578e8d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_get_internal_type_of_class_18_BigIntegerField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_get_internal_type_of_class_18_BigIntegerField_of_module_django__db__models__fields,
        dparse_function_1_get_internal_type_of_class_18_BigIntegerField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b23135931ed0bf0ded731ac15db5ed25,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_get_internal_type_of_class_22_PositiveIntegerField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_get_internal_type_of_class_22_PositiveIntegerField_of_module_django__db__models__fields,
        dparse_function_1_get_internal_type_of_class_22_PositiveIntegerField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_02d8d156fa100e993faabbda62df9c7d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_get_internal_type_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_get_internal_type_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields,
        dparse_function_1_get_internal_type_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2bb7e66cfa7721afa4bcc6e818b1dc94,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_get_internal_type_of_class_25_SmallIntegerField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_get_internal_type_of_class_25_SmallIntegerField_of_module_django__db__models__fields,
        dparse_function_1_get_internal_type_of_class_25_SmallIntegerField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_43504b26aed7e3a1d37cc7262cdbc0be,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_get_internal_type_of_class_26_TextField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_get_internal_type_of_class_26_TextField_of_module_django__db__models__fields,
        dparse_function_1_get_internal_type_of_class_26_TextField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ee580ad11fc1235ce0a2f99208403d70,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields,
        dparse_function_1_get_prep_value_of_class_16_FloatField_of_module_django__db__models__fields,
        _python_str_plain_get_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b5e6599b01a4a937d2715691bf873090,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields,
        dparse_function_1_get_prep_value_of_class_17_IntegerField_of_module_django__db__models__fields,
        _python_str_plain_get_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f1247a5df2b327237edba6ff81a65490,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_20_get_internal_type_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ef1314a66b8f76273f1ced9f26c0980b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_21_pre_save_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_pre_save,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7b71ada9689dcc0100cc92ca8d30152d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_4fd1adb5bff6a324664e0c8810308955
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_22_get_prep_value_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_get_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b60fe1e66379f56cac0609d83a89e671,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_86d7feddb7412af2a63fc5721142f882
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_23_get_db_prep_value_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_get_db_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_930794451bfaf5c1398a0daa4a71fbcb,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_38dc399cb2e16318cffb8276ef7f9c68
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_24_get_db_prep_save_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_get_db_prep_save,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7e5ae86eea7ee594297653a2f14fa842,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_426958b4117f725d87e7b5023e83bbf5
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_25_get_prep_lookup_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_get_prep_lookup,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d46ad6c3b78bfc4bd0cf88ce89fce0de,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_9756ec574ade9f23278489cb17319714
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_26_get_db_prep_lookup_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_get_db_prep_lookup,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a0f5af4f885299e1b59aa48472767981,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_697dfe971407a86d5d6f71e4decdff36
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_27_has_default_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_has_default,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_725c916405658a128c559960e5ab621a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_79c47e2050050caadec969407d181a62
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_28_get_default_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_get_default,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_25de3c05785c80f486e6ebc2313fa72d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_1414fb06494f34372f2bc8b5d2a817ab
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_29_get_validator_unique_lookup_type_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_get_validator_unique_lookup_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_01153d6ebe8ccec987ee7ed26c91f080,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___init___of_class_6_Field_of_module_django__db__models__fields( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___init___of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_2___init___of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ba9c52a05d63eec3a2f4c2a8e1d798ad,
        defaults,
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields,
        dparse_function_2_formfield_of_class_14_EmailField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_076f8cc3df82699a57522a60d5ae3366,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields,
        dparse_function_2_formfield_of_class_15_FilePathField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_104385c781e56778a65c327315e6c313,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields,
        dparse_function_2_formfield_of_class_18_BigIntegerField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_fec7cd8df8b1b2e29dc7adbd89e00563,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields,
        dparse_function_2_formfield_of_class_22_PositiveIntegerField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_b10e1406a8fce6d7b2847ecf547f32b7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields,
        dparse_function_2_formfield_of_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2f35fa2ca3a20b69e9380c8d8a93af3a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields,
        dparse_function_2_formfield_of_class_28_URLField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ba1c9b7191afad3e8620f834bee93a7e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_11_DateField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_internal_type_of_class_11_DateField_of_module_django__db__models__fields,
        dparse_function_2_get_internal_type_of_class_11_DateField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c8f403b1126e840f33c061566e0051e2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_13_DecimalField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_internal_type_of_class_13_DecimalField_of_module_django__db__models__fields,
        dparse_function_2_get_internal_type_of_class_13_DecimalField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2d371878a914a28c614f5660624f66eb,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_16_FloatField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_internal_type_of_class_16_FloatField_of_module_django__db__models__fields,
        dparse_function_2_get_internal_type_of_class_16_FloatField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0fbf679aca3751ee6f031e035539e8b0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_19_IPAddressField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_internal_type_of_class_19_IPAddressField_of_module_django__db__models__fields,
        dparse_function_2_get_internal_type_of_class_19_IPAddressField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4aafac0c3ce7e327f16f46ba711a0738,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_internal_type_of_class_20_GenericIPAddressField_of_module_django__db__models__fields,
        dparse_function_2_get_internal_type_of_class_20_GenericIPAddressField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7f88a3f62c811f685b3dc237d0ce5142,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_21_NullBooleanField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_internal_type_of_class_21_NullBooleanField_of_module_django__db__models__fields,
        dparse_function_2_get_internal_type_of_class_21_NullBooleanField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e9131a3e66a6a7eef1e7d910c5bab806,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_24_SlugField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_internal_type_of_class_24_SlugField_of_module_django__db__models__fields,
        dparse_function_2_get_internal_type_of_class_24_SlugField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_29836601e0f518c058cded303e081f02,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_27_TimeField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_internal_type_of_class_27_TimeField_of_module_django__db__models__fields,
        dparse_function_2_get_internal_type_of_class_27_TimeField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8c62d2bb71b0d31d69022c1a9c703c57,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_29_BinaryField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_internal_type_of_class_29_BinaryField_of_module_django__db__models__fields,
        dparse_function_2_get_internal_type_of_class_29_BinaryField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0e10228255bac27d728a921f86ab6a94,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_7_AutoField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_internal_type_of_class_7_AutoField_of_module_django__db__models__fields,
        dparse_function_2_get_internal_type_of_class_7_AutoField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a1bb32a7b689cc1f911df988cb858e30,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_8_BooleanField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_internal_type_of_class_8_BooleanField_of_module_django__db__models__fields,
        dparse_function_2_get_internal_type_of_class_8_BooleanField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_cb6fe99bb997b0758a33f80656e2d015,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_internal_type_of_class_9_CharField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_internal_type_of_class_9_CharField_of_module_django__db__models__fields,
        dparse_function_2_get_internal_type_of_class_9_CharField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_7247480a2f22273f7429fa2e9ea3d008,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields,
        dparse_function_2_get_prep_lookup_of_class_17_IntegerField_of_module_django__db__models__fields,
        _python_str_plain_get_prep_lookup,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d66d929a41447155d37442cd260bc60e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields,
        dparse_function_2_get_prep_value_of_class_26_TextField_of_module_django__db__models__fields,
        _python_str_plain_get_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4b8c84b04c0bdfabcd84f01c213b3c27,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields,
        dparse_function_2_to_python_of_class_12_DateTimeField_of_module_django__db__models__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c873534edf2e16dce181fa09de0328b0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_30_get_choices_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_get_choices,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9758e8140eeb1ede2f7850303052a2ad,
        defaults,
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_1471969e598f5928f622b36867e263a0
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_31_get_choices_default_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_get_choices_default,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_53b0e468a05f1eed8c815eecb63dfe6b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_32_get_flatchoices_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_get_flatchoices,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6a57cd7d735a6bcec68fe56cbf88741d,
        defaults,
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_6dcc5f11b5f73f6c3ed42bb5762fb218
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_33__get_val_from_obj_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain__get_val_from_obj,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e82941893280971db64d271b6df2b442,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_34_value_to_string_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_value_to_string,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_adb7c1cf4fc3745f14ab53550c16e470,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_6871f526b1861fd382c8000e9c3e90b0
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_35_bind_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_35_bind_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_35_bind_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_bind,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_83f44c72c3e71535e00168e0698042d2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_36__get_choices_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain__get_choices,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d6ac0b6ef56b9aecedb046bfcea2af60,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_37__get_flatchoices_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain__get_flatchoices,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_13810ee9acc14efd86f97a7b540036c7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_45763b6dd938ee64c142f83f14dad0fa
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_38_save_form_data_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_save_form_data,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6e0559f04c75454fa32fabeb253dc67d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_39_formfield_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_38b16db4a820cddc76512deb299b0f87,
        INCREASE_REFCOUNT( _python_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_1fcbfaa0b261889c6878e7e7a4b6126e
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3___eq___of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3___eq___of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_3___eq___of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain___eq__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_14a242802acc692a9e0b825cb0d0cb2a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3__load_field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3__load_field_of_module_django__db__models__fields,
        dparse_function_3__load_field_of_module_django__db__models__fields,
        _python_str_plain__load_field,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_44d3465747641f3842d3b8d4dc868ec2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields,
        dparse_function_3_formfield_of_class_19_IPAddressField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_162ae7350d18cc8a4fb5d90658ac83ca,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields,
        dparse_function_3_formfield_of_class_24_SlugField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_816a3a61a233856c6f55ccf29fa1ea4b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields,
        dparse_function_3_formfield_of_class_26_TextField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ea659c0e8392fb31f0eb4ecca92a44d6,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields,
        dparse_function_3_get_default_of_class_29_BinaryField_of_module_django__db__models__fields,
        _python_str_plain_get_default,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_279b837b1a0380649fe2757d14078393,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_get_internal_type_of_class_15_FilePathField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_get_internal_type_of_class_15_FilePathField_of_module_django__db__models__fields,
        dparse_function_3_get_internal_type_of_class_15_FilePathField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a799a939a3ac51fe78313aa053e9cfc3,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_get_internal_type_of_class_17_IntegerField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_get_internal_type_of_class_17_IntegerField_of_module_django__db__models__fields,
        dparse_function_3_get_internal_type_of_class_17_IntegerField_of_module_django__db__models__fields,
        _python_str_plain_get_internal_type,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0f35a783c5bd561890565f3a6663bf72,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields,
        dparse_function_3_pre_save_of_class_12_DateTimeField_of_module_django__db__models__fields,
        _python_str_plain_pre_save,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_621abc31ae8c45a76f1b98a6f665ea2c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields,
        dparse_function_3_to_python_of_class_11_DateField_of_module_django__db__models__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_dd493bdd8f1f46fa3a35fc097bcfedb4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields,
        dparse_function_3_to_python_of_class_13_DecimalField_of_module_django__db__models__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8efcfc8e4d8160a2b84a96be3459c194,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields,
        dparse_function_3_to_python_of_class_16_FloatField_of_module_django__db__models__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_85d6f28116700171a1ce087485af9abd,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields,
        dparse_function_3_to_python_of_class_20_GenericIPAddressField_of_module_django__db__models__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0a5b4de1a97d7d385b43e0a8e4ca2e9b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields,
        dparse_function_3_to_python_of_class_21_NullBooleanField_of_module_django__db__models__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_88330b321afb74de400fbae42c21755b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields,
        dparse_function_3_to_python_of_class_27_TimeField_of_module_django__db__models__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1cb4e26e09ee2197cc9f27d9229afdec,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields,
        dparse_function_3_to_python_of_class_7_AutoField_of_module_django__db__models__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d69fd1de6a6f089493b1be1080bef1a7,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields,
        dparse_function_3_to_python_of_class_8_BooleanField_of_module_django__db__models__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ae2e8c2782b034b992a7fc8268e5a823,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields,
        dparse_function_3_to_python_of_class_9_CharField_of_module_django__db__models__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a74618cd92744126e7471e166d7b3c1f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_40_value_from_object_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_value_from_object,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_cdd29e09bfd475994ed352a199a70375,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_dd92bb1b7097e200ec40bd429f30853d
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_41___repr___of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_41___repr___of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_41___repr___of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain___repr__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ebe227ffb91ca73bb7d46fa25619974d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_5347e55976f335b6c1f2ccdaddf5d449
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4___lt___of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4___lt___of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_4___lt___of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain___lt__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_507436661722e8a47060916101d617e2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields,
        dparse_function_4__format_of_class_13_DecimalField_of_module_django__db__models__fields,
        _python_str_plain__format,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4bc7306c3a9c2885c52385fbf6d7932f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields,
        dparse_function_4_formfield_of_class_16_FloatField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6a53d92f6baacfbe02e1db10c3621279,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields,
        dparse_function_4_get_db_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields,
        _python_str_plain_get_db_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_defb5366634028d12981a7a9ccd30d50,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields,
        dparse_function_4_get_db_prep_value_of_class_29_BinaryField_of_module_django__db__models__fields,
        _python_str_plain_get_db_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8611386a643fffd887dc5b6315d735af,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields,
        dparse_function_4_get_prep_lookup_of_class_21_NullBooleanField_of_module_django__db__models__fields,
        _python_str_plain_get_prep_lookup,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9911675801bd8353e63ad4b420346ff5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields,
        dparse_function_4_get_prep_lookup_of_class_8_BooleanField_of_module_django__db__models__fields,
        _python_str_plain_get_prep_lookup,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_28fd7b8833e3064e6c5ce169490a6603,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields,
        dparse_function_4_get_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields,
        _python_str_plain_get_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_9c22672c23f8b64c07ad96e3749d2fa4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields,
        dparse_function_4_get_prep_value_of_class_9_CharField_of_module_django__db__models__fields,
        _python_str_plain_get_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f1c767cbcb9670a573620610a04809b9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields,
        dparse_function_4_pre_save_of_class_11_DateField_of_module_django__db__models__fields,
        _python_str_plain_pre_save,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4d53d41ba3a028eed0ac0d9f71c95b96,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields,
        dparse_function_4_pre_save_of_class_27_TimeField_of_module_django__db__models__fields,
        _python_str_plain_pre_save,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a35ed4cef516dbd8e59bc0e083bc922c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields,
        dparse_function_4_to_python_of_class_17_IntegerField_of_module_django__db__models__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_65dc60fb16a410018ea2b7c2159cee56,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_validate_of_class_7_AutoField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_validate_of_class_7_AutoField_of_module_django__db__models__fields,
        dparse_function_4_validate_of_class_7_AutoField_of_module_django__db__models__fields,
        _python_str_plain_validate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_64a40a16245f067d5379d952050ea54d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5___hash___of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5___hash___of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_5___hash___of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain___hash__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_cbaab4d8ee505fb580b906b8dd3dbd0b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5__empty_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5__empty_of_module_django__db__models__fields,
        dparse_function_5__empty_of_module_django__db__models__fields,
        _python_str_plain__empty,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_ccd085ba95281099cfcc09010412360b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields,
        dparse_function_5_contribute_to_class_of_class_11_DateField_of_module_django__db__models__fields,
        _python_str_plain_contribute_to_class,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_a9d1bbffe5ae5816766eb20d23f68d7f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields,
        dparse_function_5_format_number_of_class_13_DecimalField_of_module_django__db__models__fields,
        _python_str_plain_format_number,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_970ea58fa4b7b5733ed81f80fc6e17b9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_654f6183c563972f11dbd64cfaf85b88
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields,
        dparse_function_5_formfield_of_class_17_IntegerField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4304a4865af778ce34e23d5fc52eaeab,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields,
        dparse_function_5_formfield_of_class_9_CharField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_abc2a6cdd817a8bc5fa5263c49583601,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields,
        dparse_function_5_get_db_prep_value_of_class_12_DateTimeField_of_module_django__db__models__fields,
        _python_str_plain_get_db_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e438766274e5fb8f7ad34145d7b61535,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields,
        dparse_function_5_get_db_prep_value_of_class_7_AutoField_of_module_django__db__models__fields,
        _python_str_plain_get_db_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_0b130f3d80fda93a2063fae18b78d329,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields,
        dparse_function_5_get_prep_value_of_class_20_GenericIPAddressField_of_module_django__db__models__fields,
        _python_str_plain_get_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_712d5fcedd36f4cc7b9eed999e9fe1a9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields,
        dparse_function_5_get_prep_value_of_class_21_NullBooleanField_of_module_django__db__models__fields,
        _python_str_plain_get_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_fa308797c005fd5dd2e6c771b121ae0e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields,
        dparse_function_5_get_prep_value_of_class_27_TimeField_of_module_django__db__models__fields,
        _python_str_plain_get_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_1729637833f2462b26ee52952950914f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields,
        dparse_function_5_get_prep_value_of_class_8_BooleanField_of_module_django__db__models__fields,
        _python_str_plain_get_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_43acd58e7afae6d29b416fa38bb7e516,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields,
        dparse_function_5_value_to_string_of_class_29_BinaryField_of_module_django__db__models__fields,
        _python_str_plain_value_to_string,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_618c4fd50d0fa89ac6344888793fc5d3,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_f34aebb11fa57a7ba38d9948c20c2449
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_6___deepcopy___of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain___deepcopy__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_09c40de3a7645278244768cbad3efd42,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields,
        dparse_function_6_formfield_of_class_20_GenericIPAddressField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_02e59b83b9fe98bd535f9e64716d486e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields,
        dparse_function_6_formfield_of_class_21_NullBooleanField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f921c74c01c845a7a1203a09acfc3212,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields,
        dparse_function_6_formfield_of_class_8_BooleanField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d79bdddd0cad65a0cbccfe0e304aa044,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields,
        dparse_function_6_get_db_prep_save_of_class_13_DecimalField_of_module_django__db__models__fields,
        _python_str_plain_get_db_prep_save,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_71de33e86552c34d2250d06e496a08fc,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields,
        dparse_function_6_get_db_prep_value_of_class_27_TimeField_of_module_django__db__models__fields,
        _python_str_plain_get_db_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_e439f58810bced36e70b464bd2a73f82,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields,
        dparse_function_6_get_prep_lookup_of_class_11_DateField_of_module_django__db__models__fields,
        _python_str_plain_get_prep_lookup,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_473c8734fd03af8a60998a7c6041a92c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields,
        dparse_function_6_get_prep_value_of_class_7_AutoField_of_module_django__db__models__fields,
        _python_str_plain_get_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_fcc83b20dd47c0ca185eaa15f55f6922,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields,
        dparse_function_6_to_python_of_class_29_BinaryField_of_module_django__db__models__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2beed20e29920eef924d3b0111af8616,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields,
        dparse_function_6_value_to_string_of_class_12_DateTimeField_of_module_django__db__models__fields,
        _python_str_plain_value_to_string,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_2f86972d58482040d98bff3682c98874,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7___copy___of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7___copy___of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_7___copy___of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain___copy__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_61625916b8eaff25c36c5d158c088230,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields,
        dparse_function_7_contribute_to_class_of_class_7_AutoField_of_module_django__db__models__fields,
        _python_str_plain_contribute_to_class,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_3edf09880368280c8c1991c7e0a2eee8,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields,
        dparse_function_7_formfield_of_class_12_DateTimeField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_c02379ae79f39ebf76163850fc0d7a97,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields,
        dparse_function_7_get_prep_value_of_class_11_DateField_of_module_django__db__models__fields,
        _python_str_plain_get_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_de9ebdd8036fd61baeba87dce1e2e7db,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields,
        dparse_function_7_get_prep_value_of_class_13_DecimalField_of_module_django__db__models__fields,
        _python_str_plain_get_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_68e0dac763f2f862dd62ae27429e1a3d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields,
        dparse_function_7_value_to_string_of_class_27_TimeField_of_module_django__db__models__fields,
        _python_str_plain_value_to_string,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_4079460cc504446fa278c8c2c9e29f4e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_8___reduce___of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain___reduce__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_f1c3554fae26df384399f6b57e110ec0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_6f6c07374f05e58ba8eb5957888e749b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields,
        dparse_function_8_formfield_of_class_13_DecimalField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8c0940fce80a830ce87f1e4140ece81f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields,
        dparse_function_8_formfield_of_class_27_TimeField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_fecb79b667c5bc122836047ba0c902a6,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_formfield_of_class_7_AutoField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_formfield_of_class_7_AutoField_of_module_django__db__models__fields,
        dparse_function_8_formfield_of_class_7_AutoField_of_module_django__db__models__fields,
        _python_str_plain_formfield,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_6d5e3173bbacc1ab0aa936aca11f48a2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields,
        dparse_function_8_get_db_prep_value_of_class_11_DateField_of_module_django__db__models__fields,
        _python_str_plain_get_db_prep_value,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_d80e0eee12127286e372ec509251c6cf,
        INCREASE_REFCOUNT( _python_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields,
        dparse_function_9_to_python_of_class_6_Field_of_module_django__db__models__fields,
        _python_str_plain_to_python,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_8fdf3942ad5a72482ec373155c0c648b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        _python_unicode_digest_b7a0558226837071e3ed6bdb4da91845
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields,
        dparse_function_9_value_to_string_of_class_11_DateField_of_module_django__db__models__fields,
        _python_str_plain_value_to_string,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        _codeobj_955be522ee30b9b4f9b49cb9fdcb1e36,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        _module_django__db__models__fields,
        Py_None
    );

    return result;
}


#if PYTHON_VERSION >= 300
static struct PyModuleDef _moduledef =
{
    PyModuleDef_HEAD_INIT,
    "django.db.models.fields",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#define _MODULE_UNFREEZER 0

#if _MODULE_UNFREEZER
// For embedded modules, to be unpacked. Used by main program/package only
extern void registerMetaPathBasedUnfreezer( struct _inittab *_frozen_modules );

// Our own inittab for lookup of "frozen" modules, i.e. the ones included in this binary.
static struct _inittab _frozen_modules[] =
{

    { NULL, NULL }
};

// For loader attribute.
#if PYTHON_VERSION >= 330
extern PyObject *loader_frozen_modules;
#endif

#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( django__db__models__fields )
{

#if defined( _NUITKA_EXE ) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Packages can be imported recursively in deep executables.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( _module_django__db__models__fields );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    _initConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );

    patchInspectModule();

    patchBuiltinModule();
#endif

#if _MODULE_UNFREEZER
    registerMetaPathBasedUnfreezer( _frozen_modules );
#endif

    // puts( "in initdjango__db__models__fields" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    _module_django__db__models__fields = Py_InitModule4(
        "django.db.models.fields",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    _module_django__db__models__fields = PyModule_Create( &_moduledef );
#endif

    _moduledict_django__db__models__fields = (PyDictObject *)((PyModuleObject *)_module_django__db__models__fields)->md_dict;

    assertObject( _module_django__db__models__fields );

#ifndef _NUITKA_MODULE
// Seems to work for Python2.7 out of the box, but for Python3.2, the module
// doesn't automatically enter "sys.modules" with the object that it should, so
// do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), _python_str_digest_a15da66f68fa45171bbcd4f7a464bcd8, _module_django__db__models__fields );

        assert( r != -1 );
    }
#endif
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( _module_django__db__models__fields );

    if ( PyDict_GetItem( module_dict, _python_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = ( PyObject *)module_builtin;

#ifdef _NUITKA_EXE
        if ( _module_django__db__models__fields != _module___main__ )
        {
#endif
            value = PyModule_GetDict( value );
#ifdef _NUITKA_EXE
        }
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, _python_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
#if _MODULE_UNFREEZER
    PyDict_SetItem( module_dict, _python_str_plain___loader__, loader_frozen_modules );
#else
    PyDict_SetItem( module_dict, _python_str_plain___loader__, Py_None );
#endif
#endif

    // Module code
    UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain___doc__, Py_None );
    UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain___file__, _python_str_digest_c4e45b3908e19e10b1a837f60414adef );
    UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain___path__, LIST_COPY( _python_list_str_digest_f6ac154e3c2a347cedb0f8dd6e60ef76_list ) );
    PyFrameObject *frame_module_django__db__models__fields = MAKE_FRAME( _codeobj_b9d2ca3fcb31cefce6c95ad2aa5f1558, _module_django__db__models__fields );

    FrameGuard frame_guard( frame_module_django__db__models__fields );
    try
    {
        assert( Py_REFCNT( frame_module_django__db__models__fields ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_unicode_literals, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain___future__, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_unicode_literals_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_unicode_literals ) );
        frame_guard.setLineNumber( 3 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_copy, IMPORT_MODULE( _python_str_plain_copy, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, Py_None, _python_int_neg_1 ) );
        frame_guard.setLineNumber( 4 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_datetime, IMPORT_MODULE( _python_str_plain_datetime, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, Py_None, _python_int_neg_1 ) );
        frame_guard.setLineNumber( 5 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_decimal, IMPORT_MODULE( _python_str_plain_decimal, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, Py_None, _python_int_neg_1 ) );
        frame_guard.setLineNumber( 6 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_math, IMPORT_MODULE( _python_str_plain_math, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, Py_None, _python_int_neg_1 ) );
        frame_guard.setLineNumber( 7 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_warnings, IMPORT_MODULE( _python_str_plain_warnings, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, Py_None, _python_int_neg_1 ) );
        frame_guard.setLineNumber( 8 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_b64decode, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain_base64, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_b64decode_str_plain_b64encode_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_b64decode ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_b64encode, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain_base64, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_b64decode_str_plain_b64encode_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_b64encode ) );
        frame_guard.setLineNumber( 9 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_tee, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain_itertools, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_tee_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_tee ) );
        frame_guard.setLineNumber( 11 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_connection, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_391c2f4b507ae374cc9606a76384636e, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_connection_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_connection ) );
        frame_guard.setLineNumber( 12 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_get_model, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_d3499135d88f0bcb0b5db570911dd639, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_get_model_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_get_model ) );
        frame_guard.setLineNumber( 13 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_QueryWrapper, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_f82462a610d5c70ca3e4df549972e4d2, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_QueryWrapper_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_QueryWrapper ) );
        frame_guard.setLineNumber( 14 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_settings, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_262bd828f67160809670905d543ae3a0, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_settings_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_settings ) );
        frame_guard.setLineNumber( 15 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_forms, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_plain_django, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_forms_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_forms ) );
        frame_guard.setLineNumber( 16 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_exceptions, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_7fde38a6b8ad78c8ebb1bdff593c9e48, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_exceptions_str_plain_validators_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_exceptions ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_validators, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_7fde38a6b8ad78c8ebb1bdff593c9e48, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_exceptions_str_plain_validators_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_validators ) );
        frame_guard.setLineNumber( 17 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_DictWrapper, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_36fff8b06be9a51fbe6af4a1029911c0, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_DictWrapper_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_DictWrapper ) );
        frame_guard.setLineNumber( 18 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_parse_date, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_60d5d3fc4a262f72f77f8cb7b0382bbe, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_5f2d10a1e271daff0b835f266dc05625_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_parse_date ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_parse_datetime, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_60d5d3fc4a262f72f77f8cb7b0382bbe, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_5f2d10a1e271daff0b835f266dc05625_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_parse_datetime ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_parse_time, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_60d5d3fc4a262f72f77f8cb7b0382bbe, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_5f2d10a1e271daff0b835f266dc05625_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_parse_time ) );
        frame_guard.setLineNumber( 19 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_curry, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_17c58b9ed63e22a2fe75ba31286ba1f7, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_curry_str_plain_total_ordering_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_curry ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_total_ordering, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_17c58b9ed63e22a2fe75ba31286ba1f7, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_curry_str_plain_total_ordering_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_total_ordering ) );
        frame_guard.setLineNumber( 20 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_is_iterator, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_0599d93f624d0369bf099e5d99880ff0, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_is_iterator_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_is_iterator ) );
        frame_guard.setLineNumber( 21 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_capfirst, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_1863593e728059f3c0ba0d01334514dd, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_capfirst_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_capfirst ) );
        frame_guard.setLineNumber( 22 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_timezone, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_11a3eb3229bb1ce81f02aa3fc01149d5, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_timezone_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_timezone ) );
        frame_guard.setLineNumber( 23 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain__, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_695d25035a0d5e79b21b6e2fa3e00631, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_ugettext_lazy_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_ugettext_lazy ) );
        frame_guard.setLineNumber( 24 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_smart_text, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_5c6adb5fc6275b5d2a085f73ed00809a, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_47ec7598659e9c4399a3c1d60bccae54_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_smart_text ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_force_text, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_5c6adb5fc6275b5d2a085f73ed00809a, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_47ec7598659e9c4399a3c1d60bccae54_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_force_text ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_force_bytes, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_5c6adb5fc6275b5d2a085f73ed00809a, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_47ec7598659e9c4399a3c1d60bccae54_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_force_bytes ) );
        frame_guard.setLineNumber( 25 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_clean_ipv6_address, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_90cf4892b45b061f358c9921c88e39d3, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_clean_ipv6_address_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_clean_ipv6_address ) );
        frame_guard.setLineNumber( 26 );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_six, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( _python_str_digest_11a3eb3229bb1ce81f02aa3fc01149d5, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, ((PyModuleObject *)_module_django__db__models__fields)->md_dict, _python_list_str_plain_six_list, _python_int_neg_1 ) ).asObject(), _python_str_plain_six ) );
        {
            frame_guard.setLineNumber( 28 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_1_Empty_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 call3;
                _tmp_python_tmp_class = ( call1.assign( _python_tmp_metaclass.asObject() ), call3.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call1.asObject0(), _python_str_plain_Empty, call3.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_Empty, _python_tmp_class.asObject() );
        }
        {
            PyObject *_python_tmp_bases = _python_tuple_empty;
            frame_guard.setLineNumber( 31 );
            PyObjectTemporary _python_tmp_class_dict( impl_class_2_NOT_PROVIDED_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases, ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call5;
                PyObjectTempKeeper0 call7;
                _tmp_python_tmp_class = ( call5.assign( _python_tmp_metaclass.asObject() ), call7.assign( _python_tmp_bases ), CALL_FUNCTION_WITH_ARGS( call5.asObject0(), _python_str_plain_NOT_PROVIDED, call7.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_NOT_PROVIDED, _python_tmp_class.asObject() );
        }
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_BLANK_CHOICE_DASH, LIST_COPY( _python_list_tuple_df086d3836ea8bfa6bfa0e2b28491742_tuple_list ) );
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain__load_field, MAKE_FUNCTION_function_3__load_field_of_module_django__db__models__fields(  ) );
        {
            frame_guard.setLineNumber( 41 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( PyExc_Exception ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_4_FieldDoesNotExist_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call11;
                PyObjectTempKeeper0 call9;
                _tmp_python_tmp_class = ( call9.assign( _python_tmp_metaclass.asObject() ), call11.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call9.asObject0(), _python_str_plain_FieldDoesNotExist, call11.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_FieldDoesNotExist, _python_tmp_class.asObject() );
        }
        UPDATE_STRING_DICT1( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain__empty, MAKE_FUNCTION_function_5__empty_of_module_django__db__models__fields(  ) );
        {
            frame_guard.setLineNumber( 64 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( LOOKUP_BUILTIN( _python_str_plain_object ) ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_6_Field_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call13;
                PyObjectTempKeeper0 call15;
                _tmp_python_tmp_class = ( call13.assign( _python_tmp_metaclass.asObject() ), call15.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call13.asObject0(), _python_str_plain_Field, call15.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            {
                PyObjectTempKeeper0 call17;
                _python_tmp_class.assign1( ( call17.assign( _mvar_django__db__models__fields_total_ordering.asObject0() ), CALL_FUNCTION_WITH_ARGS( call17.asObject0(), _python_tmp_class.asObject() ) ) );
            }
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_Field, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 569 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_7_AutoField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call19;
                PyObjectTempKeeper0 call21;
                _tmp_python_tmp_class = ( call19.assign( _python_tmp_metaclass.asObject() ), call21.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call19.asObject0(), _python_str_plain_AutoField, call21.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_AutoField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 619 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_8_BooleanField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call23;
                PyObjectTempKeeper0 call25;
                _tmp_python_tmp_class = ( call23.assign( _python_tmp_metaclass.asObject() ), call25.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call23.asObject0(), _python_str_plain_BooleanField, call25.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_BooleanField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 672 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_9_CharField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call27;
                PyObjectTempKeeper0 call29;
                _tmp_python_tmp_class = ( call27.assign( _python_tmp_metaclass.asObject() ), call29.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call27.asObject0(), _python_str_plain_CharField, call29.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_CharField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 699 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_CharField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_10_CommaSeparatedIntegerField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call31;
                PyObjectTempKeeper0 call33;
                _tmp_python_tmp_class = ( call31.assign( _python_tmp_metaclass.asObject() ), call33.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call31.asObject0(), _python_str_plain_CommaSeparatedIntegerField, call33.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_CommaSeparatedIntegerField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 712 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_11_DateField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call35;
                PyObjectTempKeeper0 call37;
                _tmp_python_tmp_class = ( call35.assign( _python_tmp_metaclass.asObject() ), call37.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call35.asObject0(), _python_str_plain_DateField, call37.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_DateField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 800 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_DateField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_12_DateTimeField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call39;
                PyObjectTempKeeper0 call41;
                _tmp_python_tmp_class = ( call39.assign( _python_tmp_metaclass.asObject() ), call41.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call39.asObject0(), _python_str_plain_DateTimeField, call41.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_DateTimeField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 897 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_13_DecimalField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call43;
                PyObjectTempKeeper0 call45;
                _tmp_python_tmp_class = ( call43.assign( _python_tmp_metaclass.asObject() ), call45.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call43.asObject0(), _python_str_plain_DecimalField, call45.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_DecimalField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 957 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_CharField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_14_EmailField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call47;
                PyObjectTempKeeper0 call49;
                _tmp_python_tmp_class = ( call47.assign( _python_tmp_metaclass.asObject() ), call49.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call47.asObject0(), _python_str_plain_EmailField, call49.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_EmailField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 977 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_15_FilePathField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call51;
                PyObjectTempKeeper0 call53;
                _tmp_python_tmp_class = ( call51.assign( _python_tmp_metaclass.asObject() ), call53.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call51.asObject0(), _python_str_plain_FilePathField, call53.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_FilePathField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1002 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_16_FloatField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call55;
                PyObjectTempKeeper0 call57;
                _tmp_python_tmp_class = ( call55.assign( _python_tmp_metaclass.asObject() ), call57.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call55.asObject0(), _python_str_plain_FloatField, call57.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_FloatField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1031 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_17_IntegerField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call59;
                PyObjectTempKeeper0 call61;
                _tmp_python_tmp_class = ( call59.assign( _python_tmp_metaclass.asObject() ), call61.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call59.asObject0(), _python_str_plain_IntegerField, call61.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_IntegerField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1066 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_IntegerField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_18_BigIntegerField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call63;
                PyObjectTempKeeper0 call65;
                _tmp_python_tmp_class = ( call63.assign( _python_tmp_metaclass.asObject() ), call65.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call63.asObject0(), _python_str_plain_BigIntegerField, call65.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_BigIntegerField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1080 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_19_IPAddressField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call67;
                PyObjectTempKeeper0 call69;
                _tmp_python_tmp_class = ( call67.assign( _python_tmp_metaclass.asObject() ), call69.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call67.asObject0(), _python_str_plain_IPAddressField, call69.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_IPAddressField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1096 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_20_GenericIPAddressField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call71;
                PyObjectTempKeeper0 call73;
                _tmp_python_tmp_class = ( call71.assign( _python_tmp_metaclass.asObject() ), call73.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call71.asObject0(), _python_str_plain_GenericIPAddressField, call73.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_GenericIPAddressField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1138 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_21_NullBooleanField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call75;
                PyObjectTempKeeper0 call77;
                _tmp_python_tmp_class = ( call75.assign( _python_tmp_metaclass.asObject() ), call77.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call75.asObject0(), _python_str_plain_NullBooleanField, call77.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_NullBooleanField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1191 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_IntegerField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_22_PositiveIntegerField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call79;
                PyObjectTempKeeper0 call81;
                _tmp_python_tmp_class = ( call79.assign( _python_tmp_metaclass.asObject() ), call81.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call79.asObject0(), _python_str_plain_PositiveIntegerField, call81.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_PositiveIntegerField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1202 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_IntegerField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_23_PositiveSmallIntegerField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call83;
                PyObjectTempKeeper0 call85;
                _tmp_python_tmp_class = ( call83.assign( _python_tmp_metaclass.asObject() ), call85.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call83.asObject0(), _python_str_plain_PositiveSmallIntegerField, call85.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_PositiveSmallIntegerField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1213 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_CharField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_24_SlugField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call87;
                PyObjectTempKeeper0 call89;
                _tmp_python_tmp_class = ( call87.assign( _python_tmp_metaclass.asObject() ), call89.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call87.asObject0(), _python_str_plain_SlugField, call89.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_SlugField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1231 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_IntegerField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_25_SmallIntegerField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call91;
                PyObjectTempKeeper0 call93;
                _tmp_python_tmp_class = ( call91.assign( _python_tmp_metaclass.asObject() ), call93.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call91.asObject0(), _python_str_plain_SmallIntegerField, call93.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_SmallIntegerField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1237 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_26_TextField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call95;
                PyObjectTempKeeper0 call97;
                _tmp_python_tmp_class = ( call95.assign( _python_tmp_metaclass.asObject() ), call97.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call95.asObject0(), _python_str_plain_TextField, call97.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_TextField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1253 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_27_TimeField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call101;
                PyObjectTempKeeper0 call99;
                _tmp_python_tmp_class = ( call99.assign( _python_tmp_metaclass.asObject() ), call101.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call99.asObject0(), _python_str_plain_TimeField, call101.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_TimeField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1322 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_CharField.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_28_URLField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call103;
                PyObjectTempKeeper0 call105;
                _tmp_python_tmp_class = ( call103.assign( _python_tmp_metaclass.asObject() ), call105.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call103.asObject0(), _python_str_plain_URLField, call105.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_URLField, _python_tmp_class.asObject() );
        }
        {
            frame_guard.setLineNumber( 1339 );
            PyObjectTemporary _python_tmp_bases( MAKE_TUPLE1( _mvar_django__db__models__fields_Field.asObject0() ) );
            PyObjectTemporary _python_tmp_class_dict( impl_class_29_BinaryField_of_module_django__db__models__fields(  ) );
            PyObjectTemporary _python_tmp_metaclass( ( SEQUENCE_CONTAINS_BOOL( _python_str_plain___metaclass__, _python_tmp_class_dict.asObject() ) ? DICT_GET_ITEM( _python_tmp_class_dict.asObject(), _python_str_plain___metaclass__ ) : SELECT_METACLASS( _python_tmp_bases.asObject(), ( _mvar_django__db__models__fields___metaclass__.isInitialized( false ) ? _mvar_django__db__models__fields___metaclass__.asObject0() : NULL ) ) ) );
            PyObject *_tmp_python_tmp_class;
            {
                PyObjectTempKeeper0 call107;
                PyObjectTempKeeper0 call109;
                _tmp_python_tmp_class = ( call107.assign( _python_tmp_metaclass.asObject() ), call109.assign( _python_tmp_bases.asObject() ), CALL_FUNCTION_WITH_ARGS( call107.asObject0(), _python_str_plain_BinaryField, call109.asObject0(), _python_tmp_class_dict.asObject() ) );
            }
            PyObjectTemporary _python_tmp_class( _tmp_python_tmp_class );
            UPDATE_STRING_DICT0( _moduledict_django__db__models__fields, (Nuitka_StringObject *)_python_str_plain_BinaryField, _python_tmp_class.asObject() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

#if 0
    // TODO: Recognize the need for it
        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = INCREASE_REFCOUNT( ((PyModuleObject *)_module_django__db__models__fields)->md_dict );
#endif

    // Return the error.
        _exception.toPython();
        return MOD_RETURN_VALUE( NULL );
    }

   return MOD_RETURN_VALUE( _module_django__db__models__fields );
}
